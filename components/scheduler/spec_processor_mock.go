// Code generated by MockGen. DO NOT EDIT.
// Source: spec_processor.go
//
// Generated by this command:
//
//	mockgen -package scheduler -source spec_processor.go -destination spec_processor_mock.go
//

// Package scheduler is a generated GoMock package.
package scheduler

import (
	reflect "reflect"
	time "time"

	enums "go.temporal.io/api/enums/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockSpecProcessor is a mock of SpecProcessor interface.
type MockSpecProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockSpecProcessorMockRecorder
	isgomock struct{}
}

// MockSpecProcessorMockRecorder is the mock recorder for MockSpecProcessor.
type MockSpecProcessorMockRecorder struct {
	mock *MockSpecProcessor
}

// NewMockSpecProcessor creates a new mock instance.
func NewMockSpecProcessor(ctrl *gomock.Controller) *MockSpecProcessor {
	mock := &MockSpecProcessor{ctrl: ctrl}
	mock.recorder = &MockSpecProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpecProcessor) EXPECT() *MockSpecProcessorMockRecorder {
	return m.recorder
}

// ProcessTimeRange mocks base method.
func (m *MockSpecProcessor) ProcessTimeRange(scheduler Scheduler, start, end time.Time, overlapPolicy enums.ScheduleOverlapPolicy, backfillID string, manual bool, limit *int) (*ProcessedTimeRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTimeRange", scheduler, start, end, overlapPolicy, backfillID, manual, limit)
	ret0, _ := ret[0].(*ProcessedTimeRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessTimeRange indicates an expected call of ProcessTimeRange.
func (mr *MockSpecProcessorMockRecorder) ProcessTimeRange(scheduler, start, end, overlapPolicy, backfillID, manual, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTimeRange", reflect.TypeOf((*MockSpecProcessor)(nil).ProcessTimeRange), scheduler, start, end, overlapPolicy, backfillID, manual, limit)
}
