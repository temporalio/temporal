// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/server/api/persistence/v1/nexus.proto

package persistence

import (
	bytes "bytes"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	v1 "go.temporal.io/server/api/clock/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NexusServiceMetadataValue_NexusMetadataState int32

const (
	NEXUS_METADATA_STATE_UNSPECIFIED NexusServiceMetadataValue_NexusMetadataState = 0
	NEXUS_METADATA_STATE_PRESENT     NexusServiceMetadataValue_NexusMetadataState = 1
	NEXUS_METADATA_STATE_DELETED     NexusServiceMetadataValue_NexusMetadataState = 2
)

var NexusServiceMetadataValue_NexusMetadataState_name = map[int32]string{
	0: "NexusMetadataStateUnspecified",
	1: "NexusMetadataStatePresent",
	2: "NexusMetadataStateDeleted",
}

var NexusServiceMetadataValue_NexusMetadataState_value = map[string]int32{
	"NexusMetadataStateUnspecified": 0,
	"NexusMetadataStatePresent":     1,
	"NexusMetadataStateDeleted":     2,
}

func (NexusServiceMetadataValue_NexusMetadataState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fe4ff3d1cbbdc599, []int{0, 0}
}

type NexusServiceMetadataValue struct {
	// Arbitrary user data.
	// (-- api-linter: core::0146::any=disabled
	//     aip.dev/not-precedent: Meant to hold arbitrary user provided data. --)
	Data  *types.Any                                   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	State NexusServiceMetadataValue_NexusMetadataState `protobuf:"varint,2,opt,name=state,proto3,enum=temporal.server.api.persistence.v1.NexusServiceMetadataValue_NexusMetadataState" json:"state,omitempty"`
	// HLC timestamp representing when this metadata state field was last updated.
	// (-- api-linter: core::0142::time-field-type=disabled
	//     aip.dev/not-precedent: Using HLC instead of wall clock. --)
	StateUpdateTimestamp *v1.HybridLogicalClock `protobuf:"bytes,3,opt,name=state_update_timestamp,json=stateUpdateTimestamp,proto3" json:"state_update_timestamp,omitempty"`
}

func (m *NexusServiceMetadataValue) Reset()      { *m = NexusServiceMetadataValue{} }
func (*NexusServiceMetadataValue) ProtoMessage() {}
func (*NexusServiceMetadataValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe4ff3d1cbbdc599, []int{0}
}
func (m *NexusServiceMetadataValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NexusServiceMetadataValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NexusServiceMetadataValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NexusServiceMetadataValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NexusServiceMetadataValue.Merge(m, src)
}
func (m *NexusServiceMetadataValue) XXX_Size() int {
	return m.Size()
}
func (m *NexusServiceMetadataValue) XXX_DiscardUnknown() {
	xxx_messageInfo_NexusServiceMetadataValue.DiscardUnknown(m)
}

var xxx_messageInfo_NexusServiceMetadataValue proto.InternalMessageInfo

func (m *NexusServiceMetadataValue) GetData() *types.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *NexusServiceMetadataValue) GetState() NexusServiceMetadataValue_NexusMetadataState {
	if m != nil {
		return m.State
	}
	return NEXUS_METADATA_STATE_UNSPECIFIED
}

func (m *NexusServiceMetadataValue) GetStateUpdateTimestamp() *v1.HybridLogicalClock {
	if m != nil {
		return m.StateUpdateTimestamp
	}
	return nil
}

type NexusIncomingService struct {
	// The last recorded cluster-local Hybrid Logical Clock timestamp for _this_ service.
	// Updated whenever the service is directly updated due to a user action but not when applying replication events.
	// The clock is referenced when new timestamps are generated to ensure it produces monotonically increasing
	// timestamps.
	Clock *v1.HybridLogicalClock `protobuf:"bytes,1,opt,name=clock,proto3" json:"clock,omitempty"`
	// Name of this service.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// UUID of the namespace to dispatch service requests to.
	NamespaceId []byte `protobuf:"bytes,3,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// Task queue to dispatch service requests to.
	TaskQueue string `protobuf:"bytes,4,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// Arbitrary user provided data. For use in the authorizer.
	Metadata map[string]*NexusServiceMetadataValue `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *NexusIncomingService) Reset()      { *m = NexusIncomingService{} }
func (*NexusIncomingService) ProtoMessage() {}
func (*NexusIncomingService) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe4ff3d1cbbdc599, []int{1}
}
func (m *NexusIncomingService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NexusIncomingService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NexusIncomingService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NexusIncomingService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NexusIncomingService.Merge(m, src)
}
func (m *NexusIncomingService) XXX_Size() int {
	return m.Size()
}
func (m *NexusIncomingService) XXX_DiscardUnknown() {
	xxx_messageInfo_NexusIncomingService.DiscardUnknown(m)
}

var xxx_messageInfo_NexusIncomingService proto.InternalMessageInfo

func (m *NexusIncomingService) GetClock() *v1.HybridLogicalClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

func (m *NexusIncomingService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NexusIncomingService) GetNamespaceId() []byte {
	if m != nil {
		return m.NamespaceId
	}
	return nil
}

func (m *NexusIncomingService) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

func (m *NexusIncomingService) GetMetadata() map[string]*NexusServiceMetadataValue {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Container for a version and a NexusIncomingService.
type VersionedNexusIncomingService struct {
	Version int64                 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Service *NexusIncomingService `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (m *VersionedNexusIncomingService) Reset()      { *m = VersionedNexusIncomingService{} }
func (*VersionedNexusIncomingService) ProtoMessage() {}
func (*VersionedNexusIncomingService) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe4ff3d1cbbdc599, []int{2}
}
func (m *VersionedNexusIncomingService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionedNexusIncomingService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionedNexusIncomingService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VersionedNexusIncomingService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionedNexusIncomingService.Merge(m, src)
}
func (m *VersionedNexusIncomingService) XXX_Size() int {
	return m.Size()
}
func (m *VersionedNexusIncomingService) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionedNexusIncomingService.DiscardUnknown(m)
}

var xxx_messageInfo_VersionedNexusIncomingService proto.InternalMessageInfo

func (m *VersionedNexusIncomingService) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *VersionedNexusIncomingService) GetService() *NexusIncomingService {
	if m != nil {
		return m.Service
	}
	return nil
}

func init() {
	proto.RegisterEnum("temporal.server.api.persistence.v1.NexusServiceMetadataValue_NexusMetadataState", NexusServiceMetadataValue_NexusMetadataState_name, NexusServiceMetadataValue_NexusMetadataState_value)
	proto.RegisterType((*NexusServiceMetadataValue)(nil), "temporal.server.api.persistence.v1.NexusServiceMetadataValue")
	proto.RegisterType((*NexusIncomingService)(nil), "temporal.server.api.persistence.v1.NexusIncomingService")
	proto.RegisterMapType((map[string]*NexusServiceMetadataValue)(nil), "temporal.server.api.persistence.v1.NexusIncomingService.MetadataEntry")
	proto.RegisterType((*VersionedNexusIncomingService)(nil), "temporal.server.api.persistence.v1.VersionedNexusIncomingService")
}

func init() {
	proto.RegisterFile("temporal/server/api/persistence/v1/nexus.proto", fileDescriptor_fe4ff3d1cbbdc599)
}

var fileDescriptor_fe4ff3d1cbbdc599 = []byte{
	// 605 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x4d, 0x6f, 0xd3, 0x30,
	0x18, 0xc7, 0xe3, 0x75, 0x65, 0xcc, 0x1d, 0xa8, 0xb2, 0x26, 0x94, 0x4d, 0xcc, 0x2a, 0x15, 0x87,
	0x8a, 0x83, 0xc3, 0x0a, 0x87, 0x09, 0xc4, 0xa1, 0xac, 0x99, 0xa8, 0xb4, 0x55, 0xc3, 0xc9, 0x26,
	0xc4, 0x25, 0x72, 0x13, 0x2f, 0x0a, 0x6b, 0x5e, 0xc8, 0x9b, 0x28, 0x07, 0xc4, 0x17, 0x40, 0xe2,
	0x00, 0xdf, 0x81, 0x8f, 0xc2, 0x71, 0xc7, 0x1d, 0x59, 0x76, 0xe1, 0xb8, 0x8f, 0x80, 0xec, 0x34,
	0x63, 0x40, 0x27, 0xde, 0x4e, 0xf1, 0xf3, 0xf8, 0xef, 0xdf, 0xf3, 0x3c, 0x7f, 0xbb, 0x85, 0x24,
	0xe5, 0x7e, 0x14, 0xc6, 0x6c, 0xac, 0x25, 0x3c, 0xce, 0x79, 0xac, 0xb1, 0xc8, 0xd3, 0x22, 0x1e,
	0x27, 0x5e, 0x92, 0xf2, 0xc0, 0xe6, 0x5a, 0xbe, 0xae, 0x05, 0xfc, 0x55, 0x96, 0x90, 0x28, 0x0e,
	0xd3, 0x10, 0xb5, 0x2b, 0x3d, 0x29, 0xf5, 0x84, 0x45, 0x1e, 0xb9, 0xa0, 0x27, 0xf9, 0xfa, 0xea,
	0x9d, 0x59, 0x4c, 0x7b, 0x1c, 0xda, 0x87, 0x82, 0xe6, 0xf3, 0x24, 0x61, 0x2e, 0x2f, 0x79, 0xab,
	0x2b, 0x6e, 0x18, 0xba, 0x63, 0xae, 0xc9, 0x68, 0x94, 0x1d, 0x68, 0x2c, 0x98, 0x94, 0x5b, 0xed,
	0x8f, 0x35, 0xb8, 0x32, 0x14, 0xa5, 0x0d, 0x1e, 0xe7, 0x9e, 0xcd, 0x77, 0x78, 0xca, 0x1c, 0x96,
	0xb2, 0x7d, 0x36, 0xce, 0x38, 0xea, 0xc0, 0x79, 0x11, 0xa8, 0xa0, 0x05, 0x3a, 0x8d, 0xee, 0x32,
	0x29, 0x39, 0xa4, 0xe2, 0x90, 0x5e, 0x30, 0xa1, 0x52, 0x81, 0x0e, 0x60, 0x3d, 0x49, 0x59, 0xca,
	0xd5, 0xb9, 0x16, 0xe8, 0x5c, 0xef, 0xee, 0x92, 0xdf, 0x8f, 0x40, 0x2e, 0xad, 0x5b, 0xee, 0x54,
	0x29, 0x43, 0x70, 0x69, 0x89, 0x47, 0x07, 0xf0, 0x86, 0x5c, 0x58, 0x59, 0xe4, 0x88, 0x4f, 0xea,
	0xf9, 0x3c, 0x49, 0x99, 0x1f, 0xa9, 0x35, 0xd9, 0xe3, 0xdd, 0x99, 0x85, 0xa5, 0x2f, 0xa2, 0xe4,
	0x93, 0xc9, 0x28, 0xf6, 0x9c, 0xed, 0xd0, 0xf5, 0x6c, 0x36, 0xde, 0x14, 0x59, 0xba, 0x2c, 0x79,
	0x7b, 0x12, 0x67, 0x56, 0xb4, 0xf6, 0x1b, 0x88, 0x7e, 0x6d, 0x02, 0xdd, 0x86, 0xad, 0xa1, 0xfe,
	0x6c, 0xcf, 0xb0, 0x76, 0x74, 0xb3, 0xd7, 0xef, 0x99, 0x3d, 0xcb, 0x30, 0x7b, 0xa6, 0x6e, 0xed,
	0x0d, 0x8d, 0x5d, 0x7d, 0x73, 0xb0, 0x35, 0xd0, 0xfb, 0x4d, 0x05, 0xb5, 0xe0, 0xcd, 0x99, 0xaa,
	0x5d, 0xaa, 0x1b, 0xfa, 0xd0, 0x6c, 0x82, 0x4b, 0x15, 0x7d, 0x7d, 0x5b, 0x37, 0xf5, 0x7e, 0x73,
	0xae, 0xfd, 0xa1, 0x06, 0x97, 0x65, 0x03, 0x83, 0xc0, 0x0e, 0x7d, 0x2f, 0x70, 0xa7, 0x3e, 0xa1,
	0x2d, 0x58, 0x97, 0xd3, 0x4c, 0xef, 0xe4, 0xef, 0xe7, 0x2d, 0x8f, 0x23, 0x04, 0xe7, 0x03, 0xe6,
	0x97, 0xf7, 0xb5, 0x48, 0xe5, 0x1a, 0xdd, 0x82, 0x4b, 0xe2, 0x9b, 0x44, 0xcc, 0xe6, 0x96, 0xe7,
	0x48, 0x4b, 0x97, 0x68, 0xe3, 0x3c, 0x37, 0x70, 0xd0, 0x1a, 0x84, 0x29, 0x4b, 0x0e, 0xad, 0x97,
	0x19, 0xcf, 0xb8, 0x3a, 0x2f, 0x0f, 0x2f, 0x8a, 0xcc, 0x53, 0x91, 0x40, 0x23, 0x78, 0xd5, 0x9f,
	0x3a, 0xa6, 0xd6, 0x5b, 0xb5, 0x4e, 0xa3, 0xbb, 0xf5, 0xc7, 0x2f, 0xe1, 0xa7, 0x49, 0x49, 0x65,
	0xbd, 0x1e, 0xa4, 0xf1, 0x84, 0x9e, 0x73, 0x57, 0x5f, 0xc3, 0x6b, 0x3f, 0x6c, 0xa1, 0x26, 0xac,
	0x1d, 0xf2, 0x89, 0x34, 0x64, 0x91, 0x8a, 0x25, 0x32, 0x60, 0x3d, 0x17, 0x0f, 0x49, 0x4e, 0xd7,
	0xe8, 0x3e, 0xfa, 0xaf, 0xd7, 0x48, 0x4b, 0xd6, 0x83, 0xb9, 0x0d, 0xd0, 0x7e, 0x07, 0xe0, 0xda,
	0xbe, 0x38, 0x17, 0x06, 0xdc, 0x99, 0x79, 0x3f, 0x2a, 0x5c, 0xc8, 0x4b, 0x81, 0x6c, 0xa8, 0x46,
	0xab, 0x10, 0x51, 0xb8, 0x90, 0x94, 0xa2, 0x69, 0x5b, 0x1b, 0xff, 0x6a, 0x0d, 0xad, 0x40, 0x8f,
	0x5f, 0x1c, 0x9d, 0x60, 0xe5, 0xf8, 0x04, 0x2b, 0x67, 0x27, 0x18, 0xbc, 0x2d, 0x30, 0xf8, 0x54,
	0x60, 0xf0, 0xb9, 0xc0, 0xe0, 0xa8, 0xc0, 0xe0, 0x4b, 0x81, 0xc1, 0xd7, 0x02, 0x2b, 0x67, 0x05,
	0x06, 0xef, 0x4f, 0xb1, 0x72, 0x74, 0x8a, 0x95, 0xe3, 0x53, 0xac, 0x3c, 0xbf, 0xef, 0x86, 0xdf,
	0x4b, 0x7b, 0xe1, 0xe5, 0xff, 0x4a, 0x0f, 0x2f, 0x84, 0xa3, 0x2b, 0xf2, 0x67, 0x7f, 0xef, 0x5b,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x28, 0xc6, 0xdd, 0x01, 0xce, 0x04, 0x00, 0x00,
}

func (x NexusServiceMetadataValue_NexusMetadataState) String() string {
	s, ok := NexusServiceMetadataValue_NexusMetadataState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *NexusServiceMetadataValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NexusServiceMetadataValue)
	if !ok {
		that2, ok := that.(NexusServiceMetadataValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if !this.StateUpdateTimestamp.Equal(that1.StateUpdateTimestamp) {
		return false
	}
	return true
}
func (this *NexusIncomingService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NexusIncomingService)
	if !ok {
		that2, ok := that.(NexusIncomingService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !bytes.Equal(this.NamespaceId, that1.NamespaceId) {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	if len(this.Metadata) != len(that1.Metadata) {
		return false
	}
	for i := range this.Metadata {
		if !this.Metadata[i].Equal(that1.Metadata[i]) {
			return false
		}
	}
	return true
}
func (this *VersionedNexusIncomingService) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionedNexusIncomingService)
	if !ok {
		that2, ok := that.(VersionedNexusIncomingService)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !this.Service.Equal(that1.Service) {
		return false
	}
	return true
}
func (this *NexusServiceMetadataValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&persistence.NexusServiceMetadataValue{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.StateUpdateTimestamp != nil {
		s = append(s, "StateUpdateTimestamp: "+fmt.Sprintf("%#v", this.StateUpdateTimestamp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NexusIncomingService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&persistence.NexusIncomingService{")
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	keysForMetadata := make([]string, 0, len(this.Metadata))
	for k, _ := range this.Metadata {
		keysForMetadata = append(keysForMetadata, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetadata)
	mapStringForMetadata := "map[string]*NexusServiceMetadataValue{"
	for _, k := range keysForMetadata {
		mapStringForMetadata += fmt.Sprintf("%#v: %#v,", k, this.Metadata[k])
	}
	mapStringForMetadata += "}"
	if this.Metadata != nil {
		s = append(s, "Metadata: "+mapStringForMetadata+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VersionedNexusIncomingService) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&persistence.VersionedNexusIncomingService{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	if this.Service != nil {
		s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringNexus(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *NexusServiceMetadataValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NexusServiceMetadataValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NexusServiceMetadataValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StateUpdateTimestamp != nil {
		{
			size, err := m.StateUpdateTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNexus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.State != 0 {
		i = encodeVarintNexus(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNexus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NexusIncomingService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NexusIncomingService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NexusIncomingService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for k := range m.Metadata {
			v := m.Metadata[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintNexus(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintNexus(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintNexus(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintNexus(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintNexus(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNexus(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Clock != nil {
		{
			size, err := m.Clock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNexus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VersionedNexusIncomingService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionedNexusIncomingService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VersionedNexusIncomingService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Service != nil {
		{
			size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNexus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintNexus(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNexus(dAtA []byte, offset int, v uint64) int {
	offset -= sovNexus(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NexusServiceMetadataValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovNexus(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovNexus(uint64(m.State))
	}
	if m.StateUpdateTimestamp != nil {
		l = m.StateUpdateTimestamp.Size()
		n += 1 + l + sovNexus(uint64(l))
	}
	return n
}

func (m *NexusIncomingService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovNexus(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNexus(uint64(l))
	}
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovNexus(uint64(l))
	}
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovNexus(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovNexus(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovNexus(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovNexus(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *VersionedNexusIncomingService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovNexus(uint64(m.Version))
	}
	if m.Service != nil {
		l = m.Service.Size()
		n += 1 + l + sovNexus(uint64(l))
	}
	return n
}

func sovNexus(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNexus(x uint64) (n int) {
	return sovNexus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NexusServiceMetadataValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NexusServiceMetadataValue{`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "Any", "types.Any", 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`StateUpdateTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.StateUpdateTimestamp), "HybridLogicalClock", "v1.HybridLogicalClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NexusIncomingService) String() string {
	if this == nil {
		return "nil"
	}
	keysForMetadata := make([]string, 0, len(this.Metadata))
	for k, _ := range this.Metadata {
		keysForMetadata = append(keysForMetadata, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetadata)
	mapStringForMetadata := "map[string]*NexusServiceMetadataValue{"
	for _, k := range keysForMetadata {
		mapStringForMetadata += fmt.Sprintf("%v: %v,", k, this.Metadata[k])
	}
	mapStringForMetadata += "}"
	s := strings.Join([]string{`&NexusIncomingService{`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "HybridLogicalClock", "v1.HybridLogicalClock", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`Metadata:` + mapStringForMetadata + `,`,
		`}`,
	}, "")
	return s
}
func (this *VersionedNexusIncomingService) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VersionedNexusIncomingService{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Service:` + strings.Replace(this.Service.String(), "NexusIncomingService", "NexusIncomingService", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNexus(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NexusServiceMetadataValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNexus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NexusServiceMetadataValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NexusServiceMetadataValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNexus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNexus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNexus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &types.Any{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNexus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= NexusServiceMetadataValue_NexusMetadataState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateUpdateTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNexus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNexus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNexus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StateUpdateTimestamp == nil {
				m.StateUpdateTimestamp = &v1.HybridLogicalClock{}
			}
			if err := m.StateUpdateTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNexus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNexus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNexus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NexusIncomingService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNexus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NexusIncomingService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NexusIncomingService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNexus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNexus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNexus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &v1.HybridLogicalClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNexus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNexus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNexus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNexus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNexus
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNexus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = append(m.NamespaceId[:0], dAtA[iNdEx:postIndex]...)
			if m.NamespaceId == nil {
				m.NamespaceId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNexus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNexus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNexus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNexus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNexus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNexus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]*NexusServiceMetadataValue)
			}
			var mapkey string
			var mapvalue *NexusServiceMetadataValue
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNexus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNexus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNexus
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthNexus
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNexus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthNexus
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthNexus
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NexusServiceMetadataValue{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNexus(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthNexus
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNexus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNexus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNexus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionedNexusIncomingService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNexus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionedNexusIncomingService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionedNexusIncomingService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNexus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNexus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNexus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNexus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &NexusIncomingService{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNexus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNexus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNexus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNexus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNexus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNexus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNexus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNexus
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNexus
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNexus
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNexus        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNexus          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNexus = fmt.Errorf("proto: unexpected end of group")
)
