// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package persistence

import (
	"google.golang.org/protobuf/proto"
)

// Marshal an object of type UpdateAdmissionInfo to the protobuf v3 wire format
func (val *UpdateAdmissionInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type UpdateAdmissionInfo from the protobuf v3 wire format
func (val *UpdateAdmissionInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *UpdateAdmissionInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two UpdateAdmissionInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *UpdateAdmissionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *UpdateAdmissionInfo
	switch t := that.(type) {
	case *UpdateAdmissionInfo:
		that1 = t
	case UpdateAdmissionInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type UpdateAcceptanceInfo to the protobuf v3 wire format
func (val *UpdateAcceptanceInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type UpdateAcceptanceInfo from the protobuf v3 wire format
func (val *UpdateAcceptanceInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *UpdateAcceptanceInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two UpdateAcceptanceInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *UpdateAcceptanceInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *UpdateAcceptanceInfo
	switch t := that.(type) {
	case *UpdateAcceptanceInfo:
		that1 = t
	case UpdateAcceptanceInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type UpdateCompletionInfo to the protobuf v3 wire format
func (val *UpdateCompletionInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type UpdateCompletionInfo from the protobuf v3 wire format
func (val *UpdateCompletionInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *UpdateCompletionInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two UpdateCompletionInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *UpdateCompletionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *UpdateCompletionInfo
	switch t := that.(type) {
	case *UpdateCompletionInfo:
		that1 = t
	case UpdateCompletionInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type UpdateInfo to the protobuf v3 wire format
func (val *UpdateInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type UpdateInfo from the protobuf v3 wire format
func (val *UpdateInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *UpdateInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two UpdateInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *UpdateInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *UpdateInfo
	switch t := that.(type) {
	case *UpdateInfo:
		that1 = t
	case UpdateInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}
