// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package persistence

import (
	"google.golang.org/protobuf/proto"
)

// Marshal an object of type ChasmVisibilityData to the protobuf v3 wire format
func (val *ChasmVisibilityData) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type ChasmVisibilityData from the protobuf v3 wire format
func (val *ChasmVisibilityData) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *ChasmVisibilityData) Size() int {
	return proto.Size(val)
}

// Equal returns whether two ChasmVisibilityData values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *ChasmVisibilityData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *ChasmVisibilityData
	switch t := that.(type) {
	case *ChasmVisibilityData:
		that1 = t
	case ChasmVisibilityData:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type ChasmVisibilityTaskData to the protobuf v3 wire format
func (val *ChasmVisibilityTaskData) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type ChasmVisibilityTaskData from the protobuf v3 wire format
func (val *ChasmVisibilityTaskData) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *ChasmVisibilityTaskData) Size() int {
	return proto.Size(val)
}

// Equal returns whether two ChasmVisibilityTaskData values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *ChasmVisibilityTaskData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *ChasmVisibilityTaskData
	switch t := that.(type) {
	case *ChasmVisibilityTaskData:
		that1 = t
	case ChasmVisibilityTaskData:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}
