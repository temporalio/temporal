// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package persistence

import (
	"google.golang.org/protobuf/proto"
)

// Marshal an object of type NamespaceDetail to the protobuf v3 wire format
func (val *NamespaceDetail) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type NamespaceDetail from the protobuf v3 wire format
func (val *NamespaceDetail) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *NamespaceDetail) Size() int {
	return proto.Size(val)
}

// Equal returns whether two NamespaceDetail values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *NamespaceDetail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *NamespaceDetail
	switch t := that.(type) {
	case *NamespaceDetail:
		that1 = t
	case NamespaceDetail:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type NamespaceInfo to the protobuf v3 wire format
func (val *NamespaceInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type NamespaceInfo from the protobuf v3 wire format
func (val *NamespaceInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *NamespaceInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two NamespaceInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *NamespaceInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *NamespaceInfo
	switch t := that.(type) {
	case *NamespaceInfo:
		that1 = t
	case NamespaceInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type NamespaceConfig to the protobuf v3 wire format
func (val *NamespaceConfig) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type NamespaceConfig from the protobuf v3 wire format
func (val *NamespaceConfig) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *NamespaceConfig) Size() int {
	return proto.Size(val)
}

// Equal returns whether two NamespaceConfig values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *NamespaceConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *NamespaceConfig
	switch t := that.(type) {
	case *NamespaceConfig:
		that1 = t
	case NamespaceConfig:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type NamespaceReplicationConfig to the protobuf v3 wire format
func (val *NamespaceReplicationConfig) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type NamespaceReplicationConfig from the protobuf v3 wire format
func (val *NamespaceReplicationConfig) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *NamespaceReplicationConfig) Size() int {
	return proto.Size(val)
}

// Equal returns whether two NamespaceReplicationConfig values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *NamespaceReplicationConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *NamespaceReplicationConfig
	switch t := that.(type) {
	case *NamespaceReplicationConfig:
		that1 = t
	case NamespaceReplicationConfig:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type FailoverStatus to the protobuf v3 wire format
func (val *FailoverStatus) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type FailoverStatus from the protobuf v3 wire format
func (val *FailoverStatus) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *FailoverStatus) Size() int {
	return proto.Size(val)
}

// Equal returns whether two FailoverStatus values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *FailoverStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *FailoverStatus
	switch t := that.(type) {
	case *FailoverStatus:
		that1 = t
	case FailoverStatus:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}
