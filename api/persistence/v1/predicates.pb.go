// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/server/api/persistence/v1/predicates.proto

package persistence

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
	v1 "go.temporal.io/server/api/enums/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Predicate struct {
	PredicateType v1.PredicateType `protobuf:"varint,1,opt,name=predicate_type,json=predicateType,proto3,enum=temporal.server.api.enums.v1.PredicateType" json:"predicate_type,omitempty"`
	// Types that are valid to be assigned to Attributes:
	//	*Predicate_AllPredicateAttributes
	//	*Predicate_EmptyPredicateAttributes
	//	*Predicate_AndPredicateAttributes
	//	*Predicate_OrPredicateAttributes
	//	*Predicate_NotPredicateAttributes
	//	*Predicate_NamespaceIdPredicateAttributes
	//	*Predicate_TaskTypePredicateAttributes
	Attributes isPredicate_Attributes `protobuf_oneof:"attributes"`
}

func (m *Predicate) Reset()      { *m = Predicate{} }
func (*Predicate) ProtoMessage() {}
func (*Predicate) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dc904b92ba0975d, []int{0}
}
func (m *Predicate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Predicate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Predicate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Predicate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Predicate.Merge(m, src)
}
func (m *Predicate) XXX_Size() int {
	return m.Size()
}
func (m *Predicate) XXX_DiscardUnknown() {
	xxx_messageInfo_Predicate.DiscardUnknown(m)
}

var xxx_messageInfo_Predicate proto.InternalMessageInfo

type isPredicate_Attributes interface {
	isPredicate_Attributes()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Predicate_AllPredicateAttributes struct {
	AllPredicateAttributes *AllPredicateAttributes `protobuf:"bytes,2,opt,name=all_predicate_attributes,json=allPredicateAttributes,proto3,oneof" json:"all_predicate_attributes,omitempty"`
}
type Predicate_EmptyPredicateAttributes struct {
	EmptyPredicateAttributes *EmptyPredicateAttributes `protobuf:"bytes,3,opt,name=empty_predicate_attributes,json=emptyPredicateAttributes,proto3,oneof" json:"empty_predicate_attributes,omitempty"`
}
type Predicate_AndPredicateAttributes struct {
	AndPredicateAttributes *AndPredicateAttributes `protobuf:"bytes,4,opt,name=and_predicate_attributes,json=andPredicateAttributes,proto3,oneof" json:"and_predicate_attributes,omitempty"`
}
type Predicate_OrPredicateAttributes struct {
	OrPredicateAttributes *OrPredicateAttributes `protobuf:"bytes,5,opt,name=or_predicate_attributes,json=orPredicateAttributes,proto3,oneof" json:"or_predicate_attributes,omitempty"`
}
type Predicate_NotPredicateAttributes struct {
	NotPredicateAttributes *NotPredicateAttributes `protobuf:"bytes,6,opt,name=not_predicate_attributes,json=notPredicateAttributes,proto3,oneof" json:"not_predicate_attributes,omitempty"`
}
type Predicate_NamespaceIdPredicateAttributes struct {
	NamespaceIdPredicateAttributes *NamespaceIdPredicateAttributes `protobuf:"bytes,7,opt,name=namespace_id_predicate_attributes,json=namespaceIdPredicateAttributes,proto3,oneof" json:"namespace_id_predicate_attributes,omitempty"`
}
type Predicate_TaskTypePredicateAttributes struct {
	TaskTypePredicateAttributes *TaskTypePredicateAttributes `protobuf:"bytes,8,opt,name=task_type_predicate_attributes,json=taskTypePredicateAttributes,proto3,oneof" json:"task_type_predicate_attributes,omitempty"`
}

func (*Predicate_AllPredicateAttributes) isPredicate_Attributes()         {}
func (*Predicate_EmptyPredicateAttributes) isPredicate_Attributes()       {}
func (*Predicate_AndPredicateAttributes) isPredicate_Attributes()         {}
func (*Predicate_OrPredicateAttributes) isPredicate_Attributes()          {}
func (*Predicate_NotPredicateAttributes) isPredicate_Attributes()         {}
func (*Predicate_NamespaceIdPredicateAttributes) isPredicate_Attributes() {}
func (*Predicate_TaskTypePredicateAttributes) isPredicate_Attributes()    {}

func (m *Predicate) GetAttributes() isPredicate_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Predicate) GetPredicateType() v1.PredicateType {
	if m != nil {
		return m.PredicateType
	}
	return v1.PREDICATE_TYPE_UNSPECIFIED
}

func (m *Predicate) GetAllPredicateAttributes() *AllPredicateAttributes {
	if x, ok := m.GetAttributes().(*Predicate_AllPredicateAttributes); ok {
		return x.AllPredicateAttributes
	}
	return nil
}

func (m *Predicate) GetEmptyPredicateAttributes() *EmptyPredicateAttributes {
	if x, ok := m.GetAttributes().(*Predicate_EmptyPredicateAttributes); ok {
		return x.EmptyPredicateAttributes
	}
	return nil
}

func (m *Predicate) GetAndPredicateAttributes() *AndPredicateAttributes {
	if x, ok := m.GetAttributes().(*Predicate_AndPredicateAttributes); ok {
		return x.AndPredicateAttributes
	}
	return nil
}

func (m *Predicate) GetOrPredicateAttributes() *OrPredicateAttributes {
	if x, ok := m.GetAttributes().(*Predicate_OrPredicateAttributes); ok {
		return x.OrPredicateAttributes
	}
	return nil
}

func (m *Predicate) GetNotPredicateAttributes() *NotPredicateAttributes {
	if x, ok := m.GetAttributes().(*Predicate_NotPredicateAttributes); ok {
		return x.NotPredicateAttributes
	}
	return nil
}

func (m *Predicate) GetNamespaceIdPredicateAttributes() *NamespaceIdPredicateAttributes {
	if x, ok := m.GetAttributes().(*Predicate_NamespaceIdPredicateAttributes); ok {
		return x.NamespaceIdPredicateAttributes
	}
	return nil
}

func (m *Predicate) GetTaskTypePredicateAttributes() *TaskTypePredicateAttributes {
	if x, ok := m.GetAttributes().(*Predicate_TaskTypePredicateAttributes); ok {
		return x.TaskTypePredicateAttributes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Predicate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Predicate_AllPredicateAttributes)(nil),
		(*Predicate_EmptyPredicateAttributes)(nil),
		(*Predicate_AndPredicateAttributes)(nil),
		(*Predicate_OrPredicateAttributes)(nil),
		(*Predicate_NotPredicateAttributes)(nil),
		(*Predicate_NamespaceIdPredicateAttributes)(nil),
		(*Predicate_TaskTypePredicateAttributes)(nil),
	}
}

type AllPredicateAttributes struct {
}

func (m *AllPredicateAttributes) Reset()      { *m = AllPredicateAttributes{} }
func (*AllPredicateAttributes) ProtoMessage() {}
func (*AllPredicateAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dc904b92ba0975d, []int{1}
}
func (m *AllPredicateAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllPredicateAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllPredicateAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllPredicateAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllPredicateAttributes.Merge(m, src)
}
func (m *AllPredicateAttributes) XXX_Size() int {
	return m.Size()
}
func (m *AllPredicateAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_AllPredicateAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_AllPredicateAttributes proto.InternalMessageInfo

type EmptyPredicateAttributes struct {
}

func (m *EmptyPredicateAttributes) Reset()      { *m = EmptyPredicateAttributes{} }
func (*EmptyPredicateAttributes) ProtoMessage() {}
func (*EmptyPredicateAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dc904b92ba0975d, []int{2}
}
func (m *EmptyPredicateAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyPredicateAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyPredicateAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyPredicateAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyPredicateAttributes.Merge(m, src)
}
func (m *EmptyPredicateAttributes) XXX_Size() int {
	return m.Size()
}
func (m *EmptyPredicateAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyPredicateAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyPredicateAttributes proto.InternalMessageInfo

type AndPredicateAttributes struct {
	Predicates []*Predicate `protobuf:"bytes,1,rep,name=predicates,proto3" json:"predicates,omitempty"`
}

func (m *AndPredicateAttributes) Reset()      { *m = AndPredicateAttributes{} }
func (*AndPredicateAttributes) ProtoMessage() {}
func (*AndPredicateAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dc904b92ba0975d, []int{3}
}
func (m *AndPredicateAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AndPredicateAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AndPredicateAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AndPredicateAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AndPredicateAttributes.Merge(m, src)
}
func (m *AndPredicateAttributes) XXX_Size() int {
	return m.Size()
}
func (m *AndPredicateAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_AndPredicateAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_AndPredicateAttributes proto.InternalMessageInfo

func (m *AndPredicateAttributes) GetPredicates() []*Predicate {
	if m != nil {
		return m.Predicates
	}
	return nil
}

type OrPredicateAttributes struct {
	Predicates []*Predicate `protobuf:"bytes,1,rep,name=predicates,proto3" json:"predicates,omitempty"`
}

func (m *OrPredicateAttributes) Reset()      { *m = OrPredicateAttributes{} }
func (*OrPredicateAttributes) ProtoMessage() {}
func (*OrPredicateAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dc904b92ba0975d, []int{4}
}
func (m *OrPredicateAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrPredicateAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrPredicateAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrPredicateAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrPredicateAttributes.Merge(m, src)
}
func (m *OrPredicateAttributes) XXX_Size() int {
	return m.Size()
}
func (m *OrPredicateAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_OrPredicateAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_OrPredicateAttributes proto.InternalMessageInfo

func (m *OrPredicateAttributes) GetPredicates() []*Predicate {
	if m != nil {
		return m.Predicates
	}
	return nil
}

type NotPredicateAttributes struct {
	Predicate *Predicate `protobuf:"bytes,1,opt,name=predicate,proto3" json:"predicate,omitempty"`
}

func (m *NotPredicateAttributes) Reset()      { *m = NotPredicateAttributes{} }
func (*NotPredicateAttributes) ProtoMessage() {}
func (*NotPredicateAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dc904b92ba0975d, []int{5}
}
func (m *NotPredicateAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotPredicateAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotPredicateAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotPredicateAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotPredicateAttributes.Merge(m, src)
}
func (m *NotPredicateAttributes) XXX_Size() int {
	return m.Size()
}
func (m *NotPredicateAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_NotPredicateAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_NotPredicateAttributes proto.InternalMessageInfo

func (m *NotPredicateAttributes) GetPredicate() *Predicate {
	if m != nil {
		return m.Predicate
	}
	return nil
}

type NamespaceIdPredicateAttributes struct {
	NamespaceIds []string `protobuf:"bytes,1,rep,name=namespace_ids,json=namespaceIds,proto3" json:"namespace_ids,omitempty"`
}

func (m *NamespaceIdPredicateAttributes) Reset()      { *m = NamespaceIdPredicateAttributes{} }
func (*NamespaceIdPredicateAttributes) ProtoMessage() {}
func (*NamespaceIdPredicateAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dc904b92ba0975d, []int{6}
}
func (m *NamespaceIdPredicateAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceIdPredicateAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceIdPredicateAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceIdPredicateAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceIdPredicateAttributes.Merge(m, src)
}
func (m *NamespaceIdPredicateAttributes) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceIdPredicateAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceIdPredicateAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceIdPredicateAttributes proto.InternalMessageInfo

func (m *NamespaceIdPredicateAttributes) GetNamespaceIds() []string {
	if m != nil {
		return m.NamespaceIds
	}
	return nil
}

type TaskTypePredicateAttributes struct {
	TaskTypes []v1.TaskType `protobuf:"varint,1,rep,packed,name=task_types,json=taskTypes,proto3,enum=temporal.server.api.enums.v1.TaskType" json:"task_types,omitempty"`
}

func (m *TaskTypePredicateAttributes) Reset()      { *m = TaskTypePredicateAttributes{} }
func (*TaskTypePredicateAttributes) ProtoMessage() {}
func (*TaskTypePredicateAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_6dc904b92ba0975d, []int{7}
}
func (m *TaskTypePredicateAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskTypePredicateAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskTypePredicateAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskTypePredicateAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskTypePredicateAttributes.Merge(m, src)
}
func (m *TaskTypePredicateAttributes) XXX_Size() int {
	return m.Size()
}
func (m *TaskTypePredicateAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskTypePredicateAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_TaskTypePredicateAttributes proto.InternalMessageInfo

func (m *TaskTypePredicateAttributes) GetTaskTypes() []v1.TaskType {
	if m != nil {
		return m.TaskTypes
	}
	return nil
}

func init() {
	proto.RegisterType((*Predicate)(nil), "temporal.server.api.persistence.v1.Predicate")
	proto.RegisterType((*AllPredicateAttributes)(nil), "temporal.server.api.persistence.v1.AllPredicateAttributes")
	proto.RegisterType((*EmptyPredicateAttributes)(nil), "temporal.server.api.persistence.v1.EmptyPredicateAttributes")
	proto.RegisterType((*AndPredicateAttributes)(nil), "temporal.server.api.persistence.v1.AndPredicateAttributes")
	proto.RegisterType((*OrPredicateAttributes)(nil), "temporal.server.api.persistence.v1.OrPredicateAttributes")
	proto.RegisterType((*NotPredicateAttributes)(nil), "temporal.server.api.persistence.v1.NotPredicateAttributes")
	proto.RegisterType((*NamespaceIdPredicateAttributes)(nil), "temporal.server.api.persistence.v1.NamespaceIdPredicateAttributes")
	proto.RegisterType((*TaskTypePredicateAttributes)(nil), "temporal.server.api.persistence.v1.TaskTypePredicateAttributes")
}

func init() {
	proto.RegisterFile("temporal/server/api/persistence/v1/predicates.proto", fileDescriptor_6dc904b92ba0975d)
}

var fileDescriptor_6dc904b92ba0975d = []byte{
	// 551 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xcb, 0x6a, 0xdb, 0x4e,
	0x14, 0xc6, 0x35, 0xff, 0xfc, 0x9b, 0xd4, 0x27, 0x89, 0x17, 0x03, 0x71, 0x85, 0x03, 0x83, 0xab,
	0x42, 0x6b, 0x68, 0x3b, 0xc6, 0x4e, 0x37, 0xbd, 0x40, 0x89, 0xc1, 0xd0, 0x52, 0x7a, 0x41, 0x64,
	0xd5, 0x8d, 0x99, 0xd8, 0xd3, 0xa0, 0xc6, 0x96, 0x86, 0x99, 0x89, 0xc0, 0xd0, 0x45, 0x57, 0xdd,
	0xb6, 0x8f, 0xd1, 0x47, 0xe9, 0xd2, 0xcb, 0x2c, 0x6b, 0x79, 0xd3, 0x65, 0x1e, 0xa1, 0x58, 0x42,
	0x97, 0xc2, 0x48, 0x55, 0xa0, 0x4b, 0x71, 0xe6, 0x7c, 0xbf, 0xf3, 0x89, 0xef, 0xcc, 0xc0, 0x91,
	0xe6, 0x73, 0x11, 0x48, 0x36, 0xeb, 0x29, 0x2e, 0x43, 0x2e, 0x7b, 0x4c, 0x78, 0x3d, 0xc1, 0xa5,
	0xf2, 0x94, 0xe6, 0xfe, 0x84, 0xf7, 0xc2, 0x7e, 0x4f, 0x48, 0x3e, 0xf5, 0x26, 0x4c, 0x73, 0x45,
	0x85, 0x0c, 0x74, 0x80, 0x9d, 0xb4, 0x89, 0x26, 0x4d, 0x94, 0x09, 0x8f, 0x16, 0x9a, 0x68, 0xd8,
	0x6f, 0x3f, 0x30, 0x09, 0x73, 0xff, 0x62, 0xae, 0xfe, 0x90, 0x4c, 0x14, 0xdb, 0xf7, 0x2a, 0x4f,
	0x6b, 0xa6, 0xce, 0x93, 0x83, 0xce, 0x7a, 0x07, 0x1a, 0xef, 0xd2, 0x66, 0xec, 0x42, 0x33, 0x53,
	0x1a, 0xeb, 0x85, 0xe0, 0x36, 0xea, 0xa0, 0x6e, 0x73, 0x70, 0x9f, 0x9a, 0x26, 0x8c, 0xf5, 0x68,
	0xd8, 0xa7, 0x99, 0xc0, 0xc9, 0x42, 0x70, 0x77, 0x5f, 0x14, 0x3f, 0x71, 0x08, 0x36, 0x9b, 0xcd,
	0xc6, 0xb9, 0x2e, 0xd3, 0x5a, 0x7a, 0xa7, 0x17, 0x9a, 0x2b, 0xfb, 0xbf, 0x0e, 0xea, 0xee, 0x0e,
	0x9e, 0xd0, 0xbf, 0xfb, 0xa7, 0xc7, 0xb3, 0x59, 0x86, 0x39, 0xce, 0x14, 0x5e, 0x58, 0x6e, 0x8b,
	0x19, 0x2b, 0xf8, 0x13, 0xb4, 0xf9, 0x5c, 0xe8, 0x85, 0x99, 0xbc, 0x15, 0x93, 0x9f, 0xd5, 0x21,
	0x8f, 0x36, 0x2a, 0x66, 0xb6, 0xcd, 0x4b, 0x6a, 0xb1, 0x6b, 0x7f, 0x6a, 0x66, 0xff, 0x7f, 0x0d,
	0xd7, 0xfe, 0xb4, 0xcc, 0xb5, 0xb1, 0x82, 0x15, 0xdc, 0x0a, 0xa4, 0x19, 0x7b, 0x23, 0xc6, 0x3e,
	0xae, 0x83, 0x7d, 0x2b, 0xcd, 0xd4, 0x83, 0x40, 0x96, 0x98, 0xf5, 0x03, 0x6d, 0xa6, 0x6e, 0xd7,
	0x37, 0xfb, 0x26, 0xd0, 0x25, 0x66, 0x7d, 0x63, 0x05, 0x7f, 0x45, 0x70, 0xdb, 0x67, 0x73, 0xae,
	0x04, 0x9b, 0xf0, 0xb1, 0x57, 0xf2, 0xbb, 0x77, 0xe2, 0x09, 0x86, 0xb5, 0x26, 0x48, 0xc5, 0x5e,
	0x96, 0xfc, 0x76, 0xe2, 0x57, 0x9e, 0xc0, 0x5f, 0x10, 0x90, 0xcd, 0x76, 0xc5, 0xcb, 0x63, 0x1e,
	0xe7, 0x66, 0x3c, 0xce, 0xf3, 0x3a, 0xe3, 0x9c, 0x30, 0x75, 0xbe, 0xd9, 0x21, 0xf3, 0x2c, 0x87,
	0xba, 0xbc, 0x3c, 0xdc, 0x03, 0xc8, 0x99, 0x8e, 0x0d, 0x2d, 0xf3, 0xfe, 0x38, 0x6d, 0xb0, 0xcb,
	0xf2, 0xed, 0x9c, 0x41, 0xcb, 0x9c, 0x3f, 0xfc, 0x1a, 0x20, 0xbf, 0xc4, 0x6c, 0xd4, 0xd9, 0xea,
	0xee, 0x0e, 0x1e, 0xd6, 0x71, 0x94, 0x89, 0xb9, 0x05, 0x01, 0xe7, 0x03, 0x1c, 0x18, 0x13, 0xf7,
	0xaf, 0x39, 0x1c, 0x5a, 0xe6, 0x8c, 0xe1, 0x57, 0xd0, 0xc8, 0xce, 0xc5, 0x77, 0xde, 0xb5, 0x39,
	0x79, 0xbf, 0x33, 0x02, 0x52, 0x1d, 0x24, 0x7c, 0x07, 0xf6, 0x8b, 0xb9, 0x4d, 0xac, 0x35, 0xdc,
	0xbd, 0x42, 0xba, 0x94, 0x33, 0x85, 0xc3, 0x8a, 0x00, 0xe0, 0x11, 0x40, 0x96, 0xb4, 0x44, 0xa0,
	0x39, 0xb8, 0x5b, 0x7d, 0x4f, 0xa7, 0x72, 0x6e, 0x23, 0x8d, 0x8e, 0x1a, 0x7e, 0x5c, 0xae, 0x88,
	0x75, 0xb9, 0x22, 0xd6, 0xd5, 0x8a, 0xa0, 0xcf, 0x11, 0x41, 0xdf, 0x23, 0x82, 0x7e, 0x44, 0x04,
	0x2d, 0x23, 0x82, 0x7e, 0x46, 0x04, 0xfd, 0x8a, 0x88, 0x75, 0x15, 0x11, 0xf4, 0x6d, 0x4d, 0xac,
	0xe5, 0x9a, 0x58, 0x97, 0x6b, 0x62, 0xbd, 0x7f, 0x74, 0x16, 0xe4, 0x28, 0x2f, 0x28, 0x7f, 0xec,
	0x9e, 0x16, 0x3e, 0x4f, 0xb7, 0xe3, 0x37, 0xe7, 0xe8, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b,
	0x27, 0xa0, 0xdd, 0x25, 0x07, 0x00, 0x00,
}

func (this *Predicate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Predicate)
	if !ok {
		that2, ok := that.(Predicate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PredicateType != that1.PredicateType {
		return false
	}
	if that1.Attributes == nil {
		if this.Attributes != nil {
			return false
		}
	} else if this.Attributes == nil {
		return false
	} else if !this.Attributes.Equal(that1.Attributes) {
		return false
	}
	return true
}
func (this *Predicate_AllPredicateAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Predicate_AllPredicateAttributes)
	if !ok {
		that2, ok := that.(Predicate_AllPredicateAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllPredicateAttributes.Equal(that1.AllPredicateAttributes) {
		return false
	}
	return true
}
func (this *Predicate_EmptyPredicateAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Predicate_EmptyPredicateAttributes)
	if !ok {
		that2, ok := that.(Predicate_EmptyPredicateAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EmptyPredicateAttributes.Equal(that1.EmptyPredicateAttributes) {
		return false
	}
	return true
}
func (this *Predicate_AndPredicateAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Predicate_AndPredicateAttributes)
	if !ok {
		that2, ok := that.(Predicate_AndPredicateAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AndPredicateAttributes.Equal(that1.AndPredicateAttributes) {
		return false
	}
	return true
}
func (this *Predicate_OrPredicateAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Predicate_OrPredicateAttributes)
	if !ok {
		that2, ok := that.(Predicate_OrPredicateAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OrPredicateAttributes.Equal(that1.OrPredicateAttributes) {
		return false
	}
	return true
}
func (this *Predicate_NotPredicateAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Predicate_NotPredicateAttributes)
	if !ok {
		that2, ok := that.(Predicate_NotPredicateAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotPredicateAttributes.Equal(that1.NotPredicateAttributes) {
		return false
	}
	return true
}
func (this *Predicate_NamespaceIdPredicateAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Predicate_NamespaceIdPredicateAttributes)
	if !ok {
		that2, ok := that.(Predicate_NamespaceIdPredicateAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NamespaceIdPredicateAttributes.Equal(that1.NamespaceIdPredicateAttributes) {
		return false
	}
	return true
}
func (this *Predicate_TaskTypePredicateAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Predicate_TaskTypePredicateAttributes)
	if !ok {
		that2, ok := that.(Predicate_TaskTypePredicateAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TaskTypePredicateAttributes.Equal(that1.TaskTypePredicateAttributes) {
		return false
	}
	return true
}
func (this *AllPredicateAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllPredicateAttributes)
	if !ok {
		that2, ok := that.(AllPredicateAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *EmptyPredicateAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EmptyPredicateAttributes)
	if !ok {
		that2, ok := that.(EmptyPredicateAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *AndPredicateAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AndPredicateAttributes)
	if !ok {
		that2, ok := that.(AndPredicateAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Predicates) != len(that1.Predicates) {
		return false
	}
	for i := range this.Predicates {
		if !this.Predicates[i].Equal(that1.Predicates[i]) {
			return false
		}
	}
	return true
}
func (this *OrPredicateAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrPredicateAttributes)
	if !ok {
		that2, ok := that.(OrPredicateAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Predicates) != len(that1.Predicates) {
		return false
	}
	for i := range this.Predicates {
		if !this.Predicates[i].Equal(that1.Predicates[i]) {
			return false
		}
	}
	return true
}
func (this *NotPredicateAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotPredicateAttributes)
	if !ok {
		that2, ok := that.(NotPredicateAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Predicate.Equal(that1.Predicate) {
		return false
	}
	return true
}
func (this *NamespaceIdPredicateAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NamespaceIdPredicateAttributes)
	if !ok {
		that2, ok := that.(NamespaceIdPredicateAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.NamespaceIds) != len(that1.NamespaceIds) {
		return false
	}
	for i := range this.NamespaceIds {
		if this.NamespaceIds[i] != that1.NamespaceIds[i] {
			return false
		}
	}
	return true
}
func (this *TaskTypePredicateAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskTypePredicateAttributes)
	if !ok {
		that2, ok := that.(TaskTypePredicateAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TaskTypes) != len(that1.TaskTypes) {
		return false
	}
	for i := range this.TaskTypes {
		if this.TaskTypes[i] != that1.TaskTypes[i] {
			return false
		}
	}
	return true
}
func (this *Predicate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&persistence.Predicate{")
	s = append(s, "PredicateType: "+fmt.Sprintf("%#v", this.PredicateType)+",\n")
	if this.Attributes != nil {
		s = append(s, "Attributes: "+fmt.Sprintf("%#v", this.Attributes)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Predicate_AllPredicateAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&persistence.Predicate_AllPredicateAttributes{` +
		`AllPredicateAttributes:` + fmt.Sprintf("%#v", this.AllPredicateAttributes) + `}`}, ", ")
	return s
}
func (this *Predicate_EmptyPredicateAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&persistence.Predicate_EmptyPredicateAttributes{` +
		`EmptyPredicateAttributes:` + fmt.Sprintf("%#v", this.EmptyPredicateAttributes) + `}`}, ", ")
	return s
}
func (this *Predicate_AndPredicateAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&persistence.Predicate_AndPredicateAttributes{` +
		`AndPredicateAttributes:` + fmt.Sprintf("%#v", this.AndPredicateAttributes) + `}`}, ", ")
	return s
}
func (this *Predicate_OrPredicateAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&persistence.Predicate_OrPredicateAttributes{` +
		`OrPredicateAttributes:` + fmt.Sprintf("%#v", this.OrPredicateAttributes) + `}`}, ", ")
	return s
}
func (this *Predicate_NotPredicateAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&persistence.Predicate_NotPredicateAttributes{` +
		`NotPredicateAttributes:` + fmt.Sprintf("%#v", this.NotPredicateAttributes) + `}`}, ", ")
	return s
}
func (this *Predicate_NamespaceIdPredicateAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&persistence.Predicate_NamespaceIdPredicateAttributes{` +
		`NamespaceIdPredicateAttributes:` + fmt.Sprintf("%#v", this.NamespaceIdPredicateAttributes) + `}`}, ", ")
	return s
}
func (this *Predicate_TaskTypePredicateAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&persistence.Predicate_TaskTypePredicateAttributes{` +
		`TaskTypePredicateAttributes:` + fmt.Sprintf("%#v", this.TaskTypePredicateAttributes) + `}`}, ", ")
	return s
}
func (this *AllPredicateAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&persistence.AllPredicateAttributes{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EmptyPredicateAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&persistence.EmptyPredicateAttributes{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AndPredicateAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&persistence.AndPredicateAttributes{")
	if this.Predicates != nil {
		s = append(s, "Predicates: "+fmt.Sprintf("%#v", this.Predicates)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OrPredicateAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&persistence.OrPredicateAttributes{")
	if this.Predicates != nil {
		s = append(s, "Predicates: "+fmt.Sprintf("%#v", this.Predicates)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotPredicateAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&persistence.NotPredicateAttributes{")
	if this.Predicate != nil {
		s = append(s, "Predicate: "+fmt.Sprintf("%#v", this.Predicate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NamespaceIdPredicateAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&persistence.NamespaceIdPredicateAttributes{")
	s = append(s, "NamespaceIds: "+fmt.Sprintf("%#v", this.NamespaceIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskTypePredicateAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&persistence.TaskTypePredicateAttributes{")
	s = append(s, "TaskTypes: "+fmt.Sprintf("%#v", this.TaskTypes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPredicates(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Predicate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Predicate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Predicate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attributes != nil {
		{
			size := m.Attributes.Size()
			i -= size
			if _, err := m.Attributes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PredicateType != 0 {
		i = encodeVarintPredicates(dAtA, i, uint64(m.PredicateType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Predicate_AllPredicateAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Predicate_AllPredicateAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllPredicateAttributes != nil {
		{
			size, err := m.AllPredicateAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPredicates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Predicate_EmptyPredicateAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Predicate_EmptyPredicateAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EmptyPredicateAttributes != nil {
		{
			size, err := m.EmptyPredicateAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPredicates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Predicate_AndPredicateAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Predicate_AndPredicateAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AndPredicateAttributes != nil {
		{
			size, err := m.AndPredicateAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPredicates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Predicate_OrPredicateAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Predicate_OrPredicateAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OrPredicateAttributes != nil {
		{
			size, err := m.OrPredicateAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPredicates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Predicate_NotPredicateAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Predicate_NotPredicateAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotPredicateAttributes != nil {
		{
			size, err := m.NotPredicateAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPredicates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Predicate_NamespaceIdPredicateAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Predicate_NamespaceIdPredicateAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NamespaceIdPredicateAttributes != nil {
		{
			size, err := m.NamespaceIdPredicateAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPredicates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Predicate_TaskTypePredicateAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Predicate_TaskTypePredicateAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TaskTypePredicateAttributes != nil {
		{
			size, err := m.TaskTypePredicateAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPredicates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *AllPredicateAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllPredicateAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllPredicateAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EmptyPredicateAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyPredicateAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyPredicateAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AndPredicateAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AndPredicateAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AndPredicateAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Predicates) > 0 {
		for iNdEx := len(m.Predicates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Predicates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPredicates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OrPredicateAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrPredicateAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrPredicateAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Predicates) > 0 {
		for iNdEx := len(m.Predicates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Predicates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPredicates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NotPredicateAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotPredicateAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotPredicateAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Predicate != nil {
		{
			size, err := m.Predicate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPredicates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceIdPredicateAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceIdPredicateAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceIdPredicateAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NamespaceIds) > 0 {
		for iNdEx := len(m.NamespaceIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NamespaceIds[iNdEx])
			copy(dAtA[i:], m.NamespaceIds[iNdEx])
			i = encodeVarintPredicates(dAtA, i, uint64(len(m.NamespaceIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TaskTypePredicateAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskTypePredicateAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskTypePredicateAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskTypes) > 0 {
		dAtA10 := make([]byte, len(m.TaskTypes)*10)
		var j9 int
		for _, num := range m.TaskTypes {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintPredicates(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPredicates(dAtA []byte, offset int, v uint64) int {
	offset -= sovPredicates(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Predicate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PredicateType != 0 {
		n += 1 + sovPredicates(uint64(m.PredicateType))
	}
	if m.Attributes != nil {
		n += m.Attributes.Size()
	}
	return n
}

func (m *Predicate_AllPredicateAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllPredicateAttributes != nil {
		l = m.AllPredicateAttributes.Size()
		n += 1 + l + sovPredicates(uint64(l))
	}
	return n
}
func (m *Predicate_EmptyPredicateAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EmptyPredicateAttributes != nil {
		l = m.EmptyPredicateAttributes.Size()
		n += 1 + l + sovPredicates(uint64(l))
	}
	return n
}
func (m *Predicate_AndPredicateAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AndPredicateAttributes != nil {
		l = m.AndPredicateAttributes.Size()
		n += 1 + l + sovPredicates(uint64(l))
	}
	return n
}
func (m *Predicate_OrPredicateAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrPredicateAttributes != nil {
		l = m.OrPredicateAttributes.Size()
		n += 1 + l + sovPredicates(uint64(l))
	}
	return n
}
func (m *Predicate_NotPredicateAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotPredicateAttributes != nil {
		l = m.NotPredicateAttributes.Size()
		n += 1 + l + sovPredicates(uint64(l))
	}
	return n
}
func (m *Predicate_NamespaceIdPredicateAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NamespaceIdPredicateAttributes != nil {
		l = m.NamespaceIdPredicateAttributes.Size()
		n += 1 + l + sovPredicates(uint64(l))
	}
	return n
}
func (m *Predicate_TaskTypePredicateAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskTypePredicateAttributes != nil {
		l = m.TaskTypePredicateAttributes.Size()
		n += 1 + l + sovPredicates(uint64(l))
	}
	return n
}
func (m *AllPredicateAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EmptyPredicateAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AndPredicateAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Predicates) > 0 {
		for _, e := range m.Predicates {
			l = e.Size()
			n += 1 + l + sovPredicates(uint64(l))
		}
	}
	return n
}

func (m *OrPredicateAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Predicates) > 0 {
		for _, e := range m.Predicates {
			l = e.Size()
			n += 1 + l + sovPredicates(uint64(l))
		}
	}
	return n
}

func (m *NotPredicateAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Predicate != nil {
		l = m.Predicate.Size()
		n += 1 + l + sovPredicates(uint64(l))
	}
	return n
}

func (m *NamespaceIdPredicateAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NamespaceIds) > 0 {
		for _, s := range m.NamespaceIds {
			l = len(s)
			n += 1 + l + sovPredicates(uint64(l))
		}
	}
	return n
}

func (m *TaskTypePredicateAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TaskTypes) > 0 {
		l = 0
		for _, e := range m.TaskTypes {
			l += sovPredicates(uint64(e))
		}
		n += 1 + sovPredicates(uint64(l)) + l
	}
	return n
}

func sovPredicates(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPredicates(x uint64) (n int) {
	return sovPredicates(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Predicate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Predicate{`,
		`PredicateType:` + fmt.Sprintf("%v", this.PredicateType) + `,`,
		`Attributes:` + fmt.Sprintf("%v", this.Attributes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Predicate_AllPredicateAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Predicate_AllPredicateAttributes{`,
		`AllPredicateAttributes:` + strings.Replace(fmt.Sprintf("%v", this.AllPredicateAttributes), "AllPredicateAttributes", "AllPredicateAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Predicate_EmptyPredicateAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Predicate_EmptyPredicateAttributes{`,
		`EmptyPredicateAttributes:` + strings.Replace(fmt.Sprintf("%v", this.EmptyPredicateAttributes), "EmptyPredicateAttributes", "EmptyPredicateAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Predicate_AndPredicateAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Predicate_AndPredicateAttributes{`,
		`AndPredicateAttributes:` + strings.Replace(fmt.Sprintf("%v", this.AndPredicateAttributes), "AndPredicateAttributes", "AndPredicateAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Predicate_OrPredicateAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Predicate_OrPredicateAttributes{`,
		`OrPredicateAttributes:` + strings.Replace(fmt.Sprintf("%v", this.OrPredicateAttributes), "OrPredicateAttributes", "OrPredicateAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Predicate_NotPredicateAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Predicate_NotPredicateAttributes{`,
		`NotPredicateAttributes:` + strings.Replace(fmt.Sprintf("%v", this.NotPredicateAttributes), "NotPredicateAttributes", "NotPredicateAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Predicate_NamespaceIdPredicateAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Predicate_NamespaceIdPredicateAttributes{`,
		`NamespaceIdPredicateAttributes:` + strings.Replace(fmt.Sprintf("%v", this.NamespaceIdPredicateAttributes), "NamespaceIdPredicateAttributes", "NamespaceIdPredicateAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Predicate_TaskTypePredicateAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Predicate_TaskTypePredicateAttributes{`,
		`TaskTypePredicateAttributes:` + strings.Replace(fmt.Sprintf("%v", this.TaskTypePredicateAttributes), "TaskTypePredicateAttributes", "TaskTypePredicateAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllPredicateAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllPredicateAttributes{`,
		`}`,
	}, "")
	return s
}
func (this *EmptyPredicateAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmptyPredicateAttributes{`,
		`}`,
	}, "")
	return s
}
func (this *AndPredicateAttributes) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPredicates := "[]*Predicate{"
	for _, f := range this.Predicates {
		repeatedStringForPredicates += strings.Replace(f.String(), "Predicate", "Predicate", 1) + ","
	}
	repeatedStringForPredicates += "}"
	s := strings.Join([]string{`&AndPredicateAttributes{`,
		`Predicates:` + repeatedStringForPredicates + `,`,
		`}`,
	}, "")
	return s
}
func (this *OrPredicateAttributes) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPredicates := "[]*Predicate{"
	for _, f := range this.Predicates {
		repeatedStringForPredicates += strings.Replace(f.String(), "Predicate", "Predicate", 1) + ","
	}
	repeatedStringForPredicates += "}"
	s := strings.Join([]string{`&OrPredicateAttributes{`,
		`Predicates:` + repeatedStringForPredicates + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotPredicateAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotPredicateAttributes{`,
		`Predicate:` + strings.Replace(this.Predicate.String(), "Predicate", "Predicate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamespaceIdPredicateAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NamespaceIdPredicateAttributes{`,
		`NamespaceIds:` + fmt.Sprintf("%v", this.NamespaceIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskTypePredicateAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskTypePredicateAttributes{`,
		`TaskTypes:` + fmt.Sprintf("%v", this.TaskTypes) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPredicates(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Predicate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredicates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Predicate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Predicate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredicateType", wireType)
			}
			m.PredicateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredicates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PredicateType |= v1.PredicateType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllPredicateAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredicates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredicates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPredicates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AllPredicateAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Predicate_AllPredicateAttributes{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmptyPredicateAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredicates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredicates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPredicates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmptyPredicateAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Predicate_EmptyPredicateAttributes{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AndPredicateAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredicates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredicates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPredicates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AndPredicateAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Predicate_AndPredicateAttributes{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrPredicateAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredicates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredicates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPredicates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OrPredicateAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Predicate_OrPredicateAttributes{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotPredicateAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredicates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredicates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPredicates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NotPredicateAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Predicate_NotPredicateAttributes{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceIdPredicateAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredicates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredicates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPredicates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NamespaceIdPredicateAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Predicate_NamespaceIdPredicateAttributes{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskTypePredicateAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredicates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredicates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPredicates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TaskTypePredicateAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &Predicate_TaskTypePredicateAttributes{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredicates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredicates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPredicates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllPredicateAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredicates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllPredicateAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllPredicateAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPredicates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredicates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPredicates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyPredicateAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredicates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyPredicateAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyPredicateAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPredicates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredicates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPredicates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AndPredicateAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredicates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AndPredicateAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AndPredicateAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredicates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredicates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPredicates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Predicates = append(m.Predicates, &Predicate{})
			if err := m.Predicates[len(m.Predicates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredicates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredicates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPredicates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrPredicateAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredicates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrPredicateAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrPredicateAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredicates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredicates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPredicates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Predicates = append(m.Predicates, &Predicate{})
			if err := m.Predicates[len(m.Predicates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredicates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredicates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPredicates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotPredicateAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredicates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotPredicateAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotPredicateAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredicates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPredicates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPredicates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Predicate == nil {
				m.Predicate = &Predicate{}
			}
			if err := m.Predicate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredicates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredicates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPredicates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceIdPredicateAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredicates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceIdPredicateAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceIdPredicateAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPredicates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPredicates
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPredicates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceIds = append(m.NamespaceIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPredicates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredicates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPredicates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskTypePredicateAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPredicates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskTypePredicateAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskTypePredicateAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v v1.TaskType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPredicates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= v1.TaskType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TaskTypes = append(m.TaskTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPredicates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPredicates
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPredicates
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.TaskTypes) == 0 {
					m.TaskTypes = make([]v1.TaskType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v v1.TaskType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPredicates
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= v1.TaskType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TaskTypes = append(m.TaskTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskTypes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPredicates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPredicates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPredicates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPredicates(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPredicates
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPredicates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPredicates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPredicates
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPredicates
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPredicates
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPredicates        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPredicates          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPredicates = fmt.Errorf("proto: unexpected end of group")
)
