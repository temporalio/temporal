// The MIT License
//
// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// source: temporal/server/api/persistence/v1/task_queues.proto

package persistence

import (
	reflect "reflect"
	"strconv"
	sync "sync"

	v1 "go.temporal.io/server/api/clock/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BuildId_State int32

const (
	STATE_UNSPECIFIED BuildId_State = 0
	STATE_ACTIVE      BuildId_State = 1
	STATE_DELETED     BuildId_State = 2
)

// Enum value maps for BuildId_State.
var (
	BuildId_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_ACTIVE",
		2: "STATE_DELETED",
	}
	BuildId_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_ACTIVE":      1,
		"STATE_DELETED":     2,
	}
)

func (x BuildId_State) Enum() *BuildId_State {
	p := new(BuildId_State)
	*p = x
	return p
}

func (x BuildId_State) String() string {
	switch x {
	case STATE_UNSPECIFIED:
		return "StateUnspecified"
	case STATE_ACTIVE:
		return "StateActive"
	case STATE_DELETED:
		return "StateDeleted"
	default:
		return strconv.Itoa(int(x))
	}

}

func (BuildId_State) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_server_api_persistence_v1_task_queues_proto_enumTypes[0].Descriptor()
}

func (BuildId_State) Type() protoreflect.EnumType {
	return &file_temporal_server_api_persistence_v1_task_queues_proto_enumTypes[0]
}

func (x BuildId_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuildId_State.Descriptor instead.
func (BuildId_State) EnumDescriptor() ([]byte, []int) {
	return file_temporal_server_api_persistence_v1_task_queues_proto_rawDescGZIP(), []int{0, 0}
}

// BuildId is an identifier with a timestamped status used to identify workers for task queue versioning purposes.
type BuildId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State BuildId_State `protobuf:"varint,2,opt,name=state,proto3,enum=temporal.server.api.persistence.v1.BuildId_State" json:"state,omitempty"`
	// HLC timestamp representing when the state was updated or the when build ID was originally inserted.
	// (-- api-linter: core::0142::time-field-type=disabled
	//
	//	aip.dev/not-precedent: Using HLC instead of wall clock. --)
	StateUpdateTimestamp *v1.HybridLogicalClock `protobuf:"bytes,3,opt,name=state_update_timestamp,json=stateUpdateTimestamp,proto3" json:"state_update_timestamp,omitempty"`
	// HLC timestamp representing when this build id was last made default in its version set.
	// (-- api-linter: core::0142::time-field-type=disabled
	//
	//	aip.dev/not-precedent: Using HLC instead of wall clock. --)
	BecameDefaultTimestamp *v1.HybridLogicalClock `protobuf:"bytes,4,opt,name=became_default_timestamp,json=becameDefaultTimestamp,proto3" json:"became_default_timestamp,omitempty"`
}

func (x *BuildId) Reset() {
	*x = BuildId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildId) ProtoMessage() {}

func (x *BuildId) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildId.ProtoReflect.Descriptor instead.
func (*BuildId) Descriptor() ([]byte, []int) {
	return file_temporal_server_api_persistence_v1_task_queues_proto_rawDescGZIP(), []int{0}
}

func (x *BuildId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BuildId) GetState() BuildId_State {
	if x != nil {
		return x.State
	}
	return STATE_UNSPECIFIED
}

func (x *BuildId) GetStateUpdateTimestamp() *v1.HybridLogicalClock {
	if x != nil {
		return x.StateUpdateTimestamp
	}
	return nil
}

func (x *BuildId) GetBecameDefaultTimestamp() *v1.HybridLogicalClock {
	if x != nil {
		return x.BecameDefaultTimestamp
	}
	return nil
}

// An internal represenation of temporal.api.taskqueue.v1.CompatibleVersionSet
type CompatibleVersionSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set IDs are used internally by matching.
	// A set typically has one set ID and extra care is taken to enforce this.
	// In some situations, including:
	//   - Replication race between task queue user data and history events
	//   - Replication split-brain + later merge
	//   - Delayed user data propagation between partitions
	//   - Cross-task-queue activities/child workflows/CAN where the user has not set up parallel
	//     versioning data
	//
	// we have to guess the set id for a build id. If that happens, and then the build id is
	// discovered to be in a different set, then the sets will be merged and both (or more)
	// build ids will be preserved, so that we don't lose tasks.
	// The first set id is considered the "primary", and the others are "demoted". Once a build
	// id is demoted, it cannot be made the primary again.
	SetIds []string `protobuf:"bytes,1,rep,name=set_ids,json=setIds,proto3" json:"set_ids,omitempty"`
	// All the compatible versions, unordered except for the last element, which is considered the set "default".
	BuildIds []*BuildId `protobuf:"bytes,2,rep,name=build_ids,json=buildIds,proto3" json:"build_ids,omitempty"`
	// HLC timestamp representing when this set was last made the default for the queue.
	// (-- api-linter: core::0142::time-field-type=disabled
	//
	//	aip.dev/not-precedent: Using HLC instead of wall clock. --)
	BecameDefaultTimestamp *v1.HybridLogicalClock `protobuf:"bytes,4,opt,name=became_default_timestamp,json=becameDefaultTimestamp,proto3" json:"became_default_timestamp,omitempty"`
}

func (x *CompatibleVersionSet) Reset() {
	*x = CompatibleVersionSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompatibleVersionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompatibleVersionSet) ProtoMessage() {}

func (x *CompatibleVersionSet) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompatibleVersionSet.ProtoReflect.Descriptor instead.
func (*CompatibleVersionSet) Descriptor() ([]byte, []int) {
	return file_temporal_server_api_persistence_v1_task_queues_proto_rawDescGZIP(), []int{1}
}

func (x *CompatibleVersionSet) GetSetIds() []string {
	if x != nil {
		return x.SetIds
	}
	return nil
}

func (x *CompatibleVersionSet) GetBuildIds() []*BuildId {
	if x != nil {
		return x.BuildIds
	}
	return nil
}

func (x *CompatibleVersionSet) GetBecameDefaultTimestamp() *v1.HybridLogicalClock {
	if x != nil {
		return x.BecameDefaultTimestamp
	}
	return nil
}

// Holds all the data related to worker versioning for a task queue.
// Backwards-incompatible changes cannot be made, as this would make existing stored data unreadable.
type VersioningData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All the incompatible version sets, unordered except for the last element, which is considered the set "default".
	VersionSets []*CompatibleVersionSet `protobuf:"bytes,1,rep,name=version_sets,json=versionSets,proto3" json:"version_sets,omitempty"`
}

func (x *VersioningData) Reset() {
	*x = VersioningData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersioningData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersioningData) ProtoMessage() {}

func (x *VersioningData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersioningData.ProtoReflect.Descriptor instead.
func (*VersioningData) Descriptor() ([]byte, []int) {
	return file_temporal_server_api_persistence_v1_task_queues_proto_rawDescGZIP(), []int{2}
}

func (x *VersioningData) GetVersionSets() []*CompatibleVersionSet {
	if x != nil {
		return x.VersionSets
	}
	return nil
}

// Container for all persistent user provided data for a task queue.
// Task queue as a named concept here is close to how users interpret them, rather than relating to some specific type
// (workflow vs activity, etc) and thus, as a consequence, any data that applies to a specific type (say, activity rate
// limiting) should be defined as such within this structure.
// This data must all fit in a single DB column and is kept cached in-memory, take extra care to ensure data added here
// has reasonable size limits imposed on it.
type TaskQueueUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The last recorded cluster-local Hybrid Logical Clock timestamp for _this_ task queue.
	// Updated whenever user data is directly updated due to a user action but not when applying replication events.
	// The clock is referenced when new timestamps are generated to ensure it produces monotonically increasing
	// timestamps.
	Clock          *v1.HybridLogicalClock `protobuf:"bytes,1,opt,name=clock,proto3" json:"clock,omitempty"`
	VersioningData *VersioningData        `protobuf:"bytes,2,opt,name=versioning_data,json=versioningData,proto3" json:"versioning_data,omitempty"`
}

func (x *TaskQueueUserData) Reset() {
	*x = TaskQueueUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskQueueUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueueUserData) ProtoMessage() {}

func (x *TaskQueueUserData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueueUserData.ProtoReflect.Descriptor instead.
func (*TaskQueueUserData) Descriptor() ([]byte, []int) {
	return file_temporal_server_api_persistence_v1_task_queues_proto_rawDescGZIP(), []int{3}
}

func (x *TaskQueueUserData) GetClock() *v1.HybridLogicalClock {
	if x != nil {
		return x.Clock
	}
	return nil
}

func (x *TaskQueueUserData) GetVersioningData() *VersioningData {
	if x != nil {
		return x.VersioningData
	}
	return nil
}

// Simple wrapper that includes a TaskQueueUserData and its storage version.
type VersionedTaskQueueUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *TaskQueueUserData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Version int64              `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VersionedTaskQueueUserData) Reset() {
	*x = VersionedTaskQueueUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionedTaskQueueUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionedTaskQueueUserData) ProtoMessage() {}

func (x *VersionedTaskQueueUserData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionedTaskQueueUserData.ProtoReflect.Descriptor instead.
func (*VersionedTaskQueueUserData) Descriptor() ([]byte, []int) {
	return file_temporal_server_api_persistence_v1_task_queues_proto_rawDescGZIP(), []int{4}
}

func (x *VersionedTaskQueueUserData) GetData() *TaskQueueUserData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *VersionedTaskQueueUserData) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

var File_temporal_server_api_persistence_v1_task_queues_proto protoreflect.FileDescriptor

var file_temporal_server_api_persistence_v1_task_queues_proto_rawDesc = []byte{
	0x0a, 0x34, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x2a, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x02, 0x0a, 0x07, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x66, 0x0a, 0x16, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x14, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x6a, 0x0a, 0x18, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x16, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x43, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x22, 0xe5, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x73,
	0x12, 0x6a, 0x0a, 0x18, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x16, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x6d, 0x0a, 0x0e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5b,
	0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x0b,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x11,
	0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x46, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x5b, 0x0a, 0x0f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x81, 0x01, 0x0a, 0x1a, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x6f,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6f, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_temporal_server_api_persistence_v1_task_queues_proto_rawDescOnce sync.Once
	file_temporal_server_api_persistence_v1_task_queues_proto_rawDescData = file_temporal_server_api_persistence_v1_task_queues_proto_rawDesc
)

func file_temporal_server_api_persistence_v1_task_queues_proto_rawDescGZIP() []byte {
	file_temporal_server_api_persistence_v1_task_queues_proto_rawDescOnce.Do(func() {
		file_temporal_server_api_persistence_v1_task_queues_proto_rawDescData = protoimpl.X.CompressGZIP(file_temporal_server_api_persistence_v1_task_queues_proto_rawDescData)
	})
	return file_temporal_server_api_persistence_v1_task_queues_proto_rawDescData
}

var file_temporal_server_api_persistence_v1_task_queues_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_temporal_server_api_persistence_v1_task_queues_proto_goTypes = []interface{}{
	(BuildId_State)(0),                 // 0: temporal.server.api.persistence.v1.BuildId.State
	(*BuildId)(nil),                    // 1: temporal.server.api.persistence.v1.BuildId
	(*CompatibleVersionSet)(nil),       // 2: temporal.server.api.persistence.v1.CompatibleVersionSet
	(*VersioningData)(nil),             // 3: temporal.server.api.persistence.v1.VersioningData
	(*TaskQueueUserData)(nil),          // 4: temporal.server.api.persistence.v1.TaskQueueUserData
	(*VersionedTaskQueueUserData)(nil), // 5: temporal.server.api.persistence.v1.VersionedTaskQueueUserData
	(*v1.HybridLogicalClock)(nil),      // 6: temporal.server.api.clock.v1.HybridLogicalClock
}
var file_temporal_server_api_persistence_v1_task_queues_proto_depIdxs = []int32{
	0, // 0: temporal.server.api.persistence.v1.BuildId.state:type_name -> temporal.server.api.persistence.v1.BuildId.State
	6, // 1: temporal.server.api.persistence.v1.BuildId.state_update_timestamp:type_name -> temporal.server.api.clock.v1.HybridLogicalClock
	6, // 2: temporal.server.api.persistence.v1.BuildId.became_default_timestamp:type_name -> temporal.server.api.clock.v1.HybridLogicalClock
	1, // 3: temporal.server.api.persistence.v1.CompatibleVersionSet.build_ids:type_name -> temporal.server.api.persistence.v1.BuildId
	6, // 4: temporal.server.api.persistence.v1.CompatibleVersionSet.became_default_timestamp:type_name -> temporal.server.api.clock.v1.HybridLogicalClock
	2, // 5: temporal.server.api.persistence.v1.VersioningData.version_sets:type_name -> temporal.server.api.persistence.v1.CompatibleVersionSet
	6, // 6: temporal.server.api.persistence.v1.TaskQueueUserData.clock:type_name -> temporal.server.api.clock.v1.HybridLogicalClock
	3, // 7: temporal.server.api.persistence.v1.TaskQueueUserData.versioning_data:type_name -> temporal.server.api.persistence.v1.VersioningData
	4, // 8: temporal.server.api.persistence.v1.VersionedTaskQueueUserData.data:type_name -> temporal.server.api.persistence.v1.TaskQueueUserData
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_temporal_server_api_persistence_v1_task_queues_proto_init() }
func file_temporal_server_api_persistence_v1_task_queues_proto_init() {
	if File_temporal_server_api_persistence_v1_task_queues_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompatibleVersionSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersioningData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskQueueUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionedTaskQueueUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_temporal_server_api_persistence_v1_task_queues_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_server_api_persistence_v1_task_queues_proto_goTypes,
		DependencyIndexes: file_temporal_server_api_persistence_v1_task_queues_proto_depIdxs,
		EnumInfos:         file_temporal_server_api_persistence_v1_task_queues_proto_enumTypes,
		MessageInfos:      file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes,
	}.Build()
	File_temporal_server_api_persistence_v1_task_queues_proto = out.File
	file_temporal_server_api_persistence_v1_task_queues_proto_rawDesc = nil
	file_temporal_server_api_persistence_v1_task_queues_proto_goTypes = nil
	file_temporal_server_api_persistence_v1_task_queues_proto_depIdxs = nil
}
