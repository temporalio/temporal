// The MIT License
//
// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// plugins:
// 	protoc-gen-go
// 	protoc
// source: temporal/server/api/persistence/v1/task_queues.proto

package persistence

import (
	reflect "reflect"
	"strconv"
	sync "sync"
	unsafe "unsafe"

	v13 "go.temporal.io/api/deployment/v1"
	v11 "go.temporal.io/api/taskqueue/v1"
	v1 "go.temporal.io/server/api/clock/v1"
	v12 "go.temporal.io/server/api/deployment/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BuildId_State int32

const (
	STATE_UNSPECIFIED BuildId_State = 0
	STATE_ACTIVE      BuildId_State = 1
	STATE_DELETED     BuildId_State = 2
)

// Enum value maps for BuildId_State.
var (
	BuildId_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_ACTIVE",
		2: "STATE_DELETED",
	}
	BuildId_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_ACTIVE":      1,
		"STATE_DELETED":     2,
	}
)

func (x BuildId_State) Enum() *BuildId_State {
	p := new(BuildId_State)
	*p = x
	return p
}

func (x BuildId_State) String() string {
	switch x {
	case STATE_UNSPECIFIED:
		return "StateUnspecified"
	case STATE_ACTIVE:
		return "StateActive"
	case STATE_DELETED:
		return "StateDeleted"
	default:
		return strconv.Itoa(int(x))
	}

}

func (BuildId_State) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_server_api_persistence_v1_task_queues_proto_enumTypes[0].Descriptor()
}

func (BuildId_State) Type() protoreflect.EnumType {
	return &file_temporal_server_api_persistence_v1_task_queues_proto_enumTypes[0]
}

func (x BuildId_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuildId_State.Descriptor instead.
func (BuildId_State) EnumDescriptor() ([]byte, []int) {
	return file_temporal_server_api_persistence_v1_task_queues_proto_rawDescGZIP(), []int{0, 0}
}

// BuildId is an identifier with a timestamped status used to identify workers for task queue versioning purposes.
type BuildId struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State BuildId_State          `protobuf:"varint,2,opt,name=state,proto3,enum=temporal.server.api.persistence.v1.BuildId_State" json:"state,omitempty"`
	// HLC timestamp representing when the state was updated or the when build ID was originally inserted.
	// (-- api-linter: core::0142::time-field-type=disabled
	//
	//	aip.dev/not-precedent: Using HLC instead of wall clock. --)
	StateUpdateTimestamp *v1.HybridLogicalClock `protobuf:"bytes,3,opt,name=state_update_timestamp,json=stateUpdateTimestamp,proto3" json:"state_update_timestamp,omitempty"`
	// HLC timestamp representing when this build ID was last made default in its version set.
	// (-- api-linter: core::0142::time-field-type=disabled
	//
	//	aip.dev/not-precedent: Using HLC instead of wall clock. --)
	BecameDefaultTimestamp *v1.HybridLogicalClock `protobuf:"bytes,4,opt,name=became_default_timestamp,json=becameDefaultTimestamp,proto3" json:"became_default_timestamp,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *BuildId) Reset() {
	*x = BuildId{}
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildId) ProtoMessage() {}

func (x *BuildId) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildId.ProtoReflect.Descriptor instead.
func (*BuildId) Descriptor() ([]byte, []int) {
	return file_temporal_server_api_persistence_v1_task_queues_proto_rawDescGZIP(), []int{0}
}

func (x *BuildId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BuildId) GetState() BuildId_State {
	if x != nil {
		return x.State
	}
	return STATE_UNSPECIFIED
}

func (x *BuildId) GetStateUpdateTimestamp() *v1.HybridLogicalClock {
	if x != nil {
		return x.StateUpdateTimestamp
	}
	return nil
}

func (x *BuildId) GetBecameDefaultTimestamp() *v1.HybridLogicalClock {
	if x != nil {
		return x.BecameDefaultTimestamp
	}
	return nil
}

// An internal representation of temporal.api.taskqueue.v1.CompatibleVersionSet
type CompatibleVersionSet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Set IDs are used internally by matching.
	// A set typically has one set ID and extra care is taken to enforce this.
	// In some situations, including:
	//   - Replication race between task queue user data and history events
	//   - Replication split-brain + later merge
	//   - Delayed user data propagation between partitions
	//   - Cross-task-queue activities/child workflows/CAN where the user has not set up parallel
	//     versioning data
	//
	// we have to guess the set id for a build ID. If that happens, and then the build ID is
	// discovered to be in a different set, then the sets will be merged and both (or more)
	// build ids will be preserved, so that we don't lose tasks.
	// The first set id is considered the "primary", and the others are "demoted". Once a build
	// id is demoted, it cannot be made the primary again.
	SetIds []string `protobuf:"bytes,1,rep,name=set_ids,json=setIds,proto3" json:"set_ids,omitempty"`
	// All the compatible versions, unordered except for the last element, which is considered the set "default".
	BuildIds []*BuildId `protobuf:"bytes,2,rep,name=build_ids,json=buildIds,proto3" json:"build_ids,omitempty"`
	// HLC timestamp representing when this set was last made the default for the queue.
	// (-- api-linter: core::0142::time-field-type=disabled
	//
	//	aip.dev/not-precedent: Using HLC instead of wall clock. --)
	BecameDefaultTimestamp *v1.HybridLogicalClock `protobuf:"bytes,4,opt,name=became_default_timestamp,json=becameDefaultTimestamp,proto3" json:"became_default_timestamp,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CompatibleVersionSet) Reset() {
	*x = CompatibleVersionSet{}
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompatibleVersionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompatibleVersionSet) ProtoMessage() {}

func (x *CompatibleVersionSet) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompatibleVersionSet.ProtoReflect.Descriptor instead.
func (*CompatibleVersionSet) Descriptor() ([]byte, []int) {
	return file_temporal_server_api_persistence_v1_task_queues_proto_rawDescGZIP(), []int{1}
}

func (x *CompatibleVersionSet) GetSetIds() []string {
	if x != nil {
		return x.SetIds
	}
	return nil
}

func (x *CompatibleVersionSet) GetBuildIds() []*BuildId {
	if x != nil {
		return x.BuildIds
	}
	return nil
}

func (x *CompatibleVersionSet) GetBecameDefaultTimestamp() *v1.HybridLogicalClock {
	if x != nil {
		return x.BecameDefaultTimestamp
	}
	return nil
}

type AssignmentRule struct {
	state protoimpl.MessageState     `protogen:"open.v1"`
	Rule  *v11.BuildIdAssignmentRule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	// (-- api-linter: core::0142::time-field-type=disabled
	//
	//	aip.dev/not-precedent: Using HLC instead of wall clock. --)
	CreateTimestamp *v1.HybridLogicalClock `protobuf:"bytes,2,opt,name=create_timestamp,json=createTimestamp,proto3" json:"create_timestamp,omitempty"`
	//	when delete_timestamp is present the rule should be treated as deleted
	//
	// (-- api-linter: core::0142::time-field-type=disabled
	//
	//	aip.dev/not-precedent: Using HLC instead of wall clock. --)
	DeleteTimestamp *v1.HybridLogicalClock `protobuf:"bytes,3,opt,name=delete_timestamp,json=deleteTimestamp,proto3" json:"delete_timestamp,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AssignmentRule) Reset() {
	*x = AssignmentRule{}
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignmentRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignmentRule) ProtoMessage() {}

func (x *AssignmentRule) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignmentRule.ProtoReflect.Descriptor instead.
func (*AssignmentRule) Descriptor() ([]byte, []int) {
	return file_temporal_server_api_persistence_v1_task_queues_proto_rawDescGZIP(), []int{2}
}

func (x *AssignmentRule) GetRule() *v11.BuildIdAssignmentRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *AssignmentRule) GetCreateTimestamp() *v1.HybridLogicalClock {
	if x != nil {
		return x.CreateTimestamp
	}
	return nil
}

func (x *AssignmentRule) GetDeleteTimestamp() *v1.HybridLogicalClock {
	if x != nil {
		return x.DeleteTimestamp
	}
	return nil
}

type RedirectRule struct {
	state protoimpl.MessageState             `protogen:"open.v1"`
	Rule  *v11.CompatibleBuildIdRedirectRule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	// (-- api-linter: core::0142::time-field-type=disabled
	//
	//	aip.dev/not-precedent: Using HLC instead of wall clock. --)
	CreateTimestamp *v1.HybridLogicalClock `protobuf:"bytes,2,opt,name=create_timestamp,json=createTimestamp,proto3" json:"create_timestamp,omitempty"`
	//	when delete_timestamp is present the rule should be treated as deleted
	//
	// (-- api-linter: core::0142::time-field-type=disabled
	//
	//	aip.dev/not-precedent: Using HLC instead of wall clock. --)
	DeleteTimestamp *v1.HybridLogicalClock `protobuf:"bytes,3,opt,name=delete_timestamp,json=deleteTimestamp,proto3" json:"delete_timestamp,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RedirectRule) Reset() {
	*x = RedirectRule{}
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedirectRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectRule) ProtoMessage() {}

func (x *RedirectRule) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectRule.ProtoReflect.Descriptor instead.
func (*RedirectRule) Descriptor() ([]byte, []int) {
	return file_temporal_server_api_persistence_v1_task_queues_proto_rawDescGZIP(), []int{3}
}

func (x *RedirectRule) GetRule() *v11.CompatibleBuildIdRedirectRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *RedirectRule) GetCreateTimestamp() *v1.HybridLogicalClock {
	if x != nil {
		return x.CreateTimestamp
	}
	return nil
}

func (x *RedirectRule) GetDeleteTimestamp() *v1.HybridLogicalClock {
	if x != nil {
		return x.DeleteTimestamp
	}
	return nil
}

// Holds all the data related to worker versioning for a task queue.
// Backwards-incompatible changes cannot be made, as this would make existing stored data unreadable.
type VersioningData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// All the incompatible version sets, unordered except for the last element, which is considered the set "default".
	VersionSets []*CompatibleVersionSet `protobuf:"bytes,1,rep,name=version_sets,json=versionSets,proto3" json:"version_sets,omitempty"`
	// Ordered list of assignment rules. Also contains recently-deleted rules.
	AssignmentRules []*AssignmentRule `protobuf:"bytes,2,rep,name=assignment_rules,json=assignmentRules,proto3" json:"assignment_rules,omitempty"`
	// Unordered list of redirect rules. Also contains recently-deleted rules.
	RedirectRules []*RedirectRule `protobuf:"bytes,3,rep,name=redirect_rules,json=redirectRules,proto3" json:"redirect_rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersioningData) Reset() {
	*x = VersioningData{}
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersioningData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersioningData) ProtoMessage() {}

func (x *VersioningData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersioningData.ProtoReflect.Descriptor instead.
func (*VersioningData) Descriptor() ([]byte, []int) {
	return file_temporal_server_api_persistence_v1_task_queues_proto_rawDescGZIP(), []int{4}
}

func (x *VersioningData) GetVersionSets() []*CompatibleVersionSet {
	if x != nil {
		return x.VersionSets
	}
	return nil
}

func (x *VersioningData) GetAssignmentRules() []*AssignmentRule {
	if x != nil {
		return x.AssignmentRules
	}
	return nil
}

func (x *VersioningData) GetRedirectRules() []*RedirectRule {
	if x != nil {
		return x.RedirectRules
	}
	return nil
}

type DeploymentData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Set of deployments that this task queue belongs to.
	// Current deployment is defined implicitly as the deployment with the most recent
	// TaskQueueData.last_became_current_time.
	// Deprecated.
	//
	// Deprecated: Marked as deprecated in temporal/server/api/persistence/v1/task_queues.proto.
	Deployments []*DeploymentData_DeploymentDataItem `protobuf:"bytes,1,rep,name=deployments,proto3" json:"deployments,omitempty"`
	// Set of worker deployment versions that this task queue belongs to.
	// Current Version is defined implicitly as the version with `current_since_time!=nil` and the most
	// recent `routing_update_time`.
	// Ramping Version is defined implicitly as the version with `ramping_since_time!=nil` and the most
	// recent `routing_update_time`.
	// The Ramping Version receives a share of unversioned/unpinned tasks according to its
	// `ramp_percentage`. If there is no Ramping Version, all the unversioned/unpinned tasks are
	// routed to the Current Version. If there is no Current Version, any poller with UNVERSIONED
	// (or unspecified) WorkflowVersioningMode will receive the tasks.
	Versions []*v12.DeploymentVersionData `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
	// Present if the task queue's ramping version is unversioned.
	UnversionedRampData *v12.DeploymentVersionData `protobuf:"bytes,3,opt,name=unversioned_ramp_data,json=unversionedRampData,proto3" json:"unversioned_ramp_data,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DeploymentData) Reset() {
	*x = DeploymentData{}
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeploymentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentData) ProtoMessage() {}

func (x *DeploymentData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentData.ProtoReflect.Descriptor instead.
func (*DeploymentData) Descriptor() ([]byte, []int) {
	return file_temporal_server_api_persistence_v1_task_queues_proto_rawDescGZIP(), []int{5}
}

// Deprecated: Marked as deprecated in temporal/server/api/persistence/v1/task_queues.proto.
func (x *DeploymentData) GetDeployments() []*DeploymentData_DeploymentDataItem {
	if x != nil {
		return x.Deployments
	}
	return nil
}

func (x *DeploymentData) GetVersions() []*v12.DeploymentVersionData {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *DeploymentData) GetUnversionedRampData() *v12.DeploymentVersionData {
	if x != nil {
		return x.UnversionedRampData
	}
	return nil
}

// Container for all persistent user data that varies per task queue type within a family.
type TaskQueueTypeUserData struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DeploymentData *DeploymentData        `protobuf:"bytes,1,opt,name=deployment_data,json=deploymentData,proto3" json:"deployment_data,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TaskQueueTypeUserData) Reset() {
	*x = TaskQueueTypeUserData{}
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskQueueTypeUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueueTypeUserData) ProtoMessage() {}

func (x *TaskQueueTypeUserData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueueTypeUserData.ProtoReflect.Descriptor instead.
func (*TaskQueueTypeUserData) Descriptor() ([]byte, []int) {
	return file_temporal_server_api_persistence_v1_task_queues_proto_rawDescGZIP(), []int{6}
}

func (x *TaskQueueTypeUserData) GetDeploymentData() *DeploymentData {
	if x != nil {
		return x.DeploymentData
	}
	return nil
}

// Container for all persistent user provided data for a task queue family.
// "Task queue" as a named concept here is a task queue family, i.e. the set of task queues
// that share a name, at most one of each type (workflow, activity, etc.).
// This data must all fit in a single DB column and is kept cached in-memory, take extra care to ensure data added here
// has reasonable size limits imposed on it.
type TaskQueueUserData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The last recorded cluster-local Hybrid Logical Clock timestamp for _this_ task queue family.
	// Updated whenever user data is directly updated due to a user action but not when applying replication events.
	// The clock is referenced when new timestamps are generated to ensure it produces monotonically increasing
	// timestamps.
	Clock          *v1.HybridLogicalClock `protobuf:"bytes,1,opt,name=clock,proto3" json:"clock,omitempty"`
	VersioningData *VersioningData        `protobuf:"bytes,2,opt,name=versioning_data,json=versioningData,proto3" json:"versioning_data,omitempty"`
	// Map from task queue type (workflow, activity, nexus) to per-type data.
	PerType       map[int32]*TaskQueueTypeUserData `protobuf:"bytes,3,rep,name=per_type,json=perType,proto3" json:"per_type,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskQueueUserData) Reset() {
	*x = TaskQueueUserData{}
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskQueueUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueueUserData) ProtoMessage() {}

func (x *TaskQueueUserData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueueUserData.ProtoReflect.Descriptor instead.
func (*TaskQueueUserData) Descriptor() ([]byte, []int) {
	return file_temporal_server_api_persistence_v1_task_queues_proto_rawDescGZIP(), []int{7}
}

func (x *TaskQueueUserData) GetClock() *v1.HybridLogicalClock {
	if x != nil {
		return x.Clock
	}
	return nil
}

func (x *TaskQueueUserData) GetVersioningData() *VersioningData {
	if x != nil {
		return x.VersioningData
	}
	return nil
}

func (x *TaskQueueUserData) GetPerType() map[int32]*TaskQueueTypeUserData {
	if x != nil {
		return x.PerType
	}
	return nil
}

// Simple wrapper that includes a TaskQueueUserData and its storage version.
type VersionedTaskQueueUserData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *TaskQueueUserData     `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Version       int64                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionedTaskQueueUserData) Reset() {
	*x = VersionedTaskQueueUserData{}
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionedTaskQueueUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionedTaskQueueUserData) ProtoMessage() {}

func (x *VersionedTaskQueueUserData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionedTaskQueueUserData.ProtoReflect.Descriptor instead.
func (*VersionedTaskQueueUserData) Descriptor() ([]byte, []int) {
	return file_temporal_server_api_persistence_v1_task_queues_proto_rawDescGZIP(), []int{8}
}

func (x *VersionedTaskQueueUserData) GetData() *TaskQueueUserData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *VersionedTaskQueueUserData) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// Deprecated.
type DeploymentData_DeploymentDataItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Deployment    *v13.Deployment        `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
	Data          *v12.TaskQueueData     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeploymentData_DeploymentDataItem) Reset() {
	*x = DeploymentData_DeploymentDataItem{}
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeploymentData_DeploymentDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentData_DeploymentDataItem) ProtoMessage() {}

func (x *DeploymentData_DeploymentDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentData_DeploymentDataItem.ProtoReflect.Descriptor instead.
func (*DeploymentData_DeploymentDataItem) Descriptor() ([]byte, []int) {
	return file_temporal_server_api_persistence_v1_task_queues_proto_rawDescGZIP(), []int{5, 0}
}

func (x *DeploymentData_DeploymentDataItem) GetDeployment() *v13.Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *DeploymentData_DeploymentDataItem) GetData() *v12.TaskQueueData {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_temporal_server_api_persistence_v1_task_queues_proto protoreflect.FileDescriptor

const file_temporal_server_api_persistence_v1_task_queues_proto_rawDesc = "" +
	"\n" +
	"4temporal/server/api/persistence/v1/task_queues.proto\x12\"temporal.server.api.persistence.v1\x1a(temporal/api/deployment/v1/message.proto\x1a'temporal/api/taskqueue/v1/message.proto\x1a*temporal/server/api/clock/v1/message.proto\x1a/temporal/server/api/deployment/v1/message.proto\"\xfb\x02\n" +
	"\aBuildId\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12G\n" +
	"\x05state\x18\x02 \x01(\x0e21.temporal.server.api.persistence.v1.BuildId.StateR\x05state\x12f\n" +
	"\x16state_update_timestamp\x18\x03 \x01(\v20.temporal.server.api.clock.v1.HybridLogicalClockR\x14stateUpdateTimestamp\x12j\n" +
	"\x18became_default_timestamp\x18\x04 \x01(\v20.temporal.server.api.clock.v1.HybridLogicalClockR\x16becameDefaultTimestamp\"C\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fSTATE_ACTIVE\x10\x01\x12\x11\n" +
	"\rSTATE_DELETED\x10\x02\"\xe5\x01\n" +
	"\x14CompatibleVersionSet\x12\x17\n" +
	"\aset_ids\x18\x01 \x03(\tR\x06setIds\x12H\n" +
	"\tbuild_ids\x18\x02 \x03(\v2+.temporal.server.api.persistence.v1.BuildIdR\bbuildIds\x12j\n" +
	"\x18became_default_timestamp\x18\x04 \x01(\v20.temporal.server.api.clock.v1.HybridLogicalClockR\x16becameDefaultTimestamp\"\x90\x02\n" +
	"\x0eAssignmentRule\x12D\n" +
	"\x04rule\x18\x01 \x01(\v20.temporal.api.taskqueue.v1.BuildIdAssignmentRuleR\x04rule\x12[\n" +
	"\x10create_timestamp\x18\x02 \x01(\v20.temporal.server.api.clock.v1.HybridLogicalClockR\x0fcreateTimestamp\x12[\n" +
	"\x10delete_timestamp\x18\x03 \x01(\v20.temporal.server.api.clock.v1.HybridLogicalClockR\x0fdeleteTimestamp\"\x96\x02\n" +
	"\fRedirectRule\x12L\n" +
	"\x04rule\x18\x01 \x01(\v28.temporal.api.taskqueue.v1.CompatibleBuildIdRedirectRuleR\x04rule\x12[\n" +
	"\x10create_timestamp\x18\x02 \x01(\v20.temporal.server.api.clock.v1.HybridLogicalClockR\x0fcreateTimestamp\x12[\n" +
	"\x10delete_timestamp\x18\x03 \x01(\v20.temporal.server.api.clock.v1.HybridLogicalClockR\x0fdeleteTimestamp\"\xa5\x02\n" +
	"\x0eVersioningData\x12[\n" +
	"\fversion_sets\x18\x01 \x03(\v28.temporal.server.api.persistence.v1.CompatibleVersionSetR\vversionSets\x12]\n" +
	"\x10assignment_rules\x18\x02 \x03(\v22.temporal.server.api.persistence.v1.AssignmentRuleR\x0fassignmentRules\x12W\n" +
	"\x0eredirect_rules\x18\x03 \x03(\v20.temporal.server.api.persistence.v1.RedirectRuleR\rredirectRules\"\xe6\x03\n" +
	"\x0eDeploymentData\x12k\n" +
	"\vdeployments\x18\x01 \x03(\v2E.temporal.server.api.persistence.v1.DeploymentData.DeploymentDataItemB\x02\x18\x01R\vdeployments\x12T\n" +
	"\bversions\x18\x02 \x03(\v28.temporal.server.api.deployment.v1.DeploymentVersionDataR\bversions\x12l\n" +
	"\x15unversioned_ramp_data\x18\x03 \x01(\v28.temporal.server.api.deployment.v1.DeploymentVersionDataR\x13unversionedRampData\x1a\xa2\x01\n" +
	"\x12DeploymentDataItem\x12F\n" +
	"\n" +
	"deployment\x18\x01 \x01(\v2&.temporal.api.deployment.v1.DeploymentR\n" +
	"deployment\x12D\n" +
	"\x04data\x18\x02 \x01(\v20.temporal.server.api.deployment.v1.TaskQueueDataR\x04data\"t\n" +
	"\x15TaskQueueTypeUserData\x12[\n" +
	"\x0fdeployment_data\x18\x01 \x01(\v22.temporal.server.api.persistence.v1.DeploymentDataR\x0edeploymentData\"\x8e\x03\n" +
	"\x11TaskQueueUserData\x12F\n" +
	"\x05clock\x18\x01 \x01(\v20.temporal.server.api.clock.v1.HybridLogicalClockR\x05clock\x12[\n" +
	"\x0fversioning_data\x18\x02 \x01(\v22.temporal.server.api.persistence.v1.VersioningDataR\x0eversioningData\x12]\n" +
	"\bper_type\x18\x03 \x03(\v2B.temporal.server.api.persistence.v1.TaskQueueUserData.PerTypeEntryR\aperType\x1au\n" +
	"\fPerTypeEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12O\n" +
	"\x05value\x18\x02 \x01(\v29.temporal.server.api.persistence.v1.TaskQueueTypeUserDataR\x05value:\x028\x01\"\x81\x01\n" +
	"\x1aVersionedTaskQueueUserData\x12I\n" +
	"\x04data\x18\x01 \x01(\v25.temporal.server.api.persistence.v1.TaskQueueUserDataR\x04data\x12\x18\n" +
	"\aversion\x18\x02 \x01(\x03R\aversionB6Z4go.temporal.io/server/api/persistence/v1;persistenceb\x06proto3"

var (
	file_temporal_server_api_persistence_v1_task_queues_proto_rawDescOnce sync.Once
	file_temporal_server_api_persistence_v1_task_queues_proto_rawDescData []byte
)

func file_temporal_server_api_persistence_v1_task_queues_proto_rawDescGZIP() []byte {
	file_temporal_server_api_persistence_v1_task_queues_proto_rawDescOnce.Do(func() {
		file_temporal_server_api_persistence_v1_task_queues_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_temporal_server_api_persistence_v1_task_queues_proto_rawDesc), len(file_temporal_server_api_persistence_v1_task_queues_proto_rawDesc)))
	})
	return file_temporal_server_api_persistence_v1_task_queues_proto_rawDescData
}

var file_temporal_server_api_persistence_v1_task_queues_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_temporal_server_api_persistence_v1_task_queues_proto_goTypes = []any{
	(BuildId_State)(0),                        // 0: temporal.server.api.persistence.v1.BuildId.State
	(*BuildId)(nil),                           // 1: temporal.server.api.persistence.v1.BuildId
	(*CompatibleVersionSet)(nil),              // 2: temporal.server.api.persistence.v1.CompatibleVersionSet
	(*AssignmentRule)(nil),                    // 3: temporal.server.api.persistence.v1.AssignmentRule
	(*RedirectRule)(nil),                      // 4: temporal.server.api.persistence.v1.RedirectRule
	(*VersioningData)(nil),                    // 5: temporal.server.api.persistence.v1.VersioningData
	(*DeploymentData)(nil),                    // 6: temporal.server.api.persistence.v1.DeploymentData
	(*TaskQueueTypeUserData)(nil),             // 7: temporal.server.api.persistence.v1.TaskQueueTypeUserData
	(*TaskQueueUserData)(nil),                 // 8: temporal.server.api.persistence.v1.TaskQueueUserData
	(*VersionedTaskQueueUserData)(nil),        // 9: temporal.server.api.persistence.v1.VersionedTaskQueueUserData
	(*DeploymentData_DeploymentDataItem)(nil), // 10: temporal.server.api.persistence.v1.DeploymentData.DeploymentDataItem
	nil,                               // 11: temporal.server.api.persistence.v1.TaskQueueUserData.PerTypeEntry
	(*v1.HybridLogicalClock)(nil),     // 12: temporal.server.api.clock.v1.HybridLogicalClock
	(*v11.BuildIdAssignmentRule)(nil), // 13: temporal.api.taskqueue.v1.BuildIdAssignmentRule
	(*v11.CompatibleBuildIdRedirectRule)(nil), // 14: temporal.api.taskqueue.v1.CompatibleBuildIdRedirectRule
	(*v12.DeploymentVersionData)(nil),         // 15: temporal.server.api.deployment.v1.DeploymentVersionData
	(*v13.Deployment)(nil),                    // 16: temporal.api.deployment.v1.Deployment
	(*v12.TaskQueueData)(nil),                 // 17: temporal.server.api.deployment.v1.TaskQueueData
}
var file_temporal_server_api_persistence_v1_task_queues_proto_depIdxs = []int32{
	0,  // 0: temporal.server.api.persistence.v1.BuildId.state:type_name -> temporal.server.api.persistence.v1.BuildId.State
	12, // 1: temporal.server.api.persistence.v1.BuildId.state_update_timestamp:type_name -> temporal.server.api.clock.v1.HybridLogicalClock
	12, // 2: temporal.server.api.persistence.v1.BuildId.became_default_timestamp:type_name -> temporal.server.api.clock.v1.HybridLogicalClock
	1,  // 3: temporal.server.api.persistence.v1.CompatibleVersionSet.build_ids:type_name -> temporal.server.api.persistence.v1.BuildId
	12, // 4: temporal.server.api.persistence.v1.CompatibleVersionSet.became_default_timestamp:type_name -> temporal.server.api.clock.v1.HybridLogicalClock
	13, // 5: temporal.server.api.persistence.v1.AssignmentRule.rule:type_name -> temporal.api.taskqueue.v1.BuildIdAssignmentRule
	12, // 6: temporal.server.api.persistence.v1.AssignmentRule.create_timestamp:type_name -> temporal.server.api.clock.v1.HybridLogicalClock
	12, // 7: temporal.server.api.persistence.v1.AssignmentRule.delete_timestamp:type_name -> temporal.server.api.clock.v1.HybridLogicalClock
	14, // 8: temporal.server.api.persistence.v1.RedirectRule.rule:type_name -> temporal.api.taskqueue.v1.CompatibleBuildIdRedirectRule
	12, // 9: temporal.server.api.persistence.v1.RedirectRule.create_timestamp:type_name -> temporal.server.api.clock.v1.HybridLogicalClock
	12, // 10: temporal.server.api.persistence.v1.RedirectRule.delete_timestamp:type_name -> temporal.server.api.clock.v1.HybridLogicalClock
	2,  // 11: temporal.server.api.persistence.v1.VersioningData.version_sets:type_name -> temporal.server.api.persistence.v1.CompatibleVersionSet
	3,  // 12: temporal.server.api.persistence.v1.VersioningData.assignment_rules:type_name -> temporal.server.api.persistence.v1.AssignmentRule
	4,  // 13: temporal.server.api.persistence.v1.VersioningData.redirect_rules:type_name -> temporal.server.api.persistence.v1.RedirectRule
	10, // 14: temporal.server.api.persistence.v1.DeploymentData.deployments:type_name -> temporal.server.api.persistence.v1.DeploymentData.DeploymentDataItem
	15, // 15: temporal.server.api.persistence.v1.DeploymentData.versions:type_name -> temporal.server.api.deployment.v1.DeploymentVersionData
	15, // 16: temporal.server.api.persistence.v1.DeploymentData.unversioned_ramp_data:type_name -> temporal.server.api.deployment.v1.DeploymentVersionData
	6,  // 17: temporal.server.api.persistence.v1.TaskQueueTypeUserData.deployment_data:type_name -> temporal.server.api.persistence.v1.DeploymentData
	12, // 18: temporal.server.api.persistence.v1.TaskQueueUserData.clock:type_name -> temporal.server.api.clock.v1.HybridLogicalClock
	5,  // 19: temporal.server.api.persistence.v1.TaskQueueUserData.versioning_data:type_name -> temporal.server.api.persistence.v1.VersioningData
	11, // 20: temporal.server.api.persistence.v1.TaskQueueUserData.per_type:type_name -> temporal.server.api.persistence.v1.TaskQueueUserData.PerTypeEntry
	8,  // 21: temporal.server.api.persistence.v1.VersionedTaskQueueUserData.data:type_name -> temporal.server.api.persistence.v1.TaskQueueUserData
	16, // 22: temporal.server.api.persistence.v1.DeploymentData.DeploymentDataItem.deployment:type_name -> temporal.api.deployment.v1.Deployment
	17, // 23: temporal.server.api.persistence.v1.DeploymentData.DeploymentDataItem.data:type_name -> temporal.server.api.deployment.v1.TaskQueueData
	7,  // 24: temporal.server.api.persistence.v1.TaskQueueUserData.PerTypeEntry.value:type_name -> temporal.server.api.persistence.v1.TaskQueueTypeUserData
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_temporal_server_api_persistence_v1_task_queues_proto_init() }
func file_temporal_server_api_persistence_v1_task_queues_proto_init() {
	if File_temporal_server_api_persistence_v1_task_queues_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_temporal_server_api_persistence_v1_task_queues_proto_rawDesc), len(file_temporal_server_api_persistence_v1_task_queues_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_server_api_persistence_v1_task_queues_proto_goTypes,
		DependencyIndexes: file_temporal_server_api_persistence_v1_task_queues_proto_depIdxs,
		EnumInfos:         file_temporal_server_api_persistence_v1_task_queues_proto_enumTypes,
		MessageInfos:      file_temporal_server_api_persistence_v1_task_queues_proto_msgTypes,
	}.Build()
	File_temporal_server_api_persistence_v1_task_queues_proto = out.File
	file_temporal_server_api_persistence_v1_task_queues_proto_goTypes = nil
	file_temporal_server_api_persistence_v1_task_queues_proto_depIdxs = nil
}
