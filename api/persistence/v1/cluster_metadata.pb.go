// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/server/api/persistence/v1/cluster_metadata.proto

package persistence

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	v12 "go.temporal.io/api/enums/v1"
	v1 "go.temporal.io/api/version/v1"
	v11 "go.temporal.io/server/api/security/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// data column
type ClusterMetadata struct {
	ClusterName              string                            `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	HistoryShardCount        int32                             `protobuf:"varint,2,opt,name=history_shard_count,json=historyShardCount,proto3" json:"history_shard_count,omitempty"`
	ClusterId                string                            `protobuf:"bytes,3,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	VersionInfo              *v1.VersionInfo                   `protobuf:"bytes,4,opt,name=version_info,json=versionInfo,proto3" json:"version_info,omitempty"`
	IndexSearchAttributes    map[string]*IndexSearchAttributes `protobuf:"bytes,5,rep,name=index_search_attributes,json=indexSearchAttributes,proto3" json:"index_search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClusterAddress           string                            `protobuf:"bytes,6,opt,name=cluster_address,json=clusterAddress,proto3" json:"cluster_address,omitempty"`
	FailoverVersionIncrement int32                             `protobuf:"varint,7,opt,name=failover_version_increment,json=failoverVersionIncrement,proto3" json:"failover_version_increment,omitempty"`
	InitialFailoverVersion   int32                             `protobuf:"varint,8,opt,name=initial_failover_version,json=initialFailoverVersion,proto3" json:"initial_failover_version,omitempty"`
	IsGlobalNamespaceEnabled bool                              `protobuf:"varint,9,opt,name=is_global_namespace_enabled,json=isGlobalNamespaceEnabled,proto3" json:"is_global_namespace_enabled,omitempty"`
	ClientTls                *v11.ClientTLS                    `protobuf:"bytes,10,opt,name=client_tls,json=clientTls,proto3" json:"client_tls,omitempty"`
	IsConnectionEnabled      bool                              `protobuf:"varint,11,opt,name=is_connection_enabled,json=isConnectionEnabled,proto3" json:"is_connection_enabled,omitempty"`
}

func (m *ClusterMetadata) Reset()      { *m = ClusterMetadata{} }
func (*ClusterMetadata) ProtoMessage() {}
func (*ClusterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f4771d63f405884, []int{0}
}
func (m *ClusterMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClusterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClusterMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClusterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterMetadata.Merge(m, src)
}
func (m *ClusterMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ClusterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterMetadata proto.InternalMessageInfo

func (m *ClusterMetadata) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *ClusterMetadata) GetHistoryShardCount() int32 {
	if m != nil {
		return m.HistoryShardCount
	}
	return 0
}

func (m *ClusterMetadata) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *ClusterMetadata) GetVersionInfo() *v1.VersionInfo {
	if m != nil {
		return m.VersionInfo
	}
	return nil
}

func (m *ClusterMetadata) GetIndexSearchAttributes() map[string]*IndexSearchAttributes {
	if m != nil {
		return m.IndexSearchAttributes
	}
	return nil
}

func (m *ClusterMetadata) GetClusterAddress() string {
	if m != nil {
		return m.ClusterAddress
	}
	return ""
}

func (m *ClusterMetadata) GetFailoverVersionIncrement() int32 {
	if m != nil {
		return m.FailoverVersionIncrement
	}
	return 0
}

func (m *ClusterMetadata) GetInitialFailoverVersion() int32 {
	if m != nil {
		return m.InitialFailoverVersion
	}
	return 0
}

func (m *ClusterMetadata) GetIsGlobalNamespaceEnabled() bool {
	if m != nil {
		return m.IsGlobalNamespaceEnabled
	}
	return false
}

func (m *ClusterMetadata) GetClientTls() *v11.ClientTLS {
	if m != nil {
		return m.ClientTls
	}
	return nil
}

func (m *ClusterMetadata) GetIsConnectionEnabled() bool {
	if m != nil {
		return m.IsConnectionEnabled
	}
	return false
}

type IndexSearchAttributes struct {
	CustomSearchAttributes map[string]v12.IndexedValueType `protobuf:"bytes,1,rep,name=custom_search_attributes,json=customSearchAttributes,proto3" json:"custom_search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=temporal.api.enums.v1.IndexedValueType"`
}

func (m *IndexSearchAttributes) Reset()      { *m = IndexSearchAttributes{} }
func (*IndexSearchAttributes) ProtoMessage() {}
func (*IndexSearchAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f4771d63f405884, []int{1}
}
func (m *IndexSearchAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexSearchAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexSearchAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexSearchAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexSearchAttributes.Merge(m, src)
}
func (m *IndexSearchAttributes) XXX_Size() int {
	return m.Size()
}
func (m *IndexSearchAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexSearchAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_IndexSearchAttributes proto.InternalMessageInfo

func (m *IndexSearchAttributes) GetCustomSearchAttributes() map[string]v12.IndexedValueType {
	if m != nil {
		return m.CustomSearchAttributes
	}
	return nil
}

func init() {
	proto.RegisterType((*ClusterMetadata)(nil), "temporal.server.api.persistence.v1.ClusterMetadata")
	proto.RegisterMapType((map[string]*IndexSearchAttributes)(nil), "temporal.server.api.persistence.v1.ClusterMetadata.IndexSearchAttributesEntry")
	proto.RegisterType((*IndexSearchAttributes)(nil), "temporal.server.api.persistence.v1.IndexSearchAttributes")
	proto.RegisterMapType((map[string]v12.IndexedValueType)(nil), "temporal.server.api.persistence.v1.IndexSearchAttributes.CustomSearchAttributesEntry")
}

func init() {
	proto.RegisterFile("temporal/server/api/persistence/v1/cluster_metadata.proto", fileDescriptor_1f4771d63f405884)
}

var fileDescriptor_1f4771d63f405884 = []byte{
	// 689 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xc1, 0x4e, 0x14, 0x4b,
	0x14, 0x9d, 0x82, 0x07, 0x0f, 0x6a, 0x08, 0xbc, 0x57, 0x04, 0x5e, 0x65, 0xc8, 0xeb, 0x8c, 0x44,
	0xc3, 0xc4, 0xc4, 0x9e, 0x30, 0xba, 0x00, 0x95, 0x05, 0x4e, 0x90, 0x4c, 0xa2, 0x98, 0x0c, 0xc8,
	0xc2, 0x4d, 0xa7, 0xa6, 0xfb, 0x02, 0xa5, 0xdd, 0x55, 0x93, 0xaa, 0x9a, 0x8e, 0xb3, 0x33, 0x31,
	0x71, 0xab, 0x3f, 0xe0, 0xde, 0x6f, 0xf0, 0x0b, 0x5c, 0xb2, 0x64, 0x29, 0xc3, 0xc6, 0x25, 0x9f,
	0x60, 0xba, 0xba, 0x7b, 0x18, 0xb0, 0x51, 0xe3, 0xae, 0xfa, 0x9e, 0x73, 0x4f, 0xdd, 0x7b, 0xee,
	0xed, 0xc2, 0xeb, 0x06, 0xa2, 0xae, 0x54, 0x2c, 0xac, 0x6b, 0x50, 0x31, 0xa8, 0x3a, 0xeb, 0xf2,
	0x7a, 0x17, 0x94, 0xe6, 0xda, 0x80, 0xf0, 0xa1, 0x1e, 0xaf, 0xd6, 0xfd, 0xb0, 0xa7, 0x0d, 0x28,
	0x2f, 0x02, 0xc3, 0x02, 0x66, 0x98, 0xdb, 0x55, 0xd2, 0x48, 0xb2, 0x9c, 0xa7, 0xba, 0x69, 0xaa,
	0xcb, 0xba, 0xdc, 0x1d, 0x49, 0x75, 0xe3, 0xd5, 0xca, 0x90, 0x63, 0x75, 0x41, 0xf4, 0x22, 0x6d,
	0x15, 0x65, 0x14, 0x49, 0x91, 0xea, 0x54, 0x6e, 0x5d, 0xe2, 0xc4, 0x89, 0x80, 0x14, 0x09, 0x2b,
	0x02, 0xad, 0xd9, 0x21, 0x64, 0xb4, 0x3b, 0x45, 0x95, 0x6a, 0xf0, 0x7b, 0x8a, 0x9b, 0xfe, 0x0f,
	0xf4, 0xe5, 0xcf, 0x93, 0x78, 0xae, 0x99, 0x16, 0xfe, 0x34, 0xab, 0x9b, 0xdc, 0xc0, 0x33, 0x79,
	0x2f, 0x82, 0x45, 0x40, 0x51, 0x15, 0xd5, 0xa6, 0xdb, 0xe5, 0x2c, 0xb6, 0xc3, 0x22, 0x20, 0x2e,
	0x9e, 0x3f, 0xe2, 0xda, 0x48, 0xd5, 0xf7, 0xf4, 0x11, 0x53, 0x81, 0xe7, 0xcb, 0x9e, 0x30, 0x74,
	0xac, 0x8a, 0x6a, 0x13, 0xed, 0x7f, 0x33, 0x68, 0x37, 0x41, 0x9a, 0x09, 0x40, 0xfe, 0xc7, 0x38,
	0x97, 0xe4, 0x01, 0x1d, 0xb7, 0x82, 0xd3, 0x59, 0xa4, 0x15, 0x90, 0x6d, 0x3c, 0x93, 0x35, 0xe4,
	0x71, 0x71, 0x20, 0xe9, 0x5f, 0x55, 0x54, 0x2b, 0x37, 0x6e, 0xba, 0x43, 0xeb, 0x12, 0xcf, 0x32,
	0x86, 0x1b, 0xaf, 0xba, 0xfb, 0xe9, 0xb1, 0x25, 0x0e, 0x64, 0xbb, 0x1c, 0x5f, 0x7c, 0x90, 0x77,
	0x08, 0xff, 0xc7, 0x45, 0x00, 0xaf, 0x3d, 0x0d, 0x4c, 0xf9, 0x47, 0x1e, 0x33, 0x46, 0xf1, 0x4e,
	0xcf, 0x80, 0xa6, 0x13, 0xd5, 0xf1, 0x5a, 0xb9, 0xb1, 0xe3, 0xfe, 0x7a, 0x1e, 0xee, 0x15, 0x47,
	0xdc, 0x56, 0x22, 0xb9, 0x6b, 0x15, 0x37, 0x87, 0x82, 0x5b, 0xc2, 0xa8, 0x7e, 0x7b, 0x81, 0x17,
	0x61, 0x64, 0x05, 0xcf, 0xe5, 0x0d, 0xb3, 0x20, 0x50, 0xa0, 0x35, 0x9d, 0xb4, 0x5d, 0xcf, 0x66,
	0xe1, 0xcd, 0x34, 0x4a, 0x1e, 0xe2, 0xca, 0x01, 0xe3, 0xa1, 0x8c, 0x41, 0x79, 0x17, 0x1e, 0xf8,
	0x0a, 0x22, 0x10, 0x86, 0xfe, 0x6d, 0x0d, 0xa5, 0x39, 0x63, 0xd8, 0x77, 0x86, 0x93, 0x35, 0x4c,
	0xb9, 0xe0, 0x86, 0xb3, 0xd0, 0xbb, 0xaa, 0x42, 0xa7, 0x6c, 0xee, 0x62, 0x86, 0x3f, 0xbe, 0x2c,
	0x41, 0x36, 0xf0, 0x12, 0xd7, 0xde, 0x61, 0x28, 0x3b, 0x2c, 0xb4, 0x63, 0xd6, 0x5d, 0xe6, 0x83,
	0x07, 0x82, 0x75, 0x42, 0x08, 0xe8, 0x74, 0x15, 0xd5, 0xa6, 0xda, 0x94, 0xeb, 0x6d, 0xcb, 0xd8,
	0xc9, 0x09, 0x5b, 0x29, 0x4e, 0x5a, 0xc9, 0x40, 0x39, 0x08, 0xe3, 0x99, 0x50, 0x53, 0x6c, 0xe7,
	0x75, 0xbb, 0xd0, 0xda, 0x7c, 0xf7, 0x52, 0x5f, 0x93, 0x94, 0xbd, 0x27, 0xbb, 0xc9, 0xf0, 0xed,
	0x31, 0xd4, 0xa4, 0x81, 0x17, 0xb8, 0xf6, 0x7c, 0x29, 0x04, 0xf8, 0x26, 0x69, 0x3f, 0xaf, 0xa1,
	0x6c, 0x6b, 0x98, 0xe7, 0xba, 0x39, 0xc4, 0xb2, 0xeb, 0x2b, 0x6f, 0x11, 0xae, 0x5c, 0x3f, 0x14,
	0xf2, 0x0f, 0x1e, 0x7f, 0x05, 0xfd, 0x6c, 0x71, 0x93, 0x23, 0x79, 0x86, 0x27, 0x62, 0x16, 0xf6,
	0xc0, 0xae, 0x68, 0xb9, 0xb1, 0xfe, 0x3b, 0x5b, 0x50, 0x78, 0x41, 0x3b, 0xd5, 0xb9, 0x3f, 0xb6,
	0x86, 0x96, 0x3f, 0x8e, 0xe1, 0x85, 0x42, 0x12, 0x79, 0x8f, 0x30, 0xf5, 0x7b, 0xda, 0xc8, 0xa8,
	0x60, 0x11, 0x91, 0x5d, 0xc4, 0xe7, 0x7f, 0x5c, 0x82, 0xdb, 0xb4, 0xca, 0xc5, 0xfb, 0xb8, 0xe8,
	0x17, 0x82, 0x15, 0x85, 0x97, 0x7e, 0x92, 0x56, 0xe0, 0xd8, 0xc6, 0xa8, 0x63, 0xb3, 0x8d, 0x95,
	0xcb, 0x3f, 0xa3, 0x7d, 0xa3, 0x86, 0x15, 0x42, 0xb0, 0x9f, 0x50, 0xf7, 0xfa, 0x5d, 0x18, 0xf1,
	0xe7, 0xd1, 0xcb, 0xe3, 0x53, 0xa7, 0x74, 0x72, 0xea, 0x94, 0xce, 0x4f, 0x1d, 0xf4, 0x66, 0xe0,
	0xa0, 0x4f, 0x03, 0x07, 0x7d, 0x19, 0x38, 0xe8, 0x78, 0xe0, 0xa0, 0xaf, 0x03, 0x07, 0x7d, 0x1b,
	0x38, 0xa5, 0xf3, 0x81, 0x83, 0x3e, 0x9c, 0x39, 0xa5, 0xe3, 0x33, 0xa7, 0x74, 0x72, 0xe6, 0x94,
	0x5e, 0xdc, 0x3b, 0x94, 0x17, 0x77, 0x71, 0x79, 0xfd, 0x8b, 0xfb, 0x60, 0xe4, 0xb3, 0x33, 0x69,
	0xdf, 0xb3, 0xbb, 0xdf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xfd, 0x7a, 0xa5, 0xaa, 0x05, 0x00,
	0x00,
}

func (this *ClusterMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClusterMetadata)
	if !ok {
		that2, ok := that.(ClusterMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClusterName != that1.ClusterName {
		return false
	}
	if this.HistoryShardCount != that1.HistoryShardCount {
		return false
	}
	if this.ClusterId != that1.ClusterId {
		return false
	}
	if !this.VersionInfo.Equal(that1.VersionInfo) {
		return false
	}
	if len(this.IndexSearchAttributes) != len(that1.IndexSearchAttributes) {
		return false
	}
	for i := range this.IndexSearchAttributes {
		if !this.IndexSearchAttributes[i].Equal(that1.IndexSearchAttributes[i]) {
			return false
		}
	}
	if this.ClusterAddress != that1.ClusterAddress {
		return false
	}
	if this.FailoverVersionIncrement != that1.FailoverVersionIncrement {
		return false
	}
	if this.InitialFailoverVersion != that1.InitialFailoverVersion {
		return false
	}
	if this.IsGlobalNamespaceEnabled != that1.IsGlobalNamespaceEnabled {
		return false
	}
	if !this.ClientTls.Equal(that1.ClientTls) {
		return false
	}
	if this.IsConnectionEnabled != that1.IsConnectionEnabled {
		return false
	}
	return true
}
func (this *IndexSearchAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IndexSearchAttributes)
	if !ok {
		that2, ok := that.(IndexSearchAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CustomSearchAttributes) != len(that1.CustomSearchAttributes) {
		return false
	}
	for i := range this.CustomSearchAttributes {
		if this.CustomSearchAttributes[i] != that1.CustomSearchAttributes[i] {
			return false
		}
	}
	return true
}
func (this *ClusterMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&persistence.ClusterMetadata{")
	s = append(s, "ClusterName: "+fmt.Sprintf("%#v", this.ClusterName)+",\n")
	s = append(s, "HistoryShardCount: "+fmt.Sprintf("%#v", this.HistoryShardCount)+",\n")
	s = append(s, "ClusterId: "+fmt.Sprintf("%#v", this.ClusterId)+",\n")
	if this.VersionInfo != nil {
		s = append(s, "VersionInfo: "+fmt.Sprintf("%#v", this.VersionInfo)+",\n")
	}
	keysForIndexSearchAttributes := make([]string, 0, len(this.IndexSearchAttributes))
	for k, _ := range this.IndexSearchAttributes {
		keysForIndexSearchAttributes = append(keysForIndexSearchAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForIndexSearchAttributes)
	mapStringForIndexSearchAttributes := "map[string]*IndexSearchAttributes{"
	for _, k := range keysForIndexSearchAttributes {
		mapStringForIndexSearchAttributes += fmt.Sprintf("%#v: %#v,", k, this.IndexSearchAttributes[k])
	}
	mapStringForIndexSearchAttributes += "}"
	if this.IndexSearchAttributes != nil {
		s = append(s, "IndexSearchAttributes: "+mapStringForIndexSearchAttributes+",\n")
	}
	s = append(s, "ClusterAddress: "+fmt.Sprintf("%#v", this.ClusterAddress)+",\n")
	s = append(s, "FailoverVersionIncrement: "+fmt.Sprintf("%#v", this.FailoverVersionIncrement)+",\n")
	s = append(s, "InitialFailoverVersion: "+fmt.Sprintf("%#v", this.InitialFailoverVersion)+",\n")
	s = append(s, "IsGlobalNamespaceEnabled: "+fmt.Sprintf("%#v", this.IsGlobalNamespaceEnabled)+",\n")
	if this.ClientTls != nil {
		s = append(s, "ClientTls: "+fmt.Sprintf("%#v", this.ClientTls)+",\n")
	}
	s = append(s, "IsConnectionEnabled: "+fmt.Sprintf("%#v", this.IsConnectionEnabled)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IndexSearchAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&persistence.IndexSearchAttributes{")
	keysForCustomSearchAttributes := make([]string, 0, len(this.CustomSearchAttributes))
	for k, _ := range this.CustomSearchAttributes {
		keysForCustomSearchAttributes = append(keysForCustomSearchAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForCustomSearchAttributes)
	mapStringForCustomSearchAttributes := "map[string]v12.IndexedValueType{"
	for _, k := range keysForCustomSearchAttributes {
		mapStringForCustomSearchAttributes += fmt.Sprintf("%#v: %#v,", k, this.CustomSearchAttributes[k])
	}
	mapStringForCustomSearchAttributes += "}"
	if this.CustomSearchAttributes != nil {
		s = append(s, "CustomSearchAttributes: "+mapStringForCustomSearchAttributes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringClusterMetadata(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ClusterMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClusterMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsConnectionEnabled {
		i--
		if m.IsConnectionEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.ClientTls != nil {
		{
			size, err := m.ClientTls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClusterMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.IsGlobalNamespaceEnabled {
		i--
		if m.IsGlobalNamespaceEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.InitialFailoverVersion != 0 {
		i = encodeVarintClusterMetadata(dAtA, i, uint64(m.InitialFailoverVersion))
		i--
		dAtA[i] = 0x40
	}
	if m.FailoverVersionIncrement != 0 {
		i = encodeVarintClusterMetadata(dAtA, i, uint64(m.FailoverVersionIncrement))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ClusterAddress) > 0 {
		i -= len(m.ClusterAddress)
		copy(dAtA[i:], m.ClusterAddress)
		i = encodeVarintClusterMetadata(dAtA, i, uint64(len(m.ClusterAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.IndexSearchAttributes) > 0 {
		for k := range m.IndexSearchAttributes {
			v := m.IndexSearchAttributes[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintClusterMetadata(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintClusterMetadata(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintClusterMetadata(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.VersionInfo != nil {
		{
			size, err := m.VersionInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClusterMetadata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClusterId) > 0 {
		i -= len(m.ClusterId)
		copy(dAtA[i:], m.ClusterId)
		i = encodeVarintClusterMetadata(dAtA, i, uint64(len(m.ClusterId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.HistoryShardCount != 0 {
		i = encodeVarintClusterMetadata(dAtA, i, uint64(m.HistoryShardCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintClusterMetadata(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndexSearchAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexSearchAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexSearchAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomSearchAttributes) > 0 {
		for k := range m.CustomSearchAttributes {
			v := m.CustomSearchAttributes[k]
			baseI := i
			i = encodeVarintClusterMetadata(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintClusterMetadata(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintClusterMetadata(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintClusterMetadata(dAtA []byte, offset int, v uint64) int {
	offset -= sovClusterMetadata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClusterMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovClusterMetadata(uint64(l))
	}
	if m.HistoryShardCount != 0 {
		n += 1 + sovClusterMetadata(uint64(m.HistoryShardCount))
	}
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovClusterMetadata(uint64(l))
	}
	if m.VersionInfo != nil {
		l = m.VersionInfo.Size()
		n += 1 + l + sovClusterMetadata(uint64(l))
	}
	if len(m.IndexSearchAttributes) > 0 {
		for k, v := range m.IndexSearchAttributes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovClusterMetadata(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovClusterMetadata(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovClusterMetadata(uint64(mapEntrySize))
		}
	}
	l = len(m.ClusterAddress)
	if l > 0 {
		n += 1 + l + sovClusterMetadata(uint64(l))
	}
	if m.FailoverVersionIncrement != 0 {
		n += 1 + sovClusterMetadata(uint64(m.FailoverVersionIncrement))
	}
	if m.InitialFailoverVersion != 0 {
		n += 1 + sovClusterMetadata(uint64(m.InitialFailoverVersion))
	}
	if m.IsGlobalNamespaceEnabled {
		n += 2
	}
	if m.ClientTls != nil {
		l = m.ClientTls.Size()
		n += 1 + l + sovClusterMetadata(uint64(l))
	}
	if m.IsConnectionEnabled {
		n += 2
	}
	return n
}

func (m *IndexSearchAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CustomSearchAttributes) > 0 {
		for k, v := range m.CustomSearchAttributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovClusterMetadata(uint64(len(k))) + 1 + sovClusterMetadata(uint64(v))
			n += mapEntrySize + 1 + sovClusterMetadata(uint64(mapEntrySize))
		}
	}
	return n
}

func sovClusterMetadata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClusterMetadata(x uint64) (n int) {
	return sovClusterMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ClusterMetadata) String() string {
	if this == nil {
		return "nil"
	}
	keysForIndexSearchAttributes := make([]string, 0, len(this.IndexSearchAttributes))
	for k, _ := range this.IndexSearchAttributes {
		keysForIndexSearchAttributes = append(keysForIndexSearchAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForIndexSearchAttributes)
	mapStringForIndexSearchAttributes := "map[string]*IndexSearchAttributes{"
	for _, k := range keysForIndexSearchAttributes {
		mapStringForIndexSearchAttributes += fmt.Sprintf("%v: %v,", k, this.IndexSearchAttributes[k])
	}
	mapStringForIndexSearchAttributes += "}"
	s := strings.Join([]string{`&ClusterMetadata{`,
		`ClusterName:` + fmt.Sprintf("%v", this.ClusterName) + `,`,
		`HistoryShardCount:` + fmt.Sprintf("%v", this.HistoryShardCount) + `,`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`VersionInfo:` + strings.Replace(fmt.Sprintf("%v", this.VersionInfo), "VersionInfo", "v1.VersionInfo", 1) + `,`,
		`IndexSearchAttributes:` + mapStringForIndexSearchAttributes + `,`,
		`ClusterAddress:` + fmt.Sprintf("%v", this.ClusterAddress) + `,`,
		`FailoverVersionIncrement:` + fmt.Sprintf("%v", this.FailoverVersionIncrement) + `,`,
		`InitialFailoverVersion:` + fmt.Sprintf("%v", this.InitialFailoverVersion) + `,`,
		`IsGlobalNamespaceEnabled:` + fmt.Sprintf("%v", this.IsGlobalNamespaceEnabled) + `,`,
		`ClientTls:` + strings.Replace(fmt.Sprintf("%v", this.ClientTls), "ClientTLS", "v11.ClientTLS", 1) + `,`,
		`IsConnectionEnabled:` + fmt.Sprintf("%v", this.IsConnectionEnabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IndexSearchAttributes) String() string {
	if this == nil {
		return "nil"
	}
	keysForCustomSearchAttributes := make([]string, 0, len(this.CustomSearchAttributes))
	for k, _ := range this.CustomSearchAttributes {
		keysForCustomSearchAttributes = append(keysForCustomSearchAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForCustomSearchAttributes)
	mapStringForCustomSearchAttributes := "map[string]v12.IndexedValueType{"
	for _, k := range keysForCustomSearchAttributes {
		mapStringForCustomSearchAttributes += fmt.Sprintf("%v: %v,", k, this.CustomSearchAttributes[k])
	}
	mapStringForCustomSearchAttributes += "}"
	s := strings.Join([]string{`&IndexSearchAttributes{`,
		`CustomSearchAttributes:` + mapStringForCustomSearchAttributes + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringClusterMetadata(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ClusterMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryShardCount", wireType)
			}
			m.HistoryShardCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryShardCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VersionInfo == nil {
				m.VersionInfo = &v1.VersionInfo{}
			}
			if err := m.VersionInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexSearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IndexSearchAttributes == nil {
				m.IndexSearchAttributes = make(map[string]*IndexSearchAttributes)
			}
			var mapkey string
			var mapvalue *IndexSearchAttributes
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClusterMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClusterMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthClusterMetadata
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthClusterMetadata
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClusterMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthClusterMetadata
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthClusterMetadata
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &IndexSearchAttributes{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipClusterMetadata(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthClusterMetadata
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.IndexSearchAttributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClusterMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClusterMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverVersionIncrement", wireType)
			}
			m.FailoverVersionIncrement = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailoverVersionIncrement |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialFailoverVersion", wireType)
			}
			m.InitialFailoverVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitialFailoverVersion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGlobalNamespaceEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGlobalNamespaceEnabled = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientTls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientTls == nil {
				m.ClientTls = &v11.ClientTLS{}
			}
			if err := m.ClientTls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsConnectionEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsConnectionEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClusterMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterMetadata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClusterMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexSearchAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClusterMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexSearchAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexSearchAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomSearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClusterMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClusterMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClusterMetadata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomSearchAttributes == nil {
				m.CustomSearchAttributes = make(map[string]v12.IndexedValueType)
			}
			var mapkey string
			var mapvalue v12.IndexedValueType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClusterMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClusterMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthClusterMetadata
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthClusterMetadata
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClusterMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= v12.IndexedValueType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipClusterMetadata(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthClusterMetadata
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CustomSearchAttributes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClusterMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClusterMetadata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClusterMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClusterMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClusterMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClusterMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClusterMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClusterMetadata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClusterMetadata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClusterMetadata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClusterMetadata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClusterMetadata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClusterMetadata = fmt.Errorf("proto: unexpected end of group")
)
