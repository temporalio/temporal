// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/server/api/matchingservice/v1/request_response.proto

package matchingservice

import (
	bytes "bytes"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	v11 "go.temporal.io/api/common/v1"
	v110 "go.temporal.io/api/enums/v1"
	v16 "go.temporal.io/api/history/v1"
	v112 "go.temporal.io/api/nexus/v1"
	v15 "go.temporal.io/api/protocol/v1"
	v12 "go.temporal.io/api/query/v1"
	v14 "go.temporal.io/api/taskqueue/v1"
	v1 "go.temporal.io/api/workflowservice/v1"
	v18 "go.temporal.io/server/api/clock/v1"
	v17 "go.temporal.io/server/api/enums/v1"
	v13 "go.temporal.io/server/api/history/v1"
	v111 "go.temporal.io/server/api/persistence/v1"
	v19 "go.temporal.io/server/api/taskqueue/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PollWorkflowTaskQueueRequest struct {
	NamespaceId     string                           `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	PollerId        string                           `protobuf:"bytes,2,opt,name=poller_id,json=pollerId,proto3" json:"poller_id,omitempty"`
	PollRequest     *v1.PollWorkflowTaskQueueRequest `protobuf:"bytes,3,opt,name=poll_request,json=pollRequest,proto3" json:"poll_request,omitempty"`
	ForwardedSource string                           `protobuf:"bytes,4,opt,name=forwarded_source,json=forwardedSource,proto3" json:"forwarded_source,omitempty"`
}

func (m *PollWorkflowTaskQueueRequest) Reset()      { *m = PollWorkflowTaskQueueRequest{} }
func (*PollWorkflowTaskQueueRequest) ProtoMessage() {}
func (*PollWorkflowTaskQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{0}
}
func (m *PollWorkflowTaskQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollWorkflowTaskQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollWorkflowTaskQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollWorkflowTaskQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollWorkflowTaskQueueRequest.Merge(m, src)
}
func (m *PollWorkflowTaskQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *PollWorkflowTaskQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PollWorkflowTaskQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PollWorkflowTaskQueueRequest proto.InternalMessageInfo

func (m *PollWorkflowTaskQueueRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *PollWorkflowTaskQueueRequest) GetPollerId() string {
	if m != nil {
		return m.PollerId
	}
	return ""
}

func (m *PollWorkflowTaskQueueRequest) GetPollRequest() *v1.PollWorkflowTaskQueueRequest {
	if m != nil {
		return m.PollRequest
	}
	return nil
}

func (m *PollWorkflowTaskQueueRequest) GetForwardedSource() string {
	if m != nil {
		return m.ForwardedSource
	}
	return ""
}

type PollWorkflowTaskQueueResponse struct {
	TaskToken                  []byte                         `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	WorkflowExecution          *v11.WorkflowExecution         `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	WorkflowType               *v11.WorkflowType              `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	PreviousStartedEventId     int64                          `protobuf:"varint,4,opt,name=previous_started_event_id,json=previousStartedEventId,proto3" json:"previous_started_event_id,omitempty"`
	StartedEventId             int64                          `protobuf:"varint,5,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	Attempt                    int32                          `protobuf:"varint,6,opt,name=attempt,proto3" json:"attempt,omitempty"`
	NextEventId                int64                          `protobuf:"varint,7,opt,name=next_event_id,json=nextEventId,proto3" json:"next_event_id,omitempty"`
	BacklogCountHint           int64                          `protobuf:"varint,8,opt,name=backlog_count_hint,json=backlogCountHint,proto3" json:"backlog_count_hint,omitempty"`
	StickyExecutionEnabled     bool                           `protobuf:"varint,9,opt,name=sticky_execution_enabled,json=stickyExecutionEnabled,proto3" json:"sticky_execution_enabled,omitempty"`
	Query                      *v12.WorkflowQuery             `protobuf:"bytes,10,opt,name=query,proto3" json:"query,omitempty"`
	TransientWorkflowTask      *v13.TransientWorkflowTaskInfo `protobuf:"bytes,11,opt,name=transient_workflow_task,json=transientWorkflowTask,proto3" json:"transient_workflow_task,omitempty"`
	WorkflowExecutionTaskQueue *v14.TaskQueue                 `protobuf:"bytes,12,opt,name=workflow_execution_task_queue,json=workflowExecutionTaskQueue,proto3" json:"workflow_execution_task_queue,omitempty"`
	BranchToken                []byte                         `protobuf:"bytes,14,opt,name=branch_token,json=branchToken,proto3" json:"branch_token,omitempty"`
	ScheduledTime              *time.Time                     `protobuf:"bytes,15,opt,name=scheduled_time,json=scheduledTime,proto3,stdtime" json:"scheduled_time,omitempty"`
	StartedTime                *time.Time                     `protobuf:"bytes,16,opt,name=started_time,json=startedTime,proto3,stdtime" json:"started_time,omitempty"`
	Queries                    map[string]*v12.WorkflowQuery  `protobuf:"bytes,17,rep,name=queries,proto3" json:"queries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Messages                   []*v15.Message                 `protobuf:"bytes,18,rep,name=messages,proto3" json:"messages,omitempty"`
	// The history for this workflow, which will either be complete or partial. Partial histories
	// are sent to workers who have signaled that they are using a sticky queue when completing
	// a workflow task. Sticky query tasks will not include any history.
	History       *v16.History `protobuf:"bytes,19,opt,name=history,proto3" json:"history,omitempty"`
	NextPageToken []byte       `protobuf:"bytes,20,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *PollWorkflowTaskQueueResponse) Reset()      { *m = PollWorkflowTaskQueueResponse{} }
func (*PollWorkflowTaskQueueResponse) ProtoMessage() {}
func (*PollWorkflowTaskQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{1}
}
func (m *PollWorkflowTaskQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollWorkflowTaskQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollWorkflowTaskQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollWorkflowTaskQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollWorkflowTaskQueueResponse.Merge(m, src)
}
func (m *PollWorkflowTaskQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *PollWorkflowTaskQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PollWorkflowTaskQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PollWorkflowTaskQueueResponse proto.InternalMessageInfo

func (m *PollWorkflowTaskQueueResponse) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *PollWorkflowTaskQueueResponse) GetWorkflowExecution() *v11.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *PollWorkflowTaskQueueResponse) GetWorkflowType() *v11.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *PollWorkflowTaskQueueResponse) GetPreviousStartedEventId() int64 {
	if m != nil {
		return m.PreviousStartedEventId
	}
	return 0
}

func (m *PollWorkflowTaskQueueResponse) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *PollWorkflowTaskQueueResponse) GetAttempt() int32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *PollWorkflowTaskQueueResponse) GetNextEventId() int64 {
	if m != nil {
		return m.NextEventId
	}
	return 0
}

func (m *PollWorkflowTaskQueueResponse) GetBacklogCountHint() int64 {
	if m != nil {
		return m.BacklogCountHint
	}
	return 0
}

func (m *PollWorkflowTaskQueueResponse) GetStickyExecutionEnabled() bool {
	if m != nil {
		return m.StickyExecutionEnabled
	}
	return false
}

func (m *PollWorkflowTaskQueueResponse) GetQuery() *v12.WorkflowQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *PollWorkflowTaskQueueResponse) GetTransientWorkflowTask() *v13.TransientWorkflowTaskInfo {
	if m != nil {
		return m.TransientWorkflowTask
	}
	return nil
}

func (m *PollWorkflowTaskQueueResponse) GetWorkflowExecutionTaskQueue() *v14.TaskQueue {
	if m != nil {
		return m.WorkflowExecutionTaskQueue
	}
	return nil
}

func (m *PollWorkflowTaskQueueResponse) GetBranchToken() []byte {
	if m != nil {
		return m.BranchToken
	}
	return nil
}

func (m *PollWorkflowTaskQueueResponse) GetScheduledTime() *time.Time {
	if m != nil {
		return m.ScheduledTime
	}
	return nil
}

func (m *PollWorkflowTaskQueueResponse) GetStartedTime() *time.Time {
	if m != nil {
		return m.StartedTime
	}
	return nil
}

func (m *PollWorkflowTaskQueueResponse) GetQueries() map[string]*v12.WorkflowQuery {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *PollWorkflowTaskQueueResponse) GetMessages() []*v15.Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *PollWorkflowTaskQueueResponse) GetHistory() *v16.History {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *PollWorkflowTaskQueueResponse) GetNextPageToken() []byte {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

type PollActivityTaskQueueRequest struct {
	NamespaceId     string                           `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	PollerId        string                           `protobuf:"bytes,2,opt,name=poller_id,json=pollerId,proto3" json:"poller_id,omitempty"`
	PollRequest     *v1.PollActivityTaskQueueRequest `protobuf:"bytes,3,opt,name=poll_request,json=pollRequest,proto3" json:"poll_request,omitempty"`
	ForwardedSource string                           `protobuf:"bytes,4,opt,name=forwarded_source,json=forwardedSource,proto3" json:"forwarded_source,omitempty"`
}

func (m *PollActivityTaskQueueRequest) Reset()      { *m = PollActivityTaskQueueRequest{} }
func (*PollActivityTaskQueueRequest) ProtoMessage() {}
func (*PollActivityTaskQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{2}
}
func (m *PollActivityTaskQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollActivityTaskQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollActivityTaskQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollActivityTaskQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollActivityTaskQueueRequest.Merge(m, src)
}
func (m *PollActivityTaskQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *PollActivityTaskQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PollActivityTaskQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PollActivityTaskQueueRequest proto.InternalMessageInfo

func (m *PollActivityTaskQueueRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *PollActivityTaskQueueRequest) GetPollerId() string {
	if m != nil {
		return m.PollerId
	}
	return ""
}

func (m *PollActivityTaskQueueRequest) GetPollRequest() *v1.PollActivityTaskQueueRequest {
	if m != nil {
		return m.PollRequest
	}
	return nil
}

func (m *PollActivityTaskQueueRequest) GetForwardedSource() string {
	if m != nil {
		return m.ForwardedSource
	}
	return ""
}

type PollActivityTaskQueueResponse struct {
	TaskToken         []byte                 `protobuf:"bytes,1,opt,name=task_token,json=taskToken,proto3" json:"task_token,omitempty"`
	WorkflowExecution *v11.WorkflowExecution `protobuf:"bytes,2,opt,name=workflow_execution,json=workflowExecution,proto3" json:"workflow_execution,omitempty"`
	ActivityId        string                 `protobuf:"bytes,3,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	ActivityType      *v11.ActivityType      `protobuf:"bytes,4,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	Input             *v11.Payloads          `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	ScheduledTime     *time.Time             `protobuf:"bytes,6,opt,name=scheduled_time,json=scheduledTime,proto3,stdtime" json:"scheduled_time,omitempty"`
	// (-- api-linter: core::0140::prepositions=disabled
	//     aip.dev/not-precedent: "to" is used to indicate interval. --)
	ScheduleToCloseTimeout *time.Duration `protobuf:"bytes,7,opt,name=schedule_to_close_timeout,json=scheduleToCloseTimeout,proto3,stdduration" json:"schedule_to_close_timeout,omitempty"`
	StartedTime            *time.Time     `protobuf:"bytes,8,opt,name=started_time,json=startedTime,proto3,stdtime" json:"started_time,omitempty"`
	// (-- api-linter: core::0140::prepositions=disabled
	//     aip.dev/not-precedent: "to" is used to indicate interval. --)
	StartToCloseTimeout         *time.Duration    `protobuf:"bytes,9,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3,stdduration" json:"start_to_close_timeout,omitempty"`
	HeartbeatTimeout            *time.Duration    `protobuf:"bytes,10,opt,name=heartbeat_timeout,json=heartbeatTimeout,proto3,stdduration" json:"heartbeat_timeout,omitempty"`
	Attempt                     int32             `protobuf:"varint,11,opt,name=attempt,proto3" json:"attempt,omitempty"`
	CurrentAttemptScheduledTime *time.Time        `protobuf:"bytes,12,opt,name=current_attempt_scheduled_time,json=currentAttemptScheduledTime,proto3,stdtime" json:"current_attempt_scheduled_time,omitempty"`
	HeartbeatDetails            *v11.Payloads     `protobuf:"bytes,13,opt,name=heartbeat_details,json=heartbeatDetails,proto3" json:"heartbeat_details,omitempty"`
	WorkflowType                *v11.WorkflowType `protobuf:"bytes,14,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	WorkflowNamespace           string            `protobuf:"bytes,15,opt,name=workflow_namespace,json=workflowNamespace,proto3" json:"workflow_namespace,omitempty"`
	Header                      *v11.Header       `protobuf:"bytes,16,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *PollActivityTaskQueueResponse) Reset()      { *m = PollActivityTaskQueueResponse{} }
func (*PollActivityTaskQueueResponse) ProtoMessage() {}
func (*PollActivityTaskQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{3}
}
func (m *PollActivityTaskQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollActivityTaskQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollActivityTaskQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollActivityTaskQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollActivityTaskQueueResponse.Merge(m, src)
}
func (m *PollActivityTaskQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *PollActivityTaskQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PollActivityTaskQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PollActivityTaskQueueResponse proto.InternalMessageInfo

func (m *PollActivityTaskQueueResponse) GetTaskToken() []byte {
	if m != nil {
		return m.TaskToken
	}
	return nil
}

func (m *PollActivityTaskQueueResponse) GetWorkflowExecution() *v11.WorkflowExecution {
	if m != nil {
		return m.WorkflowExecution
	}
	return nil
}

func (m *PollActivityTaskQueueResponse) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *PollActivityTaskQueueResponse) GetActivityType() *v11.ActivityType {
	if m != nil {
		return m.ActivityType
	}
	return nil
}

func (m *PollActivityTaskQueueResponse) GetInput() *v11.Payloads {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *PollActivityTaskQueueResponse) GetScheduledTime() *time.Time {
	if m != nil {
		return m.ScheduledTime
	}
	return nil
}

func (m *PollActivityTaskQueueResponse) GetScheduleToCloseTimeout() *time.Duration {
	if m != nil {
		return m.ScheduleToCloseTimeout
	}
	return nil
}

func (m *PollActivityTaskQueueResponse) GetStartedTime() *time.Time {
	if m != nil {
		return m.StartedTime
	}
	return nil
}

func (m *PollActivityTaskQueueResponse) GetStartToCloseTimeout() *time.Duration {
	if m != nil {
		return m.StartToCloseTimeout
	}
	return nil
}

func (m *PollActivityTaskQueueResponse) GetHeartbeatTimeout() *time.Duration {
	if m != nil {
		return m.HeartbeatTimeout
	}
	return nil
}

func (m *PollActivityTaskQueueResponse) GetAttempt() int32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *PollActivityTaskQueueResponse) GetCurrentAttemptScheduledTime() *time.Time {
	if m != nil {
		return m.CurrentAttemptScheduledTime
	}
	return nil
}

func (m *PollActivityTaskQueueResponse) GetHeartbeatDetails() *v11.Payloads {
	if m != nil {
		return m.HeartbeatDetails
	}
	return nil
}

func (m *PollActivityTaskQueueResponse) GetWorkflowType() *v11.WorkflowType {
	if m != nil {
		return m.WorkflowType
	}
	return nil
}

func (m *PollActivityTaskQueueResponse) GetWorkflowNamespace() string {
	if m != nil {
		return m.WorkflowNamespace
	}
	return ""
}

func (m *PollActivityTaskQueueResponse) GetHeader() *v11.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type AddWorkflowTaskRequest struct {
	NamespaceId      string                 `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	Execution        *v11.WorkflowExecution `protobuf:"bytes,2,opt,name=execution,proto3" json:"execution,omitempty"`
	TaskQueue        *v14.TaskQueue         `protobuf:"bytes,3,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	ScheduledEventId int64                  `protobuf:"varint,4,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	// (-- api-linter: core::0140::prepositions=disabled
	//     aip.dev/not-precedent: "to" is used to indicate interval. --)
	ScheduleToStartTimeout *time.Duration   `protobuf:"bytes,5,opt,name=schedule_to_start_timeout,json=scheduleToStartTimeout,proto3,stdduration" json:"schedule_to_start_timeout,omitempty"`
	ForwardedSource        string           `protobuf:"bytes,6,opt,name=forwarded_source,json=forwardedSource,proto3" json:"forwarded_source,omitempty"`
	Source                 v17.TaskSource   `protobuf:"varint,7,opt,name=source,proto3,enum=temporal.server.api.enums.v1.TaskSource" json:"source,omitempty"`
	Clock                  *v18.VectorClock `protobuf:"bytes,9,opt,name=clock,proto3" json:"clock,omitempty"`
	// How this task should be directed by matching. (Missing means the default
	// for TaskVersionDirective, which is unversioned.)
	VersionDirective *v19.TaskVersionDirective `protobuf:"bytes,10,opt,name=version_directive,json=versionDirective,proto3" json:"version_directive,omitempty"`
}

func (m *AddWorkflowTaskRequest) Reset()      { *m = AddWorkflowTaskRequest{} }
func (*AddWorkflowTaskRequest) ProtoMessage() {}
func (*AddWorkflowTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{4}
}
func (m *AddWorkflowTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWorkflowTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWorkflowTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWorkflowTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWorkflowTaskRequest.Merge(m, src)
}
func (m *AddWorkflowTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddWorkflowTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWorkflowTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddWorkflowTaskRequest proto.InternalMessageInfo

func (m *AddWorkflowTaskRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *AddWorkflowTaskRequest) GetExecution() *v11.WorkflowExecution {
	if m != nil {
		return m.Execution
	}
	return nil
}

func (m *AddWorkflowTaskRequest) GetTaskQueue() *v14.TaskQueue {
	if m != nil {
		return m.TaskQueue
	}
	return nil
}

func (m *AddWorkflowTaskRequest) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *AddWorkflowTaskRequest) GetScheduleToStartTimeout() *time.Duration {
	if m != nil {
		return m.ScheduleToStartTimeout
	}
	return nil
}

func (m *AddWorkflowTaskRequest) GetForwardedSource() string {
	if m != nil {
		return m.ForwardedSource
	}
	return ""
}

func (m *AddWorkflowTaskRequest) GetSource() v17.TaskSource {
	if m != nil {
		return m.Source
	}
	return v17.TASK_SOURCE_UNSPECIFIED
}

func (m *AddWorkflowTaskRequest) GetClock() *v18.VectorClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

func (m *AddWorkflowTaskRequest) GetVersionDirective() *v19.TaskVersionDirective {
	if m != nil {
		return m.VersionDirective
	}
	return nil
}

type AddWorkflowTaskResponse struct {
}

func (m *AddWorkflowTaskResponse) Reset()      { *m = AddWorkflowTaskResponse{} }
func (*AddWorkflowTaskResponse) ProtoMessage() {}
func (*AddWorkflowTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{5}
}
func (m *AddWorkflowTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddWorkflowTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddWorkflowTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddWorkflowTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddWorkflowTaskResponse.Merge(m, src)
}
func (m *AddWorkflowTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddWorkflowTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddWorkflowTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddWorkflowTaskResponse proto.InternalMessageInfo

type AddActivityTaskRequest struct {
	NamespaceId      string                 `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	Execution        *v11.WorkflowExecution `protobuf:"bytes,2,opt,name=execution,proto3" json:"execution,omitempty"`
	TaskQueue        *v14.TaskQueue         `protobuf:"bytes,4,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	ScheduledEventId int64                  `protobuf:"varint,5,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	// (-- api-linter: core::0140::prepositions=disabled
	//     aip.dev/not-precedent: "to" is used to indicate interval. --)
	ScheduleToStartTimeout *time.Duration   `protobuf:"bytes,6,opt,name=schedule_to_start_timeout,json=scheduleToStartTimeout,proto3,stdduration" json:"schedule_to_start_timeout,omitempty"`
	ForwardedSource        string           `protobuf:"bytes,7,opt,name=forwarded_source,json=forwardedSource,proto3" json:"forwarded_source,omitempty"`
	Source                 v17.TaskSource   `protobuf:"varint,8,opt,name=source,proto3,enum=temporal.server.api.enums.v1.TaskSource" json:"source,omitempty"`
	Clock                  *v18.VectorClock `protobuf:"bytes,9,opt,name=clock,proto3" json:"clock,omitempty"`
	// How this task should be directed by matching. (Missing means the default
	// for TaskVersionDirective, which is unversioned.)
	VersionDirective *v19.TaskVersionDirective `protobuf:"bytes,10,opt,name=version_directive,json=versionDirective,proto3" json:"version_directive,omitempty"`
}

func (m *AddActivityTaskRequest) Reset()      { *m = AddActivityTaskRequest{} }
func (*AddActivityTaskRequest) ProtoMessage() {}
func (*AddActivityTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{6}
}
func (m *AddActivityTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddActivityTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddActivityTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddActivityTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddActivityTaskRequest.Merge(m, src)
}
func (m *AddActivityTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddActivityTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddActivityTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddActivityTaskRequest proto.InternalMessageInfo

func (m *AddActivityTaskRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *AddActivityTaskRequest) GetExecution() *v11.WorkflowExecution {
	if m != nil {
		return m.Execution
	}
	return nil
}

func (m *AddActivityTaskRequest) GetTaskQueue() *v14.TaskQueue {
	if m != nil {
		return m.TaskQueue
	}
	return nil
}

func (m *AddActivityTaskRequest) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *AddActivityTaskRequest) GetScheduleToStartTimeout() *time.Duration {
	if m != nil {
		return m.ScheduleToStartTimeout
	}
	return nil
}

func (m *AddActivityTaskRequest) GetForwardedSource() string {
	if m != nil {
		return m.ForwardedSource
	}
	return ""
}

func (m *AddActivityTaskRequest) GetSource() v17.TaskSource {
	if m != nil {
		return m.Source
	}
	return v17.TASK_SOURCE_UNSPECIFIED
}

func (m *AddActivityTaskRequest) GetClock() *v18.VectorClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

func (m *AddActivityTaskRequest) GetVersionDirective() *v19.TaskVersionDirective {
	if m != nil {
		return m.VersionDirective
	}
	return nil
}

type AddActivityTaskResponse struct {
}

func (m *AddActivityTaskResponse) Reset()      { *m = AddActivityTaskResponse{} }
func (*AddActivityTaskResponse) ProtoMessage() {}
func (*AddActivityTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{7}
}
func (m *AddActivityTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddActivityTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddActivityTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddActivityTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddActivityTaskResponse.Merge(m, src)
}
func (m *AddActivityTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddActivityTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddActivityTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddActivityTaskResponse proto.InternalMessageInfo

type QueryWorkflowRequest struct {
	NamespaceId     string                   `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	TaskQueue       *v14.TaskQueue           `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	QueryRequest    *v1.QueryWorkflowRequest `protobuf:"bytes,3,opt,name=query_request,json=queryRequest,proto3" json:"query_request,omitempty"`
	ForwardedSource string                   `protobuf:"bytes,4,opt,name=forwarded_source,json=forwardedSource,proto3" json:"forwarded_source,omitempty"`
	// How this task should be directed by matching. (Missing means the default
	// for TaskVersionDirective, which is unversioned.)
	VersionDirective *v19.TaskVersionDirective `protobuf:"bytes,5,opt,name=version_directive,json=versionDirective,proto3" json:"version_directive,omitempty"`
}

func (m *QueryWorkflowRequest) Reset()      { *m = QueryWorkflowRequest{} }
func (*QueryWorkflowRequest) ProtoMessage() {}
func (*QueryWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{8}
}
func (m *QueryWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkflowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkflowRequest.Merge(m, src)
}
func (m *QueryWorkflowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkflowRequest proto.InternalMessageInfo

func (m *QueryWorkflowRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *QueryWorkflowRequest) GetTaskQueue() *v14.TaskQueue {
	if m != nil {
		return m.TaskQueue
	}
	return nil
}

func (m *QueryWorkflowRequest) GetQueryRequest() *v1.QueryWorkflowRequest {
	if m != nil {
		return m.QueryRequest
	}
	return nil
}

func (m *QueryWorkflowRequest) GetForwardedSource() string {
	if m != nil {
		return m.ForwardedSource
	}
	return ""
}

func (m *QueryWorkflowRequest) GetVersionDirective() *v19.TaskVersionDirective {
	if m != nil {
		return m.VersionDirective
	}
	return nil
}

type QueryWorkflowResponse struct {
	QueryResult   *v11.Payloads      `protobuf:"bytes,1,opt,name=query_result,json=queryResult,proto3" json:"query_result,omitempty"`
	QueryRejected *v12.QueryRejected `protobuf:"bytes,2,opt,name=query_rejected,json=queryRejected,proto3" json:"query_rejected,omitempty"`
}

func (m *QueryWorkflowResponse) Reset()      { *m = QueryWorkflowResponse{} }
func (*QueryWorkflowResponse) ProtoMessage() {}
func (*QueryWorkflowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{9}
}
func (m *QueryWorkflowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWorkflowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWorkflowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWorkflowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWorkflowResponse.Merge(m, src)
}
func (m *QueryWorkflowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWorkflowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWorkflowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWorkflowResponse proto.InternalMessageInfo

func (m *QueryWorkflowResponse) GetQueryResult() *v11.Payloads {
	if m != nil {
		return m.QueryResult
	}
	return nil
}

func (m *QueryWorkflowResponse) GetQueryRejected() *v12.QueryRejected {
	if m != nil {
		return m.QueryRejected
	}
	return nil
}

type RespondQueryTaskCompletedRequest struct {
	NamespaceId      string                               `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	TaskQueue        *v14.TaskQueue                       `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	TaskId           string                               `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	CompletedRequest *v1.RespondQueryTaskCompletedRequest `protobuf:"bytes,4,opt,name=completed_request,json=completedRequest,proto3" json:"completed_request,omitempty"`
}

func (m *RespondQueryTaskCompletedRequest) Reset()      { *m = RespondQueryTaskCompletedRequest{} }
func (*RespondQueryTaskCompletedRequest) ProtoMessage() {}
func (*RespondQueryTaskCompletedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{10}
}
func (m *RespondQueryTaskCompletedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondQueryTaskCompletedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondQueryTaskCompletedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondQueryTaskCompletedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondQueryTaskCompletedRequest.Merge(m, src)
}
func (m *RespondQueryTaskCompletedRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondQueryTaskCompletedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondQueryTaskCompletedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondQueryTaskCompletedRequest proto.InternalMessageInfo

func (m *RespondQueryTaskCompletedRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *RespondQueryTaskCompletedRequest) GetTaskQueue() *v14.TaskQueue {
	if m != nil {
		return m.TaskQueue
	}
	return nil
}

func (m *RespondQueryTaskCompletedRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *RespondQueryTaskCompletedRequest) GetCompletedRequest() *v1.RespondQueryTaskCompletedRequest {
	if m != nil {
		return m.CompletedRequest
	}
	return nil
}

type RespondQueryTaskCompletedResponse struct {
}

func (m *RespondQueryTaskCompletedResponse) Reset()      { *m = RespondQueryTaskCompletedResponse{} }
func (*RespondQueryTaskCompletedResponse) ProtoMessage() {}
func (*RespondQueryTaskCompletedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{11}
}
func (m *RespondQueryTaskCompletedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondQueryTaskCompletedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondQueryTaskCompletedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondQueryTaskCompletedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondQueryTaskCompletedResponse.Merge(m, src)
}
func (m *RespondQueryTaskCompletedResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondQueryTaskCompletedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondQueryTaskCompletedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondQueryTaskCompletedResponse proto.InternalMessageInfo

type CancelOutstandingPollRequest struct {
	NamespaceId   string             `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	TaskQueueType v110.TaskQueueType `protobuf:"varint,2,opt,name=task_queue_type,json=taskQueueType,proto3,enum=temporal.api.enums.v1.TaskQueueType" json:"task_queue_type,omitempty"`
	TaskQueue     *v14.TaskQueue     `protobuf:"bytes,3,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	PollerId      string             `protobuf:"bytes,4,opt,name=poller_id,json=pollerId,proto3" json:"poller_id,omitempty"`
}

func (m *CancelOutstandingPollRequest) Reset()      { *m = CancelOutstandingPollRequest{} }
func (*CancelOutstandingPollRequest) ProtoMessage() {}
func (*CancelOutstandingPollRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{12}
}
func (m *CancelOutstandingPollRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelOutstandingPollRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelOutstandingPollRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelOutstandingPollRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelOutstandingPollRequest.Merge(m, src)
}
func (m *CancelOutstandingPollRequest) XXX_Size() int {
	return m.Size()
}
func (m *CancelOutstandingPollRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelOutstandingPollRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelOutstandingPollRequest proto.InternalMessageInfo

func (m *CancelOutstandingPollRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *CancelOutstandingPollRequest) GetTaskQueueType() v110.TaskQueueType {
	if m != nil {
		return m.TaskQueueType
	}
	return v110.TASK_QUEUE_TYPE_UNSPECIFIED
}

func (m *CancelOutstandingPollRequest) GetTaskQueue() *v14.TaskQueue {
	if m != nil {
		return m.TaskQueue
	}
	return nil
}

func (m *CancelOutstandingPollRequest) GetPollerId() string {
	if m != nil {
		return m.PollerId
	}
	return ""
}

type CancelOutstandingPollResponse struct {
}

func (m *CancelOutstandingPollResponse) Reset()      { *m = CancelOutstandingPollResponse{} }
func (*CancelOutstandingPollResponse) ProtoMessage() {}
func (*CancelOutstandingPollResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{13}
}
func (m *CancelOutstandingPollResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelOutstandingPollResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelOutstandingPollResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelOutstandingPollResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelOutstandingPollResponse.Merge(m, src)
}
func (m *CancelOutstandingPollResponse) XXX_Size() int {
	return m.Size()
}
func (m *CancelOutstandingPollResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelOutstandingPollResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CancelOutstandingPollResponse proto.InternalMessageInfo

type DescribeTaskQueueRequest struct {
	NamespaceId string                       `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	DescRequest *v1.DescribeTaskQueueRequest `protobuf:"bytes,2,opt,name=desc_request,json=descRequest,proto3" json:"desc_request,omitempty"`
}

func (m *DescribeTaskQueueRequest) Reset()      { *m = DescribeTaskQueueRequest{} }
func (*DescribeTaskQueueRequest) ProtoMessage() {}
func (*DescribeTaskQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{14}
}
func (m *DescribeTaskQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DescribeTaskQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DescribeTaskQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DescribeTaskQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeTaskQueueRequest.Merge(m, src)
}
func (m *DescribeTaskQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *DescribeTaskQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeTaskQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeTaskQueueRequest proto.InternalMessageInfo

func (m *DescribeTaskQueueRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *DescribeTaskQueueRequest) GetDescRequest() *v1.DescribeTaskQueueRequest {
	if m != nil {
		return m.DescRequest
	}
	return nil
}

type DescribeTaskQueueResponse struct {
	Pollers         []*v14.PollerInfo    `protobuf:"bytes,1,rep,name=pollers,proto3" json:"pollers,omitempty"`
	TaskQueueStatus *v14.TaskQueueStatus `protobuf:"bytes,2,opt,name=task_queue_status,json=taskQueueStatus,proto3" json:"task_queue_status,omitempty"`
}

func (m *DescribeTaskQueueResponse) Reset()      { *m = DescribeTaskQueueResponse{} }
func (*DescribeTaskQueueResponse) ProtoMessage() {}
func (*DescribeTaskQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{15}
}
func (m *DescribeTaskQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DescribeTaskQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DescribeTaskQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DescribeTaskQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeTaskQueueResponse.Merge(m, src)
}
func (m *DescribeTaskQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *DescribeTaskQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeTaskQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeTaskQueueResponse proto.InternalMessageInfo

func (m *DescribeTaskQueueResponse) GetPollers() []*v14.PollerInfo {
	if m != nil {
		return m.Pollers
	}
	return nil
}

func (m *DescribeTaskQueueResponse) GetTaskQueueStatus() *v14.TaskQueueStatus {
	if m != nil {
		return m.TaskQueueStatus
	}
	return nil
}

type ListTaskQueuePartitionsRequest struct {
	Namespace   string         `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	NamespaceId string         `protobuf:"bytes,3,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	TaskQueue   *v14.TaskQueue `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
}

func (m *ListTaskQueuePartitionsRequest) Reset()      { *m = ListTaskQueuePartitionsRequest{} }
func (*ListTaskQueuePartitionsRequest) ProtoMessage() {}
func (*ListTaskQueuePartitionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{16}
}
func (m *ListTaskQueuePartitionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTaskQueuePartitionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTaskQueuePartitionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTaskQueuePartitionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTaskQueuePartitionsRequest.Merge(m, src)
}
func (m *ListTaskQueuePartitionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTaskQueuePartitionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTaskQueuePartitionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTaskQueuePartitionsRequest proto.InternalMessageInfo

func (m *ListTaskQueuePartitionsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListTaskQueuePartitionsRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *ListTaskQueuePartitionsRequest) GetTaskQueue() *v14.TaskQueue {
	if m != nil {
		return m.TaskQueue
	}
	return nil
}

type ListTaskQueuePartitionsResponse struct {
	ActivityTaskQueuePartitions []*v14.TaskQueuePartitionMetadata `protobuf:"bytes,1,rep,name=activity_task_queue_partitions,json=activityTaskQueuePartitions,proto3" json:"activity_task_queue_partitions,omitempty"`
	WorkflowTaskQueuePartitions []*v14.TaskQueuePartitionMetadata `protobuf:"bytes,2,rep,name=workflow_task_queue_partitions,json=workflowTaskQueuePartitions,proto3" json:"workflow_task_queue_partitions,omitempty"`
}

func (m *ListTaskQueuePartitionsResponse) Reset()      { *m = ListTaskQueuePartitionsResponse{} }
func (*ListTaskQueuePartitionsResponse) ProtoMessage() {}
func (*ListTaskQueuePartitionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{17}
}
func (m *ListTaskQueuePartitionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTaskQueuePartitionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTaskQueuePartitionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTaskQueuePartitionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTaskQueuePartitionsResponse.Merge(m, src)
}
func (m *ListTaskQueuePartitionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTaskQueuePartitionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTaskQueuePartitionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTaskQueuePartitionsResponse proto.InternalMessageInfo

func (m *ListTaskQueuePartitionsResponse) GetActivityTaskQueuePartitions() []*v14.TaskQueuePartitionMetadata {
	if m != nil {
		return m.ActivityTaskQueuePartitions
	}
	return nil
}

func (m *ListTaskQueuePartitionsResponse) GetWorkflowTaskQueuePartitions() []*v14.TaskQueuePartitionMetadata {
	if m != nil {
		return m.WorkflowTaskQueuePartitions
	}
	return nil
}

// (-- api-linter: core::0134::request-mask-required=disabled
//
//	aip.dev/not-precedent: UpdateWorkerBuildIdCompatibilityRequest doesn't follow Google API format --)
//
// (-- api-linter: core::0134::request-resource-required=disabled
//
//	aip.dev/not-precedent: UpdateWorkerBuildIdCompatibilityRequest RPC doesn't follow Google API format. --)
type UpdateWorkerBuildIdCompatibilityRequest struct {
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	TaskQueue   string `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// Types that are valid to be assigned to Operation:
	//	*UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest_
	//	*UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds_
	//	*UpdateWorkerBuildIdCompatibilityRequest_PersistUnknownBuildId
	Operation isUpdateWorkerBuildIdCompatibilityRequest_Operation `protobuf_oneof:"operation"`
}

func (m *UpdateWorkerBuildIdCompatibilityRequest) Reset() {
	*m = UpdateWorkerBuildIdCompatibilityRequest{}
}
func (*UpdateWorkerBuildIdCompatibilityRequest) ProtoMessage() {}
func (*UpdateWorkerBuildIdCompatibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{18}
}
func (m *UpdateWorkerBuildIdCompatibilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWorkerBuildIdCompatibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWorkerBuildIdCompatibilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWorkerBuildIdCompatibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWorkerBuildIdCompatibilityRequest.Merge(m, src)
}
func (m *UpdateWorkerBuildIdCompatibilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWorkerBuildIdCompatibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWorkerBuildIdCompatibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWorkerBuildIdCompatibilityRequest proto.InternalMessageInfo

type isUpdateWorkerBuildIdCompatibilityRequest_Operation interface {
	isUpdateWorkerBuildIdCompatibilityRequest_Operation()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest_ struct {
	ApplyPublicRequest *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest `protobuf:"bytes,3,opt,name=apply_public_request,json=applyPublicRequest,proto3,oneof" json:"apply_public_request,omitempty"`
}
type UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds_ struct {
	RemoveBuildIds *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds `protobuf:"bytes,4,opt,name=remove_build_ids,json=removeBuildIds,proto3,oneof" json:"remove_build_ids,omitempty"`
}
type UpdateWorkerBuildIdCompatibilityRequest_PersistUnknownBuildId struct {
	PersistUnknownBuildId string `protobuf:"bytes,5,opt,name=persist_unknown_build_id,json=persistUnknownBuildId,proto3,oneof" json:"persist_unknown_build_id,omitempty"`
}

func (*UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest_) isUpdateWorkerBuildIdCompatibilityRequest_Operation() {
}
func (*UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds_) isUpdateWorkerBuildIdCompatibilityRequest_Operation() {
}
func (*UpdateWorkerBuildIdCompatibilityRequest_PersistUnknownBuildId) isUpdateWorkerBuildIdCompatibilityRequest_Operation() {
}

func (m *UpdateWorkerBuildIdCompatibilityRequest) GetOperation() isUpdateWorkerBuildIdCompatibilityRequest_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *UpdateWorkerBuildIdCompatibilityRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *UpdateWorkerBuildIdCompatibilityRequest) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

func (m *UpdateWorkerBuildIdCompatibilityRequest) GetApplyPublicRequest() *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest {
	if x, ok := m.GetOperation().(*UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest_); ok {
		return x.ApplyPublicRequest
	}
	return nil
}

func (m *UpdateWorkerBuildIdCompatibilityRequest) GetRemoveBuildIds() *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds {
	if x, ok := m.GetOperation().(*UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds_); ok {
		return x.RemoveBuildIds
	}
	return nil
}

func (m *UpdateWorkerBuildIdCompatibilityRequest) GetPersistUnknownBuildId() string {
	if x, ok := m.GetOperation().(*UpdateWorkerBuildIdCompatibilityRequest_PersistUnknownBuildId); ok {
		return x.PersistUnknownBuildId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpdateWorkerBuildIdCompatibilityRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest_)(nil),
		(*UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds_)(nil),
		(*UpdateWorkerBuildIdCompatibilityRequest_PersistUnknownBuildId)(nil),
	}
}

// Apply request from public API.
type UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest struct {
	Request *v1.UpdateWorkerBuildIdCompatibilityRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest) Reset() {
	*m = UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest{}
}
func (*UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest) ProtoMessage() {}
func (*UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{18, 0}
}
func (m *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest.Merge(m, src)
}
func (m *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest proto.InternalMessageInfo

func (m *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest) GetRequest() *v1.UpdateWorkerBuildIdCompatibilityRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// Remove build ids (internal only)
type UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds struct {
	// The last known user data version, used to prevent concurrent updates.
	KnownUserDataVersion int64 `protobuf:"varint,1,opt,name=known_user_data_version,json=knownUserDataVersion,proto3" json:"known_user_data_version,omitempty"`
	// List of build ids to remove.
	BuildIds []string `protobuf:"bytes,2,rep,name=build_ids,json=buildIds,proto3" json:"build_ids,omitempty"`
}

func (m *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds) Reset() {
	*m = UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds{}
}
func (*UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds) ProtoMessage() {}
func (*UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{18, 1}
}
func (m *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds.Merge(m, src)
}
func (m *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds proto.InternalMessageInfo

func (m *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds) GetKnownUserDataVersion() int64 {
	if m != nil {
		return m.KnownUserDataVersion
	}
	return 0
}

func (m *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds) GetBuildIds() []string {
	if m != nil {
		return m.BuildIds
	}
	return nil
}

type UpdateWorkerBuildIdCompatibilityResponse struct {
}

func (m *UpdateWorkerBuildIdCompatibilityResponse) Reset() {
	*m = UpdateWorkerBuildIdCompatibilityResponse{}
}
func (*UpdateWorkerBuildIdCompatibilityResponse) ProtoMessage() {}
func (*UpdateWorkerBuildIdCompatibilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{19}
}
func (m *UpdateWorkerBuildIdCompatibilityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWorkerBuildIdCompatibilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWorkerBuildIdCompatibilityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWorkerBuildIdCompatibilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWorkerBuildIdCompatibilityResponse.Merge(m, src)
}
func (m *UpdateWorkerBuildIdCompatibilityResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWorkerBuildIdCompatibilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWorkerBuildIdCompatibilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWorkerBuildIdCompatibilityResponse proto.InternalMessageInfo

type GetWorkerBuildIdCompatibilityRequest struct {
	NamespaceId string                                   `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	Request     *v1.GetWorkerBuildIdCompatibilityRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *GetWorkerBuildIdCompatibilityRequest) Reset()      { *m = GetWorkerBuildIdCompatibilityRequest{} }
func (*GetWorkerBuildIdCompatibilityRequest) ProtoMessage() {}
func (*GetWorkerBuildIdCompatibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{20}
}
func (m *GetWorkerBuildIdCompatibilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWorkerBuildIdCompatibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWorkerBuildIdCompatibilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWorkerBuildIdCompatibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkerBuildIdCompatibilityRequest.Merge(m, src)
}
func (m *GetWorkerBuildIdCompatibilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetWorkerBuildIdCompatibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkerBuildIdCompatibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkerBuildIdCompatibilityRequest proto.InternalMessageInfo

func (m *GetWorkerBuildIdCompatibilityRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *GetWorkerBuildIdCompatibilityRequest) GetRequest() *v1.GetWorkerBuildIdCompatibilityRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type GetWorkerBuildIdCompatibilityResponse struct {
	Response *v1.GetWorkerBuildIdCompatibilityResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *GetWorkerBuildIdCompatibilityResponse) Reset()      { *m = GetWorkerBuildIdCompatibilityResponse{} }
func (*GetWorkerBuildIdCompatibilityResponse) ProtoMessage() {}
func (*GetWorkerBuildIdCompatibilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{21}
}
func (m *GetWorkerBuildIdCompatibilityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetWorkerBuildIdCompatibilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetWorkerBuildIdCompatibilityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetWorkerBuildIdCompatibilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWorkerBuildIdCompatibilityResponse.Merge(m, src)
}
func (m *GetWorkerBuildIdCompatibilityResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetWorkerBuildIdCompatibilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWorkerBuildIdCompatibilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetWorkerBuildIdCompatibilityResponse proto.InternalMessageInfo

func (m *GetWorkerBuildIdCompatibilityResponse) GetResponse() *v1.GetWorkerBuildIdCompatibilityResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type GetTaskQueueUserDataRequest struct {
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The task queue to fetch data from. The task queue is always considered as a normal
	// queue, since sticky queues have no user data.
	TaskQueue string `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// Normally task queue type should always be TASK_QUEUE_TYPE_WORKFLOW here, but querying
	// activity task queues is useful for testing.
	TaskQueueType v110.TaskQueueType `protobuf:"varint,5,opt,name=task_queue_type,json=taskQueueType,proto3,enum=temporal.api.enums.v1.TaskQueueType" json:"task_queue_type,omitempty"`
	// The value of the last known user data version.
	// If the requester has no data, it should set this to 0.
	// This value must not be set to a negative number (note that our linter suggests avoiding uint64).
	LastKnownUserDataVersion int64 `protobuf:"varint,3,opt,name=last_known_user_data_version,json=lastKnownUserDataVersion,proto3" json:"last_known_user_data_version,omitempty"`
	// If set and last_known_user_data_version is the current version, block until new data is
	// available (or timeout).
	WaitNewData bool `protobuf:"varint,4,opt,name=wait_new_data,json=waitNewData,proto3" json:"wait_new_data,omitempty"`
}

func (m *GetTaskQueueUserDataRequest) Reset()      { *m = GetTaskQueueUserDataRequest{} }
func (*GetTaskQueueUserDataRequest) ProtoMessage() {}
func (*GetTaskQueueUserDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{22}
}
func (m *GetTaskQueueUserDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTaskQueueUserDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTaskQueueUserDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTaskQueueUserDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskQueueUserDataRequest.Merge(m, src)
}
func (m *GetTaskQueueUserDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTaskQueueUserDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskQueueUserDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskQueueUserDataRequest proto.InternalMessageInfo

func (m *GetTaskQueueUserDataRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *GetTaskQueueUserDataRequest) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

func (m *GetTaskQueueUserDataRequest) GetTaskQueueType() v110.TaskQueueType {
	if m != nil {
		return m.TaskQueueType
	}
	return v110.TASK_QUEUE_TYPE_UNSPECIFIED
}

func (m *GetTaskQueueUserDataRequest) GetLastKnownUserDataVersion() int64 {
	if m != nil {
		return m.LastKnownUserDataVersion
	}
	return 0
}

func (m *GetTaskQueueUserDataRequest) GetWaitNewData() bool {
	if m != nil {
		return m.WaitNewData
	}
	return false
}

type GetTaskQueueUserDataResponse struct {
	// Whether this task queue has any stored user data
	TaskQueueHasUserData bool `protobuf:"varint,1,opt,name=task_queue_has_user_data,json=taskQueueHasUserData,proto3" json:"task_queue_has_user_data,omitempty"`
	// Versioned user data, set if the task queue has user data and the request's last_known_user_data_version is less
	// than the version cached in the root partition.
	UserData *v111.VersionedTaskQueueUserData `protobuf:"bytes,2,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
}

func (m *GetTaskQueueUserDataResponse) Reset()      { *m = GetTaskQueueUserDataResponse{} }
func (*GetTaskQueueUserDataResponse) ProtoMessage() {}
func (*GetTaskQueueUserDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{23}
}
func (m *GetTaskQueueUserDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTaskQueueUserDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTaskQueueUserDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTaskQueueUserDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskQueueUserDataResponse.Merge(m, src)
}
func (m *GetTaskQueueUserDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTaskQueueUserDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskQueueUserDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskQueueUserDataResponse proto.InternalMessageInfo

func (m *GetTaskQueueUserDataResponse) GetTaskQueueHasUserData() bool {
	if m != nil {
		return m.TaskQueueHasUserData
	}
	return false
}

func (m *GetTaskQueueUserDataResponse) GetUserData() *v111.VersionedTaskQueueUserData {
	if m != nil {
		return m.UserData
	}
	return nil
}

type ApplyTaskQueueUserDataReplicationEventRequest struct {
	NamespaceId string                  `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	TaskQueue   string                  `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	UserData    *v111.TaskQueueUserData `protobuf:"bytes,3,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
}

func (m *ApplyTaskQueueUserDataReplicationEventRequest) Reset() {
	*m = ApplyTaskQueueUserDataReplicationEventRequest{}
}
func (*ApplyTaskQueueUserDataReplicationEventRequest) ProtoMessage() {}
func (*ApplyTaskQueueUserDataReplicationEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{24}
}
func (m *ApplyTaskQueueUserDataReplicationEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyTaskQueueUserDataReplicationEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyTaskQueueUserDataReplicationEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyTaskQueueUserDataReplicationEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyTaskQueueUserDataReplicationEventRequest.Merge(m, src)
}
func (m *ApplyTaskQueueUserDataReplicationEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *ApplyTaskQueueUserDataReplicationEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyTaskQueueUserDataReplicationEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyTaskQueueUserDataReplicationEventRequest proto.InternalMessageInfo

func (m *ApplyTaskQueueUserDataReplicationEventRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *ApplyTaskQueueUserDataReplicationEventRequest) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

func (m *ApplyTaskQueueUserDataReplicationEventRequest) GetUserData() *v111.TaskQueueUserData {
	if m != nil {
		return m.UserData
	}
	return nil
}

type ApplyTaskQueueUserDataReplicationEventResponse struct {
}

func (m *ApplyTaskQueueUserDataReplicationEventResponse) Reset() {
	*m = ApplyTaskQueueUserDataReplicationEventResponse{}
}
func (*ApplyTaskQueueUserDataReplicationEventResponse) ProtoMessage() {}
func (*ApplyTaskQueueUserDataReplicationEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{25}
}
func (m *ApplyTaskQueueUserDataReplicationEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplyTaskQueueUserDataReplicationEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplyTaskQueueUserDataReplicationEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApplyTaskQueueUserDataReplicationEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyTaskQueueUserDataReplicationEventResponse.Merge(m, src)
}
func (m *ApplyTaskQueueUserDataReplicationEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *ApplyTaskQueueUserDataReplicationEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyTaskQueueUserDataReplicationEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyTaskQueueUserDataReplicationEventResponse proto.InternalMessageInfo

type GetBuildIdTaskQueueMappingRequest struct {
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	BuildId     string `protobuf:"bytes,2,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
}

func (m *GetBuildIdTaskQueueMappingRequest) Reset()      { *m = GetBuildIdTaskQueueMappingRequest{} }
func (*GetBuildIdTaskQueueMappingRequest) ProtoMessage() {}
func (*GetBuildIdTaskQueueMappingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{26}
}
func (m *GetBuildIdTaskQueueMappingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBuildIdTaskQueueMappingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBuildIdTaskQueueMappingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBuildIdTaskQueueMappingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBuildIdTaskQueueMappingRequest.Merge(m, src)
}
func (m *GetBuildIdTaskQueueMappingRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBuildIdTaskQueueMappingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBuildIdTaskQueueMappingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBuildIdTaskQueueMappingRequest proto.InternalMessageInfo

func (m *GetBuildIdTaskQueueMappingRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *GetBuildIdTaskQueueMappingRequest) GetBuildId() string {
	if m != nil {
		return m.BuildId
	}
	return ""
}

type GetBuildIdTaskQueueMappingResponse struct {
	TaskQueues []string `protobuf:"bytes,1,rep,name=task_queues,json=taskQueues,proto3" json:"task_queues,omitempty"`
}

func (m *GetBuildIdTaskQueueMappingResponse) Reset()      { *m = GetBuildIdTaskQueueMappingResponse{} }
func (*GetBuildIdTaskQueueMappingResponse) ProtoMessage() {}
func (*GetBuildIdTaskQueueMappingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{27}
}
func (m *GetBuildIdTaskQueueMappingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBuildIdTaskQueueMappingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBuildIdTaskQueueMappingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBuildIdTaskQueueMappingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBuildIdTaskQueueMappingResponse.Merge(m, src)
}
func (m *GetBuildIdTaskQueueMappingResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBuildIdTaskQueueMappingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBuildIdTaskQueueMappingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBuildIdTaskQueueMappingResponse proto.InternalMessageInfo

func (m *GetBuildIdTaskQueueMappingResponse) GetTaskQueues() []string {
	if m != nil {
		return m.TaskQueues
	}
	return nil
}

type ForceUnloadTaskQueueRequest struct {
	NamespaceId   string             `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	TaskQueue     string             `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	TaskQueueType v110.TaskQueueType `protobuf:"varint,3,opt,name=task_queue_type,json=taskQueueType,proto3,enum=temporal.api.enums.v1.TaskQueueType" json:"task_queue_type,omitempty"`
}

func (m *ForceUnloadTaskQueueRequest) Reset()      { *m = ForceUnloadTaskQueueRequest{} }
func (*ForceUnloadTaskQueueRequest) ProtoMessage() {}
func (*ForceUnloadTaskQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{28}
}
func (m *ForceUnloadTaskQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForceUnloadTaskQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForceUnloadTaskQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForceUnloadTaskQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForceUnloadTaskQueueRequest.Merge(m, src)
}
func (m *ForceUnloadTaskQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *ForceUnloadTaskQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ForceUnloadTaskQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ForceUnloadTaskQueueRequest proto.InternalMessageInfo

func (m *ForceUnloadTaskQueueRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *ForceUnloadTaskQueueRequest) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

func (m *ForceUnloadTaskQueueRequest) GetTaskQueueType() v110.TaskQueueType {
	if m != nil {
		return m.TaskQueueType
	}
	return v110.TASK_QUEUE_TYPE_UNSPECIFIED
}

type ForceUnloadTaskQueueResponse struct {
	WasLoaded bool `protobuf:"varint,1,opt,name=was_loaded,json=wasLoaded,proto3" json:"was_loaded,omitempty"`
}

func (m *ForceUnloadTaskQueueResponse) Reset()      { *m = ForceUnloadTaskQueueResponse{} }
func (*ForceUnloadTaskQueueResponse) ProtoMessage() {}
func (*ForceUnloadTaskQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{29}
}
func (m *ForceUnloadTaskQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForceUnloadTaskQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForceUnloadTaskQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForceUnloadTaskQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForceUnloadTaskQueueResponse.Merge(m, src)
}
func (m *ForceUnloadTaskQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *ForceUnloadTaskQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ForceUnloadTaskQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ForceUnloadTaskQueueResponse proto.InternalMessageInfo

func (m *ForceUnloadTaskQueueResponse) GetWasLoaded() bool {
	if m != nil {
		return m.WasLoaded
	}
	return false
}

// (-- api-linter: core::0134::request-mask-required=disabled
//
//	aip.dev/not-precedent: UpdateTaskQueueUserDataRequest doesn't follow Google API format --)
//
// (-- api-linter: core::0134::request-resource-required=disabled
//
//	aip.dev/not-precedent: UpdateTaskQueueUserDataRequest RPC doesn't follow Google API format. --)
type UpdateTaskQueueUserDataRequest struct {
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	TaskQueue   string `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// Versioned user data, set if the task queue has user data and the request's last_known_user_data_version is less
	// than the version cached in the root partition.
	UserData *v111.VersionedTaskQueueUserData `protobuf:"bytes,3,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
	// List of added build ids
	BuildIdsAdded []string `protobuf:"bytes,4,rep,name=build_ids_added,json=buildIdsAdded,proto3" json:"build_ids_added,omitempty"`
	// List of removed build ids
	BuildIdsRemoved []string `protobuf:"bytes,5,rep,name=build_ids_removed,json=buildIdsRemoved,proto3" json:"build_ids_removed,omitempty"`
}

func (m *UpdateTaskQueueUserDataRequest) Reset()      { *m = UpdateTaskQueueUserDataRequest{} }
func (*UpdateTaskQueueUserDataRequest) ProtoMessage() {}
func (*UpdateTaskQueueUserDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{30}
}
func (m *UpdateTaskQueueUserDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTaskQueueUserDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTaskQueueUserDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTaskQueueUserDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTaskQueueUserDataRequest.Merge(m, src)
}
func (m *UpdateTaskQueueUserDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTaskQueueUserDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTaskQueueUserDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTaskQueueUserDataRequest proto.InternalMessageInfo

func (m *UpdateTaskQueueUserDataRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *UpdateTaskQueueUserDataRequest) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

func (m *UpdateTaskQueueUserDataRequest) GetUserData() *v111.VersionedTaskQueueUserData {
	if m != nil {
		return m.UserData
	}
	return nil
}

func (m *UpdateTaskQueueUserDataRequest) GetBuildIdsAdded() []string {
	if m != nil {
		return m.BuildIdsAdded
	}
	return nil
}

func (m *UpdateTaskQueueUserDataRequest) GetBuildIdsRemoved() []string {
	if m != nil {
		return m.BuildIdsRemoved
	}
	return nil
}

type UpdateTaskQueueUserDataResponse struct {
}

func (m *UpdateTaskQueueUserDataResponse) Reset()      { *m = UpdateTaskQueueUserDataResponse{} }
func (*UpdateTaskQueueUserDataResponse) ProtoMessage() {}
func (*UpdateTaskQueueUserDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{31}
}
func (m *UpdateTaskQueueUserDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTaskQueueUserDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTaskQueueUserDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTaskQueueUserDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTaskQueueUserDataResponse.Merge(m, src)
}
func (m *UpdateTaskQueueUserDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTaskQueueUserDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTaskQueueUserDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTaskQueueUserDataResponse proto.InternalMessageInfo

type ReplicateTaskQueueUserDataRequest struct {
	NamespaceId string                  `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	TaskQueue   string                  `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	UserData    *v111.TaskQueueUserData `protobuf:"bytes,3,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
}

func (m *ReplicateTaskQueueUserDataRequest) Reset()      { *m = ReplicateTaskQueueUserDataRequest{} }
func (*ReplicateTaskQueueUserDataRequest) ProtoMessage() {}
func (*ReplicateTaskQueueUserDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{32}
}
func (m *ReplicateTaskQueueUserDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicateTaskQueueUserDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicateTaskQueueUserDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicateTaskQueueUserDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicateTaskQueueUserDataRequest.Merge(m, src)
}
func (m *ReplicateTaskQueueUserDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReplicateTaskQueueUserDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicateTaskQueueUserDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicateTaskQueueUserDataRequest proto.InternalMessageInfo

func (m *ReplicateTaskQueueUserDataRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *ReplicateTaskQueueUserDataRequest) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

func (m *ReplicateTaskQueueUserDataRequest) GetUserData() *v111.TaskQueueUserData {
	if m != nil {
		return m.UserData
	}
	return nil
}

type ReplicateTaskQueueUserDataResponse struct {
}

func (m *ReplicateTaskQueueUserDataResponse) Reset()      { *m = ReplicateTaskQueueUserDataResponse{} }
func (*ReplicateTaskQueueUserDataResponse) ProtoMessage() {}
func (*ReplicateTaskQueueUserDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{33}
}
func (m *ReplicateTaskQueueUserDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicateTaskQueueUserDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicateTaskQueueUserDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicateTaskQueueUserDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicateTaskQueueUserDataResponse.Merge(m, src)
}
func (m *ReplicateTaskQueueUserDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReplicateTaskQueueUserDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicateTaskQueueUserDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicateTaskQueueUserDataResponse proto.InternalMessageInfo

type DispatchNexusTaskRequest struct {
	NamespaceId string         `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	TaskQueue   *v14.TaskQueue `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// Nexus request extracted by the frontend and translated into Temporal API format.
	Request *v112.Request `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	// Non-empty if this task was forwarded from a child partition.
	ForwardedSource string `protobuf:"bytes,4,opt,name=forwarded_source,json=forwardedSource,proto3" json:"forwarded_source,omitempty"`
}

func (m *DispatchNexusTaskRequest) Reset()      { *m = DispatchNexusTaskRequest{} }
func (*DispatchNexusTaskRequest) ProtoMessage() {}
func (*DispatchNexusTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{34}
}
func (m *DispatchNexusTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DispatchNexusTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DispatchNexusTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DispatchNexusTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatchNexusTaskRequest.Merge(m, src)
}
func (m *DispatchNexusTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *DispatchNexusTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatchNexusTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DispatchNexusTaskRequest proto.InternalMessageInfo

func (m *DispatchNexusTaskRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *DispatchNexusTaskRequest) GetTaskQueue() *v14.TaskQueue {
	if m != nil {
		return m.TaskQueue
	}
	return nil
}

func (m *DispatchNexusTaskRequest) GetRequest() *v112.Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *DispatchNexusTaskRequest) GetForwardedSource() string {
	if m != nil {
		return m.ForwardedSource
	}
	return ""
}

type DispatchNexusTaskResponse struct {
	// Types that are valid to be assigned to Outcome:
	//	*DispatchNexusTaskResponse_HandlerError
	//	*DispatchNexusTaskResponse_Response
	Outcome isDispatchNexusTaskResponse_Outcome `protobuf_oneof:"outcome"`
}

func (m *DispatchNexusTaskResponse) Reset()      { *m = DispatchNexusTaskResponse{} }
func (*DispatchNexusTaskResponse) ProtoMessage() {}
func (*DispatchNexusTaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{35}
}
func (m *DispatchNexusTaskResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DispatchNexusTaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DispatchNexusTaskResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DispatchNexusTaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatchNexusTaskResponse.Merge(m, src)
}
func (m *DispatchNexusTaskResponse) XXX_Size() int {
	return m.Size()
}
func (m *DispatchNexusTaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatchNexusTaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DispatchNexusTaskResponse proto.InternalMessageInfo

type isDispatchNexusTaskResponse_Outcome interface {
	isDispatchNexusTaskResponse_Outcome()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DispatchNexusTaskResponse_HandlerError struct {
	HandlerError *v112.HandlerError `protobuf:"bytes,1,opt,name=handler_error,json=handlerError,proto3,oneof" json:"handler_error,omitempty"`
}
type DispatchNexusTaskResponse_Response struct {
	Response *v112.Response `protobuf:"bytes,2,opt,name=response,proto3,oneof" json:"response,omitempty"`
}

func (*DispatchNexusTaskResponse_HandlerError) isDispatchNexusTaskResponse_Outcome() {}
func (*DispatchNexusTaskResponse_Response) isDispatchNexusTaskResponse_Outcome()     {}

func (m *DispatchNexusTaskResponse) GetOutcome() isDispatchNexusTaskResponse_Outcome {
	if m != nil {
		return m.Outcome
	}
	return nil
}

func (m *DispatchNexusTaskResponse) GetHandlerError() *v112.HandlerError {
	if x, ok := m.GetOutcome().(*DispatchNexusTaskResponse_HandlerError); ok {
		return x.HandlerError
	}
	return nil
}

func (m *DispatchNexusTaskResponse) GetResponse() *v112.Response {
	if x, ok := m.GetOutcome().(*DispatchNexusTaskResponse_Response); ok {
		return x.Response
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DispatchNexusTaskResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DispatchNexusTaskResponse_HandlerError)(nil),
		(*DispatchNexusTaskResponse_Response)(nil),
	}
}

type PollNexusTaskQueueRequest struct {
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// A unique ID generated by the frontend for this request.
	PollerId string `protobuf:"bytes,2,opt,name=poller_id,json=pollerId,proto3" json:"poller_id,omitempty"`
	// Original WorkflowService poll request as received by the frontend.
	Request *v1.PollNexusTaskQueueRequest `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	// Non-empty if this poll was forwarded from a child partition.
	ForwardedSource string `protobuf:"bytes,4,opt,name=forwarded_source,json=forwardedSource,proto3" json:"forwarded_source,omitempty"`
}

func (m *PollNexusTaskQueueRequest) Reset()      { *m = PollNexusTaskQueueRequest{} }
func (*PollNexusTaskQueueRequest) ProtoMessage() {}
func (*PollNexusTaskQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{36}
}
func (m *PollNexusTaskQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollNexusTaskQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollNexusTaskQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollNexusTaskQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollNexusTaskQueueRequest.Merge(m, src)
}
func (m *PollNexusTaskQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *PollNexusTaskQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PollNexusTaskQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PollNexusTaskQueueRequest proto.InternalMessageInfo

func (m *PollNexusTaskQueueRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *PollNexusTaskQueueRequest) GetPollerId() string {
	if m != nil {
		return m.PollerId
	}
	return ""
}

func (m *PollNexusTaskQueueRequest) GetRequest() *v1.PollNexusTaskQueueRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *PollNexusTaskQueueRequest) GetForwardedSource() string {
	if m != nil {
		return m.ForwardedSource
	}
	return ""
}

type PollNexusTaskQueueResponse struct {
	// Response that should be delivered to the worker containing a request from DispatchNexusTaskRequest.
	Response *v1.PollNexusTaskQueueResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *PollNexusTaskQueueResponse) Reset()      { *m = PollNexusTaskQueueResponse{} }
func (*PollNexusTaskQueueResponse) ProtoMessage() {}
func (*PollNexusTaskQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{37}
}
func (m *PollNexusTaskQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollNexusTaskQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollNexusTaskQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollNexusTaskQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollNexusTaskQueueResponse.Merge(m, src)
}
func (m *PollNexusTaskQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *PollNexusTaskQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PollNexusTaskQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PollNexusTaskQueueResponse proto.InternalMessageInfo

func (m *PollNexusTaskQueueResponse) GetResponse() *v1.PollNexusTaskQueueResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

type RespondNexusTaskCompletedRequest struct {
	NamespaceId string         `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	TaskQueue   *v14.TaskQueue `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// A unique ID for this task generated by the matching engine. Decoded from the incoming request's task token.
	TaskId string `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Original completion as received by the frontend.
	Request *v1.RespondNexusTaskCompletedRequest `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *RespondNexusTaskCompletedRequest) Reset()      { *m = RespondNexusTaskCompletedRequest{} }
func (*RespondNexusTaskCompletedRequest) ProtoMessage() {}
func (*RespondNexusTaskCompletedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{38}
}
func (m *RespondNexusTaskCompletedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondNexusTaskCompletedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondNexusTaskCompletedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondNexusTaskCompletedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondNexusTaskCompletedRequest.Merge(m, src)
}
func (m *RespondNexusTaskCompletedRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondNexusTaskCompletedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondNexusTaskCompletedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondNexusTaskCompletedRequest proto.InternalMessageInfo

func (m *RespondNexusTaskCompletedRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *RespondNexusTaskCompletedRequest) GetTaskQueue() *v14.TaskQueue {
	if m != nil {
		return m.TaskQueue
	}
	return nil
}

func (m *RespondNexusTaskCompletedRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *RespondNexusTaskCompletedRequest) GetRequest() *v1.RespondNexusTaskCompletedRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type RespondNexusTaskCompletedResponse struct {
}

func (m *RespondNexusTaskCompletedResponse) Reset()      { *m = RespondNexusTaskCompletedResponse{} }
func (*RespondNexusTaskCompletedResponse) ProtoMessage() {}
func (*RespondNexusTaskCompletedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{39}
}
func (m *RespondNexusTaskCompletedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondNexusTaskCompletedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondNexusTaskCompletedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondNexusTaskCompletedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondNexusTaskCompletedResponse.Merge(m, src)
}
func (m *RespondNexusTaskCompletedResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondNexusTaskCompletedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondNexusTaskCompletedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondNexusTaskCompletedResponse proto.InternalMessageInfo

type RespondNexusTaskFailedRequest struct {
	NamespaceId string         `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	TaskQueue   *v14.TaskQueue `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// A unique ID for this task generated by the matching engine. Decoded from the incoming request's task token.
	TaskId string `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Original failure as received by the frontend.
	Request *v1.RespondNexusTaskFailedRequest `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *RespondNexusTaskFailedRequest) Reset()      { *m = RespondNexusTaskFailedRequest{} }
func (*RespondNexusTaskFailedRequest) ProtoMessage() {}
func (*RespondNexusTaskFailedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{40}
}
func (m *RespondNexusTaskFailedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondNexusTaskFailedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondNexusTaskFailedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondNexusTaskFailedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondNexusTaskFailedRequest.Merge(m, src)
}
func (m *RespondNexusTaskFailedRequest) XXX_Size() int {
	return m.Size()
}
func (m *RespondNexusTaskFailedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondNexusTaskFailedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RespondNexusTaskFailedRequest proto.InternalMessageInfo

func (m *RespondNexusTaskFailedRequest) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *RespondNexusTaskFailedRequest) GetTaskQueue() *v14.TaskQueue {
	if m != nil {
		return m.TaskQueue
	}
	return nil
}

func (m *RespondNexusTaskFailedRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *RespondNexusTaskFailedRequest) GetRequest() *v1.RespondNexusTaskFailedRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type RespondNexusTaskFailedResponse struct {
}

func (m *RespondNexusTaskFailedResponse) Reset()      { *m = RespondNexusTaskFailedResponse{} }
func (*RespondNexusTaskFailedResponse) ProtoMessage() {}
func (*RespondNexusTaskFailedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{41}
}
func (m *RespondNexusTaskFailedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RespondNexusTaskFailedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RespondNexusTaskFailedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RespondNexusTaskFailedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RespondNexusTaskFailedResponse.Merge(m, src)
}
func (m *RespondNexusTaskFailedResponse) XXX_Size() int {
	return m.Size()
}
func (m *RespondNexusTaskFailedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RespondNexusTaskFailedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RespondNexusTaskFailedResponse proto.InternalMessageInfo

// (-- api-linter: core::0133::request-resource-field=disabled
//
//	aip.dev/not-precedent: CreateOrUpdateNexusService RPC doesn't follow Google API format. --)
//
// (-- api-linter: core::0133::request-parent-required=disabled
//
//	aip.dev/not-precedent: CreateOrUpdateNexusService RPC doesn't follow Google API format. --)
//
// (-- api-linter: core::0133::request-unknown-fields=disabled
//
//	aip.dev/not-precedent: CreateOrUpdateNexusService RPC doesn't follow Google API format. --)
type CreateOrUpdateNexusServiceRequest struct {
	Service *v112.IncomingService `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (m *CreateOrUpdateNexusServiceRequest) Reset()      { *m = CreateOrUpdateNexusServiceRequest{} }
func (*CreateOrUpdateNexusServiceRequest) ProtoMessage() {}
func (*CreateOrUpdateNexusServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{42}
}
func (m *CreateOrUpdateNexusServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrUpdateNexusServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrUpdateNexusServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOrUpdateNexusServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrUpdateNexusServiceRequest.Merge(m, src)
}
func (m *CreateOrUpdateNexusServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateOrUpdateNexusServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrUpdateNexusServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrUpdateNexusServiceRequest proto.InternalMessageInfo

func (m *CreateOrUpdateNexusServiceRequest) GetService() *v112.IncomingService {
	if m != nil {
		return m.Service
	}
	return nil
}

type CreateOrUpdateNexusServiceResponse struct {
}

func (m *CreateOrUpdateNexusServiceResponse) Reset()      { *m = CreateOrUpdateNexusServiceResponse{} }
func (*CreateOrUpdateNexusServiceResponse) ProtoMessage() {}
func (*CreateOrUpdateNexusServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{43}
}
func (m *CreateOrUpdateNexusServiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrUpdateNexusServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrUpdateNexusServiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOrUpdateNexusServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrUpdateNexusServiceResponse.Merge(m, src)
}
func (m *CreateOrUpdateNexusServiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateOrUpdateNexusServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrUpdateNexusServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrUpdateNexusServiceResponse proto.InternalMessageInfo

// (-- api-linter: core::0131::request-name-behavior=disabled
//
//	aip.dev/not-precedent: DeleteServiceRequest RPC doesn't follow Google API format. --)
//
// (-- api-linter: core::0131::request-name-reference=disabled
//
//	aip.dev/not-precedent: DeleteServiceRequest RPC doesn't follow Google API format. --)
type GetNexusServiceRequest struct {
	// Name of the service to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetNexusServiceRequest) Reset()      { *m = GetNexusServiceRequest{} }
func (*GetNexusServiceRequest) ProtoMessage() {}
func (*GetNexusServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{44}
}
func (m *GetNexusServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNexusServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNexusServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNexusServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNexusServiceRequest.Merge(m, src)
}
func (m *GetNexusServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNexusServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNexusServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNexusServiceRequest proto.InternalMessageInfo

func (m *GetNexusServiceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetNexusServiceResponse struct {
	Service *v111.VersionedNexusIncomingService `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (m *GetNexusServiceResponse) Reset()      { *m = GetNexusServiceResponse{} }
func (*GetNexusServiceResponse) ProtoMessage() {}
func (*GetNexusServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{45}
}
func (m *GetNexusServiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNexusServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNexusServiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNexusServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNexusServiceResponse.Merge(m, src)
}
func (m *GetNexusServiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNexusServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNexusServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNexusServiceResponse proto.InternalMessageInfo

func (m *GetNexusServiceResponse) GetService() *v111.VersionedNexusIncomingService {
	if m != nil {
		return m.Service
	}
	return nil
}

// (-- api-linter: core::0135::request-name-behavior=disabled
//
//	aip.dev/not-precedent: DeleteServiceRequest RPC doesn't follow Google API format. --)
//
// (-- api-linter: core::0135::request-name-reference=disabled
//
//	aip.dev/not-precedent: DeleteServiceRequest RPC doesn't follow Google API format. --)
type DeleteNexusServiceRequest struct {
	// Name of the service to delete.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DeleteNexusServiceRequest) Reset()      { *m = DeleteNexusServiceRequest{} }
func (*DeleteNexusServiceRequest) ProtoMessage() {}
func (*DeleteNexusServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{46}
}
func (m *DeleteNexusServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteNexusServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteNexusServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteNexusServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNexusServiceRequest.Merge(m, src)
}
func (m *DeleteNexusServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteNexusServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNexusServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNexusServiceRequest proto.InternalMessageInfo

func (m *DeleteNexusServiceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteNexusServiceResponse struct {
}

func (m *DeleteNexusServiceResponse) Reset()      { *m = DeleteNexusServiceResponse{} }
func (*DeleteNexusServiceResponse) ProtoMessage() {}
func (*DeleteNexusServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{47}
}
func (m *DeleteNexusServiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteNexusServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteNexusServiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteNexusServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNexusServiceResponse.Merge(m, src)
}
func (m *DeleteNexusServiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteNexusServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNexusServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNexusServiceResponse proto.InternalMessageInfo

type ListNexusServicesRequest struct {
	// To get the next page, pass in `ListServicesResponse.next_page_token` from the previous page's response. The token
	// will be empty if there's no other page.
	// Note: the last page may be empty if the total number of services registered is a multiple of the page size.
	// Mutually exclusive with wait. Specifying both will result in an invalid argument error.
	NextPageToken []byte `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	PageSize      int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The services table has a monotonically increasing version number that is incremented on every change to the
	// table. This field can be used to provide the last known table version in conjuction with the `wait` field to long
	// poll on changes to the table.
	// If next_page_token is not empty and the current table version does not match this field, this request will fail
	// with a failed precondition error.
	LastKnownTableVersion int64 `protobuf:"varint,3,opt,name=last_known_table_version,json=lastKnownTableVersion,proto3" json:"last_known_table_version,omitempty"`
	// If true, this request becomes a long poll and will be unblocked once the DB version is incremented.
	// Mutually exclusive with next_page_token. Specifying both will result in an invalid argument error.
	Wait bool `protobuf:"varint,4,opt,name=wait,proto3" json:"wait,omitempty"`
}

func (m *ListNexusServicesRequest) Reset()      { *m = ListNexusServicesRequest{} }
func (*ListNexusServicesRequest) ProtoMessage() {}
func (*ListNexusServicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{48}
}
func (m *ListNexusServicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNexusServicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNexusServicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNexusServicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNexusServicesRequest.Merge(m, src)
}
func (m *ListNexusServicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListNexusServicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNexusServicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNexusServicesRequest proto.InternalMessageInfo

func (m *ListNexusServicesRequest) GetNextPageToken() []byte {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListNexusServicesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListNexusServicesRequest) GetLastKnownTableVersion() int64 {
	if m != nil {
		return m.LastKnownTableVersion
	}
	return 0
}

func (m *ListNexusServicesRequest) GetWait() bool {
	if m != nil {
		return m.Wait
	}
	return false
}

type ListNexusServicesResponse struct {
	// Token for getting the next page.
	NextPageToken []byte                                `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	TableVersion  int64                                 `protobuf:"varint,2,opt,name=table_version,json=tableVersion,proto3" json:"table_version,omitempty"`
	Services      []*v111.VersionedNexusIncomingService `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty"`
}

func (m *ListNexusServicesResponse) Reset()      { *m = ListNexusServicesResponse{} }
func (*ListNexusServicesResponse) ProtoMessage() {}
func (*ListNexusServicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a429a3813476c583, []int{49}
}
func (m *ListNexusServicesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListNexusServicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListNexusServicesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListNexusServicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNexusServicesResponse.Merge(m, src)
}
func (m *ListNexusServicesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListNexusServicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNexusServicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNexusServicesResponse proto.InternalMessageInfo

func (m *ListNexusServicesResponse) GetNextPageToken() []byte {
	if m != nil {
		return m.NextPageToken
	}
	return nil
}

func (m *ListNexusServicesResponse) GetTableVersion() int64 {
	if m != nil {
		return m.TableVersion
	}
	return 0
}

func (m *ListNexusServicesResponse) GetServices() []*v111.VersionedNexusIncomingService {
	if m != nil {
		return m.Services
	}
	return nil
}

func init() {
	proto.RegisterType((*PollWorkflowTaskQueueRequest)(nil), "temporal.server.api.matchingservice.v1.PollWorkflowTaskQueueRequest")
	proto.RegisterType((*PollWorkflowTaskQueueResponse)(nil), "temporal.server.api.matchingservice.v1.PollWorkflowTaskQueueResponse")
	proto.RegisterMapType((map[string]*v12.WorkflowQuery)(nil), "temporal.server.api.matchingservice.v1.PollWorkflowTaskQueueResponse.QueriesEntry")
	proto.RegisterType((*PollActivityTaskQueueRequest)(nil), "temporal.server.api.matchingservice.v1.PollActivityTaskQueueRequest")
	proto.RegisterType((*PollActivityTaskQueueResponse)(nil), "temporal.server.api.matchingservice.v1.PollActivityTaskQueueResponse")
	proto.RegisterType((*AddWorkflowTaskRequest)(nil), "temporal.server.api.matchingservice.v1.AddWorkflowTaskRequest")
	proto.RegisterType((*AddWorkflowTaskResponse)(nil), "temporal.server.api.matchingservice.v1.AddWorkflowTaskResponse")
	proto.RegisterType((*AddActivityTaskRequest)(nil), "temporal.server.api.matchingservice.v1.AddActivityTaskRequest")
	proto.RegisterType((*AddActivityTaskResponse)(nil), "temporal.server.api.matchingservice.v1.AddActivityTaskResponse")
	proto.RegisterType((*QueryWorkflowRequest)(nil), "temporal.server.api.matchingservice.v1.QueryWorkflowRequest")
	proto.RegisterType((*QueryWorkflowResponse)(nil), "temporal.server.api.matchingservice.v1.QueryWorkflowResponse")
	proto.RegisterType((*RespondQueryTaskCompletedRequest)(nil), "temporal.server.api.matchingservice.v1.RespondQueryTaskCompletedRequest")
	proto.RegisterType((*RespondQueryTaskCompletedResponse)(nil), "temporal.server.api.matchingservice.v1.RespondQueryTaskCompletedResponse")
	proto.RegisterType((*CancelOutstandingPollRequest)(nil), "temporal.server.api.matchingservice.v1.CancelOutstandingPollRequest")
	proto.RegisterType((*CancelOutstandingPollResponse)(nil), "temporal.server.api.matchingservice.v1.CancelOutstandingPollResponse")
	proto.RegisterType((*DescribeTaskQueueRequest)(nil), "temporal.server.api.matchingservice.v1.DescribeTaskQueueRequest")
	proto.RegisterType((*DescribeTaskQueueResponse)(nil), "temporal.server.api.matchingservice.v1.DescribeTaskQueueResponse")
	proto.RegisterType((*ListTaskQueuePartitionsRequest)(nil), "temporal.server.api.matchingservice.v1.ListTaskQueuePartitionsRequest")
	proto.RegisterType((*ListTaskQueuePartitionsResponse)(nil), "temporal.server.api.matchingservice.v1.ListTaskQueuePartitionsResponse")
	proto.RegisterType((*UpdateWorkerBuildIdCompatibilityRequest)(nil), "temporal.server.api.matchingservice.v1.UpdateWorkerBuildIdCompatibilityRequest")
	proto.RegisterType((*UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest)(nil), "temporal.server.api.matchingservice.v1.UpdateWorkerBuildIdCompatibilityRequest.ApplyPublicRequest")
	proto.RegisterType((*UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds)(nil), "temporal.server.api.matchingservice.v1.UpdateWorkerBuildIdCompatibilityRequest.RemoveBuildIds")
	proto.RegisterType((*UpdateWorkerBuildIdCompatibilityResponse)(nil), "temporal.server.api.matchingservice.v1.UpdateWorkerBuildIdCompatibilityResponse")
	proto.RegisterType((*GetWorkerBuildIdCompatibilityRequest)(nil), "temporal.server.api.matchingservice.v1.GetWorkerBuildIdCompatibilityRequest")
	proto.RegisterType((*GetWorkerBuildIdCompatibilityResponse)(nil), "temporal.server.api.matchingservice.v1.GetWorkerBuildIdCompatibilityResponse")
	proto.RegisterType((*GetTaskQueueUserDataRequest)(nil), "temporal.server.api.matchingservice.v1.GetTaskQueueUserDataRequest")
	proto.RegisterType((*GetTaskQueueUserDataResponse)(nil), "temporal.server.api.matchingservice.v1.GetTaskQueueUserDataResponse")
	proto.RegisterType((*ApplyTaskQueueUserDataReplicationEventRequest)(nil), "temporal.server.api.matchingservice.v1.ApplyTaskQueueUserDataReplicationEventRequest")
	proto.RegisterType((*ApplyTaskQueueUserDataReplicationEventResponse)(nil), "temporal.server.api.matchingservice.v1.ApplyTaskQueueUserDataReplicationEventResponse")
	proto.RegisterType((*GetBuildIdTaskQueueMappingRequest)(nil), "temporal.server.api.matchingservice.v1.GetBuildIdTaskQueueMappingRequest")
	proto.RegisterType((*GetBuildIdTaskQueueMappingResponse)(nil), "temporal.server.api.matchingservice.v1.GetBuildIdTaskQueueMappingResponse")
	proto.RegisterType((*ForceUnloadTaskQueueRequest)(nil), "temporal.server.api.matchingservice.v1.ForceUnloadTaskQueueRequest")
	proto.RegisterType((*ForceUnloadTaskQueueResponse)(nil), "temporal.server.api.matchingservice.v1.ForceUnloadTaskQueueResponse")
	proto.RegisterType((*UpdateTaskQueueUserDataRequest)(nil), "temporal.server.api.matchingservice.v1.UpdateTaskQueueUserDataRequest")
	proto.RegisterType((*UpdateTaskQueueUserDataResponse)(nil), "temporal.server.api.matchingservice.v1.UpdateTaskQueueUserDataResponse")
	proto.RegisterType((*ReplicateTaskQueueUserDataRequest)(nil), "temporal.server.api.matchingservice.v1.ReplicateTaskQueueUserDataRequest")
	proto.RegisterType((*ReplicateTaskQueueUserDataResponse)(nil), "temporal.server.api.matchingservice.v1.ReplicateTaskQueueUserDataResponse")
	proto.RegisterType((*DispatchNexusTaskRequest)(nil), "temporal.server.api.matchingservice.v1.DispatchNexusTaskRequest")
	proto.RegisterType((*DispatchNexusTaskResponse)(nil), "temporal.server.api.matchingservice.v1.DispatchNexusTaskResponse")
	proto.RegisterType((*PollNexusTaskQueueRequest)(nil), "temporal.server.api.matchingservice.v1.PollNexusTaskQueueRequest")
	proto.RegisterType((*PollNexusTaskQueueResponse)(nil), "temporal.server.api.matchingservice.v1.PollNexusTaskQueueResponse")
	proto.RegisterType((*RespondNexusTaskCompletedRequest)(nil), "temporal.server.api.matchingservice.v1.RespondNexusTaskCompletedRequest")
	proto.RegisterType((*RespondNexusTaskCompletedResponse)(nil), "temporal.server.api.matchingservice.v1.RespondNexusTaskCompletedResponse")
	proto.RegisterType((*RespondNexusTaskFailedRequest)(nil), "temporal.server.api.matchingservice.v1.RespondNexusTaskFailedRequest")
	proto.RegisterType((*RespondNexusTaskFailedResponse)(nil), "temporal.server.api.matchingservice.v1.RespondNexusTaskFailedResponse")
	proto.RegisterType((*CreateOrUpdateNexusServiceRequest)(nil), "temporal.server.api.matchingservice.v1.CreateOrUpdateNexusServiceRequest")
	proto.RegisterType((*CreateOrUpdateNexusServiceResponse)(nil), "temporal.server.api.matchingservice.v1.CreateOrUpdateNexusServiceResponse")
	proto.RegisterType((*GetNexusServiceRequest)(nil), "temporal.server.api.matchingservice.v1.GetNexusServiceRequest")
	proto.RegisterType((*GetNexusServiceResponse)(nil), "temporal.server.api.matchingservice.v1.GetNexusServiceResponse")
	proto.RegisterType((*DeleteNexusServiceRequest)(nil), "temporal.server.api.matchingservice.v1.DeleteNexusServiceRequest")
	proto.RegisterType((*DeleteNexusServiceResponse)(nil), "temporal.server.api.matchingservice.v1.DeleteNexusServiceResponse")
	proto.RegisterType((*ListNexusServicesRequest)(nil), "temporal.server.api.matchingservice.v1.ListNexusServicesRequest")
	proto.RegisterType((*ListNexusServicesResponse)(nil), "temporal.server.api.matchingservice.v1.ListNexusServicesResponse")
}

func init() {
	proto.RegisterFile("temporal/server/api/matchingservice/v1/request_response.proto", fileDescriptor_a429a3813476c583)
}

var fileDescriptor_a429a3813476c583 = []byte{
	// 2906 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5a, 0xcb, 0x73, 0x1c, 0x57,
	0xd5, 0x57, 0xeb, 0x39, 0x73, 0x66, 0xf4, 0xea, 0xf8, 0x31, 0x92, 0xe5, 0x91, 0xd4, 0x76, 0x1c,
	0xc5, 0xe5, 0x8c, 0xbe, 0xf8, 0x23, 0x26, 0x71, 0x70, 0x12, 0x59, 0x56, 0x2c, 0x25, 0x76, 0xa2,
	0xb4, 0xe5, 0x24, 0x15, 0x03, 0x9d, 0x3b, 0xdd, 0xd7, 0xa3, 0x46, 0x3d, 0xdd, 0xed, 0xbe, 0xb7,
	0x25, 0x2b, 0xab, 0xac, 0x61, 0x13, 0x8a, 0x2a, 0x0a, 0x8a, 0x3d, 0x05, 0x14, 0x54, 0x41, 0xc1,
	0x26, 0x7f, 0x00, 0x05, 0x0b, 0x16, 0x59, 0x66, 0x41, 0x15, 0x44, 0xa9, 0x02, 0x0a, 0x58, 0x84,
	0x2d, 0x2b, 0xea, 0x3e, 0xba, 0x7b, 0x7a, 0xba, 0x67, 0x34, 0xa3, 0xc8, 0x24, 0xc5, 0x6e, 0xfa,
	0xde, 0x73, 0xce, 0x3d, 0x8f, 0xdf, 0x3d, 0x8f, 0xee, 0x81, 0x6b, 0x14, 0x37, 0x7d, 0x2f, 0x40,
	0xce, 0x32, 0xc1, 0xc1, 0x2e, 0x0e, 0x96, 0x91, 0x6f, 0x2f, 0x37, 0x11, 0x35, 0xb7, 0x6d, 0xb7,
	0xc1, 0x96, 0x6c, 0x13, 0x2f, 0xef, 0x3e, 0xbd, 0x1c, 0xe0, 0x07, 0x21, 0x26, 0xd4, 0x08, 0x30,
	0xf1, 0x3d, 0x97, 0xe0, 0x9a, 0x1f, 0x78, 0xd4, 0x53, 0x2f, 0x44, 0xec, 0x35, 0xc1, 0x5e, 0x43,
	0xbe, 0x5d, 0x6b, 0x63, 0xaf, 0xed, 0x3e, 0x3d, 0x5b, 0x6d, 0x78, 0x5e, 0xc3, 0xc1, 0xcb, 0x9c,
	0xab, 0x1e, 0xde, 0x5f, 0xb6, 0xc2, 0x00, 0x51, 0xdb, 0x73, 0x85, 0x9c, 0xd9, 0xf9, 0xf6, 0x7d,
	0x6a, 0x37, 0x31, 0xa1, 0xa8, 0xe9, 0x4b, 0x82, 0x45, 0x0b, 0xfb, 0xd8, 0xb5, 0xb0, 0x6b, 0xda,
	0x98, 0x2c, 0x37, 0xbc, 0x86, 0xc7, 0xd7, 0xf9, 0x2f, 0x49, 0x72, 0x3e, 0x36, 0x85, 0xd9, 0x60,
	0x7a, 0xcd, 0xa6, 0xe7, 0x32, 0xd5, 0x9b, 0x98, 0x10, 0xd4, 0x90, 0x1a, 0xcf, 0x5e, 0x48, 0x51,
	0x61, 0x37, 0x6c, 0x12, 0x46, 0x44, 0x11, 0xd9, 0x31, 0x1e, 0x84, 0x38, 0x8c, 0xe8, 0x1e, 0x4f,
	0xd1, 0x6d, 0xdb, 0x84, 0x7a, 0xc1, 0x7e, 0x56, 0xdc, 0x13, 0x29, 0x32, 0x26, 0x85, 0x0b, 0xc9,
	0x12, 0x9e, 0x4b, 0x11, 0x3e, 0x08, 0x71, 0x9e, 0xb4, 0xb4, 0x72, 0x7c, 0xcd, 0xf4, 0x9c, 0x2c,
	0xdd, 0xc5, 0xbc, 0xa8, 0x99, 0x8e, 0x67, 0xee, 0x74, 0xd3, 0xb0, 0x85, 0x36, 0x65, 0xb7, 0x24,
	0xbc, 0x94, 0x47, 0xd8, 0xd1, 0xf0, 0x5a, 0x1e, 0xb5, 0x8f, 0x03, 0x62, 0x13, 0x8a, 0x5d, 0x01,
	0x1a, 0x17, 0x3f, 0x0c, 0x89, 0xa4, 0xff, 0x4a, 0x0f, 0xf4, 0x49, 0x10, 0x48, 0xb7, 0x53, 0xba,
	0x78, 0xf9, 0x4a, 0xca, 0x81, 0x7b, 0x5e, 0xb0, 0x73, 0xdf, 0xf1, 0xf6, 0x0e, 0xc5, 0x71, 0x5b,
	0x74, 0xb8, 0xde, 0x19, 0xe1, 0xda, 0x3f, 0x14, 0x98, 0xdb, 0xf4, 0x1c, 0xe7, 0x2d, 0x29, 0x76,
	0x0b, 0x91, 0x9d, 0x37, 0x98, 0x1e, 0xba, 0x10, 0xaa, 0x2e, 0x42, 0xd9, 0x45, 0x4d, 0x4c, 0x7c,
	0x64, 0x62, 0xc3, 0xb6, 0x2a, 0xca, 0x82, 0xb2, 0x54, 0xd4, 0x4b, 0xf1, 0xda, 0x86, 0xa5, 0x9e,
	0x81, 0xa2, 0xef, 0x39, 0x0e, 0x0e, 0xd8, 0xfe, 0x20, 0xdf, 0x2f, 0x88, 0x85, 0x0d, 0x4b, 0x7d,
	0x17, 0xca, 0xec, 0xb7, 0x21, 0x95, 0xac, 0x0c, 0x2d, 0x28, 0x4b, 0xa5, 0xcb, 0xd7, 0x62, 0x27,
	0xf0, 0xdb, 0xd5, 0x66, 0x54, 0x6d, 0xf7, 0xe9, 0x5a, 0x37, 0xa5, 0xf4, 0x12, 0x13, 0x19, 0x69,
	0xf8, 0x24, 0x4c, 0xdd, 0xf7, 0x82, 0x3d, 0x14, 0x58, 0xd8, 0x32, 0x88, 0x17, 0x06, 0x26, 0xae,
	0x0c, 0x73, 0x2d, 0x26, 0xe3, 0xf5, 0x3b, 0x7c, 0x59, 0xfb, 0x25, 0xc0, 0xd9, 0x0e, 0x82, 0x85,
	0xeb, 0xd4, 0xb3, 0x00, 0x3c, 0x62, 0xd4, 0xdb, 0xc1, 0x2e, 0x37, 0xb6, 0xac, 0x17, 0xd9, 0xca,
	0x16, 0x5b, 0x50, 0xdf, 0x06, 0x35, 0xd2, 0xd5, 0xc0, 0x0f, 0xb1, 0x19, 0xb2, 0xfb, 0xce, 0x6d,
	0x2e, 0x5d, 0x7e, 0x32, 0x6d, 0x93, 0xb8, 0xac, 0xcc, 0x94, 0xe8, 0xb4, 0xb5, 0x88, 0x41, 0x9f,
	0xde, 0x6b, 0x5f, 0x52, 0x37, 0x60, 0x3c, 0x96, 0x4c, 0xf7, 0x7d, 0x2c, 0x1d, 0x75, 0xfe, 0x30,
	0xa1, 0x5b, 0xfb, 0x3e, 0xd6, 0xcb, 0x7b, 0x2d, 0x4f, 0xea, 0x73, 0x30, 0xe3, 0x07, 0x78, 0xd7,
	0xf6, 0x42, 0x62, 0x10, 0x8a, 0x02, 0x8a, 0x2d, 0x03, 0xef, 0x62, 0x97, 0xb2, 0xf8, 0x30, 0xcf,
	0x0c, 0xe9, 0xa7, 0x22, 0x82, 0x3b, 0x62, 0x7f, 0x8d, 0x6d, 0x6f, 0x58, 0xea, 0x12, 0x4c, 0x65,
	0x38, 0x46, 0x38, 0xc7, 0x04, 0x49, 0x53, 0x56, 0x60, 0x0c, 0x51, 0xa6, 0x1b, 0xad, 0x8c, 0x2e,
	0x28, 0x4b, 0x23, 0x7a, 0xf4, 0xa8, 0x6a, 0x30, 0xee, 0xe2, 0x87, 0x34, 0x11, 0x30, 0xc6, 0x05,
	0x94, 0xd8, 0x62, 0xc4, 0x7d, 0x09, 0xd4, 0x3a, 0x32, 0x77, 0x1c, 0xaf, 0x61, 0x98, 0x5e, 0xe8,
	0x52, 0x63, 0xdb, 0x76, 0x69, 0xa5, 0xc0, 0x09, 0xa7, 0xe4, 0xce, 0x2a, 0xdb, 0x58, 0xb7, 0x5d,
	0xaa, 0x3e, 0x0b, 0x15, 0x42, 0x6d, 0x73, 0x67, 0x3f, 0xf1, 0xb9, 0x81, 0x5d, 0x54, 0x77, 0xb0,
	0x55, 0x29, 0x2e, 0x28, 0x4b, 0x05, 0xfd, 0x94, 0xd8, 0x8f, 0xdd, 0xb9, 0x26, 0x76, 0xd5, 0xab,
	0x30, 0xc2, 0xd3, 0x52, 0x05, 0xf2, 0xbc, 0xc9, 0xb7, 0x5a, 0x9d, 0xf9, 0x06, 0x5b, 0xd0, 0x05,
	0x8b, 0xfa, 0x00, 0x4e, 0xd3, 0x00, 0xb9, 0xc4, 0x66, 0x66, 0x24, 0xb1, 0x41, 0x64, 0xa7, 0x52,
	0xe2, 0xd2, 0x9e, 0xab, 0xe5, 0x55, 0x0a, 0x99, 0x5d, 0x98, 0xd8, 0xad, 0x88, 0xbd, 0x15, 0x6f,
	0x1b, 0xee, 0x7d, 0x4f, 0x3f, 0x49, 0xf3, 0xb6, 0xd4, 0x06, 0x9c, 0xcd, 0xc2, 0xcb, 0x48, 0x52,
	0x48, 0xa5, 0x9c, 0x67, 0x46, 0x9c, 0x3b, 0xf8, 0x99, 0x31, 0xa4, 0x67, 0x33, 0x20, 0x8b, 0xf7,
	0xd8, 0xad, 0xae, 0x07, 0xc8, 0x35, 0xb7, 0x25, 0xd0, 0x27, 0x38, 0xd0, 0x4b, 0x62, 0x4d, 0x40,
	0xfd, 0x26, 0x4c, 0x10, 0x73, 0x1b, 0x5b, 0xa1, 0x83, 0x2d, 0x83, 0x95, 0xae, 0xca, 0x24, 0x3f,
	0x7c, 0xb6, 0x26, 0xea, 0x5a, 0x2d, 0xaa, 0x6b, 0xb5, 0xad, 0xa8, 0xae, 0x5d, 0x1f, 0xfe, 0xe0,
	0x4f, 0xf3, 0x8a, 0x3e, 0x1e, 0xf3, 0xb1, 0x1d, 0x75, 0x15, 0xca, 0x11, 0xa6, 0xb8, 0x98, 0xa9,
	0x1e, 0xc5, 0x94, 0x24, 0x17, 0x17, 0xe2, 0xc0, 0x18, 0x8b, 0x8a, 0x8d, 0x49, 0x65, 0x7a, 0x61,
	0x68, 0xa9, 0x74, 0x59, 0xaf, 0xf5, 0x56, 0xa6, 0x6b, 0x5d, 0xef, 0x7b, 0xed, 0x0d, 0x21, 0x74,
	0xcd, 0xa5, 0xc1, 0xbe, 0x1e, 0x1d, 0xa1, 0x5e, 0x83, 0x82, 0x4c, 0x93, 0xa4, 0xa2, 0xf2, 0xe3,
	0x16, 0xd3, 0x2e, 0x8f, 0xca, 0x18, 0x3b, 0xe0, 0xb6, 0xa0, 0xd4, 0x63, 0x16, 0xf5, 0x2a, 0x8c,
	0x49, 0x14, 0x54, 0x1e, 0xe3, 0xc6, 0x2e, 0xa4, 0xb9, 0x5b, 0x20, 0xb2, 0x2e, 0x7e, 0xea, 0x11,
	0x83, 0x7a, 0x01, 0x26, 0xf9, 0xed, 0xf1, 0x51, 0x03, 0xcb, 0xe0, 0x9c, 0xe0, 0xc1, 0xe1, 0x97,
	0x6a, 0x13, 0x35, 0x30, 0x0f, 0xcf, 0xec, 0xbb, 0x50, 0x6e, 0xd5, 0x5d, 0x9d, 0x82, 0xa1, 0x1d,
	0xbc, 0x2f, 0xd3, 0x33, 0xfb, 0xc9, 0xb0, 0xbf, 0x8b, 0x9c, 0x10, 0xcb, 0xf4, 0xd4, 0x23, 0xf6,
	0x39, 0xcb, 0xd5, 0xc1, 0x67, 0x95, 0x57, 0x86, 0x0b, 0xe3, 0x53, 0x13, 0x71, 0x81, 0x58, 0x31,
	0xa9, 0xbd, 0x6b, 0xd3, 0xfd, 0x2f, 0x55, 0x81, 0xe8, 0xa4, 0xd4, 0x91, 0x0b, 0xc4, 0x1f, 0x0a,
	0xa2, 0x40, 0xe4, 0x08, 0xfe, 0xa2, 0x0b, 0xc4, 0x3c, 0x94, 0x90, 0xd4, 0x8a, 0xb9, 0x71, 0x88,
	0x1b, 0x00, 0xd1, 0xd2, 0x86, 0xc5, 0x2a, 0x48, 0x4c, 0xc0, 0x2b, 0xc8, 0x70, 0xf7, 0x0a, 0x12,
	0xdb, 0xc8, 0x2b, 0x08, 0x6a, 0x79, 0x52, 0xaf, 0xc0, 0x88, 0xed, 0xfa, 0x21, 0xe5, 0xb9, 0x3f,
	0x03, 0xdf, 0x44, 0xc4, 0x26, 0xda, 0x77, 0x3c, 0x64, 0x11, 0x5d, 0x90, 0xe7, 0xe4, 0x8c, 0xd1,
	0xa3, 0xe5, 0x8c, 0x77, 0x60, 0x26, 0x5a, 0x30, 0xa8, 0x67, 0x98, 0x8e, 0x47, 0x30, 0x17, 0xe8,
	0x85, 0x94, 0xd7, 0x93, 0xd2, 0xe5, 0x99, 0x8c, 0xcc, 0x1b, 0xb2, 0xff, 0xbe, 0x3e, 0xfc, 0x03,
	0x26, 0xf2, 0x54, 0x24, 0x61, 0xcb, 0x5b, 0x65, 0xfc, 0x5b, 0x82, 0x3d, 0x93, 0x8f, 0x0a, 0x47,
	0xc9, 0x47, 0x5b, 0x70, 0x8a, 0x3f, 0x66, 0xb5, 0x2b, 0xf6, 0xa6, 0xdd, 0x63, 0x9c, 0xbd, 0x4d,
	0xb5, 0x5b, 0x30, 0xbd, 0x8d, 0x51, 0x40, 0xeb, 0x18, 0xd1, 0x58, 0x20, 0xf4, 0x26, 0x70, 0x2a,
	0xe6, 0x8c, 0xa4, 0xb5, 0x94, 0xe8, 0x52, 0xba, 0x44, 0x63, 0xa8, 0x9a, 0x61, 0x10, 0xb0, 0xc2,
	0x26, 0x97, 0x8c, 0xb6, 0xb8, 0x95, 0x7b, 0x74, 0xca, 0x19, 0x29, 0x67, 0x45, 0x88, 0xb9, 0x93,
	0x8a, 0xe2, 0xed, 0x56, 0x73, 0x2c, 0x4c, 0x91, 0xed, 0x90, 0xca, 0x78, 0x8f, 0x90, 0x4a, 0xec,
	0xb9, 0x21, 0x38, 0xb3, 0x2d, 0xd2, 0xc4, 0x91, 0x5b, 0xa4, 0xa7, 0x5a, 0xae, 0x69, 0x9c, 0xa9,
	0x78, 0x81, 0x2b, 0x26, 0x77, 0xef, 0xb5, 0x68, 0x43, 0xbd, 0x02, 0xa3, 0xdb, 0x18, 0x59, 0x38,
	0x90, 0xc5, 0xab, 0xda, 0xe9, 0xc8, 0x75, 0x4e, 0xa5, 0x4b, 0x6a, 0xed, 0x2f, 0xc3, 0x70, 0x6a,
	0xc5, 0xb2, 0x5a, 0xcb, 0x4f, 0x1f, 0x69, 0xf3, 0x26, 0x14, 0x3f, 0x47, 0x0a, 0x49, 0x78, 0xd5,
	0x55, 0x99, 0xb3, 0x44, 0x0f, 0x31, 0xd4, 0x47, 0x0f, 0xc1, 0x33, 0x9b, 0x68, 0x19, 0x2e, 0x81,
	0x9a, 0x60, 0xa4, 0xad, 0x9d, 0x9c, 0x8a, 0x77, 0xa2, 0x06, 0xaf, 0xed, 0x02, 0xcb, 0xbb, 0x22,
	0x11, 0x3d, 0xd2, 0xf7, 0x05, 0xe6, 0x6d, 0x6a, 0x84, 0xeb, 0xbc, 0x7c, 0x3e, 0x9a, 0x9b, 0xcf,
	0xd5, 0x97, 0x60, 0x54, 0x12, 0xb0, 0xa4, 0x31, 0x71, 0x79, 0x29, 0xb7, 0x6b, 0xe0, 0x93, 0x63,
	0x64, 0xb8, 0xe0, 0xd4, 0x25, 0x9f, 0xfa, 0x22, 0x8c, 0xf0, 0x21, 0x54, 0xde, 0xeb, 0x27, 0x73,
	0x05, 0x70, 0x0a, 0x26, 0xe0, 0x4d, 0x6c, 0x52, 0x2f, 0x58, 0x65, 0x8f, 0xba, 0xe0, 0x53, 0x4d,
	0x98, 0xde, 0x65, 0x23, 0xa1, 0xe7, 0x1a, 0x96, 0x1d, 0x60, 0x96, 0x66, 0xb1, 0xbc, 0xd3, 0x57,
	0x72, 0x85, 0x65, 0x42, 0xf1, 0xa6, 0x60, 0xbf, 0x11, 0x71, 0xeb, 0x53, 0xbb, 0x6d, 0x2b, 0xda,
	0x0c, 0x9c, 0xce, 0xe0, 0x4c, 0x14, 0x2c, 0xed, 0x9f, 0x02, 0x83, 0xad, 0x15, 0xed, 0x8b, 0xc7,
	0xe0, 0xf0, 0x71, 0x62, 0x70, 0xe4, 0x28, 0x18, 0x1c, 0x3d, 0x7e, 0x0c, 0x8e, 0x1d, 0x86, 0xc1,
	0xc2, 0xff, 0x32, 0x06, 0x5f, 0x19, 0x2e, 0x0c, 0x4d, 0x0d, 0x4b, 0x24, 0xa6, 0xd1, 0x26, 0x91,
	0xf8, 0xf7, 0x41, 0x38, 0xc1, 0xbb, 0xcc, 0x08, 0x28, 0x7d, 0xe0, 0x30, 0x0d, 0x9f, 0xc1, 0xa3,
	0xc1, 0xe7, 0x1d, 0x18, 0xe7, 0x6d, 0x6f, 0x5b, 0xaf, 0xf9, 0xcc, 0xa1, 0xbd, 0x66, 0x9e, 0xd6,
	0x7a, 0x99, 0xcb, 0xea, 0xbf, 0xc9, 0xcc, 0x8f, 0xc6, 0xc8, 0x31, 0x67, 0x84, 0x9f, 0x2a, 0x70,
	0xb2, 0x4d, 0x6d, 0xd9, 0xc1, 0xae, 0x42, 0x39, 0xf2, 0x02, 0x09, 0x1d, 0xca, 0xbd, 0xdd, 0x4b,
	0x41, 0x2e, 0x49, 0x7b, 0x19, 0x93, 0xfa, 0x2a, 0x4c, 0x44, 0x42, 0xbe, 0x85, 0x4d, 0x8a, 0xad,
	0x43, 0xa6, 0x0c, 0x31, 0x5d, 0x48, 0x5a, 0x7d, 0xfc, 0x41, 0xeb, 0xa3, 0xf6, 0xbd, 0x41, 0x58,
	0x10, 0xea, 0x59, 0x9c, 0x8e, 0x99, 0xb8, 0xea, 0x35, 0x7d, 0x07, 0x33, 0xe2, 0xff, 0x32, 0x48,
	0x4e, 0xc3, 0x18, 0x17, 0x12, 0xf7, 0xd8, 0xa3, 0xec, 0x71, 0xc3, 0x52, 0x5d, 0x98, 0x36, 0x23,
	0xa5, 0x62, 0x04, 0x89, 0x44, 0xb6, 0x72, 0x28, 0x82, 0x0e, 0x33, 0x4f, 0x9f, 0x32, 0xdb, 0x56,
	0xb4, 0x73, 0xb0, 0xd8, 0x85, 0x4b, 0xde, 0xa9, 0x7f, 0x29, 0x30, 0xb7, 0x8a, 0x5c, 0x13, 0x3b,
	0xaf, 0x87, 0x94, 0x50, 0xe4, 0x5a, 0xb6, 0xdb, 0xd8, 0x6c, 0x19, 0x7e, 0x7a, 0x70, 0xdb, 0x2d,
	0x98, 0x4c, 0xdc, 0x26, 0x3a, 0xab, 0x41, 0x9e, 0xa9, 0xda, 0x7c, 0x97, 0x4a, 0x51, 0xdc, 0x59,
	0xbc, 0xb3, 0x1a, 0xa7, 0xad, 0x8f, 0xc7, 0xd3, 0x6c, 0xa4, 0x26, 0xc6, 0xe1, 0xf4, 0xc4, 0xa8,
	0xcd, 0xc3, 0xd9, 0x0e, 0x26, 0x4b, 0xa7, 0xfc, 0x48, 0x81, 0xca, 0x0d, 0x4c, 0xcc, 0xc0, 0xae,
	0xe3, 0xa3, 0xcc, 0xab, 0x5f, 0x87, 0xb2, 0x85, 0x89, 0x19, 0x07, 0x79, 0xb0, 0xfd, 0x75, 0x4f,
	0x87, 0x20, 0x77, 0x3a, 0x53, 0x2f, 0x31, 0x71, 0x51, 0x5c, 0x7f, 0xa3, 0xc0, 0x4c, 0x0e, 0xa5,
	0xbc, 0x9d, 0x2f, 0xc2, 0x98, 0x30, 0x94, 0x54, 0x14, 0xfe, 0xe6, 0xe1, 0xf1, 0x2e, 0xbe, 0xdb,
	0x14, 0x2e, 0x71, 0xef, 0x7b, 0x7a, 0xc4, 0xa5, 0xbe, 0x09, 0xd3, 0x2d, 0xd1, 0x24, 0x14, 0xd1,
	0x90, 0x48, 0x0b, 0x2e, 0xf6, 0x12, 0x86, 0x3b, 0x9c, 0x43, 0x9f, 0xa4, 0xe9, 0x05, 0xed, 0xc7,
	0x0a, 0x54, 0x6f, 0xd9, 0x84, 0xc6, 0x84, 0x9b, 0x28, 0xa0, 0x36, 0x2b, 0x95, 0x24, 0x72, 0xed,
	0x1c, 0x14, 0x93, 0x66, 0x5a, 0xf8, 0x35, 0x59, 0xc8, 0x38, 0x7e, 0xe8, 0xd1, 0x5c, 0x60, 0xed,
	0x87, 0x83, 0x30, 0xdf, 0x51, 0x51, 0xe9, 0xe5, 0xf7, 0xa0, 0x9a, 0xcc, 0xca, 0x89, 0xb7, 0xfc,
	0x98, 0x52, 0x3a, 0xff, 0x99, 0x5e, 0x0e, 0x8f, 0xe5, 0xdf, 0xc6, 0x14, 0x59, 0x88, 0x22, 0xfd,
	0x0c, 0x6a, 0x7f, 0x7f, 0x90, 0xe8, 0xc0, 0xce, 0x4e, 0xbd, 0x4d, 0xcc, 0x9e, 0x3d, 0xf8, 0xb9,
	0xce, 0xde, 0x6b, 0x7f, 0xd9, 0x95, 0x9c, 0xad, 0x7d, 0x38, 0x02, 0x4f, 0xdc, 0xf5, 0x2d, 0x44,
	0x31, 0x2b, 0x0b, 0x38, 0xb8, 0x1e, 0xda, 0x8e, 0xb5, 0x61, 0xb1, 0xbc, 0x82, 0xa8, 0x5d, 0xb7,
	0x1d, 0x9b, 0xee, 0xf7, 0x71, 0x51, 0xce, 0x66, 0xe2, 0x55, 0x6c, 0xbd, 0xc5, 0xdf, 0x57, 0xe0,
	0x04, 0xf2, 0x7d, 0x67, 0xdf, 0xf0, 0xc3, 0xba, 0x63, 0x9b, 0x6d, 0x75, 0xb7, 0xde, 0xeb, 0x2b,
	0xbc, 0x1e, 0x35, 0xae, 0xad, 0xb0, 0xb3, 0x36, 0xf9, 0x51, 0x72, 0x69, 0x7d, 0x40, 0x57, 0x51,
	0x66, 0x55, 0xfd, 0xb6, 0x02, 0x53, 0x01, 0x6e, 0x7a, 0xbb, 0xd8, 0xa8, 0x33, 0x79, 0x86, 0x6d,
	0x11, 0x99, 0xca, 0xbf, 0x79, 0xdc, 0x4a, 0xe9, 0xfc, 0x1c, 0x49, 0x41, 0xd6, 0x07, 0xf4, 0x89,
	0x20, 0xb5, 0xa2, 0x3e, 0x07, 0x15, 0xf9, 0xcd, 0xc8, 0x08, 0xdd, 0x1d, 0xd7, 0xdb, 0x73, 0x63,
	0xa5, 0x78, 0x57, 0x50, 0x5c, 0x1f, 0xd0, 0x4f, 0x4a, 0x8a, 0xbb, 0x82, 0x40, 0xf2, 0xce, 0x3e,
	0x04, 0x35, 0x6b, 0xb3, 0x5a, 0x87, 0xb1, 0xc8, 0xd1, 0xa2, 0xb6, 0xaf, 0x1f, 0x9a, 0xb9, 0x7a,
	0x34, 0x46, 0x8f, 0x04, 0xcf, 0x5a, 0x30, 0x91, 0x36, 0x4c, 0x7d, 0x06, 0x4e, 0x0b, 0xe5, 0x43,
	0x82, 0x03, 0x83, 0x41, 0xd1, 0x90, 0x4d, 0x09, 0xd7, 0x62, 0x48, 0x3f, 0xc1, 0xb7, 0xef, 0x12,
	0x1c, 0xdc, 0x40, 0x14, 0xc9, 0x16, 0x86, 0x65, 0xfa, 0x24, 0x04, 0x0c, 0xf8, 0x45, 0xbd, 0x50,
	0x97, 0x32, 0xaf, 0x97, 0xa0, 0xe8, 0xf9, 0x58, 0x34, 0xe4, 0xda, 0x45, 0x58, 0x3a, 0x5c, 0x4d,
	0x59, 0x01, 0x7e, 0xa6, 0xc0, 0xf9, 0x9b, 0x98, 0x1e, 0x0b, 0xc8, 0x8d, 0xc4, 0x9d, 0x22, 0x23,
	0xad, 0x1d, 0xea, 0xce, 0x5e, 0x8e, 0x8e, 0x7d, 0xa9, 0x7d, 0x47, 0x81, 0xc7, 0x0f, 0xe1, 0x90,
	0x69, 0xab, 0x0e, 0x85, 0xe8, 0x23, 0x9f, 0x0c, 0xed, 0xcb, 0x9f, 0x57, 0x17, 0x21, 0x4d, 0x8f,
	0xe5, 0x6a, 0xdf, 0x1d, 0x84, 0x33, 0x37, 0x71, 0x92, 0x3d, 0xa3, 0x80, 0x1d, 0x5f, 0x5a, 0xc8,
	0xe9, 0x37, 0x46, 0x8e, 0xde, 0x6f, 0xbc, 0x00, 0x73, 0x0e, 0x22, 0xd4, 0xe8, 0x04, 0xbe, 0x21,
	0x0e, 0xbe, 0x0a, 0xa3, 0x79, 0x35, 0x0f, 0x80, 0x1a, 0x8c, 0xef, 0x21, 0x9b, 0x1a, 0x2e, 0xde,
	0xe3, 0x8c, 0x3c, 0x0f, 0x14, 0xf4, 0x12, 0x5b, 0x7c, 0x0d, 0xef, 0x31, 0x52, 0xed, 0xd7, 0x0a,
	0xcc, 0xe5, 0xfb, 0x44, 0x06, 0xe6, 0x0a, 0x54, 0x5a, 0x4c, 0xda, 0x46, 0x24, 0x51, 0x84, 0x3b,
	0xa8, 0xa0, 0x9f, 0x88, 0xb5, 0x5e, 0x47, 0x24, 0xe2, 0x57, 0xef, 0x41, 0x31, 0x21, 0x14, 0xe8,
	0x7a, 0x21, 0x37, 0x01, 0xb5, 0x7c, 0x55, 0x16, 0x33, 0x1e, 0x57, 0x1e, 0x5b, 0x59, 0x95, 0x0a,
	0xa1, 0xfc, 0xa5, 0xfd, 0x56, 0x81, 0xa7, 0x78, 0x7a, 0xc8, 0xd1, 0xdb, 0x77, 0x6c, 0x93, 0x5f,
	0x2b, 0x3e, 0x2c, 0x1f, 0x5f, 0x6c, 0xf5, 0x56, 0x83, 0x32, 0xe3, 0x55, 0x67, 0x83, 0xba, 0xd9,
	0xf1, 0x7f, 0x50, 0xeb, 0xd5, 0x0c, 0x89, 0x61, 0x04, 0x8b, 0x37, 0x31, 0x95, 0x80, 0x8f, 0xd9,
	0x6e, 0x23, 0xdf, 0xb7, 0xdd, 0x46, 0x1f, 0xc6, 0xce, 0x40, 0x21, 0x4e, 0xc5, 0xc2, 0xd4, 0x31,
	0x99, 0x9b, 0xb4, 0x35, 0xd0, 0xba, 0x1d, 0x21, 0x71, 0x31, 0x0f, 0xa5, 0x96, 0x3f, 0x00, 0xf0,
	0xa6, 0xa2, 0xa8, 0x43, 0xec, 0x2e, 0xa2, 0xfd, 0x42, 0x81, 0x33, 0x2f, 0x7b, 0x81, 0x89, 0xef,
	0xba, 0x6c, 0xca, 0x3a, 0x4a, 0xb7, 0xda, 0xff, 0x6d, 0x1b, 0x3a, 0xf2, 0x6d, 0xd3, 0xae, 0xc1,
	0x5c, 0xbe, 0xba, 0xc9, 0xe7, 0x91, 0x3d, 0x44, 0x0c, 0xb6, 0x89, 0x2d, 0x09, 0xfd, 0xe2, 0x1e,
	0x22, 0xb7, 0xf8, 0x02, 0x9b, 0xf4, 0xaa, 0x22, 0x89, 0x3f, 0xc2, 0xfc, 0x72, 0x2f, 0x8b, 0xc1,
	0x63, 0xbb, 0x54, 0xea, 0x05, 0x98, 0x8c, 0xeb, 0x95, 0x81, 0x2c, 0x66, 0xe5, 0x30, 0x8f, 0xea,
	0x78, 0x54, 0xb5, 0x56, 0xd8, 0xa2, 0x7a, 0x11, 0xa6, 0x13, 0x3a, 0x51, 0xf1, 0x59, 0x39, 0x67,
	0x94, 0x93, 0x11, 0xa5, 0xa8, 0xa0, 0x96, 0xb6, 0x08, 0xf3, 0x1d, 0x9d, 0x22, 0x11, 0xfd, 0xa1,
	0xc2, 0xa6, 0x41, 0x01, 0xf7, 0x47, 0xe9, 0xbb, 0x47, 0x71, 0x7f, 0xcf, 0x83, 0xd6, 0x4d, 0x75,
	0x69, 0xe1, 0x5f, 0xd9, 0xd0, 0x66, 0x13, 0x9f, 0x75, 0x5a, 0xaf, 0xe1, 0x87, 0x21, 0xe9, 0xf3,
	0x4d, 0xe5, 0xb1, 0x0c, 0xff, 0xcf, 0x26, 0xb5, 0x7e, 0x28, 0xef, 0x4d, 0xbf, 0xf8, 0xf7, 0x0f,
	0x9f, 0xe7, 0xd3, 0x45, 0xbc, 0x9f, 0x8f, 0x8c, 0xbf, 0x62, 0x03, 0x60, 0xd6, 0x52, 0x79, 0x83,
	0x5e, 0x81, 0xf1, 0x6d, 0xe4, 0x5a, 0x6c, 0xf6, 0xc5, 0x41, 0xe0, 0x05, 0xb2, 0xd0, 0x9f, 0xeb,
	0xa0, 0xc8, 0xba, 0xa0, 0x5d, 0x63, 0xa4, 0xeb, 0x03, 0x7a, 0x79, 0xbb, 0xe5, 0x59, 0xbd, 0xd6,
	0xd2, 0x2f, 0x08, 0x8f, 0xcc, 0x77, 0xb4, 0x47, 0x90, 0xad, 0x0f, 0x24, 0xad, 0xc0, 0xf5, 0x22,
	0x8c, 0x79, 0x21, 0x35, 0xbd, 0x26, 0xd6, 0xfe, 0xa8, 0xc0, 0x0c, 0x9b, 0x36, 0x63, 0x7d, 0x8f,
	0xf5, 0x1b, 0xf0, 0x56, 0xbb, 0xdb, 0xaf, 0xf6, 0xf4, 0xf9, 0x37, 0x57, 0x99, 0x23, 0x85, 0x24,
	0x84, 0xd9, 0x3c, 0x81, 0x32, 0x24, 0x6f, 0x65, 0xda, 0xae, 0xe7, 0x8f, 0xa4, 0x5f, 0xa6, 0xd7,
	0x7a, 0x3f, 0x79, 0xf1, 0x15, 0xd3, 0x7e, 0xf9, 0x5e, 0x7c, 0xdd, 0x4b, 0xa2, 0xd3, 0xe7, 0xeb,
	0xae, 0x8e, 0x46, 0x25, 0xcd, 0x6f, 0xf2, 0x96, 0x2b, 0x8f, 0x58, 0xfa, 0xe9, 0xdf, 0x0a, 0x9c,
	0x6d, 0xa7, 0x7a, 0x19, 0xd9, 0xce, 0x97, 0xc8, 0x49, 0x6f, 0xb7, 0x3b, 0xe9, 0x85, 0xbe, 0x9d,
	0x94, 0xb2, 0x28, 0xf1, 0xd0, 0x02, 0x54, 0x3b, 0x51, 0x4a, 0xf7, 0x60, 0x58, 0x5c, 0x0d, 0x30,
	0xa2, 0xf8, 0xf5, 0x40, 0xd4, 0x11, 0x4e, 0x78, 0x47, 0x9c, 0x14, 0x79, 0xe8, 0x25, 0x18, 0x93,
	0x67, 0x4b, 0x0c, 0x5f, 0xe8, 0x90, 0x0a, 0x36, 0x5c, 0xd3, 0x6b, 0xda, 0x6e, 0x23, 0xe2, 0x8f,
	0xd8, 0x58, 0x1e, 0xef, 0x76, 0x8c, 0x54, 0xe6, 0x12, 0x9c, 0xba, 0x89, 0x69, 0x9e, 0x06, 0x2a,
	0x0c, 0xb3, 0x78, 0xc8, 0xd8, 0xf0, 0xdf, 0xda, 0x2e, 0x9c, 0xce, 0x50, 0xcb, 0x5b, 0x77, 0xaf,
	0x5d, 0xe1, 0x95, 0xbe, 0x8a, 0x38, 0x97, 0xd9, 0xd1, 0x96, 0x65, 0x98, 0xb9, 0x81, 0x19, 0xc8,
	0x7a, 0x55, 0x74, 0x0e, 0x66, 0xf3, 0x18, 0xa4, 0xd1, 0x3f, 0x57, 0xa0, 0x72, 0xcb, 0x26, 0x29,
	0x43, 0xe2, 0xd7, 0x62, 0x39, 0x7f, 0xe9, 0x51, 0x72, 0xfe, 0xd2, 0xc3, 0x53, 0x24, 0x23, 0x21,
	0xf6, 0x7b, 0x02, 0x9f, 0x23, 0x7a, 0x81, 0x2d, 0xdc, 0xb1, 0xdf, 0xc3, 0xea, 0x57, 0xa1, 0xd2,
	0x32, 0xe6, 0x50, 0x54, 0x77, 0x70, 0xdb, 0x88, 0x73, 0x32, 0x1e, 0x71, 0xb6, 0xd8, 0x6e, 0x34,
	0xdf, 0xa8, 0x30, 0xcc, 0x46, 0x19, 0x39, 0xd6, 0xf0, 0xdf, 0xda, 0xef, 0x14, 0x98, 0xc9, 0x51,
	0x57, 0x3a, 0xbe, 0x57, 0x7d, 0xcf, 0xc1, 0x78, 0x5a, 0x8f, 0x41, 0xae, 0x47, 0x99, 0xb6, 0x1e,
	0xff, 0x0d, 0x28, 0x48, 0x9f, 0x93, 0xca, 0x10, 0x7f, 0xaf, 0x75, 0x0c, 0x61, 0x8c, 0x45, 0x5e,
	0x0f, 0x3e, 0xfa, 0xa4, 0x3a, 0xf0, 0xf1, 0x27, 0xd5, 0x81, 0xcf, 0x3e, 0xa9, 0x2a, 0xef, 0x1f,
	0x54, 0x95, 0x9f, 0x1c, 0x54, 0x95, 0xdf, 0x1f, 0x54, 0x95, 0x8f, 0x0e, 0xaa, 0xca, 0x9f, 0x0f,
	0xaa, 0xca, 0xdf, 0x0e, 0xaa, 0x03, 0x9f, 0x1d, 0x54, 0x95, 0x0f, 0x3e, 0xad, 0x0e, 0x7c, 0xf4,
	0x69, 0x75, 0xe0, 0xe3, 0x4f, 0xab, 0x03, 0xef, 0x7c, 0xad, 0xe1, 0x25, 0x4a, 0xd8, 0x5e, 0xf7,
	0xff, 0x89, 0x3f, 0xdf, 0xb6, 0x54, 0x1f, 0xe5, 0x1f, 0x0b, 0xff, 0xff, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xf7, 0x12, 0xbf, 0x36, 0x68, 0x2e, 0x00, 0x00,
}

func (this *PollWorkflowTaskQueueRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollWorkflowTaskQueueRequest)
	if !ok {
		that2, ok := that.(PollWorkflowTaskQueueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.PollerId != that1.PollerId {
		return false
	}
	if !this.PollRequest.Equal(that1.PollRequest) {
		return false
	}
	if this.ForwardedSource != that1.ForwardedSource {
		return false
	}
	return true
}
func (this *PollWorkflowTaskQueueResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollWorkflowTaskQueueResponse)
	if !ok {
		that2, ok := that.(PollWorkflowTaskQueueResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if this.PreviousStartedEventId != that1.PreviousStartedEventId {
		return false
	}
	if this.StartedEventId != that1.StartedEventId {
		return false
	}
	if this.Attempt != that1.Attempt {
		return false
	}
	if this.NextEventId != that1.NextEventId {
		return false
	}
	if this.BacklogCountHint != that1.BacklogCountHint {
		return false
	}
	if this.StickyExecutionEnabled != that1.StickyExecutionEnabled {
		return false
	}
	if !this.Query.Equal(that1.Query) {
		return false
	}
	if !this.TransientWorkflowTask.Equal(that1.TransientWorkflowTask) {
		return false
	}
	if !this.WorkflowExecutionTaskQueue.Equal(that1.WorkflowExecutionTaskQueue) {
		return false
	}
	if !bytes.Equal(this.BranchToken, that1.BranchToken) {
		return false
	}
	if that1.ScheduledTime == nil {
		if this.ScheduledTime != nil {
			return false
		}
	} else if !this.ScheduledTime.Equal(*that1.ScheduledTime) {
		return false
	}
	if that1.StartedTime == nil {
		if this.StartedTime != nil {
			return false
		}
	} else if !this.StartedTime.Equal(*that1.StartedTime) {
		return false
	}
	if len(this.Queries) != len(that1.Queries) {
		return false
	}
	for i := range this.Queries {
		if !this.Queries[i].Equal(that1.Queries[i]) {
			return false
		}
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	if !this.History.Equal(that1.History) {
		return false
	}
	if !bytes.Equal(this.NextPageToken, that1.NextPageToken) {
		return false
	}
	return true
}
func (this *PollActivityTaskQueueRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollActivityTaskQueueRequest)
	if !ok {
		that2, ok := that.(PollActivityTaskQueueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.PollerId != that1.PollerId {
		return false
	}
	if !this.PollRequest.Equal(that1.PollRequest) {
		return false
	}
	if this.ForwardedSource != that1.ForwardedSource {
		return false
	}
	return true
}
func (this *PollActivityTaskQueueResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollActivityTaskQueueResponse)
	if !ok {
		that2, ok := that.(PollActivityTaskQueueResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TaskToken, that1.TaskToken) {
		return false
	}
	if !this.WorkflowExecution.Equal(that1.WorkflowExecution) {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if !this.ActivityType.Equal(that1.ActivityType) {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if that1.ScheduledTime == nil {
		if this.ScheduledTime != nil {
			return false
		}
	} else if !this.ScheduledTime.Equal(*that1.ScheduledTime) {
		return false
	}
	if this.ScheduleToCloseTimeout != nil && that1.ScheduleToCloseTimeout != nil {
		if *this.ScheduleToCloseTimeout != *that1.ScheduleToCloseTimeout {
			return false
		}
	} else if this.ScheduleToCloseTimeout != nil {
		return false
	} else if that1.ScheduleToCloseTimeout != nil {
		return false
	}
	if that1.StartedTime == nil {
		if this.StartedTime != nil {
			return false
		}
	} else if !this.StartedTime.Equal(*that1.StartedTime) {
		return false
	}
	if this.StartToCloseTimeout != nil && that1.StartToCloseTimeout != nil {
		if *this.StartToCloseTimeout != *that1.StartToCloseTimeout {
			return false
		}
	} else if this.StartToCloseTimeout != nil {
		return false
	} else if that1.StartToCloseTimeout != nil {
		return false
	}
	if this.HeartbeatTimeout != nil && that1.HeartbeatTimeout != nil {
		if *this.HeartbeatTimeout != *that1.HeartbeatTimeout {
			return false
		}
	} else if this.HeartbeatTimeout != nil {
		return false
	} else if that1.HeartbeatTimeout != nil {
		return false
	}
	if this.Attempt != that1.Attempt {
		return false
	}
	if that1.CurrentAttemptScheduledTime == nil {
		if this.CurrentAttemptScheduledTime != nil {
			return false
		}
	} else if !this.CurrentAttemptScheduledTime.Equal(*that1.CurrentAttemptScheduledTime) {
		return false
	}
	if !this.HeartbeatDetails.Equal(that1.HeartbeatDetails) {
		return false
	}
	if !this.WorkflowType.Equal(that1.WorkflowType) {
		return false
	}
	if this.WorkflowNamespace != that1.WorkflowNamespace {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	return true
}
func (this *AddWorkflowTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddWorkflowTaskRequest)
	if !ok {
		that2, ok := that.(AddWorkflowTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if !this.Execution.Equal(that1.Execution) {
		return false
	}
	if !this.TaskQueue.Equal(that1.TaskQueue) {
		return false
	}
	if this.ScheduledEventId != that1.ScheduledEventId {
		return false
	}
	if this.ScheduleToStartTimeout != nil && that1.ScheduleToStartTimeout != nil {
		if *this.ScheduleToStartTimeout != *that1.ScheduleToStartTimeout {
			return false
		}
	} else if this.ScheduleToStartTimeout != nil {
		return false
	} else if that1.ScheduleToStartTimeout != nil {
		return false
	}
	if this.ForwardedSource != that1.ForwardedSource {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	if !this.VersionDirective.Equal(that1.VersionDirective) {
		return false
	}
	return true
}
func (this *AddWorkflowTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddWorkflowTaskResponse)
	if !ok {
		that2, ok := that.(AddWorkflowTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *AddActivityTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddActivityTaskRequest)
	if !ok {
		that2, ok := that.(AddActivityTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if !this.Execution.Equal(that1.Execution) {
		return false
	}
	if !this.TaskQueue.Equal(that1.TaskQueue) {
		return false
	}
	if this.ScheduledEventId != that1.ScheduledEventId {
		return false
	}
	if this.ScheduleToStartTimeout != nil && that1.ScheduleToStartTimeout != nil {
		if *this.ScheduleToStartTimeout != *that1.ScheduleToStartTimeout {
			return false
		}
	} else if this.ScheduleToStartTimeout != nil {
		return false
	} else if that1.ScheduleToStartTimeout != nil {
		return false
	}
	if this.ForwardedSource != that1.ForwardedSource {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	if !this.VersionDirective.Equal(that1.VersionDirective) {
		return false
	}
	return true
}
func (this *AddActivityTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddActivityTaskResponse)
	if !ok {
		that2, ok := that.(AddActivityTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *QueryWorkflowRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryWorkflowRequest)
	if !ok {
		that2, ok := that.(QueryWorkflowRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if !this.TaskQueue.Equal(that1.TaskQueue) {
		return false
	}
	if !this.QueryRequest.Equal(that1.QueryRequest) {
		return false
	}
	if this.ForwardedSource != that1.ForwardedSource {
		return false
	}
	if !this.VersionDirective.Equal(that1.VersionDirective) {
		return false
	}
	return true
}
func (this *QueryWorkflowResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryWorkflowResponse)
	if !ok {
		that2, ok := that.(QueryWorkflowResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.QueryResult.Equal(that1.QueryResult) {
		return false
	}
	if !this.QueryRejected.Equal(that1.QueryRejected) {
		return false
	}
	return true
}
func (this *RespondQueryTaskCompletedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondQueryTaskCompletedRequest)
	if !ok {
		that2, ok := that.(RespondQueryTaskCompletedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if !this.TaskQueue.Equal(that1.TaskQueue) {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if !this.CompletedRequest.Equal(that1.CompletedRequest) {
		return false
	}
	return true
}
func (this *RespondQueryTaskCompletedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondQueryTaskCompletedResponse)
	if !ok {
		that2, ok := that.(RespondQueryTaskCompletedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CancelOutstandingPollRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CancelOutstandingPollRequest)
	if !ok {
		that2, ok := that.(CancelOutstandingPollRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.TaskQueueType != that1.TaskQueueType {
		return false
	}
	if !this.TaskQueue.Equal(that1.TaskQueue) {
		return false
	}
	if this.PollerId != that1.PollerId {
		return false
	}
	return true
}
func (this *CancelOutstandingPollResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CancelOutstandingPollResponse)
	if !ok {
		that2, ok := that.(CancelOutstandingPollResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DescribeTaskQueueRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DescribeTaskQueueRequest)
	if !ok {
		that2, ok := that.(DescribeTaskQueueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if !this.DescRequest.Equal(that1.DescRequest) {
		return false
	}
	return true
}
func (this *DescribeTaskQueueResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DescribeTaskQueueResponse)
	if !ok {
		that2, ok := that.(DescribeTaskQueueResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Pollers) != len(that1.Pollers) {
		return false
	}
	for i := range this.Pollers {
		if !this.Pollers[i].Equal(that1.Pollers[i]) {
			return false
		}
	}
	if !this.TaskQueueStatus.Equal(that1.TaskQueueStatus) {
		return false
	}
	return true
}
func (this *ListTaskQueuePartitionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTaskQueuePartitionsRequest)
	if !ok {
		that2, ok := that.(ListTaskQueuePartitionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if !this.TaskQueue.Equal(that1.TaskQueue) {
		return false
	}
	return true
}
func (this *ListTaskQueuePartitionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTaskQueuePartitionsResponse)
	if !ok {
		that2, ok := that.(ListTaskQueuePartitionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ActivityTaskQueuePartitions) != len(that1.ActivityTaskQueuePartitions) {
		return false
	}
	for i := range this.ActivityTaskQueuePartitions {
		if !this.ActivityTaskQueuePartitions[i].Equal(that1.ActivityTaskQueuePartitions[i]) {
			return false
		}
	}
	if len(this.WorkflowTaskQueuePartitions) != len(that1.WorkflowTaskQueuePartitions) {
		return false
	}
	for i := range this.WorkflowTaskQueuePartitions {
		if !this.WorkflowTaskQueuePartitions[i].Equal(that1.WorkflowTaskQueuePartitions[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateWorkerBuildIdCompatibilityRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateWorkerBuildIdCompatibilityRequest)
	if !ok {
		that2, ok := that.(UpdateWorkerBuildIdCompatibilityRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	if that1.Operation == nil {
		if this.Operation != nil {
			return false
		}
	} else if this.Operation == nil {
		return false
	} else if !this.Operation.Equal(that1.Operation) {
		return false
	}
	return true
}
func (this *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest_)
	if !ok {
		that2, ok := that.(UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApplyPublicRequest.Equal(that1.ApplyPublicRequest) {
		return false
	}
	return true
}
func (this *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds_)
	if !ok {
		that2, ok := that.(UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RemoveBuildIds.Equal(that1.RemoveBuildIds) {
		return false
	}
	return true
}
func (this *UpdateWorkerBuildIdCompatibilityRequest_PersistUnknownBuildId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateWorkerBuildIdCompatibilityRequest_PersistUnknownBuildId)
	if !ok {
		that2, ok := that.(UpdateWorkerBuildIdCompatibilityRequest_PersistUnknownBuildId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PersistUnknownBuildId != that1.PersistUnknownBuildId {
		return false
	}
	return true
}
func (this *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest)
	if !ok {
		that2, ok := that.(UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	return true
}
func (this *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds)
	if !ok {
		that2, ok := that.(UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.KnownUserDataVersion != that1.KnownUserDataVersion {
		return false
	}
	if len(this.BuildIds) != len(that1.BuildIds) {
		return false
	}
	for i := range this.BuildIds {
		if this.BuildIds[i] != that1.BuildIds[i] {
			return false
		}
	}
	return true
}
func (this *UpdateWorkerBuildIdCompatibilityResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateWorkerBuildIdCompatibilityResponse)
	if !ok {
		that2, ok := that.(UpdateWorkerBuildIdCompatibilityResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetWorkerBuildIdCompatibilityRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetWorkerBuildIdCompatibilityRequest)
	if !ok {
		that2, ok := that.(GetWorkerBuildIdCompatibilityRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	return true
}
func (this *GetWorkerBuildIdCompatibilityResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetWorkerBuildIdCompatibilityResponse)
	if !ok {
		that2, ok := that.(GetWorkerBuildIdCompatibilityResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Response.Equal(that1.Response) {
		return false
	}
	return true
}
func (this *GetTaskQueueUserDataRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTaskQueueUserDataRequest)
	if !ok {
		that2, ok := that.(GetTaskQueueUserDataRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	if this.TaskQueueType != that1.TaskQueueType {
		return false
	}
	if this.LastKnownUserDataVersion != that1.LastKnownUserDataVersion {
		return false
	}
	if this.WaitNewData != that1.WaitNewData {
		return false
	}
	return true
}
func (this *GetTaskQueueUserDataResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTaskQueueUserDataResponse)
	if !ok {
		that2, ok := that.(GetTaskQueueUserDataResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskQueueHasUserData != that1.TaskQueueHasUserData {
		return false
	}
	if !this.UserData.Equal(that1.UserData) {
		return false
	}
	return true
}
func (this *ApplyTaskQueueUserDataReplicationEventRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplyTaskQueueUserDataReplicationEventRequest)
	if !ok {
		that2, ok := that.(ApplyTaskQueueUserDataReplicationEventRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	if !this.UserData.Equal(that1.UserData) {
		return false
	}
	return true
}
func (this *ApplyTaskQueueUserDataReplicationEventResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplyTaskQueueUserDataReplicationEventResponse)
	if !ok {
		that2, ok := that.(ApplyTaskQueueUserDataReplicationEventResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetBuildIdTaskQueueMappingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetBuildIdTaskQueueMappingRequest)
	if !ok {
		that2, ok := that.(GetBuildIdTaskQueueMappingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.BuildId != that1.BuildId {
		return false
	}
	return true
}
func (this *GetBuildIdTaskQueueMappingResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetBuildIdTaskQueueMappingResponse)
	if !ok {
		that2, ok := that.(GetBuildIdTaskQueueMappingResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TaskQueues) != len(that1.TaskQueues) {
		return false
	}
	for i := range this.TaskQueues {
		if this.TaskQueues[i] != that1.TaskQueues[i] {
			return false
		}
	}
	return true
}
func (this *ForceUnloadTaskQueueRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForceUnloadTaskQueueRequest)
	if !ok {
		that2, ok := that.(ForceUnloadTaskQueueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	if this.TaskQueueType != that1.TaskQueueType {
		return false
	}
	return true
}
func (this *ForceUnloadTaskQueueResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForceUnloadTaskQueueResponse)
	if !ok {
		that2, ok := that.(ForceUnloadTaskQueueResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.WasLoaded != that1.WasLoaded {
		return false
	}
	return true
}
func (this *UpdateTaskQueueUserDataRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateTaskQueueUserDataRequest)
	if !ok {
		that2, ok := that.(UpdateTaskQueueUserDataRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	if !this.UserData.Equal(that1.UserData) {
		return false
	}
	if len(this.BuildIdsAdded) != len(that1.BuildIdsAdded) {
		return false
	}
	for i := range this.BuildIdsAdded {
		if this.BuildIdsAdded[i] != that1.BuildIdsAdded[i] {
			return false
		}
	}
	if len(this.BuildIdsRemoved) != len(that1.BuildIdsRemoved) {
		return false
	}
	for i := range this.BuildIdsRemoved {
		if this.BuildIdsRemoved[i] != that1.BuildIdsRemoved[i] {
			return false
		}
	}
	return true
}
func (this *UpdateTaskQueueUserDataResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateTaskQueueUserDataResponse)
	if !ok {
		that2, ok := that.(UpdateTaskQueueUserDataResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ReplicateTaskQueueUserDataRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicateTaskQueueUserDataRequest)
	if !ok {
		that2, ok := that.(ReplicateTaskQueueUserDataRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	if !this.UserData.Equal(that1.UserData) {
		return false
	}
	return true
}
func (this *ReplicateTaskQueueUserDataResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicateTaskQueueUserDataResponse)
	if !ok {
		that2, ok := that.(ReplicateTaskQueueUserDataResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DispatchNexusTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DispatchNexusTaskRequest)
	if !ok {
		that2, ok := that.(DispatchNexusTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if !this.TaskQueue.Equal(that1.TaskQueue) {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if this.ForwardedSource != that1.ForwardedSource {
		return false
	}
	return true
}
func (this *DispatchNexusTaskResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DispatchNexusTaskResponse)
	if !ok {
		that2, ok := that.(DispatchNexusTaskResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Outcome == nil {
		if this.Outcome != nil {
			return false
		}
	} else if this.Outcome == nil {
		return false
	} else if !this.Outcome.Equal(that1.Outcome) {
		return false
	}
	return true
}
func (this *DispatchNexusTaskResponse_HandlerError) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DispatchNexusTaskResponse_HandlerError)
	if !ok {
		that2, ok := that.(DispatchNexusTaskResponse_HandlerError)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HandlerError.Equal(that1.HandlerError) {
		return false
	}
	return true
}
func (this *DispatchNexusTaskResponse_Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DispatchNexusTaskResponse_Response)
	if !ok {
		that2, ok := that.(DispatchNexusTaskResponse_Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Response.Equal(that1.Response) {
		return false
	}
	return true
}
func (this *PollNexusTaskQueueRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollNexusTaskQueueRequest)
	if !ok {
		that2, ok := that.(PollNexusTaskQueueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.PollerId != that1.PollerId {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if this.ForwardedSource != that1.ForwardedSource {
		return false
	}
	return true
}
func (this *PollNexusTaskQueueResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PollNexusTaskQueueResponse)
	if !ok {
		that2, ok := that.(PollNexusTaskQueueResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Response.Equal(that1.Response) {
		return false
	}
	return true
}
func (this *RespondNexusTaskCompletedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondNexusTaskCompletedRequest)
	if !ok {
		that2, ok := that.(RespondNexusTaskCompletedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if !this.TaskQueue.Equal(that1.TaskQueue) {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	return true
}
func (this *RespondNexusTaskCompletedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondNexusTaskCompletedResponse)
	if !ok {
		that2, ok := that.(RespondNexusTaskCompletedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RespondNexusTaskFailedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondNexusTaskFailedRequest)
	if !ok {
		that2, ok := that.(RespondNexusTaskFailedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if !this.TaskQueue.Equal(that1.TaskQueue) {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	return true
}
func (this *RespondNexusTaskFailedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RespondNexusTaskFailedResponse)
	if !ok {
		that2, ok := that.(RespondNexusTaskFailedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CreateOrUpdateNexusServiceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateOrUpdateNexusServiceRequest)
	if !ok {
		that2, ok := that.(CreateOrUpdateNexusServiceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Service.Equal(that1.Service) {
		return false
	}
	return true
}
func (this *CreateOrUpdateNexusServiceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateOrUpdateNexusServiceResponse)
	if !ok {
		that2, ok := that.(CreateOrUpdateNexusServiceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetNexusServiceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetNexusServiceRequest)
	if !ok {
		that2, ok := that.(GetNexusServiceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GetNexusServiceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetNexusServiceResponse)
	if !ok {
		that2, ok := that.(GetNexusServiceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Service.Equal(that1.Service) {
		return false
	}
	return true
}
func (this *DeleteNexusServiceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteNexusServiceRequest)
	if !ok {
		that2, ok := that.(DeleteNexusServiceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *DeleteNexusServiceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteNexusServiceResponse)
	if !ok {
		that2, ok := that.(DeleteNexusServiceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ListNexusServicesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListNexusServicesRequest)
	if !ok {
		that2, ok := that.(ListNexusServicesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.NextPageToken, that1.NextPageToken) {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if this.LastKnownTableVersion != that1.LastKnownTableVersion {
		return false
	}
	if this.Wait != that1.Wait {
		return false
	}
	return true
}
func (this *ListNexusServicesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListNexusServicesResponse)
	if !ok {
		that2, ok := that.(ListNexusServicesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.NextPageToken, that1.NextPageToken) {
		return false
	}
	if this.TableVersion != that1.TableVersion {
		return false
	}
	if len(this.Services) != len(that1.Services) {
		return false
	}
	for i := range this.Services {
		if !this.Services[i].Equal(that1.Services[i]) {
			return false
		}
	}
	return true
}
func (this *PollWorkflowTaskQueueRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&matchingservice.PollWorkflowTaskQueueRequest{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "PollerId: "+fmt.Sprintf("%#v", this.PollerId)+",\n")
	if this.PollRequest != nil {
		s = append(s, "PollRequest: "+fmt.Sprintf("%#v", this.PollRequest)+",\n")
	}
	s = append(s, "ForwardedSource: "+fmt.Sprintf("%#v", this.ForwardedSource)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PollWorkflowTaskQueueResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 23)
	s = append(s, "&matchingservice.PollWorkflowTaskQueueResponse{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	s = append(s, "PreviousStartedEventId: "+fmt.Sprintf("%#v", this.PreviousStartedEventId)+",\n")
	s = append(s, "StartedEventId: "+fmt.Sprintf("%#v", this.StartedEventId)+",\n")
	s = append(s, "Attempt: "+fmt.Sprintf("%#v", this.Attempt)+",\n")
	s = append(s, "NextEventId: "+fmt.Sprintf("%#v", this.NextEventId)+",\n")
	s = append(s, "BacklogCountHint: "+fmt.Sprintf("%#v", this.BacklogCountHint)+",\n")
	s = append(s, "StickyExecutionEnabled: "+fmt.Sprintf("%#v", this.StickyExecutionEnabled)+",\n")
	if this.Query != nil {
		s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	}
	if this.TransientWorkflowTask != nil {
		s = append(s, "TransientWorkflowTask: "+fmt.Sprintf("%#v", this.TransientWorkflowTask)+",\n")
	}
	if this.WorkflowExecutionTaskQueue != nil {
		s = append(s, "WorkflowExecutionTaskQueue: "+fmt.Sprintf("%#v", this.WorkflowExecutionTaskQueue)+",\n")
	}
	s = append(s, "BranchToken: "+fmt.Sprintf("%#v", this.BranchToken)+",\n")
	s = append(s, "ScheduledTime: "+fmt.Sprintf("%#v", this.ScheduledTime)+",\n")
	s = append(s, "StartedTime: "+fmt.Sprintf("%#v", this.StartedTime)+",\n")
	keysForQueries := make([]string, 0, len(this.Queries))
	for k, _ := range this.Queries {
		keysForQueries = append(keysForQueries, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForQueries)
	mapStringForQueries := "map[string]*v12.WorkflowQuery{"
	for _, k := range keysForQueries {
		mapStringForQueries += fmt.Sprintf("%#v: %#v,", k, this.Queries[k])
	}
	mapStringForQueries += "}"
	if this.Queries != nil {
		s = append(s, "Queries: "+mapStringForQueries+",\n")
	}
	if this.Messages != nil {
		s = append(s, "Messages: "+fmt.Sprintf("%#v", this.Messages)+",\n")
	}
	if this.History != nil {
		s = append(s, "History: "+fmt.Sprintf("%#v", this.History)+",\n")
	}
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PollActivityTaskQueueRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&matchingservice.PollActivityTaskQueueRequest{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "PollerId: "+fmt.Sprintf("%#v", this.PollerId)+",\n")
	if this.PollRequest != nil {
		s = append(s, "PollRequest: "+fmt.Sprintf("%#v", this.PollRequest)+",\n")
	}
	s = append(s, "ForwardedSource: "+fmt.Sprintf("%#v", this.ForwardedSource)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PollActivityTaskQueueResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&matchingservice.PollActivityTaskQueueResponse{")
	s = append(s, "TaskToken: "+fmt.Sprintf("%#v", this.TaskToken)+",\n")
	if this.WorkflowExecution != nil {
		s = append(s, "WorkflowExecution: "+fmt.Sprintf("%#v", this.WorkflowExecution)+",\n")
	}
	s = append(s, "ActivityId: "+fmt.Sprintf("%#v", this.ActivityId)+",\n")
	if this.ActivityType != nil {
		s = append(s, "ActivityType: "+fmt.Sprintf("%#v", this.ActivityType)+",\n")
	}
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "ScheduledTime: "+fmt.Sprintf("%#v", this.ScheduledTime)+",\n")
	s = append(s, "ScheduleToCloseTimeout: "+fmt.Sprintf("%#v", this.ScheduleToCloseTimeout)+",\n")
	s = append(s, "StartedTime: "+fmt.Sprintf("%#v", this.StartedTime)+",\n")
	s = append(s, "StartToCloseTimeout: "+fmt.Sprintf("%#v", this.StartToCloseTimeout)+",\n")
	s = append(s, "HeartbeatTimeout: "+fmt.Sprintf("%#v", this.HeartbeatTimeout)+",\n")
	s = append(s, "Attempt: "+fmt.Sprintf("%#v", this.Attempt)+",\n")
	s = append(s, "CurrentAttemptScheduledTime: "+fmt.Sprintf("%#v", this.CurrentAttemptScheduledTime)+",\n")
	if this.HeartbeatDetails != nil {
		s = append(s, "HeartbeatDetails: "+fmt.Sprintf("%#v", this.HeartbeatDetails)+",\n")
	}
	if this.WorkflowType != nil {
		s = append(s, "WorkflowType: "+fmt.Sprintf("%#v", this.WorkflowType)+",\n")
	}
	s = append(s, "WorkflowNamespace: "+fmt.Sprintf("%#v", this.WorkflowNamespace)+",\n")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddWorkflowTaskRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&matchingservice.AddWorkflowTaskRequest{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	if this.Execution != nil {
		s = append(s, "Execution: "+fmt.Sprintf("%#v", this.Execution)+",\n")
	}
	if this.TaskQueue != nil {
		s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	}
	s = append(s, "ScheduledEventId: "+fmt.Sprintf("%#v", this.ScheduledEventId)+",\n")
	s = append(s, "ScheduleToStartTimeout: "+fmt.Sprintf("%#v", this.ScheduleToStartTimeout)+",\n")
	s = append(s, "ForwardedSource: "+fmt.Sprintf("%#v", this.ForwardedSource)+",\n")
	s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	if this.VersionDirective != nil {
		s = append(s, "VersionDirective: "+fmt.Sprintf("%#v", this.VersionDirective)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddWorkflowTaskResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&matchingservice.AddWorkflowTaskResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddActivityTaskRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&matchingservice.AddActivityTaskRequest{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	if this.Execution != nil {
		s = append(s, "Execution: "+fmt.Sprintf("%#v", this.Execution)+",\n")
	}
	if this.TaskQueue != nil {
		s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	}
	s = append(s, "ScheduledEventId: "+fmt.Sprintf("%#v", this.ScheduledEventId)+",\n")
	s = append(s, "ScheduleToStartTimeout: "+fmt.Sprintf("%#v", this.ScheduleToStartTimeout)+",\n")
	s = append(s, "ForwardedSource: "+fmt.Sprintf("%#v", this.ForwardedSource)+",\n")
	s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	if this.VersionDirective != nil {
		s = append(s, "VersionDirective: "+fmt.Sprintf("%#v", this.VersionDirective)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddActivityTaskResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&matchingservice.AddActivityTaskResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryWorkflowRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&matchingservice.QueryWorkflowRequest{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	if this.TaskQueue != nil {
		s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	}
	if this.QueryRequest != nil {
		s = append(s, "QueryRequest: "+fmt.Sprintf("%#v", this.QueryRequest)+",\n")
	}
	s = append(s, "ForwardedSource: "+fmt.Sprintf("%#v", this.ForwardedSource)+",\n")
	if this.VersionDirective != nil {
		s = append(s, "VersionDirective: "+fmt.Sprintf("%#v", this.VersionDirective)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryWorkflowResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&matchingservice.QueryWorkflowResponse{")
	if this.QueryResult != nil {
		s = append(s, "QueryResult: "+fmt.Sprintf("%#v", this.QueryResult)+",\n")
	}
	if this.QueryRejected != nil {
		s = append(s, "QueryRejected: "+fmt.Sprintf("%#v", this.QueryRejected)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondQueryTaskCompletedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&matchingservice.RespondQueryTaskCompletedRequest{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	if this.TaskQueue != nil {
		s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	}
	s = append(s, "TaskId: "+fmt.Sprintf("%#v", this.TaskId)+",\n")
	if this.CompletedRequest != nil {
		s = append(s, "CompletedRequest: "+fmt.Sprintf("%#v", this.CompletedRequest)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondQueryTaskCompletedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&matchingservice.RespondQueryTaskCompletedResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CancelOutstandingPollRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&matchingservice.CancelOutstandingPollRequest{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "TaskQueueType: "+fmt.Sprintf("%#v", this.TaskQueueType)+",\n")
	if this.TaskQueue != nil {
		s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	}
	s = append(s, "PollerId: "+fmt.Sprintf("%#v", this.PollerId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CancelOutstandingPollResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&matchingservice.CancelOutstandingPollResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DescribeTaskQueueRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&matchingservice.DescribeTaskQueueRequest{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	if this.DescRequest != nil {
		s = append(s, "DescRequest: "+fmt.Sprintf("%#v", this.DescRequest)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DescribeTaskQueueResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&matchingservice.DescribeTaskQueueResponse{")
	if this.Pollers != nil {
		s = append(s, "Pollers: "+fmt.Sprintf("%#v", this.Pollers)+",\n")
	}
	if this.TaskQueueStatus != nil {
		s = append(s, "TaskQueueStatus: "+fmt.Sprintf("%#v", this.TaskQueueStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTaskQueuePartitionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&matchingservice.ListTaskQueuePartitionsRequest{")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	if this.TaskQueue != nil {
		s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTaskQueuePartitionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&matchingservice.ListTaskQueuePartitionsResponse{")
	if this.ActivityTaskQueuePartitions != nil {
		s = append(s, "ActivityTaskQueuePartitions: "+fmt.Sprintf("%#v", this.ActivityTaskQueuePartitions)+",\n")
	}
	if this.WorkflowTaskQueuePartitions != nil {
		s = append(s, "WorkflowTaskQueuePartitions: "+fmt.Sprintf("%#v", this.WorkflowTaskQueuePartitions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateWorkerBuildIdCompatibilityRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&matchingservice.UpdateWorkerBuildIdCompatibilityRequest{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	if this.Operation != nil {
		s = append(s, "Operation: "+fmt.Sprintf("%#v", this.Operation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&matchingservice.UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest_{` +
		`ApplyPublicRequest:` + fmt.Sprintf("%#v", this.ApplyPublicRequest) + `}`}, ", ")
	return s
}
func (this *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&matchingservice.UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds_{` +
		`RemoveBuildIds:` + fmt.Sprintf("%#v", this.RemoveBuildIds) + `}`}, ", ")
	return s
}
func (this *UpdateWorkerBuildIdCompatibilityRequest_PersistUnknownBuildId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&matchingservice.UpdateWorkerBuildIdCompatibilityRequest_PersistUnknownBuildId{` +
		`PersistUnknownBuildId:` + fmt.Sprintf("%#v", this.PersistUnknownBuildId) + `}`}, ", ")
	return s
}
func (this *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&matchingservice.UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest{")
	if this.Request != nil {
		s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&matchingservice.UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds{")
	s = append(s, "KnownUserDataVersion: "+fmt.Sprintf("%#v", this.KnownUserDataVersion)+",\n")
	s = append(s, "BuildIds: "+fmt.Sprintf("%#v", this.BuildIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateWorkerBuildIdCompatibilityResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&matchingservice.UpdateWorkerBuildIdCompatibilityResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetWorkerBuildIdCompatibilityRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&matchingservice.GetWorkerBuildIdCompatibilityRequest{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	if this.Request != nil {
		s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetWorkerBuildIdCompatibilityResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&matchingservice.GetWorkerBuildIdCompatibilityResponse{")
	if this.Response != nil {
		s = append(s, "Response: "+fmt.Sprintf("%#v", this.Response)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTaskQueueUserDataRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&matchingservice.GetTaskQueueUserDataRequest{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	s = append(s, "TaskQueueType: "+fmt.Sprintf("%#v", this.TaskQueueType)+",\n")
	s = append(s, "LastKnownUserDataVersion: "+fmt.Sprintf("%#v", this.LastKnownUserDataVersion)+",\n")
	s = append(s, "WaitNewData: "+fmt.Sprintf("%#v", this.WaitNewData)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTaskQueueUserDataResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&matchingservice.GetTaskQueueUserDataResponse{")
	s = append(s, "TaskQueueHasUserData: "+fmt.Sprintf("%#v", this.TaskQueueHasUserData)+",\n")
	if this.UserData != nil {
		s = append(s, "UserData: "+fmt.Sprintf("%#v", this.UserData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApplyTaskQueueUserDataReplicationEventRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&matchingservice.ApplyTaskQueueUserDataReplicationEventRequest{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	if this.UserData != nil {
		s = append(s, "UserData: "+fmt.Sprintf("%#v", this.UserData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ApplyTaskQueueUserDataReplicationEventResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&matchingservice.ApplyTaskQueueUserDataReplicationEventResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBuildIdTaskQueueMappingRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&matchingservice.GetBuildIdTaskQueueMappingRequest{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "BuildId: "+fmt.Sprintf("%#v", this.BuildId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBuildIdTaskQueueMappingResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&matchingservice.GetBuildIdTaskQueueMappingResponse{")
	s = append(s, "TaskQueues: "+fmt.Sprintf("%#v", this.TaskQueues)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ForceUnloadTaskQueueRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&matchingservice.ForceUnloadTaskQueueRequest{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	s = append(s, "TaskQueueType: "+fmt.Sprintf("%#v", this.TaskQueueType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ForceUnloadTaskQueueResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&matchingservice.ForceUnloadTaskQueueResponse{")
	s = append(s, "WasLoaded: "+fmt.Sprintf("%#v", this.WasLoaded)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateTaskQueueUserDataRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&matchingservice.UpdateTaskQueueUserDataRequest{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	if this.UserData != nil {
		s = append(s, "UserData: "+fmt.Sprintf("%#v", this.UserData)+",\n")
	}
	s = append(s, "BuildIdsAdded: "+fmt.Sprintf("%#v", this.BuildIdsAdded)+",\n")
	s = append(s, "BuildIdsRemoved: "+fmt.Sprintf("%#v", this.BuildIdsRemoved)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateTaskQueueUserDataResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&matchingservice.UpdateTaskQueueUserDataResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplicateTaskQueueUserDataRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&matchingservice.ReplicateTaskQueueUserDataRequest{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	if this.UserData != nil {
		s = append(s, "UserData: "+fmt.Sprintf("%#v", this.UserData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplicateTaskQueueUserDataResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&matchingservice.ReplicateTaskQueueUserDataResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DispatchNexusTaskRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&matchingservice.DispatchNexusTaskRequest{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	if this.TaskQueue != nil {
		s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	}
	if this.Request != nil {
		s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	}
	s = append(s, "ForwardedSource: "+fmt.Sprintf("%#v", this.ForwardedSource)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DispatchNexusTaskResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&matchingservice.DispatchNexusTaskResponse{")
	if this.Outcome != nil {
		s = append(s, "Outcome: "+fmt.Sprintf("%#v", this.Outcome)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DispatchNexusTaskResponse_HandlerError) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&matchingservice.DispatchNexusTaskResponse_HandlerError{` +
		`HandlerError:` + fmt.Sprintf("%#v", this.HandlerError) + `}`}, ", ")
	return s
}
func (this *DispatchNexusTaskResponse_Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&matchingservice.DispatchNexusTaskResponse_Response{` +
		`Response:` + fmt.Sprintf("%#v", this.Response) + `}`}, ", ")
	return s
}
func (this *PollNexusTaskQueueRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&matchingservice.PollNexusTaskQueueRequest{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "PollerId: "+fmt.Sprintf("%#v", this.PollerId)+",\n")
	if this.Request != nil {
		s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	}
	s = append(s, "ForwardedSource: "+fmt.Sprintf("%#v", this.ForwardedSource)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PollNexusTaskQueueResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&matchingservice.PollNexusTaskQueueResponse{")
	if this.Response != nil {
		s = append(s, "Response: "+fmt.Sprintf("%#v", this.Response)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondNexusTaskCompletedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&matchingservice.RespondNexusTaskCompletedRequest{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	if this.TaskQueue != nil {
		s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	}
	s = append(s, "TaskId: "+fmt.Sprintf("%#v", this.TaskId)+",\n")
	if this.Request != nil {
		s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondNexusTaskCompletedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&matchingservice.RespondNexusTaskCompletedResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondNexusTaskFailedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&matchingservice.RespondNexusTaskFailedRequest{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	if this.TaskQueue != nil {
		s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	}
	s = append(s, "TaskId: "+fmt.Sprintf("%#v", this.TaskId)+",\n")
	if this.Request != nil {
		s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RespondNexusTaskFailedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&matchingservice.RespondNexusTaskFailedResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateOrUpdateNexusServiceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&matchingservice.CreateOrUpdateNexusServiceRequest{")
	if this.Service != nil {
		s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateOrUpdateNexusServiceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&matchingservice.CreateOrUpdateNexusServiceResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetNexusServiceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&matchingservice.GetNexusServiceRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetNexusServiceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&matchingservice.GetNexusServiceResponse{")
	if this.Service != nil {
		s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteNexusServiceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&matchingservice.DeleteNexusServiceRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteNexusServiceResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&matchingservice.DeleteNexusServiceResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListNexusServicesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&matchingservice.ListNexusServicesRequest{")
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	s = append(s, "LastKnownTableVersion: "+fmt.Sprintf("%#v", this.LastKnownTableVersion)+",\n")
	s = append(s, "Wait: "+fmt.Sprintf("%#v", this.Wait)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListNexusServicesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&matchingservice.ListNexusServicesResponse{")
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "TableVersion: "+fmt.Sprintf("%#v", this.TableVersion)+",\n")
	if this.Services != nil {
		s = append(s, "Services: "+fmt.Sprintf("%#v", this.Services)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRequestResponse(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PollWorkflowTaskQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollWorkflowTaskQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollWorkflowTaskQueueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForwardedSource) > 0 {
		i -= len(m.ForwardedSource)
		copy(dAtA[i:], m.ForwardedSource)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ForwardedSource)))
		i--
		dAtA[i] = 0x22
	}
	if m.PollRequest != nil {
		{
			size, err := m.PollRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PollerId) > 0 {
		i -= len(m.PollerId)
		copy(dAtA[i:], m.PollerId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.PollerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PollWorkflowTaskQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollWorkflowTaskQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollWorkflowTaskQueueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.History != nil {
		{
			size, err := m.History.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.Queries) > 0 {
		for k := range m.Queries {
			v := m.Queries[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRequestResponse(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintRequestResponse(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintRequestResponse(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if m.StartedTime != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartedTime):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintRequestResponse(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.ScheduledTime != nil {
		n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ScheduledTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ScheduledTime):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintRequestResponse(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.BranchToken) > 0 {
		i -= len(m.BranchToken)
		copy(dAtA[i:], m.BranchToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.BranchToken)))
		i--
		dAtA[i] = 0x72
	}
	if m.WorkflowExecutionTaskQueue != nil {
		{
			size, err := m.WorkflowExecutionTaskQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.TransientWorkflowTask != nil {
		{
			size, err := m.TransientWorkflowTask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.StickyExecutionEnabled {
		i--
		if m.StickyExecutionEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.BacklogCountHint != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.BacklogCountHint))
		i--
		dAtA[i] = 0x40
	}
	if m.NextEventId != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.NextEventId))
		i--
		dAtA[i] = 0x38
	}
	if m.Attempt != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x30
	}
	if m.StartedEventId != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.PreviousStartedEventId != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.PreviousStartedEventId))
		i--
		dAtA[i] = 0x20
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PollActivityTaskQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollActivityTaskQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollActivityTaskQueueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForwardedSource) > 0 {
		i -= len(m.ForwardedSource)
		copy(dAtA[i:], m.ForwardedSource)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ForwardedSource)))
		i--
		dAtA[i] = 0x22
	}
	if m.PollRequest != nil {
		{
			size, err := m.PollRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PollerId) > 0 {
		i -= len(m.PollerId)
		copy(dAtA[i:], m.PollerId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.PollerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PollActivityTaskQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollActivityTaskQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollActivityTaskQueueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.WorkflowNamespace) > 0 {
		i -= len(m.WorkflowNamespace)
		copy(dAtA[i:], m.WorkflowNamespace)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.WorkflowNamespace)))
		i--
		dAtA[i] = 0x7a
	}
	if m.WorkflowType != nil {
		{
			size, err := m.WorkflowType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.HeartbeatDetails != nil {
		{
			size, err := m.HeartbeatDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.CurrentAttemptScheduledTime != nil {
		n15, err15 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CurrentAttemptScheduledTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CurrentAttemptScheduledTime):])
		if err15 != nil {
			return 0, err15
		}
		i -= n15
		i = encodeVarintRequestResponse(dAtA, i, uint64(n15))
		i--
		dAtA[i] = 0x62
	}
	if m.Attempt != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x58
	}
	if m.HeartbeatTimeout != nil {
		n16, err16 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.HeartbeatTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.HeartbeatTimeout):])
		if err16 != nil {
			return 0, err16
		}
		i -= n16
		i = encodeVarintRequestResponse(dAtA, i, uint64(n16))
		i--
		dAtA[i] = 0x52
	}
	if m.StartToCloseTimeout != nil {
		n17, err17 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.StartToCloseTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.StartToCloseTimeout):])
		if err17 != nil {
			return 0, err17
		}
		i -= n17
		i = encodeVarintRequestResponse(dAtA, i, uint64(n17))
		i--
		dAtA[i] = 0x4a
	}
	if m.StartedTime != nil {
		n18, err18 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartedTime):])
		if err18 != nil {
			return 0, err18
		}
		i -= n18
		i = encodeVarintRequestResponse(dAtA, i, uint64(n18))
		i--
		dAtA[i] = 0x42
	}
	if m.ScheduleToCloseTimeout != nil {
		n19, err19 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.ScheduleToCloseTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ScheduleToCloseTimeout):])
		if err19 != nil {
			return 0, err19
		}
		i -= n19
		i = encodeVarintRequestResponse(dAtA, i, uint64(n19))
		i--
		dAtA[i] = 0x3a
	}
	if m.ScheduledTime != nil {
		n20, err20 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ScheduledTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ScheduledTime):])
		if err20 != nil {
			return 0, err20
		}
		i -= n20
		i = encodeVarintRequestResponse(dAtA, i, uint64(n20))
		i--
		dAtA[i] = 0x32
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ActivityType != nil {
		{
			size, err := m.ActivityType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WorkflowExecution != nil {
		{
			size, err := m.WorkflowExecution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskToken) > 0 {
		i -= len(m.TaskToken)
		copy(dAtA[i:], m.TaskToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.TaskToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddWorkflowTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWorkflowTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWorkflowTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VersionDirective != nil {
		{
			size, err := m.VersionDirective.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Clock != nil {
		{
			size, err := m.Clock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Source != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ForwardedSource) > 0 {
		i -= len(m.ForwardedSource)
		copy(dAtA[i:], m.ForwardedSource)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ForwardedSource)))
		i--
		dAtA[i] = 0x32
	}
	if m.ScheduleToStartTimeout != nil {
		n26, err26 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.ScheduleToStartTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ScheduleToStartTimeout):])
		if err26 != nil {
			return 0, err26
		}
		i -= n26
		i = encodeVarintRequestResponse(dAtA, i, uint64(n26))
		i--
		dAtA[i] = 0x2a
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x20
	}
	if m.TaskQueue != nil {
		{
			size, err := m.TaskQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Execution != nil {
		{
			size, err := m.Execution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddWorkflowTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddWorkflowTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddWorkflowTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AddActivityTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddActivityTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddActivityTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VersionDirective != nil {
		{
			size, err := m.VersionDirective.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Clock != nil {
		{
			size, err := m.Clock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Source != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ForwardedSource) > 0 {
		i -= len(m.ForwardedSource)
		copy(dAtA[i:], m.ForwardedSource)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ForwardedSource)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ScheduleToStartTimeout != nil {
		n31, err31 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.ScheduleToStartTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ScheduleToStartTimeout):])
		if err31 != nil {
			return 0, err31
		}
		i -= n31
		i = encodeVarintRequestResponse(dAtA, i, uint64(n31))
		i--
		dAtA[i] = 0x32
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.TaskQueue != nil {
		{
			size, err := m.TaskQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Execution != nil {
		{
			size, err := m.Execution.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddActivityTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddActivityTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddActivityTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryWorkflowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkflowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkflowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VersionDirective != nil {
		{
			size, err := m.VersionDirective.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ForwardedSource) > 0 {
		i -= len(m.ForwardedSource)
		copy(dAtA[i:], m.ForwardedSource)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ForwardedSource)))
		i--
		dAtA[i] = 0x22
	}
	if m.QueryRequest != nil {
		{
			size, err := m.QueryRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TaskQueue != nil {
		{
			size, err := m.TaskQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWorkflowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWorkflowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWorkflowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QueryRejected != nil {
		{
			size, err := m.QueryRejected.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.QueryResult != nil {
		{
			size, err := m.QueryResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondQueryTaskCompletedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondQueryTaskCompletedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondQueryTaskCompletedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompletedRequest != nil {
		{
			size, err := m.CompletedRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TaskQueue != nil {
		{
			size, err := m.TaskQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondQueryTaskCompletedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondQueryTaskCompletedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondQueryTaskCompletedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CancelOutstandingPollRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelOutstandingPollRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelOutstandingPollRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PollerId) > 0 {
		i -= len(m.PollerId)
		copy(dAtA[i:], m.PollerId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.PollerId)))
		i--
		dAtA[i] = 0x22
	}
	if m.TaskQueue != nil {
		{
			size, err := m.TaskQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TaskQueueType != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.TaskQueueType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelOutstandingPollResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelOutstandingPollResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelOutstandingPollResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DescribeTaskQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescribeTaskQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescribeTaskQueueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DescRequest != nil {
		{
			size, err := m.DescRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DescribeTaskQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescribeTaskQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescribeTaskQueueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskQueueStatus != nil {
		{
			size, err := m.TaskQueueStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pollers) > 0 {
		for iNdEx := len(m.Pollers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pollers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListTaskQueuePartitionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTaskQueuePartitionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTaskQueuePartitionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TaskQueue != nil {
		{
			size, err := m.TaskQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTaskQueuePartitionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTaskQueuePartitionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTaskQueuePartitionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkflowTaskQueuePartitions) > 0 {
		for iNdEx := len(m.WorkflowTaskQueuePartitions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WorkflowTaskQueuePartitions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ActivityTaskQueuePartitions) > 0 {
		for iNdEx := len(m.ActivityTaskQueuePartitions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ActivityTaskQueuePartitions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWorkerBuildIdCompatibilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWorkerBuildIdCompatibilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWorkerBuildIdCompatibilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Operation != nil {
		{
			size := m.Operation.Size()
			i -= size
			if _, err := m.Operation.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApplyPublicRequest != nil {
		{
			size, err := m.ApplyPublicRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RemoveBuildIds != nil {
		{
			size, err := m.RemoveBuildIds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *UpdateWorkerBuildIdCompatibilityRequest_PersistUnknownBuildId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWorkerBuildIdCompatibilityRequest_PersistUnknownBuildId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PersistUnknownBuildId)
	copy(dAtA[i:], m.PersistUnknownBuildId)
	i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.PersistUnknownBuildId)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuildIds) > 0 {
		for iNdEx := len(m.BuildIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BuildIds[iNdEx])
			copy(dAtA[i:], m.BuildIds[iNdEx])
			i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.BuildIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.KnownUserDataVersion != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.KnownUserDataVersion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWorkerBuildIdCompatibilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWorkerBuildIdCompatibilityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWorkerBuildIdCompatibilityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetWorkerBuildIdCompatibilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorkerBuildIdCompatibilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWorkerBuildIdCompatibilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetWorkerBuildIdCompatibilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorkerBuildIdCompatibilityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetWorkerBuildIdCompatibilityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTaskQueueUserDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskQueueUserDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTaskQueueUserDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskQueueType != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.TaskQueueType))
		i--
		dAtA[i] = 0x28
	}
	if m.WaitNewData {
		i--
		if m.WaitNewData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.LastKnownUserDataVersion != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.LastKnownUserDataVersion))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTaskQueueUserDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskQueueUserDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTaskQueueUserDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserData != nil {
		{
			size, err := m.UserData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TaskQueueHasUserData {
		i--
		if m.TaskQueueHasUserData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ApplyTaskQueueUserDataReplicationEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyTaskQueueUserDataReplicationEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyTaskQueueUserDataReplicationEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserData != nil {
		{
			size, err := m.UserData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApplyTaskQueueUserDataReplicationEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyTaskQueueUserDataReplicationEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApplyTaskQueueUserDataReplicationEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetBuildIdTaskQueueMappingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBuildIdTaskQueueMappingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBuildIdTaskQueueMappingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuildId) > 0 {
		i -= len(m.BuildId)
		copy(dAtA[i:], m.BuildId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.BuildId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBuildIdTaskQueueMappingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBuildIdTaskQueueMappingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBuildIdTaskQueueMappingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskQueues) > 0 {
		for iNdEx := len(m.TaskQueues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TaskQueues[iNdEx])
			copy(dAtA[i:], m.TaskQueues[iNdEx])
			i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.TaskQueues[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ForceUnloadTaskQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceUnloadTaskQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForceUnloadTaskQueueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskQueueType != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.TaskQueueType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ForceUnloadTaskQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceUnloadTaskQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForceUnloadTaskQueueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WasLoaded {
		i--
		if m.WasLoaded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTaskQueueUserDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTaskQueueUserDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTaskQueueUserDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuildIdsRemoved) > 0 {
		for iNdEx := len(m.BuildIdsRemoved) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BuildIdsRemoved[iNdEx])
			copy(dAtA[i:], m.BuildIdsRemoved[iNdEx])
			i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.BuildIdsRemoved[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.BuildIdsAdded) > 0 {
		for iNdEx := len(m.BuildIdsAdded) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BuildIdsAdded[iNdEx])
			copy(dAtA[i:], m.BuildIdsAdded[iNdEx])
			i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.BuildIdsAdded[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.UserData != nil {
		{
			size, err := m.UserData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTaskQueueUserDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTaskQueueUserDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTaskQueueUserDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ReplicateTaskQueueUserDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicateTaskQueueUserDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicateTaskQueueUserDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserData != nil {
		{
			size, err := m.UserData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplicateTaskQueueUserDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicateTaskQueueUserDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicateTaskQueueUserDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DispatchNexusTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DispatchNexusTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DispatchNexusTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForwardedSource) > 0 {
		i -= len(m.ForwardedSource)
		copy(dAtA[i:], m.ForwardedSource)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ForwardedSource)))
		i--
		dAtA[i] = 0x22
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TaskQueue != nil {
		{
			size, err := m.TaskQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DispatchNexusTaskResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DispatchNexusTaskResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DispatchNexusTaskResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Outcome != nil {
		{
			size := m.Outcome.Size()
			i -= size
			if _, err := m.Outcome.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DispatchNexusTaskResponse_HandlerError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DispatchNexusTaskResponse_HandlerError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HandlerError != nil {
		{
			size, err := m.HandlerError.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *DispatchNexusTaskResponse_Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DispatchNexusTaskResponse_Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PollNexusTaskQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollNexusTaskQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollNexusTaskQueueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForwardedSource) > 0 {
		i -= len(m.ForwardedSource)
		copy(dAtA[i:], m.ForwardedSource)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.ForwardedSource)))
		i--
		dAtA[i] = 0x22
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PollerId) > 0 {
		i -= len(m.PollerId)
		copy(dAtA[i:], m.PollerId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.PollerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PollNexusTaskQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollNexusTaskQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollNexusTaskQueueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondNexusTaskCompletedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondNexusTaskCompletedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondNexusTaskCompletedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TaskQueue != nil {
		{
			size, err := m.TaskQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondNexusTaskCompletedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondNexusTaskCompletedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondNexusTaskCompletedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RespondNexusTaskFailedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondNexusTaskFailedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondNexusTaskFailedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TaskQueue != nil {
		{
			size, err := m.TaskQueue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RespondNexusTaskFailedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RespondNexusTaskFailedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RespondNexusTaskFailedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CreateOrUpdateNexusServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrUpdateNexusServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateOrUpdateNexusServiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Service != nil {
		{
			size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateOrUpdateNexusServiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrUpdateNexusServiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateOrUpdateNexusServiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetNexusServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNexusServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNexusServiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetNexusServiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNexusServiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNexusServiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Service != nil {
		{
			size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRequestResponse(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteNexusServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteNexusServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteNexusServiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteNexusServiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteNexusServiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteNexusServiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListNexusServicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNexusServicesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListNexusServicesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Wait {
		i--
		if m.Wait {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.LastKnownTableVersion != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.LastKnownTableVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.PageSize != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListNexusServicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListNexusServicesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListNexusServicesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Services[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRequestResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TableVersion != 0 {
		i = encodeVarintRequestResponse(dAtA, i, uint64(m.TableVersion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintRequestResponse(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRequestResponse(dAtA []byte, offset int, v uint64) int {
	offset -= sovRequestResponse(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PollWorkflowTaskQueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.PollerId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.PollRequest != nil {
		l = m.PollRequest.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.ForwardedSource)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *PollWorkflowTaskQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.PreviousStartedEventId != 0 {
		n += 1 + sovRequestResponse(uint64(m.PreviousStartedEventId))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovRequestResponse(uint64(m.StartedEventId))
	}
	if m.Attempt != 0 {
		n += 1 + sovRequestResponse(uint64(m.Attempt))
	}
	if m.NextEventId != 0 {
		n += 1 + sovRequestResponse(uint64(m.NextEventId))
	}
	if m.BacklogCountHint != 0 {
		n += 1 + sovRequestResponse(uint64(m.BacklogCountHint))
	}
	if m.StickyExecutionEnabled {
		n += 2
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TransientWorkflowTask != nil {
		l = m.TransientWorkflowTask.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WorkflowExecutionTaskQueue != nil {
		l = m.WorkflowExecutionTaskQueue.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.BranchToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.ScheduledTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ScheduledTime)
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.StartedTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartedTime)
		n += 2 + l + sovRequestResponse(uint64(l))
	}
	if len(m.Queries) > 0 {
		for k, v := range m.Queries {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRequestResponse(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRequestResponse(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovRequestResponse(uint64(mapEntrySize))
		}
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 2 + l + sovRequestResponse(uint64(l))
		}
	}
	if m.History != nil {
		l = m.History.Size()
		n += 2 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 2 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *PollActivityTaskQueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.PollerId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.PollRequest != nil {
		l = m.PollRequest.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.ForwardedSource)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *PollActivityTaskQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WorkflowExecution != nil {
		l = m.WorkflowExecution.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.ActivityType != nil {
		l = m.ActivityType.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.ScheduledTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ScheduledTime)
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.ScheduleToCloseTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ScheduleToCloseTimeout)
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.StartedTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartedTime)
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.StartToCloseTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.StartToCloseTimeout)
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.HeartbeatTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.HeartbeatTimeout)
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Attempt != 0 {
		n += 1 + sovRequestResponse(uint64(m.Attempt))
	}
	if m.CurrentAttemptScheduledTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CurrentAttemptScheduledTime)
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.HeartbeatDetails != nil {
		l = m.HeartbeatDetails.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.WorkflowType != nil {
		l = m.WorkflowType.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.WorkflowNamespace)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 2 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *AddWorkflowTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TaskQueue != nil {
		l = m.TaskQueue.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.ScheduledEventId != 0 {
		n += 1 + sovRequestResponse(uint64(m.ScheduledEventId))
	}
	if m.ScheduleToStartTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ScheduleToStartTimeout)
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.ForwardedSource)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Source != 0 {
		n += 1 + sovRequestResponse(uint64(m.Source))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.VersionDirective != nil {
		l = m.VersionDirective.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *AddWorkflowTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AddActivityTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Execution != nil {
		l = m.Execution.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TaskQueue != nil {
		l = m.TaskQueue.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.ScheduledEventId != 0 {
		n += 1 + sovRequestResponse(uint64(m.ScheduledEventId))
	}
	if m.ScheduleToStartTimeout != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ScheduleToStartTimeout)
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.ForwardedSource)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Source != 0 {
		n += 1 + sovRequestResponse(uint64(m.Source))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.VersionDirective != nil {
		l = m.VersionDirective.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *AddActivityTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryWorkflowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TaskQueue != nil {
		l = m.TaskQueue.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.QueryRequest != nil {
		l = m.QueryRequest.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.ForwardedSource)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.VersionDirective != nil {
		l = m.VersionDirective.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *QueryWorkflowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryResult != nil {
		l = m.QueryResult.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.QueryRejected != nil {
		l = m.QueryRejected.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *RespondQueryTaskCompletedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TaskQueue != nil {
		l = m.TaskQueue.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.CompletedRequest != nil {
		l = m.CompletedRequest.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *RespondQueryTaskCompletedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CancelOutstandingPollRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TaskQueueType != 0 {
		n += 1 + sovRequestResponse(uint64(m.TaskQueueType))
	}
	if m.TaskQueue != nil {
		l = m.TaskQueue.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.PollerId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *CancelOutstandingPollResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DescribeTaskQueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.DescRequest != nil {
		l = m.DescRequest.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *DescribeTaskQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pollers) > 0 {
		for _, e := range m.Pollers {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	if m.TaskQueueStatus != nil {
		l = m.TaskQueueStatus.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ListTaskQueuePartitionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TaskQueue != nil {
		l = m.TaskQueue.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ListTaskQueuePartitionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActivityTaskQueuePartitions) > 0 {
		for _, e := range m.ActivityTaskQueuePartitions {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	if len(m.WorkflowTaskQueuePartitions) > 0 {
		for _, e := range m.WorkflowTaskQueuePartitions {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	return n
}

func (m *UpdateWorkerBuildIdCompatibilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Operation != nil {
		n += m.Operation.Size()
	}
	return n
}

func (m *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApplyPublicRequest != nil {
		l = m.ApplyPublicRequest.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}
func (m *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemoveBuildIds != nil {
		l = m.RemoveBuildIds.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}
func (m *UpdateWorkerBuildIdCompatibilityRequest_PersistUnknownBuildId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PersistUnknownBuildId)
	n += 1 + l + sovRequestResponse(uint64(l))
	return n
}
func (m *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KnownUserDataVersion != 0 {
		n += 1 + sovRequestResponse(uint64(m.KnownUserDataVersion))
	}
	if len(m.BuildIds) > 0 {
		for _, s := range m.BuildIds {
			l = len(s)
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	return n
}

func (m *UpdateWorkerBuildIdCompatibilityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetWorkerBuildIdCompatibilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *GetWorkerBuildIdCompatibilityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *GetTaskQueueUserDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.LastKnownUserDataVersion != 0 {
		n += 1 + sovRequestResponse(uint64(m.LastKnownUserDataVersion))
	}
	if m.WaitNewData {
		n += 2
	}
	if m.TaskQueueType != 0 {
		n += 1 + sovRequestResponse(uint64(m.TaskQueueType))
	}
	return n
}

func (m *GetTaskQueueUserDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskQueueHasUserData {
		n += 2
	}
	if m.UserData != nil {
		l = m.UserData.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ApplyTaskQueueUserDataReplicationEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.UserData != nil {
		l = m.UserData.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ApplyTaskQueueUserDataReplicationEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetBuildIdTaskQueueMappingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.BuildId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *GetBuildIdTaskQueueMappingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TaskQueues) > 0 {
		for _, s := range m.TaskQueues {
			l = len(s)
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	return n
}

func (m *ForceUnloadTaskQueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TaskQueueType != 0 {
		n += 1 + sovRequestResponse(uint64(m.TaskQueueType))
	}
	return n
}

func (m *ForceUnloadTaskQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WasLoaded {
		n += 2
	}
	return n
}

func (m *UpdateTaskQueueUserDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.UserData != nil {
		l = m.UserData.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if len(m.BuildIdsAdded) > 0 {
		for _, s := range m.BuildIdsAdded {
			l = len(s)
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	if len(m.BuildIdsRemoved) > 0 {
		for _, s := range m.BuildIdsRemoved {
			l = len(s)
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	return n
}

func (m *UpdateTaskQueueUserDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ReplicateTaskQueueUserDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.UserData != nil {
		l = m.UserData.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *ReplicateTaskQueueUserDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DispatchNexusTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TaskQueue != nil {
		l = m.TaskQueue.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.ForwardedSource)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *DispatchNexusTaskResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Outcome != nil {
		n += m.Outcome.Size()
	}
	return n
}

func (m *DispatchNexusTaskResponse_HandlerError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HandlerError != nil {
		l = m.HandlerError.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}
func (m *DispatchNexusTaskResponse_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}
func (m *PollNexusTaskQueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.PollerId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.ForwardedSource)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *PollNexusTaskQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *RespondNexusTaskCompletedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TaskQueue != nil {
		l = m.TaskQueue.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *RespondNexusTaskCompletedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RespondNexusTaskFailedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TaskQueue != nil {
		l = m.TaskQueue.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *RespondNexusTaskFailedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreateOrUpdateNexusServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Service != nil {
		l = m.Service.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *CreateOrUpdateNexusServiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetNexusServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *GetNexusServiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Service != nil {
		l = m.Service.Size()
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *DeleteNexusServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	return n
}

func (m *DeleteNexusServiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListNexusServicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovRequestResponse(uint64(m.PageSize))
	}
	if m.LastKnownTableVersion != 0 {
		n += 1 + sovRequestResponse(uint64(m.LastKnownTableVersion))
	}
	if m.Wait {
		n += 2
	}
	return n
}

func (m *ListNexusServicesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovRequestResponse(uint64(l))
	}
	if m.TableVersion != 0 {
		n += 1 + sovRequestResponse(uint64(m.TableVersion))
	}
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovRequestResponse(uint64(l))
		}
	}
	return n
}

func sovRequestResponse(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRequestResponse(x uint64) (n int) {
	return sovRequestResponse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PollWorkflowTaskQueueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollWorkflowTaskQueueRequest{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`PollerId:` + fmt.Sprintf("%v", this.PollerId) + `,`,
		`PollRequest:` + strings.Replace(fmt.Sprintf("%v", this.PollRequest), "PollWorkflowTaskQueueRequest", "v1.PollWorkflowTaskQueueRequest", 1) + `,`,
		`ForwardedSource:` + fmt.Sprintf("%v", this.ForwardedSource) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollWorkflowTaskQueueResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMessages := "[]*Message{"
	for _, f := range this.Messages {
		repeatedStringForMessages += strings.Replace(fmt.Sprintf("%v", f), "Message", "v15.Message", 1) + ","
	}
	repeatedStringForMessages += "}"
	keysForQueries := make([]string, 0, len(this.Queries))
	for k, _ := range this.Queries {
		keysForQueries = append(keysForQueries, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForQueries)
	mapStringForQueries := "map[string]*v12.WorkflowQuery{"
	for _, k := range keysForQueries {
		mapStringForQueries += fmt.Sprintf("%v: %v,", k, this.Queries[k])
	}
	mapStringForQueries += "}"
	s := strings.Join([]string{`&PollWorkflowTaskQueueResponse{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "v11.WorkflowExecution", 1) + `,`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "v11.WorkflowType", 1) + `,`,
		`PreviousStartedEventId:` + fmt.Sprintf("%v", this.PreviousStartedEventId) + `,`,
		`StartedEventId:` + fmt.Sprintf("%v", this.StartedEventId) + `,`,
		`Attempt:` + fmt.Sprintf("%v", this.Attempt) + `,`,
		`NextEventId:` + fmt.Sprintf("%v", this.NextEventId) + `,`,
		`BacklogCountHint:` + fmt.Sprintf("%v", this.BacklogCountHint) + `,`,
		`StickyExecutionEnabled:` + fmt.Sprintf("%v", this.StickyExecutionEnabled) + `,`,
		`Query:` + strings.Replace(fmt.Sprintf("%v", this.Query), "WorkflowQuery", "v12.WorkflowQuery", 1) + `,`,
		`TransientWorkflowTask:` + strings.Replace(fmt.Sprintf("%v", this.TransientWorkflowTask), "TransientWorkflowTaskInfo", "v13.TransientWorkflowTaskInfo", 1) + `,`,
		`WorkflowExecutionTaskQueue:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecutionTaskQueue), "TaskQueue", "v14.TaskQueue", 1) + `,`,
		`BranchToken:` + fmt.Sprintf("%v", this.BranchToken) + `,`,
		`ScheduledTime:` + strings.Replace(fmt.Sprintf("%v", this.ScheduledTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`StartedTime:` + strings.Replace(fmt.Sprintf("%v", this.StartedTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`Queries:` + mapStringForQueries + `,`,
		`Messages:` + repeatedStringForMessages + `,`,
		`History:` + strings.Replace(fmt.Sprintf("%v", this.History), "History", "v16.History", 1) + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollActivityTaskQueueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollActivityTaskQueueRequest{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`PollerId:` + fmt.Sprintf("%v", this.PollerId) + `,`,
		`PollRequest:` + strings.Replace(fmt.Sprintf("%v", this.PollRequest), "PollActivityTaskQueueRequest", "v1.PollActivityTaskQueueRequest", 1) + `,`,
		`ForwardedSource:` + fmt.Sprintf("%v", this.ForwardedSource) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollActivityTaskQueueResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollActivityTaskQueueResponse{`,
		`TaskToken:` + fmt.Sprintf("%v", this.TaskToken) + `,`,
		`WorkflowExecution:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowExecution), "WorkflowExecution", "v11.WorkflowExecution", 1) + `,`,
		`ActivityId:` + fmt.Sprintf("%v", this.ActivityId) + `,`,
		`ActivityType:` + strings.Replace(fmt.Sprintf("%v", this.ActivityType), "ActivityType", "v11.ActivityType", 1) + `,`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "Payloads", "v11.Payloads", 1) + `,`,
		`ScheduledTime:` + strings.Replace(fmt.Sprintf("%v", this.ScheduledTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`ScheduleToCloseTimeout:` + strings.Replace(fmt.Sprintf("%v", this.ScheduleToCloseTimeout), "Duration", "types.Duration", 1) + `,`,
		`StartedTime:` + strings.Replace(fmt.Sprintf("%v", this.StartedTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`StartToCloseTimeout:` + strings.Replace(fmt.Sprintf("%v", this.StartToCloseTimeout), "Duration", "types.Duration", 1) + `,`,
		`HeartbeatTimeout:` + strings.Replace(fmt.Sprintf("%v", this.HeartbeatTimeout), "Duration", "types.Duration", 1) + `,`,
		`Attempt:` + fmt.Sprintf("%v", this.Attempt) + `,`,
		`CurrentAttemptScheduledTime:` + strings.Replace(fmt.Sprintf("%v", this.CurrentAttemptScheduledTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`HeartbeatDetails:` + strings.Replace(fmt.Sprintf("%v", this.HeartbeatDetails), "Payloads", "v11.Payloads", 1) + `,`,
		`WorkflowType:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowType), "WorkflowType", "v11.WorkflowType", 1) + `,`,
		`WorkflowNamespace:` + fmt.Sprintf("%v", this.WorkflowNamespace) + `,`,
		`Header:` + strings.Replace(fmt.Sprintf("%v", this.Header), "Header", "v11.Header", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddWorkflowTaskRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddWorkflowTaskRequest{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`Execution:` + strings.Replace(fmt.Sprintf("%v", this.Execution), "WorkflowExecution", "v11.WorkflowExecution", 1) + `,`,
		`TaskQueue:` + strings.Replace(fmt.Sprintf("%v", this.TaskQueue), "TaskQueue", "v14.TaskQueue", 1) + `,`,
		`ScheduledEventId:` + fmt.Sprintf("%v", this.ScheduledEventId) + `,`,
		`ScheduleToStartTimeout:` + strings.Replace(fmt.Sprintf("%v", this.ScheduleToStartTimeout), "Duration", "types.Duration", 1) + `,`,
		`ForwardedSource:` + fmt.Sprintf("%v", this.ForwardedSource) + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "VectorClock", "v18.VectorClock", 1) + `,`,
		`VersionDirective:` + strings.Replace(fmt.Sprintf("%v", this.VersionDirective), "TaskVersionDirective", "v19.TaskVersionDirective", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddWorkflowTaskResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddWorkflowTaskResponse{`,
		`}`,
	}, "")
	return s
}
func (this *AddActivityTaskRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddActivityTaskRequest{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`Execution:` + strings.Replace(fmt.Sprintf("%v", this.Execution), "WorkflowExecution", "v11.WorkflowExecution", 1) + `,`,
		`TaskQueue:` + strings.Replace(fmt.Sprintf("%v", this.TaskQueue), "TaskQueue", "v14.TaskQueue", 1) + `,`,
		`ScheduledEventId:` + fmt.Sprintf("%v", this.ScheduledEventId) + `,`,
		`ScheduleToStartTimeout:` + strings.Replace(fmt.Sprintf("%v", this.ScheduleToStartTimeout), "Duration", "types.Duration", 1) + `,`,
		`ForwardedSource:` + fmt.Sprintf("%v", this.ForwardedSource) + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "VectorClock", "v18.VectorClock", 1) + `,`,
		`VersionDirective:` + strings.Replace(fmt.Sprintf("%v", this.VersionDirective), "TaskVersionDirective", "v19.TaskVersionDirective", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddActivityTaskResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddActivityTaskResponse{`,
		`}`,
	}, "")
	return s
}
func (this *QueryWorkflowRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryWorkflowRequest{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`TaskQueue:` + strings.Replace(fmt.Sprintf("%v", this.TaskQueue), "TaskQueue", "v14.TaskQueue", 1) + `,`,
		`QueryRequest:` + strings.Replace(fmt.Sprintf("%v", this.QueryRequest), "QueryWorkflowRequest", "v1.QueryWorkflowRequest", 1) + `,`,
		`ForwardedSource:` + fmt.Sprintf("%v", this.ForwardedSource) + `,`,
		`VersionDirective:` + strings.Replace(fmt.Sprintf("%v", this.VersionDirective), "TaskVersionDirective", "v19.TaskVersionDirective", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryWorkflowResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryWorkflowResponse{`,
		`QueryResult:` + strings.Replace(fmt.Sprintf("%v", this.QueryResult), "Payloads", "v11.Payloads", 1) + `,`,
		`QueryRejected:` + strings.Replace(fmt.Sprintf("%v", this.QueryRejected), "QueryRejected", "v12.QueryRejected", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondQueryTaskCompletedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondQueryTaskCompletedRequest{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`TaskQueue:` + strings.Replace(fmt.Sprintf("%v", this.TaskQueue), "TaskQueue", "v14.TaskQueue", 1) + `,`,
		`TaskId:` + fmt.Sprintf("%v", this.TaskId) + `,`,
		`CompletedRequest:` + strings.Replace(fmt.Sprintf("%v", this.CompletedRequest), "RespondQueryTaskCompletedRequest", "v1.RespondQueryTaskCompletedRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondQueryTaskCompletedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondQueryTaskCompletedResponse{`,
		`}`,
	}, "")
	return s
}
func (this *CancelOutstandingPollRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancelOutstandingPollRequest{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`TaskQueueType:` + fmt.Sprintf("%v", this.TaskQueueType) + `,`,
		`TaskQueue:` + strings.Replace(fmt.Sprintf("%v", this.TaskQueue), "TaskQueue", "v14.TaskQueue", 1) + `,`,
		`PollerId:` + fmt.Sprintf("%v", this.PollerId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CancelOutstandingPollResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancelOutstandingPollResponse{`,
		`}`,
	}, "")
	return s
}
func (this *DescribeTaskQueueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DescribeTaskQueueRequest{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`DescRequest:` + strings.Replace(fmt.Sprintf("%v", this.DescRequest), "DescribeTaskQueueRequest", "v1.DescribeTaskQueueRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DescribeTaskQueueResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPollers := "[]*PollerInfo{"
	for _, f := range this.Pollers {
		repeatedStringForPollers += strings.Replace(fmt.Sprintf("%v", f), "PollerInfo", "v14.PollerInfo", 1) + ","
	}
	repeatedStringForPollers += "}"
	s := strings.Join([]string{`&DescribeTaskQueueResponse{`,
		`Pollers:` + repeatedStringForPollers + `,`,
		`TaskQueueStatus:` + strings.Replace(fmt.Sprintf("%v", this.TaskQueueStatus), "TaskQueueStatus", "v14.TaskQueueStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTaskQueuePartitionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListTaskQueuePartitionsRequest{`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`TaskQueue:` + strings.Replace(fmt.Sprintf("%v", this.TaskQueue), "TaskQueue", "v14.TaskQueue", 1) + `,`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTaskQueuePartitionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForActivityTaskQueuePartitions := "[]*TaskQueuePartitionMetadata{"
	for _, f := range this.ActivityTaskQueuePartitions {
		repeatedStringForActivityTaskQueuePartitions += strings.Replace(fmt.Sprintf("%v", f), "TaskQueuePartitionMetadata", "v14.TaskQueuePartitionMetadata", 1) + ","
	}
	repeatedStringForActivityTaskQueuePartitions += "}"
	repeatedStringForWorkflowTaskQueuePartitions := "[]*TaskQueuePartitionMetadata{"
	for _, f := range this.WorkflowTaskQueuePartitions {
		repeatedStringForWorkflowTaskQueuePartitions += strings.Replace(fmt.Sprintf("%v", f), "TaskQueuePartitionMetadata", "v14.TaskQueuePartitionMetadata", 1) + ","
	}
	repeatedStringForWorkflowTaskQueuePartitions += "}"
	s := strings.Join([]string{`&ListTaskQueuePartitionsResponse{`,
		`ActivityTaskQueuePartitions:` + repeatedStringForActivityTaskQueuePartitions + `,`,
		`WorkflowTaskQueuePartitions:` + repeatedStringForWorkflowTaskQueuePartitions + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateWorkerBuildIdCompatibilityRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateWorkerBuildIdCompatibilityRequest{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`Operation:` + fmt.Sprintf("%v", this.Operation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest_{`,
		`ApplyPublicRequest:` + strings.Replace(fmt.Sprintf("%v", this.ApplyPublicRequest), "UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest", "UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds_{`,
		`RemoveBuildIds:` + strings.Replace(fmt.Sprintf("%v", this.RemoveBuildIds), "UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds", "UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateWorkerBuildIdCompatibilityRequest_PersistUnknownBuildId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateWorkerBuildIdCompatibilityRequest_PersistUnknownBuildId{`,
		`PersistUnknownBuildId:` + fmt.Sprintf("%v", this.PersistUnknownBuildId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest{`,
		`Request:` + strings.Replace(fmt.Sprintf("%v", this.Request), "UpdateWorkerBuildIdCompatibilityRequest", "v1.UpdateWorkerBuildIdCompatibilityRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds{`,
		`KnownUserDataVersion:` + fmt.Sprintf("%v", this.KnownUserDataVersion) + `,`,
		`BuildIds:` + fmt.Sprintf("%v", this.BuildIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateWorkerBuildIdCompatibilityResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateWorkerBuildIdCompatibilityResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetWorkerBuildIdCompatibilityRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetWorkerBuildIdCompatibilityRequest{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`Request:` + strings.Replace(fmt.Sprintf("%v", this.Request), "GetWorkerBuildIdCompatibilityRequest", "v1.GetWorkerBuildIdCompatibilityRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetWorkerBuildIdCompatibilityResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetWorkerBuildIdCompatibilityResponse{`,
		`Response:` + strings.Replace(fmt.Sprintf("%v", this.Response), "GetWorkerBuildIdCompatibilityResponse", "v1.GetWorkerBuildIdCompatibilityResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTaskQueueUserDataRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTaskQueueUserDataRequest{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`LastKnownUserDataVersion:` + fmt.Sprintf("%v", this.LastKnownUserDataVersion) + `,`,
		`WaitNewData:` + fmt.Sprintf("%v", this.WaitNewData) + `,`,
		`TaskQueueType:` + fmt.Sprintf("%v", this.TaskQueueType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTaskQueueUserDataResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTaskQueueUserDataResponse{`,
		`TaskQueueHasUserData:` + fmt.Sprintf("%v", this.TaskQueueHasUserData) + `,`,
		`UserData:` + strings.Replace(fmt.Sprintf("%v", this.UserData), "VersionedTaskQueueUserData", "v111.VersionedTaskQueueUserData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplyTaskQueueUserDataReplicationEventRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplyTaskQueueUserDataReplicationEventRequest{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`UserData:` + strings.Replace(fmt.Sprintf("%v", this.UserData), "TaskQueueUserData", "v111.TaskQueueUserData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplyTaskQueueUserDataReplicationEventResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplyTaskQueueUserDataReplicationEventResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetBuildIdTaskQueueMappingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBuildIdTaskQueueMappingRequest{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`BuildId:` + fmt.Sprintf("%v", this.BuildId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetBuildIdTaskQueueMappingResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBuildIdTaskQueueMappingResponse{`,
		`TaskQueues:` + fmt.Sprintf("%v", this.TaskQueues) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForceUnloadTaskQueueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForceUnloadTaskQueueRequest{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`TaskQueueType:` + fmt.Sprintf("%v", this.TaskQueueType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForceUnloadTaskQueueResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForceUnloadTaskQueueResponse{`,
		`WasLoaded:` + fmt.Sprintf("%v", this.WasLoaded) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateTaskQueueUserDataRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateTaskQueueUserDataRequest{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`UserData:` + strings.Replace(fmt.Sprintf("%v", this.UserData), "VersionedTaskQueueUserData", "v111.VersionedTaskQueueUserData", 1) + `,`,
		`BuildIdsAdded:` + fmt.Sprintf("%v", this.BuildIdsAdded) + `,`,
		`BuildIdsRemoved:` + fmt.Sprintf("%v", this.BuildIdsRemoved) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateTaskQueueUserDataResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateTaskQueueUserDataResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ReplicateTaskQueueUserDataRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicateTaskQueueUserDataRequest{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`UserData:` + strings.Replace(fmt.Sprintf("%v", this.UserData), "TaskQueueUserData", "v111.TaskQueueUserData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicateTaskQueueUserDataResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicateTaskQueueUserDataResponse{`,
		`}`,
	}, "")
	return s
}
func (this *DispatchNexusTaskRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DispatchNexusTaskRequest{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`TaskQueue:` + strings.Replace(fmt.Sprintf("%v", this.TaskQueue), "TaskQueue", "v14.TaskQueue", 1) + `,`,
		`Request:` + strings.Replace(fmt.Sprintf("%v", this.Request), "Request", "v112.Request", 1) + `,`,
		`ForwardedSource:` + fmt.Sprintf("%v", this.ForwardedSource) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DispatchNexusTaskResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DispatchNexusTaskResponse{`,
		`Outcome:` + fmt.Sprintf("%v", this.Outcome) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DispatchNexusTaskResponse_HandlerError) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DispatchNexusTaskResponse_HandlerError{`,
		`HandlerError:` + strings.Replace(fmt.Sprintf("%v", this.HandlerError), "HandlerError", "v112.HandlerError", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DispatchNexusTaskResponse_Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DispatchNexusTaskResponse_Response{`,
		`Response:` + strings.Replace(fmt.Sprintf("%v", this.Response), "Response", "v112.Response", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollNexusTaskQueueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollNexusTaskQueueRequest{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`PollerId:` + fmt.Sprintf("%v", this.PollerId) + `,`,
		`Request:` + strings.Replace(fmt.Sprintf("%v", this.Request), "PollNexusTaskQueueRequest", "v1.PollNexusTaskQueueRequest", 1) + `,`,
		`ForwardedSource:` + fmt.Sprintf("%v", this.ForwardedSource) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PollNexusTaskQueueResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PollNexusTaskQueueResponse{`,
		`Response:` + strings.Replace(fmt.Sprintf("%v", this.Response), "PollNexusTaskQueueResponse", "v1.PollNexusTaskQueueResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondNexusTaskCompletedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondNexusTaskCompletedRequest{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`TaskQueue:` + strings.Replace(fmt.Sprintf("%v", this.TaskQueue), "TaskQueue", "v14.TaskQueue", 1) + `,`,
		`TaskId:` + fmt.Sprintf("%v", this.TaskId) + `,`,
		`Request:` + strings.Replace(fmt.Sprintf("%v", this.Request), "RespondNexusTaskCompletedRequest", "v1.RespondNexusTaskCompletedRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondNexusTaskCompletedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondNexusTaskCompletedResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RespondNexusTaskFailedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondNexusTaskFailedRequest{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`TaskQueue:` + strings.Replace(fmt.Sprintf("%v", this.TaskQueue), "TaskQueue", "v14.TaskQueue", 1) + `,`,
		`TaskId:` + fmt.Sprintf("%v", this.TaskId) + `,`,
		`Request:` + strings.Replace(fmt.Sprintf("%v", this.Request), "RespondNexusTaskFailedRequest", "v1.RespondNexusTaskFailedRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RespondNexusTaskFailedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RespondNexusTaskFailedResponse{`,
		`}`,
	}, "")
	return s
}
func (this *CreateOrUpdateNexusServiceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateOrUpdateNexusServiceRequest{`,
		`Service:` + strings.Replace(fmt.Sprintf("%v", this.Service), "IncomingService", "v112.IncomingService", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateOrUpdateNexusServiceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateOrUpdateNexusServiceResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetNexusServiceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetNexusServiceRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetNexusServiceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetNexusServiceResponse{`,
		`Service:` + strings.Replace(fmt.Sprintf("%v", this.Service), "VersionedNexusIncomingService", "v111.VersionedNexusIncomingService", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteNexusServiceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteNexusServiceRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteNexusServiceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteNexusServiceResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ListNexusServicesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListNexusServicesRequest{`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`LastKnownTableVersion:` + fmt.Sprintf("%v", this.LastKnownTableVersion) + `,`,
		`Wait:` + fmt.Sprintf("%v", this.Wait) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListNexusServicesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServices := "[]*VersionedNexusIncomingService{"
	for _, f := range this.Services {
		repeatedStringForServices += strings.Replace(fmt.Sprintf("%v", f), "VersionedNexusIncomingService", "v111.VersionedNexusIncomingService", 1) + ","
	}
	repeatedStringForServices += "}"
	s := strings.Join([]string{`&ListNexusServicesResponse{`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`TableVersion:` + fmt.Sprintf("%v", this.TableVersion) + `,`,
		`Services:` + repeatedStringForServices + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRequestResponse(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PollWorkflowTaskQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollWorkflowTaskQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollWorkflowTaskQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PollerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PollRequest == nil {
				m.PollRequest = &v1.PollWorkflowTaskQueueRequest{}
			}
			if err := m.PollRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardedSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardedSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollWorkflowTaskQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollWorkflowTaskQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollWorkflowTaskQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &v11.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &v11.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousStartedEventId", wireType)
			}
			m.PreviousStartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousStartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEventId", wireType)
			}
			m.NextEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BacklogCountHint", wireType)
			}
			m.BacklogCountHint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BacklogCountHint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickyExecutionEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StickyExecutionEnabled = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &v12.WorkflowQuery{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransientWorkflowTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransientWorkflowTask == nil {
				m.TransientWorkflowTask = &v13.TransientWorkflowTaskInfo{}
			}
			if err := m.TransientWorkflowTask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionTaskQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecutionTaskQueue == nil {
				m.WorkflowExecutionTaskQueue = &v14.TaskQueue{}
			}
			if err := m.WorkflowExecutionTaskQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchToken = append(m.BranchToken[:0], dAtA[iNdEx:postIndex]...)
			if m.BranchToken == nil {
				m.BranchToken = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledTime == nil {
				m.ScheduledTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ScheduledTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartedTime == nil {
				m.StartedTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Queries == nil {
				m.Queries = make(map[string]*v12.WorkflowQuery)
			}
			var mapkey string
			var mapvalue *v12.WorkflowQuery
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequestResponse
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequestResponse
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRequestResponse
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &v12.WorkflowQuery{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRequestResponse(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRequestResponse
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Queries[mapkey] = mapvalue
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &v15.Message{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.History == nil {
				m.History = &v16.History{}
			}
			if err := m.History.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = append(m.NextPageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NextPageToken == nil {
				m.NextPageToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollActivityTaskQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollActivityTaskQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollActivityTaskQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PollerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PollRequest == nil {
				m.PollRequest = &v1.PollActivityTaskQueueRequest{}
			}
			if err := m.PollRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardedSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardedSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollActivityTaskQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollActivityTaskQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollActivityTaskQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskToken = append(m.TaskToken[:0], dAtA[iNdEx:postIndex]...)
			if m.TaskToken == nil {
				m.TaskToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowExecution == nil {
				m.WorkflowExecution = &v11.WorkflowExecution{}
			}
			if err := m.WorkflowExecution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityType == nil {
				m.ActivityType = &v11.ActivityType{}
			}
			if err := m.ActivityType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &v11.Payloads{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledTime == nil {
				m.ScheduledTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ScheduledTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToCloseTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleToCloseTimeout == nil {
				m.ScheduleToCloseTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.ScheduleToCloseTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartedTime == nil {
				m.StartedTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartToCloseTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartToCloseTimeout == nil {
				m.StartToCloseTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.StartToCloseTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeartbeatTimeout == nil {
				m.HeartbeatTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.HeartbeatTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentAttemptScheduledTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentAttemptScheduledTime == nil {
				m.CurrentAttemptScheduledTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CurrentAttemptScheduledTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeartbeatDetails == nil {
				m.HeartbeatDetails = &v11.Payloads{}
			}
			if err := m.HeartbeatDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowType == nil {
				m.WorkflowType = &v11.WorkflowType{}
			}
			if err := m.WorkflowType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowNamespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowNamespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &v11.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWorkflowTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWorkflowTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWorkflowTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Execution == nil {
				m.Execution = &v11.WorkflowExecution{}
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskQueue == nil {
				m.TaskQueue = &v14.TaskQueue{}
			}
			if err := m.TaskQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToStartTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleToStartTimeout == nil {
				m.ScheduleToStartTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.ScheduleToStartTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardedSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardedSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= v17.TaskSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &v18.VectorClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionDirective", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VersionDirective == nil {
				m.VersionDirective = &v19.TaskVersionDirective{}
			}
			if err := m.VersionDirective.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddWorkflowTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddWorkflowTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddWorkflowTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddActivityTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddActivityTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddActivityTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Execution == nil {
				m.Execution = &v11.WorkflowExecution{}
			}
			if err := m.Execution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskQueue == nil {
				m.TaskQueue = &v14.TaskQueue{}
			}
			if err := m.TaskQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToStartTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleToStartTimeout == nil {
				m.ScheduleToStartTimeout = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.ScheduleToStartTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardedSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardedSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= v17.TaskSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &v18.VectorClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionDirective", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VersionDirective == nil {
				m.VersionDirective = &v19.TaskVersionDirective{}
			}
			if err := m.VersionDirective.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddActivityTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddActivityTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddActivityTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkflowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkflowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkflowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskQueue == nil {
				m.TaskQueue = &v14.TaskQueue{}
			}
			if err := m.TaskQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryRequest == nil {
				m.QueryRequest = &v1.QueryWorkflowRequest{}
			}
			if err := m.QueryRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardedSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardedSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionDirective", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VersionDirective == nil {
				m.VersionDirective = &v19.TaskVersionDirective{}
			}
			if err := m.VersionDirective.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWorkflowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWorkflowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWorkflowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryResult == nil {
				m.QueryResult = &v11.Payloads{}
			}
			if err := m.QueryResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryRejected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QueryRejected == nil {
				m.QueryRejected = &v12.QueryRejected{}
			}
			if err := m.QueryRejected.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondQueryTaskCompletedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondQueryTaskCompletedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondQueryTaskCompletedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskQueue == nil {
				m.TaskQueue = &v14.TaskQueue{}
			}
			if err := m.TaskQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompletedRequest == nil {
				m.CompletedRequest = &v1.RespondQueryTaskCompletedRequest{}
			}
			if err := m.CompletedRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondQueryTaskCompletedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondQueryTaskCompletedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondQueryTaskCompletedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelOutstandingPollRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelOutstandingPollRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelOutstandingPollRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueueType", wireType)
			}
			m.TaskQueueType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskQueueType |= v110.TaskQueueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskQueue == nil {
				m.TaskQueue = &v14.TaskQueue{}
			}
			if err := m.TaskQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PollerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelOutstandingPollResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelOutstandingPollResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelOutstandingPollResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeTaskQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeTaskQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeTaskQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DescRequest == nil {
				m.DescRequest = &v1.DescribeTaskQueueRequest{}
			}
			if err := m.DescRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeTaskQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeTaskQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeTaskQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pollers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pollers = append(m.Pollers, &v14.PollerInfo{})
			if err := m.Pollers[len(m.Pollers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueueStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskQueueStatus == nil {
				m.TaskQueueStatus = &v14.TaskQueueStatus{}
			}
			if err := m.TaskQueueStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTaskQueuePartitionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTaskQueuePartitionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTaskQueuePartitionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskQueue == nil {
				m.TaskQueue = &v14.TaskQueue{}
			}
			if err := m.TaskQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTaskQueuePartitionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTaskQueuePartitionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTaskQueuePartitionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityTaskQueuePartitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityTaskQueuePartitions = append(m.ActivityTaskQueuePartitions, &v14.TaskQueuePartitionMetadata{})
			if err := m.ActivityTaskQueuePartitions[len(m.ActivityTaskQueuePartitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskQueuePartitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowTaskQueuePartitions = append(m.WorkflowTaskQueuePartitions, &v14.TaskQueuePartitionMetadata{})
			if err := m.WorkflowTaskQueuePartitions[len(m.WorkflowTaskQueuePartitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWorkerBuildIdCompatibilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWorkerBuildIdCompatibilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWorkerBuildIdCompatibilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyPublicRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Operation = &UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveBuildIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Operation = &UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersistUnknownBuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operation = &UpdateWorkerBuildIdCompatibilityRequest_PersistUnknownBuildId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWorkerBuildIdCompatibilityRequest_ApplyPublicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyPublicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyPublicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &v1.UpdateWorkerBuildIdCompatibilityRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWorkerBuildIdCompatibilityRequest_RemoveBuildIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveBuildIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveBuildIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KnownUserDataVersion", wireType)
			}
			m.KnownUserDataVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KnownUserDataVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildIds = append(m.BuildIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWorkerBuildIdCompatibilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWorkerBuildIdCompatibilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWorkerBuildIdCompatibilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorkerBuildIdCompatibilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorkerBuildIdCompatibilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorkerBuildIdCompatibilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &v1.GetWorkerBuildIdCompatibilityRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorkerBuildIdCompatibilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorkerBuildIdCompatibilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorkerBuildIdCompatibilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &v1.GetWorkerBuildIdCompatibilityResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskQueueUserDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskQueueUserDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskQueueUserDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastKnownUserDataVersion", wireType)
			}
			m.LastKnownUserDataVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastKnownUserDataVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitNewData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WaitNewData = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueueType", wireType)
			}
			m.TaskQueueType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskQueueType |= v110.TaskQueueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskQueueUserDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskQueueUserDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskQueueUserDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueueHasUserData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TaskQueueHasUserData = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserData == nil {
				m.UserData = &v111.VersionedTaskQueueUserData{}
			}
			if err := m.UserData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyTaskQueueUserDataReplicationEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyTaskQueueUserDataReplicationEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyTaskQueueUserDataReplicationEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserData == nil {
				m.UserData = &v111.TaskQueueUserData{}
			}
			if err := m.UserData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyTaskQueueUserDataReplicationEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyTaskQueueUserDataReplicationEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyTaskQueueUserDataReplicationEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBuildIdTaskQueueMappingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBuildIdTaskQueueMappingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBuildIdTaskQueueMappingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBuildIdTaskQueueMappingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBuildIdTaskQueueMappingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBuildIdTaskQueueMappingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueues = append(m.TaskQueues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceUnloadTaskQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceUnloadTaskQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceUnloadTaskQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueueType", wireType)
			}
			m.TaskQueueType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskQueueType |= v110.TaskQueueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceUnloadTaskQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceUnloadTaskQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceUnloadTaskQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WasLoaded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WasLoaded = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTaskQueueUserDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTaskQueueUserDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTaskQueueUserDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserData == nil {
				m.UserData = &v111.VersionedTaskQueueUserData{}
			}
			if err := m.UserData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildIdsAdded", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildIdsAdded = append(m.BuildIdsAdded, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildIdsRemoved", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuildIdsRemoved = append(m.BuildIdsRemoved, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTaskQueueUserDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTaskQueueUserDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTaskQueueUserDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicateTaskQueueUserDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicateTaskQueueUserDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicateTaskQueueUserDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserData == nil {
				m.UserData = &v111.TaskQueueUserData{}
			}
			if err := m.UserData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicateTaskQueueUserDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicateTaskQueueUserDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicateTaskQueueUserDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DispatchNexusTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatchNexusTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatchNexusTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskQueue == nil {
				m.TaskQueue = &v14.TaskQueue{}
			}
			if err := m.TaskQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &v112.Request{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardedSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardedSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DispatchNexusTaskResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatchNexusTaskResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatchNexusTaskResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerError", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &v112.HandlerError{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Outcome = &DispatchNexusTaskResponse_HandlerError{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &v112.Response{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Outcome = &DispatchNexusTaskResponse_Response{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollNexusTaskQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollNexusTaskQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollNexusTaskQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PollerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &v1.PollNexusTaskQueueRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardedSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardedSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollNexusTaskQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollNexusTaskQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollNexusTaskQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &v1.PollNexusTaskQueueResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondNexusTaskCompletedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondNexusTaskCompletedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondNexusTaskCompletedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskQueue == nil {
				m.TaskQueue = &v14.TaskQueue{}
			}
			if err := m.TaskQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &v1.RespondNexusTaskCompletedRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondNexusTaskCompletedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondNexusTaskCompletedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondNexusTaskCompletedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondNexusTaskFailedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondNexusTaskFailedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondNexusTaskFailedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskQueue == nil {
				m.TaskQueue = &v14.TaskQueue{}
			}
			if err := m.TaskQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &v1.RespondNexusTaskFailedRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RespondNexusTaskFailedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RespondNexusTaskFailedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RespondNexusTaskFailedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrUpdateNexusServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrUpdateNexusServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrUpdateNexusServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &v112.IncomingService{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrUpdateNexusServiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrUpdateNexusServiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrUpdateNexusServiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNexusServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNexusServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNexusServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNexusServiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNexusServiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNexusServiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &v111.VersionedNexusIncomingService{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteNexusServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteNexusServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteNexusServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteNexusServiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteNexusServiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteNexusServiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNexusServicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNexusServicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNexusServicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = append(m.NextPageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NextPageToken == nil {
				m.NextPageToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastKnownTableVersion", wireType)
			}
			m.LastKnownTableVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastKnownTableVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wait", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Wait = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListNexusServicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListNexusServicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListNexusServicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = append(m.NextPageToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NextPageToken == nil {
				m.NextPageToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableVersion", wireType)
			}
			m.TableVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &v111.VersionedNexusIncomingService{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRequestResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequestResponse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequestResponse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequestResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRequestResponse
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRequestResponse
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRequestResponse
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRequestResponse        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequestResponse          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRequestResponse = fmt.Errorf("proto: unexpected end of group")
)
