// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: api/testservice/v1/service_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -copyright_file LICENSE -package testservicemock -source api/testservice/v1/service_grpc.pb.go -destination api.new/temporal/server/api/testservicemock/v1/service_grpc.pb.mock.go
//

// Package testservicemock is a generated GoMock package.
package testservicemock

import (
	context "context"
	reflect "reflect"

	testservice "go.temporal.io/server/api/testservice/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockTestServiceClient is a mock of TestServiceClient interface.
type MockTestServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTestServiceClientMockRecorder
	isgomock struct{}
}

// MockTestServiceClientMockRecorder is the mock recorder for MockTestServiceClient.
type MockTestServiceClientMockRecorder struct {
	mock *MockTestServiceClient
}

// NewMockTestServiceClient creates a new mock instance.
func NewMockTestServiceClient(ctrl *gomock.Controller) *MockTestServiceClient {
	mock := &MockTestServiceClient{ctrl: ctrl}
	mock.recorder = &MockTestServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestServiceClient) EXPECT() *MockTestServiceClientMockRecorder {
	return m.recorder
}

// SendHello mocks base method.
func (m *MockTestServiceClient) SendHello(ctx context.Context, in *testservice.SendHelloRequest, opts ...grpc.CallOption) (*testservice.SendHelloResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendHello", varargs...)
	ret0, _ := ret[0].(*testservice.SendHelloResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendHello indicates an expected call of SendHello.
func (mr *MockTestServiceClientMockRecorder) SendHello(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHello", reflect.TypeOf((*MockTestServiceClient)(nil).SendHello), varargs...)
}

// MockTestServiceServer is a mock of TestServiceServer interface.
type MockTestServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTestServiceServerMockRecorder
	isgomock struct{}
}

// MockTestServiceServerMockRecorder is the mock recorder for MockTestServiceServer.
type MockTestServiceServerMockRecorder struct {
	mock *MockTestServiceServer
}

// NewMockTestServiceServer creates a new mock instance.
func NewMockTestServiceServer(ctrl *gomock.Controller) *MockTestServiceServer {
	mock := &MockTestServiceServer{ctrl: ctrl}
	mock.recorder = &MockTestServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestServiceServer) EXPECT() *MockTestServiceServerMockRecorder {
	return m.recorder
}

// SendHello mocks base method.
func (m *MockTestServiceServer) SendHello(arg0 context.Context, arg1 *testservice.SendHelloRequest) (*testservice.SendHelloResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHello", arg0, arg1)
	ret0, _ := ret[0].(*testservice.SendHelloResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendHello indicates an expected call of SendHello.
func (mr *MockTestServiceServerMockRecorder) SendHello(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHello", reflect.TypeOf((*MockTestServiceServer)(nil).SendHello), arg0, arg1)
}

// mustEmbedUnimplementedTestServiceServer mocks base method.
func (m *MockTestServiceServer) mustEmbedUnimplementedTestServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTestServiceServer")
}

// mustEmbedUnimplementedTestServiceServer indicates an expected call of mustEmbedUnimplementedTestServiceServer.
func (mr *MockTestServiceServerMockRecorder) mustEmbedUnimplementedTestServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTestServiceServer", reflect.TypeOf((*MockTestServiceServer)(nil).mustEmbedUnimplementedTestServiceServer))
}

// MockUnsafeTestServiceServer is a mock of UnsafeTestServiceServer interface.
type MockUnsafeTestServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTestServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeTestServiceServerMockRecorder is the mock recorder for MockUnsafeTestServiceServer.
type MockUnsafeTestServiceServerMockRecorder struct {
	mock *MockUnsafeTestServiceServer
}

// NewMockUnsafeTestServiceServer creates a new mock instance.
func NewMockUnsafeTestServiceServer(ctrl *gomock.Controller) *MockUnsafeTestServiceServer {
	mock := &MockUnsafeTestServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTestServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTestServiceServer) EXPECT() *MockUnsafeTestServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTestServiceServer mocks base method.
func (m *MockUnsafeTestServiceServer) mustEmbedUnimplementedTestServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTestServiceServer")
}

// mustEmbedUnimplementedTestServiceServer indicates an expected call of mustEmbedUnimplementedTestServiceServer.
func (mr *MockUnsafeTestServiceServerMockRecorder) mustEmbedUnimplementedTestServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTestServiceServer", reflect.TypeOf((*MockUnsafeTestServiceServer)(nil).mustEmbedUnimplementedTestServiceServer))
}
