// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/server/api/checksum/v1/message.proto

package checksum

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
	v11 "go.temporal.io/api/enums/v1"
	v1 "go.temporal.io/server/api/enums/v1"
	v12 "go.temporal.io/server/api/history/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MutableStateChecksumPayload struct {
	CancelRequested                   bool                        `protobuf:"varint,1,opt,name=cancel_requested,json=cancelRequested,proto3" json:"cancel_requested,omitempty"`
	State                             v1.WorkflowExecutionState   `protobuf:"varint,2,opt,name=state,proto3,enum=temporal.server.api.enums.v1.WorkflowExecutionState" json:"state,omitempty"`
	Status                            v11.WorkflowExecutionStatus `protobuf:"varint,3,opt,name=status,proto3,enum=temporal.api.enums.v1.WorkflowExecutionStatus" json:"status,omitempty"`
	LastWriteVersion                  int64                       `protobuf:"varint,4,opt,name=last_write_version,json=lastWriteVersion,proto3" json:"last_write_version,omitempty"`
	LastWriteEventId                  int64                       `protobuf:"varint,5,opt,name=last_write_event_id,json=lastWriteEventId,proto3" json:"last_write_event_id,omitempty"`
	LastFirstEventId                  int64                       `protobuf:"varint,6,opt,name=last_first_event_id,json=lastFirstEventId,proto3" json:"last_first_event_id,omitempty"`
	NextEventId                       int64                       `protobuf:"varint,7,opt,name=next_event_id,json=nextEventId,proto3" json:"next_event_id,omitempty"`
	LastProcessedEventId              int64                       `protobuf:"varint,8,opt,name=last_processed_event_id,json=lastProcessedEventId,proto3" json:"last_processed_event_id,omitempty"`
	SignalCount                       int64                       `protobuf:"varint,9,opt,name=signal_count,json=signalCount,proto3" json:"signal_count,omitempty"`
	WorkflowTaskAttempt               int32                       `protobuf:"varint,10,opt,name=workflow_task_attempt,json=workflowTaskAttempt,proto3" json:"workflow_task_attempt,omitempty"`
	WorkflowTaskVersion               int64                       `protobuf:"varint,11,opt,name=workflow_task_version,json=workflowTaskVersion,proto3" json:"workflow_task_version,omitempty"`
	WorkflowTaskScheduledEventId      int64                       `protobuf:"varint,12,opt,name=workflow_task_scheduled_event_id,json=workflowTaskScheduledEventId,proto3" json:"workflow_task_scheduled_event_id,omitempty"`
	WorkflowTaskStartedEventId        int64                       `protobuf:"varint,13,opt,name=workflow_task_started_event_id,json=workflowTaskStartedEventId,proto3" json:"workflow_task_started_event_id,omitempty"`
	PendingTimerStartedEventIds       []int64                     `protobuf:"varint,14,rep,packed,name=pending_timer_started_event_ids,json=pendingTimerStartedEventIds,proto3" json:"pending_timer_started_event_ids,omitempty"`
	PendingActivityScheduledEventIds  []int64                     `protobuf:"varint,15,rep,packed,name=pending_activity_scheduled_event_ids,json=pendingActivityScheduledEventIds,proto3" json:"pending_activity_scheduled_event_ids,omitempty"`
	PendingSignalInitiatedEventIds    []int64                     `protobuf:"varint,16,rep,packed,name=pending_signal_initiated_event_ids,json=pendingSignalInitiatedEventIds,proto3" json:"pending_signal_initiated_event_ids,omitempty"`
	PendingReqCancelInitiatedEventIds []int64                     `protobuf:"varint,17,rep,packed,name=pending_req_cancel_initiated_event_ids,json=pendingReqCancelInitiatedEventIds,proto3" json:"pending_req_cancel_initiated_event_ids,omitempty"`
	PendingChildInitiatedEventIds     []int64                     `protobuf:"varint,18,rep,packed,name=pending_child_initiated_event_ids,json=pendingChildInitiatedEventIds,proto3" json:"pending_child_initiated_event_ids,omitempty"`
	StickyTaskQueueName               string                      `protobuf:"bytes,19,opt,name=sticky_task_queue_name,json=stickyTaskQueueName,proto3" json:"sticky_task_queue_name,omitempty"`
	VersionHistories                  *v12.VersionHistories       `protobuf:"bytes,20,opt,name=version_histories,json=versionHistories,proto3" json:"version_histories,omitempty"`
}

func (m *MutableStateChecksumPayload) Reset()      { *m = MutableStateChecksumPayload{} }
func (*MutableStateChecksumPayload) ProtoMessage() {}
func (*MutableStateChecksumPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8c4c1fd39c4866b, []int{0}
}
func (m *MutableStateChecksumPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MutableStateChecksumPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MutableStateChecksumPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MutableStateChecksumPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MutableStateChecksumPayload.Merge(m, src)
}
func (m *MutableStateChecksumPayload) XXX_Size() int {
	return m.Size()
}
func (m *MutableStateChecksumPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_MutableStateChecksumPayload.DiscardUnknown(m)
}

var xxx_messageInfo_MutableStateChecksumPayload proto.InternalMessageInfo

func (m *MutableStateChecksumPayload) GetCancelRequested() bool {
	if m != nil {
		return m.CancelRequested
	}
	return false
}

func (m *MutableStateChecksumPayload) GetState() v1.WorkflowExecutionState {
	if m != nil {
		return m.State
	}
	return v1.WORKFLOW_EXECUTION_STATE_UNSPECIFIED
}

func (m *MutableStateChecksumPayload) GetStatus() v11.WorkflowExecutionStatus {
	if m != nil {
		return m.Status
	}
	return v11.WORKFLOW_EXECUTION_STATUS_UNSPECIFIED
}

func (m *MutableStateChecksumPayload) GetLastWriteVersion() int64 {
	if m != nil {
		return m.LastWriteVersion
	}
	return 0
}

func (m *MutableStateChecksumPayload) GetLastWriteEventId() int64 {
	if m != nil {
		return m.LastWriteEventId
	}
	return 0
}

func (m *MutableStateChecksumPayload) GetLastFirstEventId() int64 {
	if m != nil {
		return m.LastFirstEventId
	}
	return 0
}

func (m *MutableStateChecksumPayload) GetNextEventId() int64 {
	if m != nil {
		return m.NextEventId
	}
	return 0
}

func (m *MutableStateChecksumPayload) GetLastProcessedEventId() int64 {
	if m != nil {
		return m.LastProcessedEventId
	}
	return 0
}

func (m *MutableStateChecksumPayload) GetSignalCount() int64 {
	if m != nil {
		return m.SignalCount
	}
	return 0
}

func (m *MutableStateChecksumPayload) GetWorkflowTaskAttempt() int32 {
	if m != nil {
		return m.WorkflowTaskAttempt
	}
	return 0
}

func (m *MutableStateChecksumPayload) GetWorkflowTaskVersion() int64 {
	if m != nil {
		return m.WorkflowTaskVersion
	}
	return 0
}

func (m *MutableStateChecksumPayload) GetWorkflowTaskScheduledEventId() int64 {
	if m != nil {
		return m.WorkflowTaskScheduledEventId
	}
	return 0
}

func (m *MutableStateChecksumPayload) GetWorkflowTaskStartedEventId() int64 {
	if m != nil {
		return m.WorkflowTaskStartedEventId
	}
	return 0
}

func (m *MutableStateChecksumPayload) GetPendingTimerStartedEventIds() []int64 {
	if m != nil {
		return m.PendingTimerStartedEventIds
	}
	return nil
}

func (m *MutableStateChecksumPayload) GetPendingActivityScheduledEventIds() []int64 {
	if m != nil {
		return m.PendingActivityScheduledEventIds
	}
	return nil
}

func (m *MutableStateChecksumPayload) GetPendingSignalInitiatedEventIds() []int64 {
	if m != nil {
		return m.PendingSignalInitiatedEventIds
	}
	return nil
}

func (m *MutableStateChecksumPayload) GetPendingReqCancelInitiatedEventIds() []int64 {
	if m != nil {
		return m.PendingReqCancelInitiatedEventIds
	}
	return nil
}

func (m *MutableStateChecksumPayload) GetPendingChildInitiatedEventIds() []int64 {
	if m != nil {
		return m.PendingChildInitiatedEventIds
	}
	return nil
}

func (m *MutableStateChecksumPayload) GetStickyTaskQueueName() string {
	if m != nil {
		return m.StickyTaskQueueName
	}
	return ""
}

func (m *MutableStateChecksumPayload) GetVersionHistories() *v12.VersionHistories {
	if m != nil {
		return m.VersionHistories
	}
	return nil
}

func init() {
	proto.RegisterType((*MutableStateChecksumPayload)(nil), "temporal.server.api.checksum.v1.MutableStateChecksumPayload")
}

func init() {
	proto.RegisterFile("temporal/server/api/checksum/v1/message.proto", fileDescriptor_c8c4c1fd39c4866b)
}

var fileDescriptor_c8c4c1fd39c4866b = []byte{
	// 729 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0x4d, 0x4f, 0xdb, 0x48,
	0x18, 0xc7, 0xe3, 0xcd, 0xc2, 0xc2, 0xf0, 0x16, 0x1c, 0x76, 0xd7, 0x0a, 0xbb, 0x83, 0x41, 0x68,
	0x95, 0xd5, 0x82, 0xb3, 0xc0, 0xee, 0xa9, 0x27, 0x48, 0x41, 0x80, 0x54, 0x04, 0x06, 0x15, 0xa9,
	0x52, 0x65, 0x0d, 0xf6, 0x43, 0x32, 0x8a, 0x63, 0x27, 0x9e, 0xb1, 0x21, 0xb7, 0x7e, 0x84, 0x7e,
	0x8c, 0x7e, 0x94, 0x1e, 0x39, 0x72, 0x2c, 0xe1, 0xd2, 0x4b, 0x25, 0x3e, 0x42, 0x35, 0x63, 0x0f,
	0x79, 0x45, 0xbd, 0x45, 0xcf, 0xff, 0xf7, 0xfc, 0xe6, 0xcd, 0x79, 0xd0, 0x26, 0x87, 0x66, 0x2b,
	0x8c, 0x88, 0x5f, 0x61, 0x10, 0x25, 0x10, 0x55, 0x48, 0x8b, 0x56, 0xdc, 0x3a, 0xb8, 0x0d, 0x16,
	0x37, 0x2b, 0xc9, 0x56, 0xa5, 0x09, 0x8c, 0x91, 0x1a, 0x58, 0xad, 0x28, 0xe4, 0xa1, 0xbe, 0xa2,
	0x70, 0x2b, 0xc5, 0x2d, 0xd2, 0xa2, 0x96, 0xc2, 0xad, 0x64, 0xab, 0xb4, 0xfe, 0xec, 0x13, 0x22,
	0x08, 0xe2, 0x26, 0x13, 0x96, 0x9b, 0x30, 0x6a, 0x5c, 0xfb, 0xe1, 0x4d, 0xaa, 0x29, 0x6d, 0x8c,
	0x5b, 0xb5, 0x4e, 0x19, 0x0f, 0xa3, 0xce, 0xc8, 0xa2, 0xa5, 0x7f, 0xc6, 0xd1, 0x2f, 0xa8, 0xd7,
	0xbe, 0x4d, 0xa3, 0xe5, 0x37, 0x31, 0x27, 0x57, 0x3e, 0x9c, 0x73, 0xc2, 0xa1, 0x9a, 0x6d, 0xee,
	0x94, 0x74, 0xfc, 0x90, 0x78, 0xfa, 0xdf, 0xa8, 0xe0, 0x92, 0xc0, 0x05, 0xdf, 0x89, 0xa0, 0x1d,
	0x03, 0xe3, 0xe0, 0x19, 0x9a, 0xa9, 0x95, 0xa7, 0xec, 0x85, 0xb4, 0x6e, 0xab, 0xb2, 0x7e, 0x8c,
	0x26, 0x98, 0x50, 0x18, 0x3f, 0x99, 0x5a, 0x79, 0x7e, 0xfb, 0x3f, 0x6b, 0xdc, 0xe1, 0xe5, 0x3e,
	0xac, 0x64, 0xcb, 0xba, 0xcc, 0xf6, 0xb1, 0x7f, 0x0b, 0x6e, 0xcc, 0x69, 0x18, 0xc8, 0xe5, 0xed,
	0x54, 0xa1, 0x1f, 0xa0, 0x49, 0xf1, 0x23, 0x66, 0x46, 0x5e, 0xca, 0xac, 0x9e, 0xec, 0xc7, 0x96,
	0x98, 0xd9, 0x59, 0xb7, 0xbe, 0x81, 0x74, 0x9f, 0x30, 0xee, 0xdc, 0x44, 0x94, 0x83, 0x93, 0x40,
	0xc4, 0x68, 0x18, 0x18, 0x3f, 0x9b, 0x5a, 0x39, 0x6f, 0x17, 0x44, 0x72, 0x29, 0x82, 0xb7, 0x69,
	0x5d, 0xdf, 0x44, 0xc5, 0x3e, 0x1a, 0x12, 0x08, 0xb8, 0x43, 0x3d, 0x63, 0x62, 0x08, 0xdf, 0x17,
	0xc1, 0x91, 0xf7, 0x8c, 0x5f, 0xd3, 0x88, 0xf1, 0x1e, 0x3e, 0xd9, 0xc3, 0x0f, 0x44, 0xa2, 0xf0,
	0x35, 0x34, 0x17, 0xc0, 0x6d, 0x1f, 0xf8, 0x8b, 0x04, 0x67, 0x44, 0x51, 0x31, 0xff, 0xa3, 0xdf,
	0xa5, 0xb2, 0x15, 0x85, 0x2e, 0x30, 0x06, 0x5e, 0x8f, 0x9e, 0x92, 0xf4, 0x92, 0x88, 0x4f, 0x55,
	0xaa, 0xda, 0x56, 0xd1, 0x2c, 0xa3, 0xb5, 0x80, 0xf8, 0x8e, 0x1b, 0xc6, 0x01, 0x37, 0xa6, 0x53,
	0x73, 0x5a, 0xab, 0x8a, 0x92, 0xbe, 0x8d, 0x7e, 0x55, 0x4f, 0xef, 0x70, 0xc2, 0x1a, 0x0e, 0xe1,
	0xe2, 0x4a, 0xb9, 0x81, 0x4c, 0xad, 0x3c, 0x61, 0x17, 0x55, 0x78, 0x41, 0x58, 0x63, 0x37, 0x8d,
	0x46, 0x7b, 0xd4, 0x05, 0xce, 0x48, 0xff, 0x40, 0x8f, 0xba, 0xc3, 0x03, 0x64, 0x0e, 0xf6, 0x30,
	0xb7, 0x0e, 0x5e, 0xec, 0xf7, 0x1f, 0x65, 0x56, 0xb6, 0xff, 0xd1, 0xdf, 0x7e, 0xae, 0x28, 0x75,
	0xa4, 0x3d, 0x84, 0x87, 0x3c, 0x9c, 0x44, 0xbc, 0xdf, 0x32, 0x27, 0x2d, 0xa5, 0x01, 0x4b, 0xca,
	0x28, 0xc7, 0x6b, 0xb4, 0xd2, 0x82, 0xc0, 0xa3, 0x41, 0xcd, 0xe1, 0xb4, 0x09, 0xd1, 0x88, 0x83,
	0x19, 0xf3, 0x66, 0xbe, 0x9c, 0xb7, 0x97, 0x33, 0xec, 0x42, 0x50, 0x83, 0x12, 0xa6, 0x9f, 0xa0,
	0x75, 0x65, 0x21, 0x2e, 0xa7, 0x09, 0xe5, 0x9d, 0x31, 0x87, 0x62, 0xc6, 0x82, 0x54, 0x99, 0x19,
	0xbb, 0x9b, 0xa1, 0xc3, 0x07, 0x63, 0xfa, 0x31, 0x5a, 0x53, 0xbe, 0xec, 0xd1, 0x68, 0x40, 0x39,
	0x25, 0x83, 0x1b, 0x2b, 0x48, 0x1b, 0xce, 0xc8, 0x73, 0x09, 0x1e, 0x29, 0xee, 0xd9, 0x75, 0x86,
	0xfe, 0x52, 0xae, 0x08, 0xda, 0x4e, 0xf6, 0x57, 0x1d, 0xe7, 0x5b, 0x94, 0xbe, 0xd5, 0x8c, 0xb6,
	0xa1, 0x5d, 0x95, 0xec, 0xa8, 0xf2, 0x10, 0x29, 0xc8, 0x71, 0xeb, 0xd4, 0xf7, 0xc6, 0xda, 0x74,
	0x69, 0xfb, 0x33, 0x03, 0xab, 0x82, 0x1b, 0x35, 0xed, 0xa0, 0xdf, 0x18, 0xa7, 0x6e, 0xa3, 0x93,
	0x3e, 0x60, 0x3b, 0x86, 0x18, 0x9c, 0x80, 0x34, 0xc1, 0x28, 0x9a, 0x5a, 0x79, 0xda, 0x2e, 0xa6,
	0xa9, 0x78, 0xb8, 0x33, 0x91, 0x9d, 0x90, 0x26, 0xe8, 0xef, 0xd1, 0x62, 0xf6, 0x95, 0x39, 0xe9,
	0x84, 0xa3, 0xc0, 0x8c, 0x25, 0x53, 0x2b, 0xcf, 0x6c, 0xff, 0x3b, 0x76, 0xa2, 0x64, 0x73, 0x50,
	0x4c, 0x83, 0xec, 0x1b, 0x3c, 0x54, 0x7d, 0x76, 0x21, 0x19, 0xaa, 0xec, 0x79, 0x77, 0x0f, 0x38,
	0x77, 0xff, 0x80, 0x73, 0x4f, 0x0f, 0x58, 0xfb, 0xd0, 0xc5, 0xda, 0xa7, 0x2e, 0xd6, 0x3e, 0x77,
	0xb1, 0x76, 0xd7, 0xc5, 0xda, 0x97, 0x2e, 0xd6, 0xbe, 0x76, 0x71, 0xee, 0xa9, 0x8b, 0xb5, 0x8f,
	0x8f, 0x38, 0x77, 0xf7, 0x88, 0x73, 0xf7, 0x8f, 0x38, 0xf7, 0xce, 0xaa, 0x85, 0xbd, 0xb5, 0x69,
	0xf8, 0xc2, 0xf0, 0x7f, 0xa5, 0x7e, 0x5f, 0x4d, 0xca, 0xe1, 0xba, 0xf3, 0x3d, 0x00, 0x00, 0xff,
	0xff, 0xe2, 0xf9, 0x6f, 0xc9, 0x2f, 0x06, 0x00, 0x00,
}

func (this *MutableStateChecksumPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MutableStateChecksumPayload)
	if !ok {
		that2, ok := that.(MutableStateChecksumPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CancelRequested != that1.CancelRequested {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.LastWriteVersion != that1.LastWriteVersion {
		return false
	}
	if this.LastWriteEventId != that1.LastWriteEventId {
		return false
	}
	if this.LastFirstEventId != that1.LastFirstEventId {
		return false
	}
	if this.NextEventId != that1.NextEventId {
		return false
	}
	if this.LastProcessedEventId != that1.LastProcessedEventId {
		return false
	}
	if this.SignalCount != that1.SignalCount {
		return false
	}
	if this.WorkflowTaskAttempt != that1.WorkflowTaskAttempt {
		return false
	}
	if this.WorkflowTaskVersion != that1.WorkflowTaskVersion {
		return false
	}
	if this.WorkflowTaskScheduledEventId != that1.WorkflowTaskScheduledEventId {
		return false
	}
	if this.WorkflowTaskStartedEventId != that1.WorkflowTaskStartedEventId {
		return false
	}
	if len(this.PendingTimerStartedEventIds) != len(that1.PendingTimerStartedEventIds) {
		return false
	}
	for i := range this.PendingTimerStartedEventIds {
		if this.PendingTimerStartedEventIds[i] != that1.PendingTimerStartedEventIds[i] {
			return false
		}
	}
	if len(this.PendingActivityScheduledEventIds) != len(that1.PendingActivityScheduledEventIds) {
		return false
	}
	for i := range this.PendingActivityScheduledEventIds {
		if this.PendingActivityScheduledEventIds[i] != that1.PendingActivityScheduledEventIds[i] {
			return false
		}
	}
	if len(this.PendingSignalInitiatedEventIds) != len(that1.PendingSignalInitiatedEventIds) {
		return false
	}
	for i := range this.PendingSignalInitiatedEventIds {
		if this.PendingSignalInitiatedEventIds[i] != that1.PendingSignalInitiatedEventIds[i] {
			return false
		}
	}
	if len(this.PendingReqCancelInitiatedEventIds) != len(that1.PendingReqCancelInitiatedEventIds) {
		return false
	}
	for i := range this.PendingReqCancelInitiatedEventIds {
		if this.PendingReqCancelInitiatedEventIds[i] != that1.PendingReqCancelInitiatedEventIds[i] {
			return false
		}
	}
	if len(this.PendingChildInitiatedEventIds) != len(that1.PendingChildInitiatedEventIds) {
		return false
	}
	for i := range this.PendingChildInitiatedEventIds {
		if this.PendingChildInitiatedEventIds[i] != that1.PendingChildInitiatedEventIds[i] {
			return false
		}
	}
	if this.StickyTaskQueueName != that1.StickyTaskQueueName {
		return false
	}
	if !this.VersionHistories.Equal(that1.VersionHistories) {
		return false
	}
	return true
}
func (this *MutableStateChecksumPayload) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 24)
	s = append(s, "&checksum.MutableStateChecksumPayload{")
	s = append(s, "CancelRequested: "+fmt.Sprintf("%#v", this.CancelRequested)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "LastWriteVersion: "+fmt.Sprintf("%#v", this.LastWriteVersion)+",\n")
	s = append(s, "LastWriteEventId: "+fmt.Sprintf("%#v", this.LastWriteEventId)+",\n")
	s = append(s, "LastFirstEventId: "+fmt.Sprintf("%#v", this.LastFirstEventId)+",\n")
	s = append(s, "NextEventId: "+fmt.Sprintf("%#v", this.NextEventId)+",\n")
	s = append(s, "LastProcessedEventId: "+fmt.Sprintf("%#v", this.LastProcessedEventId)+",\n")
	s = append(s, "SignalCount: "+fmt.Sprintf("%#v", this.SignalCount)+",\n")
	s = append(s, "WorkflowTaskAttempt: "+fmt.Sprintf("%#v", this.WorkflowTaskAttempt)+",\n")
	s = append(s, "WorkflowTaskVersion: "+fmt.Sprintf("%#v", this.WorkflowTaskVersion)+",\n")
	s = append(s, "WorkflowTaskScheduledEventId: "+fmt.Sprintf("%#v", this.WorkflowTaskScheduledEventId)+",\n")
	s = append(s, "WorkflowTaskStartedEventId: "+fmt.Sprintf("%#v", this.WorkflowTaskStartedEventId)+",\n")
	s = append(s, "PendingTimerStartedEventIds: "+fmt.Sprintf("%#v", this.PendingTimerStartedEventIds)+",\n")
	s = append(s, "PendingActivityScheduledEventIds: "+fmt.Sprintf("%#v", this.PendingActivityScheduledEventIds)+",\n")
	s = append(s, "PendingSignalInitiatedEventIds: "+fmt.Sprintf("%#v", this.PendingSignalInitiatedEventIds)+",\n")
	s = append(s, "PendingReqCancelInitiatedEventIds: "+fmt.Sprintf("%#v", this.PendingReqCancelInitiatedEventIds)+",\n")
	s = append(s, "PendingChildInitiatedEventIds: "+fmt.Sprintf("%#v", this.PendingChildInitiatedEventIds)+",\n")
	s = append(s, "StickyTaskQueueName: "+fmt.Sprintf("%#v", this.StickyTaskQueueName)+",\n")
	if this.VersionHistories != nil {
		s = append(s, "VersionHistories: "+fmt.Sprintf("%#v", this.VersionHistories)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MutableStateChecksumPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MutableStateChecksumPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MutableStateChecksumPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VersionHistories != nil {
		{
			size, err := m.VersionHistories.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.StickyTaskQueueName) > 0 {
		i -= len(m.StickyTaskQueueName)
		copy(dAtA[i:], m.StickyTaskQueueName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.StickyTaskQueueName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.PendingChildInitiatedEventIds) > 0 {
		dAtA3 := make([]byte, len(m.PendingChildInitiatedEventIds)*10)
		var j2 int
		for _, num1 := range m.PendingChildInitiatedEventIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintMessage(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.PendingReqCancelInitiatedEventIds) > 0 {
		dAtA5 := make([]byte, len(m.PendingReqCancelInitiatedEventIds)*10)
		var j4 int
		for _, num1 := range m.PendingReqCancelInitiatedEventIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintMessage(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.PendingSignalInitiatedEventIds) > 0 {
		dAtA7 := make([]byte, len(m.PendingSignalInitiatedEventIds)*10)
		var j6 int
		for _, num1 := range m.PendingSignalInitiatedEventIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintMessage(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PendingActivityScheduledEventIds) > 0 {
		dAtA9 := make([]byte, len(m.PendingActivityScheduledEventIds)*10)
		var j8 int
		for _, num1 := range m.PendingActivityScheduledEventIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintMessage(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.PendingTimerStartedEventIds) > 0 {
		dAtA11 := make([]byte, len(m.PendingTimerStartedEventIds)*10)
		var j10 int
		for _, num1 := range m.PendingTimerStartedEventIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintMessage(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x72
	}
	if m.WorkflowTaskStartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskStartedEventId))
		i--
		dAtA[i] = 0x68
	}
	if m.WorkflowTaskScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskScheduledEventId))
		i--
		dAtA[i] = 0x60
	}
	if m.WorkflowTaskVersion != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskVersion))
		i--
		dAtA[i] = 0x58
	}
	if m.WorkflowTaskAttempt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskAttempt))
		i--
		dAtA[i] = 0x50
	}
	if m.SignalCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SignalCount))
		i--
		dAtA[i] = 0x48
	}
	if m.LastProcessedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LastProcessedEventId))
		i--
		dAtA[i] = 0x40
	}
	if m.NextEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.NextEventId))
		i--
		dAtA[i] = 0x38
	}
	if m.LastFirstEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LastFirstEventId))
		i--
		dAtA[i] = 0x30
	}
	if m.LastWriteEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LastWriteEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.LastWriteVersion != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LastWriteVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.State != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.CancelRequested {
		i--
		if m.CancelRequested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MutableStateChecksumPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelRequested {
		n += 2
	}
	if m.State != 0 {
		n += 1 + sovMessage(uint64(m.State))
	}
	if m.Status != 0 {
		n += 1 + sovMessage(uint64(m.Status))
	}
	if m.LastWriteVersion != 0 {
		n += 1 + sovMessage(uint64(m.LastWriteVersion))
	}
	if m.LastWriteEventId != 0 {
		n += 1 + sovMessage(uint64(m.LastWriteEventId))
	}
	if m.LastFirstEventId != 0 {
		n += 1 + sovMessage(uint64(m.LastFirstEventId))
	}
	if m.NextEventId != 0 {
		n += 1 + sovMessage(uint64(m.NextEventId))
	}
	if m.LastProcessedEventId != 0 {
		n += 1 + sovMessage(uint64(m.LastProcessedEventId))
	}
	if m.SignalCount != 0 {
		n += 1 + sovMessage(uint64(m.SignalCount))
	}
	if m.WorkflowTaskAttempt != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskAttempt))
	}
	if m.WorkflowTaskVersion != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskVersion))
	}
	if m.WorkflowTaskScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskScheduledEventId))
	}
	if m.WorkflowTaskStartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskStartedEventId))
	}
	if len(m.PendingTimerStartedEventIds) > 0 {
		l = 0
		for _, e := range m.PendingTimerStartedEventIds {
			l += sovMessage(uint64(e))
		}
		n += 1 + sovMessage(uint64(l)) + l
	}
	if len(m.PendingActivityScheduledEventIds) > 0 {
		l = 0
		for _, e := range m.PendingActivityScheduledEventIds {
			l += sovMessage(uint64(e))
		}
		n += 1 + sovMessage(uint64(l)) + l
	}
	if len(m.PendingSignalInitiatedEventIds) > 0 {
		l = 0
		for _, e := range m.PendingSignalInitiatedEventIds {
			l += sovMessage(uint64(e))
		}
		n += 2 + sovMessage(uint64(l)) + l
	}
	if len(m.PendingReqCancelInitiatedEventIds) > 0 {
		l = 0
		for _, e := range m.PendingReqCancelInitiatedEventIds {
			l += sovMessage(uint64(e))
		}
		n += 2 + sovMessage(uint64(l)) + l
	}
	if len(m.PendingChildInitiatedEventIds) > 0 {
		l = 0
		for _, e := range m.PendingChildInitiatedEventIds {
			l += sovMessage(uint64(e))
		}
		n += 2 + sovMessage(uint64(l)) + l
	}
	l = len(m.StickyTaskQueueName)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.VersionHistories != nil {
		l = m.VersionHistories.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MutableStateChecksumPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MutableStateChecksumPayload{`,
		`CancelRequested:` + fmt.Sprintf("%v", this.CancelRequested) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`LastWriteVersion:` + fmt.Sprintf("%v", this.LastWriteVersion) + `,`,
		`LastWriteEventId:` + fmt.Sprintf("%v", this.LastWriteEventId) + `,`,
		`LastFirstEventId:` + fmt.Sprintf("%v", this.LastFirstEventId) + `,`,
		`NextEventId:` + fmt.Sprintf("%v", this.NextEventId) + `,`,
		`LastProcessedEventId:` + fmt.Sprintf("%v", this.LastProcessedEventId) + `,`,
		`SignalCount:` + fmt.Sprintf("%v", this.SignalCount) + `,`,
		`WorkflowTaskAttempt:` + fmt.Sprintf("%v", this.WorkflowTaskAttempt) + `,`,
		`WorkflowTaskVersion:` + fmt.Sprintf("%v", this.WorkflowTaskVersion) + `,`,
		`WorkflowTaskScheduledEventId:` + fmt.Sprintf("%v", this.WorkflowTaskScheduledEventId) + `,`,
		`WorkflowTaskStartedEventId:` + fmt.Sprintf("%v", this.WorkflowTaskStartedEventId) + `,`,
		`PendingTimerStartedEventIds:` + fmt.Sprintf("%v", this.PendingTimerStartedEventIds) + `,`,
		`PendingActivityScheduledEventIds:` + fmt.Sprintf("%v", this.PendingActivityScheduledEventIds) + `,`,
		`PendingSignalInitiatedEventIds:` + fmt.Sprintf("%v", this.PendingSignalInitiatedEventIds) + `,`,
		`PendingReqCancelInitiatedEventIds:` + fmt.Sprintf("%v", this.PendingReqCancelInitiatedEventIds) + `,`,
		`PendingChildInitiatedEventIds:` + fmt.Sprintf("%v", this.PendingChildInitiatedEventIds) + `,`,
		`StickyTaskQueueName:` + fmt.Sprintf("%v", this.StickyTaskQueueName) + `,`,
		`VersionHistories:` + strings.Replace(fmt.Sprintf("%v", this.VersionHistories), "VersionHistories", "v12.VersionHistories", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MutableStateChecksumPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MutableStateChecksumPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MutableStateChecksumPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelRequested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelRequested = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= v1.WorkflowExecutionState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= v11.WorkflowExecutionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWriteVersion", wireType)
			}
			m.LastWriteVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastWriteVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWriteEventId", wireType)
			}
			m.LastWriteEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastWriteEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFirstEventId", wireType)
			}
			m.LastFirstEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastFirstEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEventId", wireType)
			}
			m.NextEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastProcessedEventId", wireType)
			}
			m.LastProcessedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastProcessedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalCount", wireType)
			}
			m.SignalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignalCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskAttempt", wireType)
			}
			m.WorkflowTaskAttempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskAttempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskVersion", wireType)
			}
			m.WorkflowTaskVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskScheduledEventId", wireType)
			}
			m.WorkflowTaskScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskStartedEventId", wireType)
			}
			m.WorkflowTaskStartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskStartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PendingTimerStartedEventIds = append(m.PendingTimerStartedEventIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PendingTimerStartedEventIds) == 0 {
					m.PendingTimerStartedEventIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PendingTimerStartedEventIds = append(m.PendingTimerStartedEventIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingTimerStartedEventIds", wireType)
			}
		case 15:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PendingActivityScheduledEventIds = append(m.PendingActivityScheduledEventIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PendingActivityScheduledEventIds) == 0 {
					m.PendingActivityScheduledEventIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PendingActivityScheduledEventIds = append(m.PendingActivityScheduledEventIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingActivityScheduledEventIds", wireType)
			}
		case 16:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PendingSignalInitiatedEventIds = append(m.PendingSignalInitiatedEventIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PendingSignalInitiatedEventIds) == 0 {
					m.PendingSignalInitiatedEventIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PendingSignalInitiatedEventIds = append(m.PendingSignalInitiatedEventIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingSignalInitiatedEventIds", wireType)
			}
		case 17:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PendingReqCancelInitiatedEventIds = append(m.PendingReqCancelInitiatedEventIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PendingReqCancelInitiatedEventIds) == 0 {
					m.PendingReqCancelInitiatedEventIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PendingReqCancelInitiatedEventIds = append(m.PendingReqCancelInitiatedEventIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingReqCancelInitiatedEventIds", wireType)
			}
		case 18:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PendingChildInitiatedEventIds = append(m.PendingChildInitiatedEventIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PendingChildInitiatedEventIds) == 0 {
					m.PendingChildInitiatedEventIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PendingChildInitiatedEventIds = append(m.PendingChildInitiatedEventIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingChildInitiatedEventIds", wireType)
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickyTaskQueueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StickyTaskQueueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionHistories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VersionHistories == nil {
				m.VersionHistories = &v12.VersionHistories{}
			}
			if err := m.VersionHistories.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
