// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/server/api/checksum/v1/message.proto

package checksum

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
	v1 "go.temporal.io/server/api/enums/v1"
	v12 "go.temporal.io/server/api/history/v1"
	v11 "go.temporal.io/temporal-proto/enums/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MutableStateChecksumPayload struct {
	CancelRequested              bool                        `protobuf:"varint,1,opt,name=cancel_requested,json=cancelRequested,proto3" json:"cancel_requested,omitempty"`
	State                        v1.WorkflowExecutionState   `protobuf:"varint,2,opt,name=state,proto3,enum=temporal.server.api.enums.v1.WorkflowExecutionState" json:"state,omitempty"`
	Status                       v11.WorkflowExecutionStatus `protobuf:"varint,3,opt,name=status,proto3,enum=temporal.enums.v1.WorkflowExecutionStatus" json:"status,omitempty"`
	LastWriteVersion             int64                       `protobuf:"varint,4,opt,name=last_write_version,json=lastWriteVersion,proto3" json:"last_write_version,omitempty"`
	LastWriteEventId             int64                       `protobuf:"varint,5,opt,name=last_write_event_id,json=lastWriteEventId,proto3" json:"last_write_event_id,omitempty"`
	LastFirstEventId             int64                       `protobuf:"varint,6,opt,name=last_first_event_id,json=lastFirstEventId,proto3" json:"last_first_event_id,omitempty"`
	NextEventId                  int64                       `protobuf:"varint,7,opt,name=next_event_id,json=nextEventId,proto3" json:"next_event_id,omitempty"`
	LastProcessedEventId         int64                       `protobuf:"varint,8,opt,name=last_processed_event_id,json=lastProcessedEventId,proto3" json:"last_processed_event_id,omitempty"`
	SignalCount                  int64                       `protobuf:"varint,9,opt,name=signal_count,json=signalCount,proto3" json:"signal_count,omitempty"`
	DecisionAttempt              int32                       `protobuf:"varint,10,opt,name=decision_attempt,json=decisionAttempt,proto3" json:"decision_attempt,omitempty"`
	DecisionVersion              int64                       `protobuf:"varint,11,opt,name=decision_version,json=decisionVersion,proto3" json:"decision_version,omitempty"`
	DecisionScheduledId          int64                       `protobuf:"varint,12,opt,name=decision_scheduled_id,json=decisionScheduledId,proto3" json:"decision_scheduled_id,omitempty"`
	DecisionStartedId            int64                       `protobuf:"varint,13,opt,name=decision_started_id,json=decisionStartedId,proto3" json:"decision_started_id,omitempty"`
	PendingTimerStartedIds       []int64                     `protobuf:"varint,14,rep,packed,name=pending_timer_started_ids,json=pendingTimerStartedIds,proto3" json:"pending_timer_started_ids,omitempty"`
	PendingActivityScheduledIds  []int64                     `protobuf:"varint,15,rep,packed,name=pending_activity_scheduled_ids,json=pendingActivityScheduledIds,proto3" json:"pending_activity_scheduled_ids,omitempty"`
	PendingSignalInitiatedIds    []int64                     `protobuf:"varint,16,rep,packed,name=pending_signal_initiated_ids,json=pendingSignalInitiatedIds,proto3" json:"pending_signal_initiated_ids,omitempty"`
	PendingReqCancelInitiatedIds []int64                     `protobuf:"varint,17,rep,packed,name=pending_req_cancel_initiated_ids,json=pendingReqCancelInitiatedIds,proto3" json:"pending_req_cancel_initiated_ids,omitempty"`
	PendingChildInitiatedIds     []int64                     `protobuf:"varint,18,rep,packed,name=pending_child_initiated_ids,json=pendingChildInitiatedIds,proto3" json:"pending_child_initiated_ids,omitempty"`
	StickyTaskQueueName          string                      `protobuf:"bytes,19,opt,name=sticky_task_queue_name,json=stickyTaskQueueName,proto3" json:"sticky_task_queue_name,omitempty"`
	VersionHistories             *v12.VersionHistories       `protobuf:"bytes,20,opt,name=version_histories,json=versionHistories,proto3" json:"version_histories,omitempty"`
}

func (m *MutableStateChecksumPayload) Reset()      { *m = MutableStateChecksumPayload{} }
func (*MutableStateChecksumPayload) ProtoMessage() {}
func (*MutableStateChecksumPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8c4c1fd39c4866b, []int{0}
}
func (m *MutableStateChecksumPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MutableStateChecksumPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MutableStateChecksumPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MutableStateChecksumPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MutableStateChecksumPayload.Merge(m, src)
}
func (m *MutableStateChecksumPayload) XXX_Size() int {
	return m.Size()
}
func (m *MutableStateChecksumPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_MutableStateChecksumPayload.DiscardUnknown(m)
}

var xxx_messageInfo_MutableStateChecksumPayload proto.InternalMessageInfo

func (m *MutableStateChecksumPayload) GetCancelRequested() bool {
	if m != nil {
		return m.CancelRequested
	}
	return false
}

func (m *MutableStateChecksumPayload) GetState() v1.WorkflowExecutionState {
	if m != nil {
		return m.State
	}
	return v1.WORKFLOW_EXECUTION_STATE_UNSPECIFIED
}

func (m *MutableStateChecksumPayload) GetStatus() v11.WorkflowExecutionStatus {
	if m != nil {
		return m.Status
	}
	return v11.WORKFLOW_EXECUTION_STATUS_UNSPECIFIED
}

func (m *MutableStateChecksumPayload) GetLastWriteVersion() int64 {
	if m != nil {
		return m.LastWriteVersion
	}
	return 0
}

func (m *MutableStateChecksumPayload) GetLastWriteEventId() int64 {
	if m != nil {
		return m.LastWriteEventId
	}
	return 0
}

func (m *MutableStateChecksumPayload) GetLastFirstEventId() int64 {
	if m != nil {
		return m.LastFirstEventId
	}
	return 0
}

func (m *MutableStateChecksumPayload) GetNextEventId() int64 {
	if m != nil {
		return m.NextEventId
	}
	return 0
}

func (m *MutableStateChecksumPayload) GetLastProcessedEventId() int64 {
	if m != nil {
		return m.LastProcessedEventId
	}
	return 0
}

func (m *MutableStateChecksumPayload) GetSignalCount() int64 {
	if m != nil {
		return m.SignalCount
	}
	return 0
}

func (m *MutableStateChecksumPayload) GetDecisionAttempt() int32 {
	if m != nil {
		return m.DecisionAttempt
	}
	return 0
}

func (m *MutableStateChecksumPayload) GetDecisionVersion() int64 {
	if m != nil {
		return m.DecisionVersion
	}
	return 0
}

func (m *MutableStateChecksumPayload) GetDecisionScheduledId() int64 {
	if m != nil {
		return m.DecisionScheduledId
	}
	return 0
}

func (m *MutableStateChecksumPayload) GetDecisionStartedId() int64 {
	if m != nil {
		return m.DecisionStartedId
	}
	return 0
}

func (m *MutableStateChecksumPayload) GetPendingTimerStartedIds() []int64 {
	if m != nil {
		return m.PendingTimerStartedIds
	}
	return nil
}

func (m *MutableStateChecksumPayload) GetPendingActivityScheduledIds() []int64 {
	if m != nil {
		return m.PendingActivityScheduledIds
	}
	return nil
}

func (m *MutableStateChecksumPayload) GetPendingSignalInitiatedIds() []int64 {
	if m != nil {
		return m.PendingSignalInitiatedIds
	}
	return nil
}

func (m *MutableStateChecksumPayload) GetPendingReqCancelInitiatedIds() []int64 {
	if m != nil {
		return m.PendingReqCancelInitiatedIds
	}
	return nil
}

func (m *MutableStateChecksumPayload) GetPendingChildInitiatedIds() []int64 {
	if m != nil {
		return m.PendingChildInitiatedIds
	}
	return nil
}

func (m *MutableStateChecksumPayload) GetStickyTaskQueueName() string {
	if m != nil {
		return m.StickyTaskQueueName
	}
	return ""
}

func (m *MutableStateChecksumPayload) GetVersionHistories() *v12.VersionHistories {
	if m != nil {
		return m.VersionHistories
	}
	return nil
}

func init() {
	proto.RegisterType((*MutableStateChecksumPayload)(nil), "temporal.server.api.checksum.v1.MutableStateChecksumPayload")
}

func init() {
	proto.RegisterFile("temporal/server/api/checksum/v1/message.proto", fileDescriptor_c8c4c1fd39c4866b)
}

var fileDescriptor_c8c4c1fd39c4866b = []byte{
	// 725 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0xc7, 0xe3, 0x9b, 0x0b, 0x17, 0x86, 0xaf, 0xe0, 0x70, 0xb9, 0xbe, 0x50, 0xb9, 0x2e, 0xab,
	0xb4, 0x05, 0xa7, 0x40, 0xbb, 0xa8, 0xaa, 0xaa, 0x82, 0x08, 0xd4, 0x54, 0x6a, 0x45, 0x0d, 0x2a,
	0x52, 0xa5, 0xca, 0x1a, 0xec, 0x43, 0x32, 0x8a, 0x63, 0x27, 0x33, 0x63, 0x43, 0x76, 0x7d, 0x84,
	0x3e, 0x46, 0x1f, 0xa5, 0x4b, 0x96, 0x2c, 0x8b, 0xd9, 0x74, 0xc9, 0xb2, 0xcb, 0x6a, 0xc6, 0x9e,
	0x7c, 0xd0, 0xd0, 0x9d, 0x75, 0xce, 0xef, 0xff, 0x9b, 0xe3, 0xb1, 0x67, 0xd0, 0x06, 0x87, 0x76,
	0x27, 0xa2, 0x38, 0xa8, 0x32, 0xa0, 0x09, 0xd0, 0x2a, 0xee, 0x90, 0xaa, 0xd7, 0x04, 0xaf, 0xc5,
	0xe2, 0x76, 0x35, 0xd9, 0xac, 0xb6, 0x81, 0x31, 0xdc, 0x00, 0xbb, 0x43, 0x23, 0x1e, 0xe9, 0xf7,
	0x15, 0x6e, 0x67, 0xb8, 0x8d, 0x3b, 0xc4, 0x56, 0xb8, 0x9d, 0x6c, 0xae, 0x58, 0x7d, 0x1f, 0x84,
	0x71, 0x9b, 0x09, 0xc3, 0x59, 0x44, 0x5b, 0xa7, 0x41, 0x74, 0x96, 0x29, 0x56, 0xd6, 0xc7, 0xad,
	0xd8, 0x24, 0x8c, 0x47, 0xb4, 0xf7, 0xdb, 0x82, 0x2b, 0x8f, 0xc7, 0xd1, 0x77, 0xa8, 0xd7, 0x7e,
	0x4e, 0xa1, 0xd5, 0xb7, 0x31, 0xc7, 0x27, 0x01, 0x1c, 0x72, 0xcc, 0xa1, 0x96, 0x0f, 0x76, 0x80,
	0x7b, 0x41, 0x84, 0x7d, 0xfd, 0x21, 0x2a, 0x79, 0x38, 0xf4, 0x20, 0x70, 0x29, 0x74, 0x63, 0x60,
	0x1c, 0x7c, 0x43, 0xb3, 0xb4, 0xca, 0x94, 0xb3, 0x90, 0xd5, 0x1d, 0x55, 0xd6, 0xdf, 0xa0, 0x09,
	0x26, 0x14, 0xc6, 0x5f, 0x96, 0x56, 0x99, 0xdf, 0x7a, 0x6a, 0x8f, 0x7b, 0x71, 0x39, 0x87, 0x9d,
	0x6c, 0xda, 0xc7, 0xf9, 0x1c, 0x7b, 0xe7, 0xe0, 0xc5, 0x9c, 0x44, 0xa1, 0x5c, 0xde, 0xc9, 0x14,
	0xfa, 0x2e, 0x9a, 0x14, 0x0f, 0x31, 0x33, 0x8a, 0x52, 0xf6, 0x68, 0x20, 0xfb, 0xb3, 0x21, 0x66,
	0x4e, 0x9e, 0xd4, 0xd7, 0x91, 0x1e, 0x60, 0xc6, 0xdd, 0x33, 0x4a, 0x38, 0xb8, 0x09, 0x50, 0x46,
	0xa2, 0xd0, 0xf8, 0xdb, 0xd2, 0x2a, 0x45, 0xa7, 0x24, 0x3a, 0xc7, 0xa2, 0xf1, 0x21, 0xab, 0xeb,
	0x1b, 0xa8, 0x3c, 0x44, 0x43, 0x02, 0x21, 0x77, 0x89, 0x6f, 0x4c, 0xdc, 0xc2, 0xf7, 0x44, 0xa3,
	0xee, 0xf7, 0xf1, 0x53, 0x42, 0x19, 0x1f, 0xe0, 0x93, 0x03, 0x7c, 0x5f, 0x74, 0x14, 0xbe, 0x86,
	0xe6, 0x42, 0x38, 0x1f, 0x02, 0xff, 0x91, 0xe0, 0x8c, 0x28, 0x2a, 0xe6, 0x19, 0xfa, 0x4f, 0x2a,
	0x3b, 0x34, 0xf2, 0x80, 0x31, 0xf0, 0x07, 0xf4, 0x94, 0xa4, 0x97, 0x44, 0xfb, 0x40, 0x75, 0x55,
	0xec, 0x01, 0x9a, 0x65, 0xa4, 0x11, 0xe2, 0xc0, 0xf5, 0xa2, 0x38, 0xe4, 0xc6, 0x74, 0x66, 0xce,
	0x6a, 0x35, 0x51, 0x12, 0x1f, 0xd1, 0x07, 0x8f, 0x88, 0xf7, 0x74, 0x31, 0x17, 0x3b, 0xc9, 0x0d,
	0x64, 0x69, 0x95, 0x09, 0x67, 0x41, 0xd5, 0x77, 0xb2, 0xf2, 0x08, 0xaa, 0xb6, 0x6c, 0x46, 0x1a,
	0xfb, 0xa8, 0xda, 0xb1, 0x2d, 0xf4, 0x6f, 0x1f, 0x65, 0x5e, 0x13, 0xfc, 0x38, 0x00, 0x5f, 0x4c,
	0x3b, 0x2b, 0xf9, 0xb2, 0x6a, 0x1e, 0xaa, 0x5e, 0xdd, 0xd7, 0x6d, 0x54, 0x1e, 0x64, 0x38, 0xa6,
	0x3c, 0x4b, 0xcc, 0xc9, 0xc4, 0x62, 0x3f, 0x91, 0x75, 0xea, 0xbe, 0xfe, 0x1c, 0xfd, 0xdf, 0x81,
	0xd0, 0x27, 0x61, 0xc3, 0xe5, 0xa4, 0x0d, 0x74, 0x28, 0xc4, 0x8c, 0x79, 0xab, 0x58, 0x29, 0x3a,
	0xcb, 0x39, 0x70, 0x24, 0xfa, 0xfd, 0x24, 0xd3, 0x6b, 0xc8, 0x54, 0x51, 0xec, 0x71, 0x92, 0x10,
	0xde, 0x1b, 0x19, 0x93, 0x19, 0x0b, 0x32, 0xbf, 0x9a, 0x53, 0x3b, 0x39, 0x34, 0x34, 0x2e, 0xd3,
	0x5f, 0xa1, 0x7b, 0x4a, 0x92, 0x6f, 0x32, 0x09, 0x09, 0x27, 0x58, 0x8d, 0x50, 0x92, 0x0a, 0x35,
	0xe3, 0xa1, 0x44, 0xea, 0x8a, 0x10, 0x82, 0x7d, 0x64, 0x29, 0x01, 0x85, 0xae, 0x9b, 0x9f, 0xa5,
	0x51, 0xc9, 0xa2, 0x94, 0xa8, 0x85, 0x1c, 0xe8, 0xd6, 0x24, 0x35, 0xe2, 0x79, 0x89, 0xd4, 0x9c,
	0xae, 0xd7, 0x24, 0x81, 0x7f, 0x4b, 0xa1, 0x4b, 0x85, 0x91, 0x23, 0x35, 0x41, 0x8c, 0xc4, 0xb7,
	0xd1, 0x32, 0xe3, 0xc4, 0x6b, 0xf5, 0x5c, 0x8e, 0x59, 0xcb, 0xed, 0xc6, 0x10, 0x83, 0x1b, 0xe2,
	0x36, 0x18, 0x65, 0x4b, 0xab, 0x4c, 0x3b, 0xe5, 0xac, 0x7b, 0x84, 0x59, 0xeb, 0xbd, 0xe8, 0xbd,
	0xc3, 0x6d, 0xd0, 0x3f, 0xa1, 0xc5, 0xfc, 0x17, 0x70, 0xb3, 0xcb, 0x86, 0x00, 0x33, 0x96, 0x2c,
	0xad, 0x32, 0xb3, 0xf5, 0x64, 0xec, 0xe1, 0xce, 0xaf, 0x24, 0x71, 0x38, 0xf3, 0x9f, 0xe4, 0xb5,
	0xca, 0x39, 0xa5, 0xe4, 0x56, 0x65, 0xd7, 0xbf, 0xb8, 0x32, 0x0b, 0x97, 0x57, 0x66, 0xe1, 0xe6,
	0xca, 0xd4, 0x3e, 0xa7, 0xa6, 0xf6, 0x35, 0x35, 0xb5, 0x6f, 0xa9, 0xa9, 0x5d, 0xa4, 0xa6, 0xf6,
	0x3d, 0x35, 0xb5, 0x1f, 0xa9, 0x59, 0xb8, 0x49, 0x4d, 0xed, 0xcb, 0xb5, 0x59, 0xb8, 0xb8, 0x36,
	0x0b, 0x97, 0xd7, 0x66, 0xe1, 0xa3, 0xdd, 0x88, 0x06, 0x6b, 0x93, 0xe8, 0x8e, 0x3b, 0xf8, 0x85,
	0x7a, 0x3e, 0x99, 0x94, 0xf7, 0xdc, 0xf6, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xef, 0x33, 0xa7,
	0x31, 0xb6, 0x05, 0x00, 0x00,
}

func (this *MutableStateChecksumPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MutableStateChecksumPayload)
	if !ok {
		that2, ok := that.(MutableStateChecksumPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CancelRequested != that1.CancelRequested {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.LastWriteVersion != that1.LastWriteVersion {
		return false
	}
	if this.LastWriteEventId != that1.LastWriteEventId {
		return false
	}
	if this.LastFirstEventId != that1.LastFirstEventId {
		return false
	}
	if this.NextEventId != that1.NextEventId {
		return false
	}
	if this.LastProcessedEventId != that1.LastProcessedEventId {
		return false
	}
	if this.SignalCount != that1.SignalCount {
		return false
	}
	if this.DecisionAttempt != that1.DecisionAttempt {
		return false
	}
	if this.DecisionVersion != that1.DecisionVersion {
		return false
	}
	if this.DecisionScheduledId != that1.DecisionScheduledId {
		return false
	}
	if this.DecisionStartedId != that1.DecisionStartedId {
		return false
	}
	if len(this.PendingTimerStartedIds) != len(that1.PendingTimerStartedIds) {
		return false
	}
	for i := range this.PendingTimerStartedIds {
		if this.PendingTimerStartedIds[i] != that1.PendingTimerStartedIds[i] {
			return false
		}
	}
	if len(this.PendingActivityScheduledIds) != len(that1.PendingActivityScheduledIds) {
		return false
	}
	for i := range this.PendingActivityScheduledIds {
		if this.PendingActivityScheduledIds[i] != that1.PendingActivityScheduledIds[i] {
			return false
		}
	}
	if len(this.PendingSignalInitiatedIds) != len(that1.PendingSignalInitiatedIds) {
		return false
	}
	for i := range this.PendingSignalInitiatedIds {
		if this.PendingSignalInitiatedIds[i] != that1.PendingSignalInitiatedIds[i] {
			return false
		}
	}
	if len(this.PendingReqCancelInitiatedIds) != len(that1.PendingReqCancelInitiatedIds) {
		return false
	}
	for i := range this.PendingReqCancelInitiatedIds {
		if this.PendingReqCancelInitiatedIds[i] != that1.PendingReqCancelInitiatedIds[i] {
			return false
		}
	}
	if len(this.PendingChildInitiatedIds) != len(that1.PendingChildInitiatedIds) {
		return false
	}
	for i := range this.PendingChildInitiatedIds {
		if this.PendingChildInitiatedIds[i] != that1.PendingChildInitiatedIds[i] {
			return false
		}
	}
	if this.StickyTaskQueueName != that1.StickyTaskQueueName {
		return false
	}
	if !this.VersionHistories.Equal(that1.VersionHistories) {
		return false
	}
	return true
}
func (this *MutableStateChecksumPayload) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 24)
	s = append(s, "&checksum.MutableStateChecksumPayload{")
	s = append(s, "CancelRequested: "+fmt.Sprintf("%#v", this.CancelRequested)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "LastWriteVersion: "+fmt.Sprintf("%#v", this.LastWriteVersion)+",\n")
	s = append(s, "LastWriteEventId: "+fmt.Sprintf("%#v", this.LastWriteEventId)+",\n")
	s = append(s, "LastFirstEventId: "+fmt.Sprintf("%#v", this.LastFirstEventId)+",\n")
	s = append(s, "NextEventId: "+fmt.Sprintf("%#v", this.NextEventId)+",\n")
	s = append(s, "LastProcessedEventId: "+fmt.Sprintf("%#v", this.LastProcessedEventId)+",\n")
	s = append(s, "SignalCount: "+fmt.Sprintf("%#v", this.SignalCount)+",\n")
	s = append(s, "DecisionAttempt: "+fmt.Sprintf("%#v", this.DecisionAttempt)+",\n")
	s = append(s, "DecisionVersion: "+fmt.Sprintf("%#v", this.DecisionVersion)+",\n")
	s = append(s, "DecisionScheduledId: "+fmt.Sprintf("%#v", this.DecisionScheduledId)+",\n")
	s = append(s, "DecisionStartedId: "+fmt.Sprintf("%#v", this.DecisionStartedId)+",\n")
	s = append(s, "PendingTimerStartedIds: "+fmt.Sprintf("%#v", this.PendingTimerStartedIds)+",\n")
	s = append(s, "PendingActivityScheduledIds: "+fmt.Sprintf("%#v", this.PendingActivityScheduledIds)+",\n")
	s = append(s, "PendingSignalInitiatedIds: "+fmt.Sprintf("%#v", this.PendingSignalInitiatedIds)+",\n")
	s = append(s, "PendingReqCancelInitiatedIds: "+fmt.Sprintf("%#v", this.PendingReqCancelInitiatedIds)+",\n")
	s = append(s, "PendingChildInitiatedIds: "+fmt.Sprintf("%#v", this.PendingChildInitiatedIds)+",\n")
	s = append(s, "StickyTaskQueueName: "+fmt.Sprintf("%#v", this.StickyTaskQueueName)+",\n")
	if this.VersionHistories != nil {
		s = append(s, "VersionHistories: "+fmt.Sprintf("%#v", this.VersionHistories)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MutableStateChecksumPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MutableStateChecksumPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MutableStateChecksumPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VersionHistories != nil {
		{
			size, err := m.VersionHistories.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.StickyTaskQueueName) > 0 {
		i -= len(m.StickyTaskQueueName)
		copy(dAtA[i:], m.StickyTaskQueueName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.StickyTaskQueueName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.PendingChildInitiatedIds) > 0 {
		dAtA3 := make([]byte, len(m.PendingChildInitiatedIds)*10)
		var j2 int
		for _, num1 := range m.PendingChildInitiatedIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintMessage(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.PendingReqCancelInitiatedIds) > 0 {
		dAtA5 := make([]byte, len(m.PendingReqCancelInitiatedIds)*10)
		var j4 int
		for _, num1 := range m.PendingReqCancelInitiatedIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintMessage(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.PendingSignalInitiatedIds) > 0 {
		dAtA7 := make([]byte, len(m.PendingSignalInitiatedIds)*10)
		var j6 int
		for _, num1 := range m.PendingSignalInitiatedIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintMessage(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PendingActivityScheduledIds) > 0 {
		dAtA9 := make([]byte, len(m.PendingActivityScheduledIds)*10)
		var j8 int
		for _, num1 := range m.PendingActivityScheduledIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintMessage(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.PendingTimerStartedIds) > 0 {
		dAtA11 := make([]byte, len(m.PendingTimerStartedIds)*10)
		var j10 int
		for _, num1 := range m.PendingTimerStartedIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintMessage(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x72
	}
	if m.DecisionStartedId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionStartedId))
		i--
		dAtA[i] = 0x68
	}
	if m.DecisionScheduledId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionScheduledId))
		i--
		dAtA[i] = 0x60
	}
	if m.DecisionVersion != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionVersion))
		i--
		dAtA[i] = 0x58
	}
	if m.DecisionAttempt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionAttempt))
		i--
		dAtA[i] = 0x50
	}
	if m.SignalCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SignalCount))
		i--
		dAtA[i] = 0x48
	}
	if m.LastProcessedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LastProcessedEventId))
		i--
		dAtA[i] = 0x40
	}
	if m.NextEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.NextEventId))
		i--
		dAtA[i] = 0x38
	}
	if m.LastFirstEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LastFirstEventId))
		i--
		dAtA[i] = 0x30
	}
	if m.LastWriteEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LastWriteEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.LastWriteVersion != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LastWriteVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.State != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if m.CancelRequested {
		i--
		if m.CancelRequested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MutableStateChecksumPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelRequested {
		n += 2
	}
	if m.State != 0 {
		n += 1 + sovMessage(uint64(m.State))
	}
	if m.Status != 0 {
		n += 1 + sovMessage(uint64(m.Status))
	}
	if m.LastWriteVersion != 0 {
		n += 1 + sovMessage(uint64(m.LastWriteVersion))
	}
	if m.LastWriteEventId != 0 {
		n += 1 + sovMessage(uint64(m.LastWriteEventId))
	}
	if m.LastFirstEventId != 0 {
		n += 1 + sovMessage(uint64(m.LastFirstEventId))
	}
	if m.NextEventId != 0 {
		n += 1 + sovMessage(uint64(m.NextEventId))
	}
	if m.LastProcessedEventId != 0 {
		n += 1 + sovMessage(uint64(m.LastProcessedEventId))
	}
	if m.SignalCount != 0 {
		n += 1 + sovMessage(uint64(m.SignalCount))
	}
	if m.DecisionAttempt != 0 {
		n += 1 + sovMessage(uint64(m.DecisionAttempt))
	}
	if m.DecisionVersion != 0 {
		n += 1 + sovMessage(uint64(m.DecisionVersion))
	}
	if m.DecisionScheduledId != 0 {
		n += 1 + sovMessage(uint64(m.DecisionScheduledId))
	}
	if m.DecisionStartedId != 0 {
		n += 1 + sovMessage(uint64(m.DecisionStartedId))
	}
	if len(m.PendingTimerStartedIds) > 0 {
		l = 0
		for _, e := range m.PendingTimerStartedIds {
			l += sovMessage(uint64(e))
		}
		n += 1 + sovMessage(uint64(l)) + l
	}
	if len(m.PendingActivityScheduledIds) > 0 {
		l = 0
		for _, e := range m.PendingActivityScheduledIds {
			l += sovMessage(uint64(e))
		}
		n += 1 + sovMessage(uint64(l)) + l
	}
	if len(m.PendingSignalInitiatedIds) > 0 {
		l = 0
		for _, e := range m.PendingSignalInitiatedIds {
			l += sovMessage(uint64(e))
		}
		n += 2 + sovMessage(uint64(l)) + l
	}
	if len(m.PendingReqCancelInitiatedIds) > 0 {
		l = 0
		for _, e := range m.PendingReqCancelInitiatedIds {
			l += sovMessage(uint64(e))
		}
		n += 2 + sovMessage(uint64(l)) + l
	}
	if len(m.PendingChildInitiatedIds) > 0 {
		l = 0
		for _, e := range m.PendingChildInitiatedIds {
			l += sovMessage(uint64(e))
		}
		n += 2 + sovMessage(uint64(l)) + l
	}
	l = len(m.StickyTaskQueueName)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.VersionHistories != nil {
		l = m.VersionHistories.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MutableStateChecksumPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MutableStateChecksumPayload{`,
		`CancelRequested:` + fmt.Sprintf("%v", this.CancelRequested) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`LastWriteVersion:` + fmt.Sprintf("%v", this.LastWriteVersion) + `,`,
		`LastWriteEventId:` + fmt.Sprintf("%v", this.LastWriteEventId) + `,`,
		`LastFirstEventId:` + fmt.Sprintf("%v", this.LastFirstEventId) + `,`,
		`NextEventId:` + fmt.Sprintf("%v", this.NextEventId) + `,`,
		`LastProcessedEventId:` + fmt.Sprintf("%v", this.LastProcessedEventId) + `,`,
		`SignalCount:` + fmt.Sprintf("%v", this.SignalCount) + `,`,
		`DecisionAttempt:` + fmt.Sprintf("%v", this.DecisionAttempt) + `,`,
		`DecisionVersion:` + fmt.Sprintf("%v", this.DecisionVersion) + `,`,
		`DecisionScheduledId:` + fmt.Sprintf("%v", this.DecisionScheduledId) + `,`,
		`DecisionStartedId:` + fmt.Sprintf("%v", this.DecisionStartedId) + `,`,
		`PendingTimerStartedIds:` + fmt.Sprintf("%v", this.PendingTimerStartedIds) + `,`,
		`PendingActivityScheduledIds:` + fmt.Sprintf("%v", this.PendingActivityScheduledIds) + `,`,
		`PendingSignalInitiatedIds:` + fmt.Sprintf("%v", this.PendingSignalInitiatedIds) + `,`,
		`PendingReqCancelInitiatedIds:` + fmt.Sprintf("%v", this.PendingReqCancelInitiatedIds) + `,`,
		`PendingChildInitiatedIds:` + fmt.Sprintf("%v", this.PendingChildInitiatedIds) + `,`,
		`StickyTaskQueueName:` + fmt.Sprintf("%v", this.StickyTaskQueueName) + `,`,
		`VersionHistories:` + strings.Replace(fmt.Sprintf("%v", this.VersionHistories), "VersionHistories", "v12.VersionHistories", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MutableStateChecksumPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MutableStateChecksumPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MutableStateChecksumPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelRequested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelRequested = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= v1.WorkflowExecutionState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= v11.WorkflowExecutionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWriteVersion", wireType)
			}
			m.LastWriteVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastWriteVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWriteEventId", wireType)
			}
			m.LastWriteEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastWriteEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFirstEventId", wireType)
			}
			m.LastFirstEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastFirstEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEventId", wireType)
			}
			m.NextEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastProcessedEventId", wireType)
			}
			m.LastProcessedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastProcessedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalCount", wireType)
			}
			m.SignalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignalCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionAttempt", wireType)
			}
			m.DecisionAttempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionAttempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionVersion", wireType)
			}
			m.DecisionVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionScheduledId", wireType)
			}
			m.DecisionScheduledId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionScheduledId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionStartedId", wireType)
			}
			m.DecisionStartedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionStartedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PendingTimerStartedIds = append(m.PendingTimerStartedIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PendingTimerStartedIds) == 0 {
					m.PendingTimerStartedIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PendingTimerStartedIds = append(m.PendingTimerStartedIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingTimerStartedIds", wireType)
			}
		case 15:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PendingActivityScheduledIds = append(m.PendingActivityScheduledIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PendingActivityScheduledIds) == 0 {
					m.PendingActivityScheduledIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PendingActivityScheduledIds = append(m.PendingActivityScheduledIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingActivityScheduledIds", wireType)
			}
		case 16:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PendingSignalInitiatedIds = append(m.PendingSignalInitiatedIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PendingSignalInitiatedIds) == 0 {
					m.PendingSignalInitiatedIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PendingSignalInitiatedIds = append(m.PendingSignalInitiatedIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingSignalInitiatedIds", wireType)
			}
		case 17:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PendingReqCancelInitiatedIds = append(m.PendingReqCancelInitiatedIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PendingReqCancelInitiatedIds) == 0 {
					m.PendingReqCancelInitiatedIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PendingReqCancelInitiatedIds = append(m.PendingReqCancelInitiatedIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingReqCancelInitiatedIds", wireType)
			}
		case 18:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PendingChildInitiatedIds = append(m.PendingChildInitiatedIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PendingChildInitiatedIds) == 0 {
					m.PendingChildInitiatedIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PendingChildInitiatedIds = append(m.PendingChildInitiatedIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingChildInitiatedIds", wireType)
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickyTaskQueueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StickyTaskQueueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionHistories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VersionHistories == nil {
				m.VersionHistories = &v12.VersionHistories{}
			}
			if err := m.VersionHistories.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
