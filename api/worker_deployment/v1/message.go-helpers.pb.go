// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package worker_deployment

import (
	"google.golang.org/protobuf/proto"
)

// Marshal an object of type TaskQueueData to the protobuf v3 wire format
func (val *TaskQueueData) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type TaskQueueData from the protobuf v3 wire format
func (val *TaskQueueData) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *TaskQueueData) Size() int {
	return proto.Size(val)
}

// Equal returns whether two TaskQueueData values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *TaskQueueData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *TaskQueueData
	switch t := that.(type) {
	case *TaskQueueData:
		that1 = t
	case TaskQueueData:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type VersionLocalState to the protobuf v3 wire format
func (val *VersionLocalState) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type VersionLocalState from the protobuf v3 wire format
func (val *VersionLocalState) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *VersionLocalState) Size() int {
	return proto.Size(val)
}

// Equal returns whether two VersionLocalState values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *VersionLocalState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *VersionLocalState
	switch t := that.(type) {
	case *VersionLocalState:
		that1 = t
	case VersionLocalState:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type VersionWorkflowArgs to the protobuf v3 wire format
func (val *VersionWorkflowArgs) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type VersionWorkflowArgs from the protobuf v3 wire format
func (val *VersionWorkflowArgs) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *VersionWorkflowArgs) Size() int {
	return proto.Size(val)
}

// Equal returns whether two VersionWorkflowArgs values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *VersionWorkflowArgs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *VersionWorkflowArgs
	switch t := that.(type) {
	case *VersionWorkflowArgs:
		that1 = t
	case VersionWorkflowArgs:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type WorkflowArgs to the protobuf v3 wire format
func (val *WorkflowArgs) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type WorkflowArgs from the protobuf v3 wire format
func (val *WorkflowArgs) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *WorkflowArgs) Size() int {
	return proto.Size(val)
}

// Equal returns whether two WorkflowArgs values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *WorkflowArgs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *WorkflowArgs
	switch t := that.(type) {
	case *WorkflowArgs:
		that1 = t
	case WorkflowArgs:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type LocalState to the protobuf v3 wire format
func (val *LocalState) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type LocalState from the protobuf v3 wire format
func (val *LocalState) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *LocalState) Size() int {
	return proto.Size(val)
}

// Equal returns whether two LocalState values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *LocalState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *LocalState
	switch t := that.(type) {
	case *LocalState:
		that1 = t
	case LocalState:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type RegisterWorkerInVersionArgs to the protobuf v3 wire format
func (val *RegisterWorkerInVersionArgs) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type RegisterWorkerInVersionArgs from the protobuf v3 wire format
func (val *RegisterWorkerInVersionArgs) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *RegisterWorkerInVersionArgs) Size() int {
	return proto.Size(val)
}

// Equal returns whether two RegisterWorkerInVersionArgs values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *RegisterWorkerInVersionArgs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *RegisterWorkerInVersionArgs
	switch t := that.(type) {
	case *RegisterWorkerInVersionArgs:
		that1 = t
	case RegisterWorkerInVersionArgs:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type SyncVersionStateArgs to the protobuf v3 wire format
func (val *SyncVersionStateArgs) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type SyncVersionStateArgs from the protobuf v3 wire format
func (val *SyncVersionStateArgs) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *SyncVersionStateArgs) Size() int {
	return proto.Size(val)
}

// Equal returns whether two SyncVersionStateArgs values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *SyncVersionStateArgs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *SyncVersionStateArgs
	switch t := that.(type) {
	case *SyncVersionStateArgs:
		that1 = t
	case SyncVersionStateArgs:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type SyncVersionStateResponse to the protobuf v3 wire format
func (val *SyncVersionStateResponse) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type SyncVersionStateResponse from the protobuf v3 wire format
func (val *SyncVersionStateResponse) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *SyncVersionStateResponse) Size() int {
	return proto.Size(val)
}

// Equal returns whether two SyncVersionStateResponse values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *SyncVersionStateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *SyncVersionStateResponse
	switch t := that.(type) {
	case *SyncVersionStateResponse:
		that1 = t
	case SyncVersionStateResponse:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type QueryDescribeVersionResponse to the protobuf v3 wire format
func (val *QueryDescribeVersionResponse) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type QueryDescribeVersionResponse from the protobuf v3 wire format
func (val *QueryDescribeVersionResponse) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *QueryDescribeVersionResponse) Size() int {
	return proto.Size(val)
}

// Equal returns whether two QueryDescribeVersionResponse values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *QueryDescribeVersionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *QueryDescribeVersionResponse
	switch t := that.(type) {
	case *QueryDescribeVersionResponse:
		that1 = t
	case QueryDescribeVersionResponse:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type VersionWorkflowMemo to the protobuf v3 wire format
func (val *VersionWorkflowMemo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type VersionWorkflowMemo from the protobuf v3 wire format
func (val *VersionWorkflowMemo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *VersionWorkflowMemo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two VersionWorkflowMemo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *VersionWorkflowMemo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *VersionWorkflowMemo
	switch t := that.(type) {
	case *VersionWorkflowMemo:
		that1 = t
	case VersionWorkflowMemo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type StartDeploymentRequest to the protobuf v3 wire format
func (val *StartDeploymentRequest) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type StartDeploymentRequest from the protobuf v3 wire format
func (val *StartDeploymentRequest) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *StartDeploymentRequest) Size() int {
	return proto.Size(val)
}

// Equal returns whether two StartDeploymentRequest values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *StartDeploymentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *StartDeploymentRequest
	switch t := that.(type) {
	case *StartDeploymentRequest:
		that1 = t
	case StartDeploymentRequest:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type SyncUserDataRequest to the protobuf v3 wire format
func (val *SyncUserDataRequest) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type SyncUserDataRequest from the protobuf v3 wire format
func (val *SyncUserDataRequest) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *SyncUserDataRequest) Size() int {
	return proto.Size(val)
}

// Equal returns whether two SyncUserDataRequest values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *SyncUserDataRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *SyncUserDataRequest
	switch t := that.(type) {
	case *SyncUserDataRequest:
		that1 = t
	case SyncUserDataRequest:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type SyncUserDataResponse to the protobuf v3 wire format
func (val *SyncUserDataResponse) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type SyncUserDataResponse from the protobuf v3 wire format
func (val *SyncUserDataResponse) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *SyncUserDataResponse) Size() int {
	return proto.Size(val)
}

// Equal returns whether two SyncUserDataResponse values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *SyncUserDataResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *SyncUserDataResponse
	switch t := that.(type) {
	case *SyncUserDataResponse:
		that1 = t
	case SyncUserDataResponse:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type CheckUserDataPropagationRequest to the protobuf v3 wire format
func (val *CheckUserDataPropagationRequest) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type CheckUserDataPropagationRequest from the protobuf v3 wire format
func (val *CheckUserDataPropagationRequest) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *CheckUserDataPropagationRequest) Size() int {
	return proto.Size(val)
}

// Equal returns whether two CheckUserDataPropagationRequest values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *CheckUserDataPropagationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *CheckUserDataPropagationRequest
	switch t := that.(type) {
	case *CheckUserDataPropagationRequest:
		that1 = t
	case CheckUserDataPropagationRequest:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type SetCurrentVersionArgs to the protobuf v3 wire format
func (val *SetCurrentVersionArgs) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type SetCurrentVersionArgs from the protobuf v3 wire format
func (val *SetCurrentVersionArgs) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *SetCurrentVersionArgs) Size() int {
	return proto.Size(val)
}

// Equal returns whether two SetCurrentVersionArgs values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *SetCurrentVersionArgs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *SetCurrentVersionArgs
	switch t := that.(type) {
	case *SetCurrentVersionArgs:
		that1 = t
	case SetCurrentVersionArgs:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type SetCurrentVersionResponse to the protobuf v3 wire format
func (val *SetCurrentVersionResponse) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type SetCurrentVersionResponse from the protobuf v3 wire format
func (val *SetCurrentVersionResponse) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *SetCurrentVersionResponse) Size() int {
	return proto.Size(val)
}

// Equal returns whether two SetCurrentVersionResponse values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *SetCurrentVersionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *SetCurrentVersionResponse
	switch t := that.(type) {
	case *SetCurrentVersionResponse:
		that1 = t
	case SetCurrentVersionResponse:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type SyncStateActivityArgs to the protobuf v3 wire format
func (val *SyncStateActivityArgs) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type SyncStateActivityArgs from the protobuf v3 wire format
func (val *SyncStateActivityArgs) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *SyncStateActivityArgs) Size() int {
	return proto.Size(val)
}

// Equal returns whether two SyncStateActivityArgs values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *SyncStateActivityArgs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *SyncStateActivityArgs
	switch t := that.(type) {
	case *SyncStateActivityArgs:
		that1 = t
	case SyncStateActivityArgs:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type SyncStateActivityResult to the protobuf v3 wire format
func (val *SyncStateActivityResult) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type SyncStateActivityResult from the protobuf v3 wire format
func (val *SyncStateActivityResult) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *SyncStateActivityResult) Size() int {
	return proto.Size(val)
}

// Equal returns whether two SyncStateActivityResult values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *SyncStateActivityResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *SyncStateActivityResult
	switch t := that.(type) {
	case *SyncStateActivityResult:
		that1 = t
	case SyncStateActivityResult:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type WorkflowMemo to the protobuf v3 wire format
func (val *WorkflowMemo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type WorkflowMemo from the protobuf v3 wire format
func (val *WorkflowMemo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *WorkflowMemo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two WorkflowMemo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *WorkflowMemo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *WorkflowMemo
	switch t := that.(type) {
	case *WorkflowMemo:
		that1 = t
	case WorkflowMemo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}
