// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/server/api/enums/v1/replication.proto

package enums

import (
	fmt "fmt"
	math "math"
	strconv "strconv"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ReplicationTaskType int32

const (
	REPLICATION_TASK_TYPE_UNSPECIFIED              ReplicationTaskType = 0
	REPLICATION_TASK_TYPE_NAMESPACE_TASK           ReplicationTaskType = 1
	REPLICATION_TASK_TYPE_HISTORY_TASK             ReplicationTaskType = 2
	REPLICATION_TASK_TYPE_SYNC_SHARD_STATUS_TASK   ReplicationTaskType = 3
	REPLICATION_TASK_TYPE_SYNC_ACTIVITY_TASK       ReplicationTaskType = 4
	REPLICATION_TASK_TYPE_HISTORY_METADATA_TASK    ReplicationTaskType = 5
	REPLICATION_TASK_TYPE_HISTORY_V2_TASK          ReplicationTaskType = 6
	REPLICATION_TASK_TYPE_SYNC_WORKFLOW_STATE_TASK ReplicationTaskType = 7
)

var ReplicationTaskType_name = map[int32]string{
	0: "Unspecified",
	1: "NamespaceTask",
	2: "HistoryTask",
	3: "SyncShardStatusTask",
	4: "SyncActivityTask",
	5: "HistoryMetadataTask",
	6: "HistoryV2Task",
	7: "SyncWorkflowStateTask",
}

var ReplicationTaskType_value = map[string]int32{
	"Unspecified":           0,
	"NamespaceTask":         1,
	"HistoryTask":           2,
	"SyncShardStatusTask":   3,
	"SyncActivityTask":      4,
	"HistoryMetadataTask":   5,
	"HistoryV2Task":         6,
	"SyncWorkflowStateTask": 7,
}

func (ReplicationTaskType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f4df3039790445d, []int{0}
}

type NamespaceOperation int32

const (
	NAMESPACE_OPERATION_UNSPECIFIED NamespaceOperation = 0
	NAMESPACE_OPERATION_CREATE      NamespaceOperation = 1
	NAMESPACE_OPERATION_UPDATE      NamespaceOperation = 2
)

var NamespaceOperation_name = map[int32]string{
	0: "Unspecified",
	1: "Create",
	2: "Update",
}

var NamespaceOperation_value = map[string]int32{
	"Unspecified": 0,
	"Create":      1,
	"Update":      2,
}

func (NamespaceOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f4df3039790445d, []int{1}
}

func init() {
	proto.RegisterEnum("temporal.server.api.enums.v1.ReplicationTaskType", ReplicationTaskType_name, ReplicationTaskType_value)
	proto.RegisterEnum("temporal.server.api.enums.v1.NamespaceOperation", NamespaceOperation_name, NamespaceOperation_value)
}

func init() {
	proto.RegisterFile("temporal/server/api/enums/v1/replication.proto", fileDescriptor_3f4df3039790445d)
}

var fileDescriptor_3f4df3039790445d = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x8b, 0xda, 0x40,
	0x18, 0xc6, 0x33, 0xb6, 0xb5, 0x30, 0x27, 0x99, 0xde, 0x4a, 0x99, 0xd2, 0x3f, 0x16, 0x6b, 0x65,
	0x52, 0xed, 0xb1, 0xa7, 0x69, 0x32, 0x62, 0x50, 0x93, 0x90, 0x19, 0x15, 0x7b, 0x68, 0x48, 0x65,
	0x28, 0xa1, 0x6a, 0x86, 0xc4, 0x0a, 0xde, 0xfa, 0x11, 0xfa, 0x31, 0xfa, 0x51, 0xf6, 0xe8, 0xd1,
	0xe3, 0x1a, 0x2f, 0x7b, 0xf4, 0x13, 0x2c, 0xcb, 0x26, 0xee, 0xca, 0x42, 0x36, 0xb7, 0x61, 0xde,
	0xdf, 0xf3, 0xf2, 0xf0, 0xbc, 0x0f, 0x24, 0x2b, 0xb9, 0x50, 0x51, 0x1c, 0xcc, 0xf5, 0x44, 0xc6,
	0x6b, 0x19, 0xeb, 0x81, 0x0a, 0x75, 0xb9, 0xfc, 0xb3, 0x48, 0xf4, 0x75, 0x5b, 0x8f, 0xa5, 0x9a,
	0x87, 0xb3, 0x60, 0x15, 0x46, 0x4b, 0xa2, 0xe2, 0x68, 0x15, 0xa1, 0x57, 0x77, 0x3c, 0xc9, 0x79,
	0x12, 0xa8, 0x90, 0x64, 0x3c, 0x59, 0xb7, 0x9b, 0xd7, 0x15, 0xf8, 0xc2, 0x3b, 0x6b, 0x44, 0x90,
	0xfc, 0x16, 0x1b, 0x25, 0x51, 0x1d, 0xbe, 0xf1, 0x98, 0x3b, 0xb0, 0x0c, 0x2a, 0x2c, 0xc7, 0xf6,
	0x05, 0xe5, 0x7d, 0x5f, 0x4c, 0x5d, 0xe6, 0x8f, 0x6c, 0xee, 0x32, 0xc3, 0xea, 0x5a, 0xcc, 0xac,
	0x69, 0xa8, 0x01, 0xdf, 0x17, 0x63, 0x36, 0x1d, 0x32, 0xee, 0x52, 0x83, 0x65, 0x7f, 0x35, 0x80,
	0x3e, 0xc0, 0xb7, 0xc5, 0x64, 0xcf, 0xe2, 0xc2, 0xf1, 0xa6, 0x39, 0x57, 0x41, 0x9f, 0x61, 0xab,
	0x98, 0xe3, 0x53, 0xdb, 0xf0, 0x79, 0x8f, 0x7a, 0xa6, 0xcf, 0x05, 0x15, 0x23, 0x9e, 0x2b, 0x9e,
	0xa0, 0x16, 0x6c, 0x94, 0x28, 0xa8, 0x21, 0xac, 0xb1, 0x25, 0x4e, 0xfb, 0x9f, 0x22, 0x1d, 0x7e,
	0x2a, 0xf7, 0x31, 0x64, 0x82, 0x9a, 0x54, 0xd0, 0x5c, 0xf0, 0x0c, 0x7d, 0x84, 0xf5, 0x72, 0xc1,
	0xb8, 0x93, 0xa3, 0x55, 0xd4, 0x81, 0xa4, 0xc4, 0xc9, 0xc4, 0xf1, 0xfa, 0xdd, 0x81, 0x33, 0xc9,
	0xec, 0x9f, 0x72, 0x79, 0xde, 0xdc, 0x40, 0x64, 0x07, 0x0b, 0x99, 0xa8, 0x60, 0x26, 0x1d, 0x25,
	0xe3, 0xec, 0x0c, 0xe8, 0x1d, 0x7c, 0x7d, 0x4e, 0xd0, 0x71, 0x99, 0x97, 0x6f, 0x7c, 0x18, 0x3e,
	0x86, 0x2f, 0x8b, 0x20, 0xc3, 0x63, 0x54, 0xb0, 0x1a, 0x78, 0x6c, 0x3e, 0x72, 0xcd, 0xdb, 0x79,
	0xe5, 0xdb, 0x8f, 0xed, 0x1e, 0x6b, 0xbb, 0x3d, 0xd6, 0x8e, 0x7b, 0x0c, 0xfe, 0xa6, 0x18, 0xfc,
	0x4f, 0x31, 0xb8, 0x48, 0x31, 0xd8, 0xa6, 0x18, 0x5c, 0xa6, 0x18, 0x5c, 0xa5, 0x58, 0x3b, 0xa6,
	0x18, 0xfc, 0x3b, 0x60, 0x6d, 0x7b, 0xc0, 0xda, 0xee, 0x80, 0xb5, 0xef, 0x8d, 0x5f, 0xd1, 0x7d,
	0x05, 0x49, 0x18, 0x15, 0xb5, 0xf0, 0x6b, 0xf6, 0xf8, 0x59, 0xcd, 0x0a, 0xf8, 0xe5, 0x26, 0x00,
	0x00, 0xff, 0xff, 0x87, 0x6b, 0x7d, 0xf7, 0xb2, 0x02, 0x00, 0x00,
}

func (x ReplicationTaskType) String() string {
	s, ok := ReplicationTaskType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x NamespaceOperation) String() string {
	s, ok := NamespaceOperation_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
