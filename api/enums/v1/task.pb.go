// The MIT License
//
// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// plugins:
// 	protoc-gen-go
// 	protoc
// source: temporal/server/api/enums/v1/task.proto

package enums

import (
	reflect "reflect"
	"strconv"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TaskSource is the source from which a task was produced.
type TaskSource int32

const (
	TASK_SOURCE_UNSPECIFIED TaskSource = 0
	// Task produced by history service.
	TASK_SOURCE_HISTORY TaskSource = 1
	// Task produced from matching db backlog.
	TASK_SOURCE_DB_BACKLOG TaskSource = 2
)

// Enum value maps for TaskSource.
var (
	TaskSource_name = map[int32]string{
		0: "TASK_SOURCE_UNSPECIFIED",
		1: "TASK_SOURCE_HISTORY",
		2: "TASK_SOURCE_DB_BACKLOG",
	}
	TaskSource_value = map[string]int32{
		"TASK_SOURCE_UNSPECIFIED": 0,
		"TASK_SOURCE_HISTORY":     1,
		"TASK_SOURCE_DB_BACKLOG":  2,
	}
)

func (x TaskSource) Enum() *TaskSource {
	p := new(TaskSource)
	*p = x
	return p
}

func (x TaskSource) String() string {
	switch x {
	case TASK_SOURCE_UNSPECIFIED:
		return "Unspecified"
	case TASK_SOURCE_HISTORY:
		return "History"
	case TASK_SOURCE_DB_BACKLOG:
		return "DbBacklog"
	default:
		return strconv.Itoa(int(x))
	}

}

func (TaskSource) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_server_api_enums_v1_task_proto_enumTypes[0].Descriptor()
}

func (TaskSource) Type() protoreflect.EnumType {
	return &file_temporal_server_api_enums_v1_task_proto_enumTypes[0]
}

func (x TaskSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskSource.Descriptor instead.
func (TaskSource) EnumDescriptor() ([]byte, []int) {
	return file_temporal_server_api_enums_v1_task_proto_rawDescGZIP(), []int{0}
}

type TaskType int32

const (
	TASK_TYPE_UNSPECIFIED                     TaskType = 0
	TASK_TYPE_REPLICATION_HISTORY             TaskType = 1
	TASK_TYPE_REPLICATION_SYNC_ACTIVITY       TaskType = 2
	TASK_TYPE_TRANSFER_WORKFLOW_TASK          TaskType = 3
	TASK_TYPE_TRANSFER_ACTIVITY_TASK          TaskType = 4
	TASK_TYPE_TRANSFER_CLOSE_EXECUTION        TaskType = 5
	TASK_TYPE_TRANSFER_CANCEL_EXECUTION       TaskType = 6
	TASK_TYPE_TRANSFER_START_CHILD_EXECUTION  TaskType = 7
	TASK_TYPE_TRANSFER_SIGNAL_EXECUTION       TaskType = 8
	TASK_TYPE_TRANSFER_RESET_WORKFLOW         TaskType = 10
	TASK_TYPE_WORKFLOW_TASK_TIMEOUT           TaskType = 12
	TASK_TYPE_ACTIVITY_TIMEOUT                TaskType = 13
	TASK_TYPE_USER_TIMER                      TaskType = 14
	TASK_TYPE_WORKFLOW_RUN_TIMEOUT            TaskType = 15
	TASK_TYPE_DELETE_HISTORY_EVENT            TaskType = 16
	TASK_TYPE_ACTIVITY_RETRY_TIMER            TaskType = 17
	TASK_TYPE_WORKFLOW_BACKOFF_TIMER          TaskType = 18
	TASK_TYPE_VISIBILITY_START_EXECUTION      TaskType = 19
	TASK_TYPE_VISIBILITY_UPSERT_EXECUTION     TaskType = 20
	TASK_TYPE_VISIBILITY_CLOSE_EXECUTION      TaskType = 21
	TASK_TYPE_VISIBILITY_DELETE_EXECUTION     TaskType = 22
	TASK_TYPE_TRANSFER_DELETE_EXECUTION       TaskType = 24
	TASK_TYPE_REPLICATION_SYNC_WORKFLOW_STATE TaskType = 25
	TASK_TYPE_ARCHIVAL_ARCHIVE_EXECUTION      TaskType = 26
	// An immediate outbound task generated by a state machine.
	// Outbound tasks specify a destination that is used to group tasks into a per namespace-and-destination
	// scheduler.
	TASK_TYPE_STATE_MACHINE_OUTBOUND TaskType = 27
	// A timer task generated by a state machine.
	TASK_TYPE_STATE_MACHINE_TIMER TaskType = 28
	// Timeout task for the entire workflow execution chain.
	TASK_TYPE_WORKFLOW_EXECUTION_TIMEOUT            TaskType = 29
	TASK_TYPE_REPLICATION_SYNC_HSM                  TaskType = 30
	TASK_TYPE_REPLICATION_SYNC_VERSIONED_TRANSITION TaskType = 31
	// A task that applies a batch of state changes to a CHASM entity.
	TASK_TYPE_CHASM_PURE TaskType = 32
	// A task with side effects generated by a CHASM component.
	TASK_TYPE_CHASM TaskType = 33
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0:  "TASK_TYPE_UNSPECIFIED",
		1:  "TASK_TYPE_REPLICATION_HISTORY",
		2:  "TASK_TYPE_REPLICATION_SYNC_ACTIVITY",
		3:  "TASK_TYPE_TRANSFER_WORKFLOW_TASK",
		4:  "TASK_TYPE_TRANSFER_ACTIVITY_TASK",
		5:  "TASK_TYPE_TRANSFER_CLOSE_EXECUTION",
		6:  "TASK_TYPE_TRANSFER_CANCEL_EXECUTION",
		7:  "TASK_TYPE_TRANSFER_START_CHILD_EXECUTION",
		8:  "TASK_TYPE_TRANSFER_SIGNAL_EXECUTION",
		10: "TASK_TYPE_TRANSFER_RESET_WORKFLOW",
		12: "TASK_TYPE_WORKFLOW_TASK_TIMEOUT",
		13: "TASK_TYPE_ACTIVITY_TIMEOUT",
		14: "TASK_TYPE_USER_TIMER",
		15: "TASK_TYPE_WORKFLOW_RUN_TIMEOUT",
		16: "TASK_TYPE_DELETE_HISTORY_EVENT",
		17: "TASK_TYPE_ACTIVITY_RETRY_TIMER",
		18: "TASK_TYPE_WORKFLOW_BACKOFF_TIMER",
		19: "TASK_TYPE_VISIBILITY_START_EXECUTION",
		20: "TASK_TYPE_VISIBILITY_UPSERT_EXECUTION",
		21: "TASK_TYPE_VISIBILITY_CLOSE_EXECUTION",
		22: "TASK_TYPE_VISIBILITY_DELETE_EXECUTION",
		24: "TASK_TYPE_TRANSFER_DELETE_EXECUTION",
		25: "TASK_TYPE_REPLICATION_SYNC_WORKFLOW_STATE",
		26: "TASK_TYPE_ARCHIVAL_ARCHIVE_EXECUTION",
		27: "TASK_TYPE_STATE_MACHINE_OUTBOUND",
		28: "TASK_TYPE_STATE_MACHINE_TIMER",
		29: "TASK_TYPE_WORKFLOW_EXECUTION_TIMEOUT",
		30: "TASK_TYPE_REPLICATION_SYNC_HSM",
		31: "TASK_TYPE_REPLICATION_SYNC_VERSIONED_TRANSITION",
		32: "TASK_TYPE_CHASM_PURE",
		33: "TASK_TYPE_CHASM",
	}
	TaskType_value = map[string]int32{
		"TASK_TYPE_UNSPECIFIED":                           0,
		"TASK_TYPE_REPLICATION_HISTORY":                   1,
		"TASK_TYPE_REPLICATION_SYNC_ACTIVITY":             2,
		"TASK_TYPE_TRANSFER_WORKFLOW_TASK":                3,
		"TASK_TYPE_TRANSFER_ACTIVITY_TASK":                4,
		"TASK_TYPE_TRANSFER_CLOSE_EXECUTION":              5,
		"TASK_TYPE_TRANSFER_CANCEL_EXECUTION":             6,
		"TASK_TYPE_TRANSFER_START_CHILD_EXECUTION":        7,
		"TASK_TYPE_TRANSFER_SIGNAL_EXECUTION":             8,
		"TASK_TYPE_TRANSFER_RESET_WORKFLOW":               10,
		"TASK_TYPE_WORKFLOW_TASK_TIMEOUT":                 12,
		"TASK_TYPE_ACTIVITY_TIMEOUT":                      13,
		"TASK_TYPE_USER_TIMER":                            14,
		"TASK_TYPE_WORKFLOW_RUN_TIMEOUT":                  15,
		"TASK_TYPE_DELETE_HISTORY_EVENT":                  16,
		"TASK_TYPE_ACTIVITY_RETRY_TIMER":                  17,
		"TASK_TYPE_WORKFLOW_BACKOFF_TIMER":                18,
		"TASK_TYPE_VISIBILITY_START_EXECUTION":            19,
		"TASK_TYPE_VISIBILITY_UPSERT_EXECUTION":           20,
		"TASK_TYPE_VISIBILITY_CLOSE_EXECUTION":            21,
		"TASK_TYPE_VISIBILITY_DELETE_EXECUTION":           22,
		"TASK_TYPE_TRANSFER_DELETE_EXECUTION":             24,
		"TASK_TYPE_REPLICATION_SYNC_WORKFLOW_STATE":       25,
		"TASK_TYPE_ARCHIVAL_ARCHIVE_EXECUTION":            26,
		"TASK_TYPE_STATE_MACHINE_OUTBOUND":                27,
		"TASK_TYPE_STATE_MACHINE_TIMER":                   28,
		"TASK_TYPE_WORKFLOW_EXECUTION_TIMEOUT":            29,
		"TASK_TYPE_REPLICATION_SYNC_HSM":                  30,
		"TASK_TYPE_REPLICATION_SYNC_VERSIONED_TRANSITION": 31,
		"TASK_TYPE_CHASM_PURE":                            32,
		"TASK_TYPE_CHASM":                                 33,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	switch x {
	case TASK_TYPE_UNSPECIFIED:
		return "Unspecified"
	case TASK_TYPE_REPLICATION_HISTORY:
		return "ReplicationHistory"
	case TASK_TYPE_REPLICATION_SYNC_ACTIVITY:
		return "ReplicationSyncActivity"
	case TASK_TYPE_TRANSFER_WORKFLOW_TASK:
		return "TransferWorkflowTask"
	case TASK_TYPE_TRANSFER_ACTIVITY_TASK:
		return "TransferActivityTask"
	case TASK_TYPE_TRANSFER_CLOSE_EXECUTION:
		return "TransferCloseExecution"
	case TASK_TYPE_TRANSFER_CANCEL_EXECUTION:
		return "TransferCancelExecution"

		// Deprecated: Use TaskType.Descriptor instead.
	case TASK_TYPE_TRANSFER_START_CHILD_EXECUTION:
		return "TransferStartChildExecution"
	case TASK_TYPE_TRANSFER_SIGNAL_EXECUTION:
		return "TransferSignalExecution"
	case TASK_TYPE_TRANSFER_RESET_WORKFLOW:

		// TaskPriority is only used for replication task as of May 2024
		return "TransferResetWorkflow"
	case TASK_TYPE_WORKFLOW_TASK_TIMEOUT:
		return "WorkflowTaskTimeout"
	case TASK_TYPE_ACTIVITY_TIMEOUT:
		return "ActivityTimeout"
	case TASK_TYPE_USER_TIMER:
		return "UserTimer"

		// gap between index can be used for future priority levels if needed
	case TASK_TYPE_WORKFLOW_RUN_TIMEOUT:
		return "WorkflowRunTimeout"
	case TASK_TYPE_DELETE_HISTORY_EVENT:
		return "DeleteHistoryEvent"

		// Enum value maps for TaskPriority.
	case TASK_TYPE_ACTIVITY_RETRY_TIMER:
		return "ActivityRetryTimer"
	case TASK_TYPE_WORKFLOW_BACKOFF_TIMER:
		return "WorkflowBackoffTimer"
	case TASK_TYPE_VISIBILITY_START_EXECUTION:
		return "VisibilityStartExecution"
	case TASK_TYPE_VISIBILITY_UPSERT_EXECUTION:
		return "VisibilityUpsertExecution"
	case TASK_TYPE_VISIBILITY_CLOSE_EXECUTION:
		return "VisibilityCloseExecution"
	case TASK_TYPE_VISIBILITY_DELETE_EXECUTION:
		return "VisibilityDeleteExecution"
	case TASK_TYPE_TRANSFER_DELETE_EXECUTION:
		return "TransferDeleteExecution"
	case TASK_TYPE_REPLICATION_SYNC_WORKFLOW_STATE:
		return "ReplicationSyncWorkflowState"
	case TASK_TYPE_ARCHIVAL_ARCHIVE_EXECUTION:
		return "ArchivalArchiveExecution"
	case TASK_TYPE_STATE_MACHINE_OUTBOUND:
		return "StateMachineOutbound"
	case TASK_TYPE_STATE_MACHINE_TIMER:
		return "StateMachineTimer"
	case TASK_TYPE_WORKFLOW_EXECUTION_TIMEOUT:
		return "WorkflowExecutionTimeout"
	case TASK_TYPE_REPLICATION_SYNC_HSM:
		return "ReplicationSyncHsm"

		// Deprecated: Use TaskPriority.Descriptor instead.
	case TASK_TYPE_REPLICATION_SYNC_VERSIONED_TRANSITION:
		return "ReplicationSyncVersionedTransition"
	case TASK_TYPE_CHASM_PURE:
		return "ChasmPure"
	case TASK_TYPE_CHASM:
		return "Chasm"
	default:
		return strconv.Itoa(int(x))
	}

}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_server_api_enums_v1_task_proto_enumTypes[1].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_temporal_server_api_enums_v1_task_proto_enumTypes[1]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_temporal_server_api_enums_v1_task_proto_rawDescGZIP(), []int{1}
}

type TaskPriority int32

const (
	TASK_PRIORITY_UNSPECIFIED TaskPriority = 0
	TASK_PRIORITY_HIGH        TaskPriority = 1

	TASK_PRIORITY_LOW TaskPriority = 10
)

var (
	TaskPriority_name = map[int32]string{
		0:  "TASK_PRIORITY_UNSPECIFIED",
		1:  "TASK_PRIORITY_HIGH",
		10: "TASK_PRIORITY_LOW",
	}
	TaskPriority_value = map[string]int32{
		"TASK_PRIORITY_UNSPECIFIED": 0,
		"TASK_PRIORITY_HIGH":        1,
		"TASK_PRIORITY_LOW":         10,
	}
)

func (x TaskPriority) Enum() *TaskPriority {
	p := new(TaskPriority)
	*p = x
	return p
}

func (x TaskPriority) String() string {
	switch x {
	case TASK_PRIORITY_UNSPECIFIED:
		return "Unspecified"
	case TASK_PRIORITY_HIGH:
		return "High"
	case TASK_PRIORITY_LOW:
		return "Low"
	default:
		return strconv.Itoa(int(x))
	}

}

func (TaskPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_server_api_enums_v1_task_proto_enumTypes[2].Descriptor()
}

func (TaskPriority) Type() protoreflect.EnumType {
	return &file_temporal_server_api_enums_v1_task_proto_enumTypes[2]
}

func (x TaskPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

func (TaskPriority) EnumDescriptor() ([]byte, []int) {
	return file_temporal_server_api_enums_v1_task_proto_rawDescGZIP(), []int{2}
}

var File_temporal_server_api_enums_v1_task_proto protoreflect.FileDescriptor

const file_temporal_server_api_enums_v1_task_proto_rawDesc = "" +
	"\n" +
	"'temporal/server/api/enums/v1/task.proto\x12\x1ctemporal.server.api.enums.v1*^\n" +
	"\n" +
	"TaskSource\x12\x1b\n" +
	"\x17TASK_SOURCE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13TASK_SOURCE_HISTORY\x10\x01\x12\x1a\n" +
	"\x16TASK_SOURCE_DB_BACKLOG\x10\x02*\xb6\t\n" +
	"\bTaskType\x12\x19\n" +
	"\x15TASK_TYPE_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dTASK_TYPE_REPLICATION_HISTORY\x10\x01\x12'\n" +
	"#TASK_TYPE_REPLICATION_SYNC_ACTIVITY\x10\x02\x12$\n" +
	" TASK_TYPE_TRANSFER_WORKFLOW_TASK\x10\x03\x12$\n" +
	" TASK_TYPE_TRANSFER_ACTIVITY_TASK\x10\x04\x12&\n" +
	"\"TASK_TYPE_TRANSFER_CLOSE_EXECUTION\x10\x05\x12'\n" +
	"#TASK_TYPE_TRANSFER_CANCEL_EXECUTION\x10\x06\x12,\n" +
	"(TASK_TYPE_TRANSFER_START_CHILD_EXECUTION\x10\a\x12'\n" +
	"#TASK_TYPE_TRANSFER_SIGNAL_EXECUTION\x10\b\x12%\n" +
	"!TASK_TYPE_TRANSFER_RESET_WORKFLOW\x10\n" +
	"\x12#\n" +
	"\x1fTASK_TYPE_WORKFLOW_TASK_TIMEOUT\x10\f\x12\x1e\n" +
	"\x1aTASK_TYPE_ACTIVITY_TIMEOUT\x10\r\x12\x18\n" +
	"\x14TASK_TYPE_USER_TIMER\x10\x0e\x12\"\n" +
	"\x1eTASK_TYPE_WORKFLOW_RUN_TIMEOUT\x10\x0f\x12\"\n" +
	"\x1eTASK_TYPE_DELETE_HISTORY_EVENT\x10\x10\x12\"\n" +
	"\x1eTASK_TYPE_ACTIVITY_RETRY_TIMER\x10\x11\x12$\n" +
	" TASK_TYPE_WORKFLOW_BACKOFF_TIMER\x10\x12\x12(\n" +
	"$TASK_TYPE_VISIBILITY_START_EXECUTION\x10\x13\x12)\n" +
	"%TASK_TYPE_VISIBILITY_UPSERT_EXECUTION\x10\x14\x12(\n" +
	"$TASK_TYPE_VISIBILITY_CLOSE_EXECUTION\x10\x15\x12)\n" +
	"%TASK_TYPE_VISIBILITY_DELETE_EXECUTION\x10\x16\x12'\n" +
	"#TASK_TYPE_TRANSFER_DELETE_EXECUTION\x10\x18\x12-\n" +
	")TASK_TYPE_REPLICATION_SYNC_WORKFLOW_STATE\x10\x19\x12(\n" +
	"$TASK_TYPE_ARCHIVAL_ARCHIVE_EXECUTION\x10\x1a\x12$\n" +
	" TASK_TYPE_STATE_MACHINE_OUTBOUND\x10\x1b\x12!\n" +
	"\x1dTASK_TYPE_STATE_MACHINE_TIMER\x10\x1c\x12(\n" +
	"$TASK_TYPE_WORKFLOW_EXECUTION_TIMEOUT\x10\x1d\x12\"\n" +
	"\x1eTASK_TYPE_REPLICATION_SYNC_HSM\x10\x1e\x123\n" +
	"/TASK_TYPE_REPLICATION_SYNC_VERSIONED_TRANSITION\x10\x1f\x12\x18\n" +
	"\x14TASK_TYPE_CHASM_PURE\x10 \x12\x13\n" +
	"\x0fTASK_TYPE_CHASM\x10!\"\x04\b\t\x10\t\"\x04\b\v\x10\v\"\x04\b\x17\x10\x17*\\\n" +
	"\fTaskPriority\x12\x1d\n" +
	"\x19TASK_PRIORITY_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12TASK_PRIORITY_HIGH\x10\x01\x12\x15\n" +
	"\x11TASK_PRIORITY_LOW\x10\n" +
	"B*Z(go.temporal.io/server/api/enums/v1;enumsb\x06proto3"

var (
	file_temporal_server_api_enums_v1_task_proto_rawDescOnce sync.Once
	file_temporal_server_api_enums_v1_task_proto_rawDescData []byte
)

func file_temporal_server_api_enums_v1_task_proto_rawDescGZIP() []byte {
	file_temporal_server_api_enums_v1_task_proto_rawDescOnce.Do(func() {
		file_temporal_server_api_enums_v1_task_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_temporal_server_api_enums_v1_task_proto_rawDesc), len(file_temporal_server_api_enums_v1_task_proto_rawDesc)))
	})
	return file_temporal_server_api_enums_v1_task_proto_rawDescData
}

var file_temporal_server_api_enums_v1_task_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_temporal_server_api_enums_v1_task_proto_goTypes = []any{
	(TaskSource)(0),   // 0: temporal.server.api.enums.v1.TaskSource
	(TaskType)(0),     // 1: temporal.server.api.enums.v1.TaskType
	(TaskPriority)(0), // 2: temporal.server.api.enums.v1.TaskPriority
}
var file_temporal_server_api_enums_v1_task_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_temporal_server_api_enums_v1_task_proto_init() }
func file_temporal_server_api_enums_v1_task_proto_init() {
	if File_temporal_server_api_enums_v1_task_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_temporal_server_api_enums_v1_task_proto_rawDesc), len(file_temporal_server_api_enums_v1_task_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_server_api_enums_v1_task_proto_goTypes,
		DependencyIndexes: file_temporal_server_api_enums_v1_task_proto_depIdxs,
		EnumInfos:         file_temporal_server_api_enums_v1_task_proto_enumTypes,
	}.Build()
	File_temporal_server_api_enums_v1_task_proto = out.File
	file_temporal_server_api_enums_v1_task_proto_goTypes = nil
	file_temporal_server_api_enums_v1_task_proto_depIdxs = nil
}
