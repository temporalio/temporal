// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/server/api/enums/v1/workflow.proto

package enums

import (
	fmt "fmt"
	math "math"
	strconv "strconv"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WorkflowExecutionState int32

const (
	WORKFLOW_EXECUTION_STATE_UNSPECIFIED WorkflowExecutionState = 0
	WORKFLOW_EXECUTION_STATE_CREATED     WorkflowExecutionState = 1
	WORKFLOW_EXECUTION_STATE_RUNNING     WorkflowExecutionState = 2
	WORKFLOW_EXECUTION_STATE_COMPLETED   WorkflowExecutionState = 3
	WORKFLOW_EXECUTION_STATE_ZOMBIE      WorkflowExecutionState = 4
	WORKFLOW_EXECUTION_STATE_VOID        WorkflowExecutionState = 5
	WORKFLOW_EXECUTION_STATE_CORRUPTED   WorkflowExecutionState = 6
)

var WorkflowExecutionState_name = map[int32]string{
	0: "Unspecified",
	1: "Created",
	2: "Running",
	3: "Completed",
	4: "Zombie",
	5: "Void",
	6: "Corrupted",
}

var WorkflowExecutionState_value = map[string]int32{
	"Unspecified": 0,
	"Created":     1,
	"Running":     2,
	"Completed":   3,
	"Zombie":      4,
	"Void":        5,
	"Corrupted":   6,
}

func (WorkflowExecutionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_004b7fefe981a755, []int{0}
}

type WorkflowBackoffType int32

const (
	WORKFLOW_BACKOFF_TYPE_UNSPECIFIED WorkflowBackoffType = 0
	WORKFLOW_BACKOFF_TYPE_RETRY       WorkflowBackoffType = 1
	WORKFLOW_BACKOFF_TYPE_CRON        WorkflowBackoffType = 2
	WORKFLOW_BACKOFF_TYPE_DELAY_START WorkflowBackoffType = 3
)

var WorkflowBackoffType_name = map[int32]string{
	0: "Unspecified",
	1: "Retry",
	2: "Cron",
	3: "DelayStart",
}

var WorkflowBackoffType_value = map[string]int32{
	"Unspecified": 0,
	"Retry":       1,
	"Cron":        2,
	"DelayStart":  3,
}

func (WorkflowBackoffType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_004b7fefe981a755, []int{1}
}

func init() {
	proto.RegisterEnum("temporal.server.api.enums.v1.WorkflowExecutionState", WorkflowExecutionState_name, WorkflowExecutionState_value)
	proto.RegisterEnum("temporal.server.api.enums.v1.WorkflowBackoffType", WorkflowBackoffType_name, WorkflowBackoffType_value)
}

func init() {
	proto.RegisterFile("temporal/server/api/enums/v1/workflow.proto", fileDescriptor_004b7fefe981a755)
}

var fileDescriptor_004b7fefe981a755 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0xd2, 0x3d, 0xef, 0xd2, 0x40,
	0x1c, 0x07, 0xf0, 0x1e, 0x28, 0xc3, 0x4d, 0x97, 0x33, 0x71, 0xf0, 0xe1, 0x10, 0x45, 0x43, 0x30,
	0x69, 0x43, 0x1c, 0x9d, 0xfa, 0x70, 0x35, 0x0d, 0xd0, 0x6b, 0x8e, 0xab, 0x08, 0x83, 0x4d, 0x25,
	0xc5, 0x34, 0x3c, 0x5c, 0x53, 0x0a, 0xe8, 0xe6, 0x4b, 0xf0, 0x45, 0x18, 0xe3, 0x4b, 0x71, 0x64,
	0x64, 0x94, 0xb2, 0x38, 0xf2, 0x12, 0x0c, 0x28, 0x0c, 0x86, 0xfe, 0xff, 0xdb, 0x0d, 0x9f, 0xdf,
	0xef, 0x7b, 0xf9, 0xe5, 0x0b, 0x5f, 0x66, 0xd1, 0x2c, 0x91, 0x69, 0x38, 0xd5, 0x16, 0x51, 0xba,
	0x8a, 0x52, 0x2d, 0x4c, 0x62, 0x2d, 0x9a, 0x2f, 0x67, 0x0b, 0x6d, 0xd5, 0xd2, 0xd6, 0x32, 0x9d,
	0x8c, 0xa7, 0x72, 0xad, 0x26, 0xa9, 0xcc, 0x24, 0x7e, 0x74, 0xc6, 0xea, 0x5f, 0xac, 0x86, 0x49,
	0xac, 0x9e, 0xb0, 0xba, 0x6a, 0x35, 0xbf, 0x97, 0xe0, 0xfd, 0xfe, 0xbf, 0x01, 0xfa, 0x29, 0x1a,
	0x2d, 0xb3, 0x58, 0xce, 0x7b, 0x59, 0x98, 0x45, 0xb8, 0x01, 0xeb, 0x7d, 0xc6, 0xdb, 0x76, 0x87,
	0xf5, 0x03, 0xfa, 0x8e, 0x9a, 0xbe, 0x70, 0x98, 0x1b, 0xf4, 0x84, 0x2e, 0x68, 0xe0, 0xbb, 0x3d,
	0x8f, 0x9a, 0x8e, 0xed, 0x50, 0x0b, 0x29, 0xb8, 0x0e, 0x9f, 0x14, 0x4a, 0x93, 0x53, 0x5d, 0x50,
	0x0b, 0x81, 0x1b, 0x15, 0xf7, 0x5d, 0xd7, 0x71, 0xdf, 0xa0, 0x12, 0x7e, 0x01, 0x9f, 0x16, 0xef,
	0x62, 0x5d, 0xaf, 0x43, 0x8f, 0xdb, 0xca, 0xf8, 0x19, 0xac, 0x16, 0xba, 0x21, 0xeb, 0x1a, 0x0e,
	0x45, 0x77, 0x70, 0x0d, 0x3e, 0x2e, 0x44, 0x6f, 0x99, 0x63, 0xa1, 0xbb, 0xb7, 0xe4, 0x71, 0xee,
	0x7b, 0xc7, 0xbc, 0x4a, 0xf3, 0x1b, 0x80, 0xf7, 0xce, 0x87, 0x32, 0xc2, 0xd1, 0x44, 0x8e, 0xc7,
	0xe2, 0x73, 0x12, 0xe1, 0xe7, 0xb0, 0x76, 0x99, 0x37, 0x74, 0xb3, 0xcd, 0x6c, 0x3b, 0x10, 0x03,
	0xef, 0xff, 0x13, 0x55, 0xe1, 0xc3, 0xeb, 0x8c, 0x53, 0xc1, 0x07, 0x08, 0x60, 0x02, 0x1f, 0x5c,
	0x07, 0x26, 0x67, 0x2e, 0x2a, 0x15, 0xe7, 0x58, 0xb4, 0xa3, 0x0f, 0x8e, 0x1f, 0xe6, 0x02, 0x95,
	0x8d, 0xf7, 0x9b, 0x1d, 0x51, 0xb6, 0x3b, 0xa2, 0x1c, 0x76, 0x04, 0x7c, 0xc9, 0x09, 0xf8, 0x91,
	0x13, 0xf0, 0x33, 0x27, 0x60, 0x93, 0x13, 0xf0, 0x2b, 0x27, 0xe0, 0x77, 0x4e, 0x94, 0x43, 0x4e,
	0xc0, 0xd7, 0x3d, 0x51, 0x36, 0x7b, 0xa2, 0x6c, 0xf7, 0x44, 0x19, 0x36, 0x3e, 0x4a, 0xf5, 0x52,
	0x93, 0x58, 0x5e, 0xab, 0xd5, 0xeb, 0xd3, 0xe3, 0x43, 0xe5, 0x54, 0xaa, 0x57, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x55, 0x16, 0x44, 0x81, 0x83, 0x02, 0x00, 0x00,
}

func (x WorkflowExecutionState) String() string {
	s, ok := WorkflowExecutionState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x WorkflowBackoffType) String() string {
	s, ok := WorkflowBackoffType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
