// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/server/api/enums/v1/common.proto

package enums

import (
	fmt "fmt"
	math "math"
	strconv "strconv"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeadLetterQueueType int32

const (
	DEAD_LETTER_QUEUE_TYPE_UNSPECIFIED DeadLetterQueueType = 0
	DEAD_LETTER_QUEUE_TYPE_REPLICATION DeadLetterQueueType = 1
	DEAD_LETTER_QUEUE_TYPE_NAMESPACE   DeadLetterQueueType = 2
)

var DeadLetterQueueType_name = map[int32]string{
	0: "Unspecified",
	1: "Replication",
	2: "Namespace",
}

var DeadLetterQueueType_value = map[string]int32{
	"Unspecified": 0,
	"Replication": 1,
	"Namespace":   2,
}

func (DeadLetterQueueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4a3bfa9c01eff6e4, []int{0}
}

type ChecksumFlavor int32

const (
	CHECKSUM_FLAVOR_UNSPECIFIED                   ChecksumFlavor = 0
	CHECKSUM_FLAVOR_IEEE_CRC32_OVER_PROTO3_BINARY ChecksumFlavor = 1
)

var ChecksumFlavor_name = map[int32]string{
	0: "Unspecified",
	1: "IeeeCrc32OverProto3Binary",
}

var ChecksumFlavor_value = map[string]int32{
	"Unspecified":               0,
	"IeeeCrc32OverProto3Binary": 1,
}

func (ChecksumFlavor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4a3bfa9c01eff6e4, []int{1}
}

// Severity defines how important given alert is.
type Severity int32

const (
	SEVERITY_UNSPECIFIED Severity = 0
	SEVERITY_HIGH        Severity = 1
	SEVERITY_MEDIUM      Severity = 2
	SEVERITY_LOW         Severity = 3
)

var Severity_name = map[int32]string{
	0: "Unspecified",
	1: "High",
	2: "Medium",
	3: "Low",
}

var Severity_value = map[string]int32{
	"Unspecified": 0,
	"High":        1,
	"Medium":      2,
	"Low":         3,
}

func (Severity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4a3bfa9c01eff6e4, []int{2}
}

func init() {
	proto.RegisterEnum("temporal.server.api.enums.v1.DeadLetterQueueType", DeadLetterQueueType_name, DeadLetterQueueType_value)
	proto.RegisterEnum("temporal.server.api.enums.v1.ChecksumFlavor", ChecksumFlavor_name, ChecksumFlavor_value)
	proto.RegisterEnum("temporal.server.api.enums.v1.Severity", Severity_name, Severity_value)
}

func init() {
	proto.RegisterFile("temporal/server/api/enums/v1/common.proto", fileDescriptor_4a3bfa9c01eff6e4)
}

var fileDescriptor_4a3bfa9c01eff6e4 = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0xd1, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0x07, 0xf0, 0xcc, 0x0a, 0x22, 0x83, 0x3f, 0xc6, 0xac, 0x07, 0x41, 0x19, 0x45, 0x44, 0xb4,
	0x60, 0x42, 0xed, 0xd1, 0x53, 0x76, 0xf2, 0x6a, 0x07, 0xf3, 0x6b, 0x27, 0x49, 0xa5, 0x1e, 0x76,
	0x88, 0xbb, 0x83, 0x06, 0x37, 0x9d, 0x90, 0x26, 0x81, 0xde, 0xbc, 0x7b, 0xf1, 0xcf, 0xf0, 0x4f,
	0xf1, 0xd8, 0x63, 0x8f, 0x36, 0xbd, 0x78, 0xec, 0x9f, 0x20, 0x54, 0xcc, 0xa1, 0xe8, 0xde, 0x1e,
	0xdf, 0xf7, 0xe1, 0xf1, 0xe0, 0x8b, 0x5f, 0xd4, 0xaa, 0x28, 0x75, 0x95, 0x5d, 0xda, 0x0b, 0x55,
	0xb5, 0xaa, 0xb2, 0xb3, 0x32, 0xb7, 0xd5, 0xbc, 0x29, 0x16, 0x76, 0x3b, 0xb4, 0xcf, 0x75, 0x51,
	0xe8, 0xb9, 0x55, 0x56, 0xba, 0xd6, 0xe6, 0xc3, 0xbf, 0xd4, 0xfa, 0x43, 0xad, 0xac, 0xcc, 0xad,
	0x3d, 0xb5, 0xda, 0xe1, 0xe0, 0x2b, 0xc2, 0xc7, 0xae, 0xca, 0x2e, 0x3c, 0x55, 0xd7, 0xaa, 0x3a,
	0x6d, 0x54, 0xa3, 0x92, 0x65, 0xa9, 0xcc, 0x67, 0xf8, 0x89, 0x0b, 0x8e, 0x2b, 0x3d, 0x48, 0x12,
	0x10, 0xf2, 0x34, 0x85, 0x14, 0x64, 0x32, 0x8b, 0x40, 0xa6, 0x41, 0x1c, 0x01, 0xe3, 0x63, 0x0e,
	0x2e, 0x31, 0xae, 0x70, 0x02, 0x22, 0x8f, 0x33, 0x27, 0xe1, 0x61, 0x40, 0x90, 0xf9, 0x14, 0x3f,
	0xfe, 0x8f, 0x0b, 0x1c, 0x1f, 0xe2, 0xc8, 0x61, 0x40, 0x8e, 0x06, 0x17, 0xf8, 0x36, 0xfb, 0xa4,
	0xce, 0x3f, 0x2f, 0x9a, 0x62, 0x7c, 0x99, 0xb5, 0xba, 0x32, 0x1f, 0xe1, 0x07, 0x6c, 0x02, 0xec,
	0x6d, 0x9c, 0xfa, 0x72, 0xec, 0x39, 0xd3, 0x50, 0x1c, 0x3c, 0x30, 0xc4, 0x2f, 0x0f, 0x01, 0x07,
	0x00, 0xc9, 0x04, 0x1b, 0xbd, 0x92, 0xe1, 0x14, 0x84, 0x8c, 0x44, 0x98, 0x84, 0x23, 0x79, 0xc2,
	0x03, 0x47, 0xcc, 0x08, 0x1a, 0x9c, 0xe1, 0x1b, 0xb1, 0x6a, 0x55, 0x95, 0xd7, 0x4b, 0xf3, 0x3e,
	0xbe, 0x17, 0xc3, 0x14, 0x04, 0x4f, 0x66, 0x07, 0x87, 0xef, 0xe2, 0x5b, 0xfd, 0x66, 0xc2, 0xdf,
	0x4c, 0x08, 0x32, 0x8f, 0xf1, 0x9d, 0x3e, 0xf2, 0xc1, 0xe5, 0xa9, 0x4f, 0x8e, 0x4c, 0x82, 0x6f,
	0xf6, 0xa1, 0x17, 0xbe, 0x23, 0xd7, 0x4e, 0xce, 0x56, 0x1b, 0x6a, 0xac, 0x37, 0xd4, 0xd8, 0x6d,
	0x28, 0xfa, 0xd2, 0x51, 0xf4, 0xbd, 0xa3, 0xe8, 0x47, 0x47, 0xd1, 0xaa, 0xa3, 0xe8, 0x67, 0x47,
	0xd1, 0xaf, 0x8e, 0x1a, 0xbb, 0x8e, 0xa2, 0x6f, 0x5b, 0x6a, 0xac, 0xb6, 0xd4, 0x58, 0x6f, 0xa9,
	0xf1, 0xfe, 0xf9, 0x47, 0x6d, 0xf5, 0x55, 0xe5, 0xfa, 0x5f, 0xc5, 0xbe, 0xde, 0x0f, 0x1f, 0xae,
	0xef, 0x8b, 0x1d, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xf2, 0xe2, 0x52, 0xa6, 0x05, 0x02, 0x00,
	0x00,
}

func (x DeadLetterQueueType) String() string {
	s, ok := DeadLetterQueueType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ChecksumFlavor) String() string {
	s, ok := ChecksumFlavor_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Severity) String() string {
	s, ok := Severity_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
