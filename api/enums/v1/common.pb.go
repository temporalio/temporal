// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/server/api/enums/v1/common.proto

package enums

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	strconv "strconv"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeadLetterQueueType int32

const (
	DEAD_LETTER_QUEUE_TYPE_UNSPECIFIED DeadLetterQueueType = 0
	DEAD_LETTER_QUEUE_TYPE_REPLICATION DeadLetterQueueType = 1
	DEAD_LETTER_QUEUE_TYPE_NAMESPACE   DeadLetterQueueType = 2
)

var DeadLetterQueueType_name = map[int32]string{
	0: "Unspecified",
	1: "Replication",
	2: "Namespace",
}

var DeadLetterQueueType_value = map[string]int32{
	"Unspecified": 0,
	"Replication": 1,
	"Namespace":   2,
}

func (DeadLetterQueueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4a3bfa9c01eff6e4, []int{0}
}

type ChecksumFlavor int32

const (
	CHECKSUM_FLAVOR_UNSPECIFIED                   ChecksumFlavor = 0
	CHECKSUM_FLAVOR_IEEE_CRC32_OVER_PROTO3_BINARY ChecksumFlavor = 1
)

var ChecksumFlavor_name = map[int32]string{
	0: "Unspecified",
	1: "IeeeCrc32OverProto3Binary",
}

var ChecksumFlavor_value = map[string]int32{
	"Unspecified":               0,
	"IeeeCrc32OverProto3Binary": 1,
}

func (ChecksumFlavor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4a3bfa9c01eff6e4, []int{1}
}

func init() {
	proto.RegisterEnum("temporal.server.api.enums.v1.DeadLetterQueueType", DeadLetterQueueType_name, DeadLetterQueueType_value)
	proto.RegisterEnum("temporal.server.api.enums.v1.ChecksumFlavor", ChecksumFlavor_name, ChecksumFlavor_value)
}

func init() {
	proto.RegisterFile("temporal/server/api/enums/v1/common.proto", fileDescriptor_4a3bfa9c01eff6e4)
}

var fileDescriptor_4a3bfa9c01eff6e4 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0xd1, 0x31, 0x4b, 0xeb, 0x50,
	0x18, 0xc6, 0xf1, 0x9c, 0x3b, 0xdc, 0x21, 0xc3, 0x25, 0xe4, 0x8e, 0xf7, 0x72, 0x14, 0x11, 0xc1,
	0x82, 0x09, 0xb1, 0xa3, 0x53, 0x7a, 0xf2, 0x16, 0x83, 0x69, 0x92, 0x9e, 0x26, 0x85, 0xba, 0x1c,
	0xd2, 0xf6, 0xd0, 0x06, 0x9b, 0x9e, 0x90, 0x26, 0x01, 0x37, 0x77, 0x17, 0x3f, 0x86, 0x1f, 0xc5,
	0xb1, 0x63, 0x47, 0x7b, 0xba, 0x38, 0xf6, 0x23, 0x08, 0x95, 0x0a, 0x16, 0x74, 0x7b, 0x86, 0xdf,
	0xf0, 0xf2, 0xfe, 0xd5, 0xf3, 0x92, 0x67, 0xb9, 0x28, 0x92, 0x99, 0xb9, 0xe0, 0x45, 0xcd, 0x0b,
	0x33, 0xc9, 0x53, 0x93, 0xcf, 0xab, 0x6c, 0x61, 0xd6, 0x96, 0x39, 0x12, 0x59, 0x26, 0xe6, 0x46,
	0x5e, 0x88, 0x52, 0xe8, 0xff, 0xf7, 0xd4, 0xf8, 0xa0, 0x46, 0x92, 0xa7, 0xc6, 0x8e, 0x1a, 0xb5,
	0xd5, 0x78, 0x44, 0xea, 0x5f, 0x87, 0x27, 0x63, 0x8f, 0x97, 0x25, 0x2f, 0xba, 0x15, 0xaf, 0x78,
	0x74, 0x9f, 0x73, 0xfd, 0x4c, 0x3d, 0x71, 0xc0, 0x76, 0x98, 0x07, 0x51, 0x04, 0x94, 0x75, 0x63,
	0x88, 0x81, 0x45, 0x83, 0x10, 0x58, 0xec, 0xf7, 0x42, 0x20, 0x6e, 0xdb, 0x05, 0x47, 0x53, 0x7e,
	0x70, 0x14, 0x42, 0xcf, 0x25, 0x76, 0xe4, 0x06, 0xbe, 0x86, 0xf4, 0x53, 0xf5, 0xf8, 0x1b, 0xe7,
	0xdb, 0x1d, 0xe8, 0x85, 0x36, 0x01, 0xed, 0x57, 0x63, 0xac, 0xfe, 0x21, 0x53, 0x3e, 0xba, 0x5b,
	0x54, 0x59, 0x7b, 0x96, 0xd4, 0xa2, 0xd0, 0x8f, 0xd4, 0x7f, 0xe4, 0x1a, 0xc8, 0x4d, 0x2f, 0xee,
	0xb0, 0xb6, 0x67, 0xf7, 0x03, 0x7a, 0x70, 0x80, 0xa5, 0x5e, 0x1c, 0x02, 0x17, 0x00, 0x18, 0xa1,
	0xa4, 0x79, 0xc9, 0x82, 0x3e, 0x50, 0x16, 0xd2, 0x20, 0x0a, 0x9a, 0xac, 0xe5, 0xfa, 0x36, 0x1d,
	0x68, 0xa8, 0x35, 0x59, 0xae, 0xb1, 0xb2, 0x5a, 0x63, 0x65, 0xbb, 0xc6, 0xe8, 0x41, 0x62, 0xf4,
	0x2c, 0x31, 0x7a, 0x91, 0x18, 0x2d, 0x25, 0x46, 0xaf, 0x12, 0xa3, 0x37, 0x89, 0x95, 0xad, 0xc4,
	0xe8, 0x69, 0x83, 0x95, 0xe5, 0x06, 0x2b, 0xab, 0x0d, 0x56, 0x6e, 0xad, 0x49, 0x5a, 0x4e, 0xab,
	0xa1, 0x31, 0x12, 0x99, 0xb9, 0x7f, 0x69, 0x2a, 0x3e, 0xe7, 0x97, 0x02, 0x57, 0xbb, 0x31, 0xfc,
	0xbd, 0x2b, 0xd0, 0x7c, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x37, 0xa9, 0xee, 0xae, 0x01, 0x00,
	0x00,
}

func (x DeadLetterQueueType) String() string {
	s, ok := DeadLetterQueueType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ChecksumFlavor) String() string {
	s, ok := ChecksumFlavor_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
