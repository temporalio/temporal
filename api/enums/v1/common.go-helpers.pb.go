// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package enums

import (
	"fmt"
)

var (
	DeadLetterQueueType_shorthandValue = map[string]int32{
		"Unspecified": 0,
		"Replication": 1,
		"Namespace":   2,
	}
)

// DeadLetterQueueTypeFromString parses a DeadLetterQueueType value from  either the protojson
// canonical SCREAMING_CASE enum or the traditional temporal PascalCase enum to DeadLetterQueueType
func DeadLetterQueueTypeFromString(s string) (DeadLetterQueueType, error) {
	if v, ok := DeadLetterQueueType_value[s]; ok {
		return DeadLetterQueueType(v), nil
	} else if v, ok := DeadLetterQueueType_shorthandValue[s]; ok {
		return DeadLetterQueueType(v), nil
	}
	return DeadLetterQueueType(0), fmt.Errorf("%s is not a valid DeadLetterQueueType", s)
}

var (
	ChecksumFlavor_shorthandValue = map[string]int32{
		"Unspecified":               0,
		"IeeeCrc32OverProto3Binary": 1,
	}
)

// ChecksumFlavorFromString parses a ChecksumFlavor value from  either the protojson
// canonical SCREAMING_CASE enum or the traditional temporal PascalCase enum to ChecksumFlavor
func ChecksumFlavorFromString(s string) (ChecksumFlavor, error) {
	if v, ok := ChecksumFlavor_value[s]; ok {
		return ChecksumFlavor(v), nil
	} else if v, ok := ChecksumFlavor_shorthandValue[s]; ok {
		return ChecksumFlavor(v), nil
	}
	return ChecksumFlavor(0), fmt.Errorf("%s is not a valid ChecksumFlavor", s)
}

var (
	SchedulerInvokerState_shorthandValue = map[string]int32{
		"Unspecified": 0,
		"Waiting":     1,
		"Processing":  2,
	}
)

// SchedulerInvokerStateFromString parses a SchedulerInvokerState value from  either the protojson
// canonical SCREAMING_CASE enum or the traditional temporal PascalCase enum to SchedulerInvokerState
func SchedulerInvokerStateFromString(s string) (SchedulerInvokerState, error) {
	if v, ok := SchedulerInvokerState_value[s]; ok {
		return SchedulerInvokerState(v), nil
	} else if v, ok := SchedulerInvokerState_shorthandValue[s]; ok {
		return SchedulerInvokerState(v), nil
	}
	return SchedulerInvokerState(0), fmt.Errorf("%s is not a valid SchedulerInvokerState", s)
}

var (
	CallbackState_shorthandValue = map[string]int32{
		"Unspecified": 0,
		"Standby":     1,
		"Scheduled":   2,
		"BackingOff":  3,
		"Failed":      4,
		"Succeeded":   5,
	}
)

// CallbackStateFromString parses a CallbackState value from  either the protojson
// canonical SCREAMING_CASE enum or the traditional temporal PascalCase enum to CallbackState
func CallbackStateFromString(s string) (CallbackState, error) {
	if v, ok := CallbackState_value[s]; ok {
		return CallbackState(v), nil
	} else if v, ok := CallbackState_shorthandValue[s]; ok {
		return CallbackState(v), nil
	}
	return CallbackState(0), fmt.Errorf("%s is not a valid CallbackState", s)
}
