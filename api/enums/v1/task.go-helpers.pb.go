// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package enums

import (
	"fmt"
)

var (
	TaskSource_shorthandValue = map[string]int32{
		"Unspecified": 0,
		"History":     1,
		"DbBacklog":   2,
	}
)

// TaskSourceFromString parses a TaskSource value from  either the protojson
// canonical SCREAMING_CASE enum or the traditional temporal PascalCase enum to TaskSource
func TaskSourceFromString(s string) (TaskSource, error) {
	if v, ok := TaskSource_value[s]; ok {
		return TaskSource(v), nil
	} else if v, ok := TaskSource_shorthandValue[s]; ok {
		return TaskSource(v), nil
	}
	return TaskSource(0), fmt.Errorf("%s is not a valid TaskSource", s)
}

var (
	TaskType_shorthandValue = map[string]int32{
		"Unspecified":                  0,
		"ReplicationHistory":           1,
		"ReplicationSyncActivity":      2,
		"TransferWorkflowTask":         3,
		"TransferActivityTask":         4,
		"TransferCloseExecution":       5,
		"TransferCancelExecution":      6,
		"TransferStartChildExecution":  7,
		"TransferSignalExecution":      8,
		"TransferResetWorkflow":        10,
		"WorkflowTaskTimeout":          12,
		"ActivityTimeout":              13,
		"UserTimer":                    14,
		"WorkflowRunTimeout":           15,
		"DeleteHistoryEvent":           16,
		"ActivityRetryTimer":           17,
		"WorkflowBackoffTimer":         18,
		"VisibilityStartExecution":     19,
		"VisibilityUpsertExecution":    20,
		"VisibilityCloseExecution":     21,
		"VisibilityDeleteExecution":    22,
		"TransferDeleteExecution":      24,
		"ReplicationSyncWorkflowState": 25,
		"ArchivalArchiveExecution":     26,
		"Callback":                     27,
		"CallbackBackoff":              28,
	}
)

// TaskTypeFromString parses a TaskType value from  either the protojson
// canonical SCREAMING_CASE enum or the traditional temporal PascalCase enum to TaskType
func TaskTypeFromString(s string) (TaskType, error) {
	if v, ok := TaskType_value[s]; ok {
		return TaskType(v), nil
	} else if v, ok := TaskType_shorthandValue[s]; ok {
		return TaskType(v), nil
	}
	return TaskType(0), fmt.Errorf("%s is not a valid TaskType", s)
}
