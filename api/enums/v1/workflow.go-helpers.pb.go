// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package enums

import (
	"fmt"
)

var (
	WorkflowExecutionState_shorthandValue = map[string]int32{
		"Unspecified": 0,
		"Created":     1,
		"Running":     2,
		"Completed":   3,
		"Zombie":      4,
		"Void":        5,
		"Corrupted":   6,
	}
)

// WorkflowExecutionStateFromString parses a WorkflowExecutionState value from  either the protojson
// canonical SCREAMING_CASE enum or the traditional temporal PascalCase enum to WorkflowExecutionState
func WorkflowExecutionStateFromString(s string) (WorkflowExecutionState, error) {
	if v, ok := WorkflowExecutionState_value[s]; ok {
		return WorkflowExecutionState(v), nil
	} else if v, ok := WorkflowExecutionState_shorthandValue[s]; ok {
		return WorkflowExecutionState(v), nil
	}
	return WorkflowExecutionState(0), fmt.Errorf("%s is not a valid WorkflowExecutionState", s)
}

var (
	WorkflowBackoffType_shorthandValue = map[string]int32{
		"Unspecified": 0,
		"Retry":       1,
		"Cron":        2,
		"DelayStart":  3,
	}
)

// WorkflowBackoffTypeFromString parses a WorkflowBackoffType value from  either the protojson
// canonical SCREAMING_CASE enum or the traditional temporal PascalCase enum to WorkflowBackoffType
func WorkflowBackoffTypeFromString(s string) (WorkflowBackoffType, error) {
	if v, ok := WorkflowBackoffType_value[s]; ok {
		return WorkflowBackoffType(v), nil
	} else if v, ok := WorkflowBackoffType_shorthandValue[s]; ok {
		return WorkflowBackoffType(v), nil
	}
	return WorkflowBackoffType(0), fmt.Errorf("%s is not a valid WorkflowBackoffType", s)
}

var (
	PausedWorkflowEntityType_shorthandValue = map[string]int32{
		"Unspecified": 0,
		"Activity":    1,
		"Workflow":    2,
	}
)

// PausedWorkflowEntityTypeFromString parses a PausedWorkflowEntityType value from  either the protojson
// canonical SCREAMING_CASE enum or the traditional temporal PascalCase enum to PausedWorkflowEntityType
func PausedWorkflowEntityTypeFromString(s string) (PausedWorkflowEntityType, error) {
	if v, ok := PausedWorkflowEntityType_value[s]; ok {
		return PausedWorkflowEntityType(v), nil
	} else if v, ok := PausedWorkflowEntityType_shorthandValue[s]; ok {
		return PausedWorkflowEntityType(v), nil
	}
	return PausedWorkflowEntityType(0), fmt.Errorf("%s is not a valid PausedWorkflowEntityType", s)
}
