// The MIT License
//
// Copyright (c) 2021 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// plugins:
// 	protoc-gen-go
// 	protoc
// source: temporal/server/api/enums/v1/predicate.proto

package enums

import (
	reflect "reflect"
	"strconv"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PredicateType int32

const (
	PREDICATE_TYPE_UNSPECIFIED         PredicateType = 0
	PREDICATE_TYPE_UNIVERSAL           PredicateType = 1
	PREDICATE_TYPE_EMPTY               PredicateType = 2
	PREDICATE_TYPE_AND                 PredicateType = 3
	PREDICATE_TYPE_OR                  PredicateType = 4
	PREDICATE_TYPE_NOT                 PredicateType = 5
	PREDICATE_TYPE_NAMESPACE_ID        PredicateType = 6
	PREDICATE_TYPE_TASK_TYPE           PredicateType = 7
	PREDICATE_TYPE_DESTINATION         PredicateType = 8
	PREDICATE_TYPE_OUTBOUND_TASK_GROUP PredicateType = 9
	// Predicate used for grouping outbound tasks. Consists of task_group, namespace_id, and destination.
	// This replaces a previous implementation which used an AND predicate over 3 separate predicate types.
	PREDICATE_TYPE_OUTBOUND_TASK PredicateType = 10
)

// Enum value maps for PredicateType.
var (
	PredicateType_name = map[int32]string{
		0:  "PREDICATE_TYPE_UNSPECIFIED",
		1:  "PREDICATE_TYPE_UNIVERSAL",
		2:  "PREDICATE_TYPE_EMPTY",
		3:  "PREDICATE_TYPE_AND",
		4:  "PREDICATE_TYPE_OR",
		5:  "PREDICATE_TYPE_NOT",
		6:  "PREDICATE_TYPE_NAMESPACE_ID",
		7:  "PREDICATE_TYPE_TASK_TYPE",
		8:  "PREDICATE_TYPE_DESTINATION",
		9:  "PREDICATE_TYPE_OUTBOUND_TASK_GROUP",
		10: "PREDICATE_TYPE_OUTBOUND_TASK",
	}
	PredicateType_value = map[string]int32{
		"PREDICATE_TYPE_UNSPECIFIED":         0,
		"PREDICATE_TYPE_UNIVERSAL":           1,
		"PREDICATE_TYPE_EMPTY":               2,
		"PREDICATE_TYPE_AND":                 3,
		"PREDICATE_TYPE_OR":                  4,
		"PREDICATE_TYPE_NOT":                 5,
		"PREDICATE_TYPE_NAMESPACE_ID":        6,
		"PREDICATE_TYPE_TASK_TYPE":           7,
		"PREDICATE_TYPE_DESTINATION":         8,
		"PREDICATE_TYPE_OUTBOUND_TASK_GROUP": 9,
		"PREDICATE_TYPE_OUTBOUND_TASK":       10,
	}
)

func (x PredicateType) Enum() *PredicateType {
	p := new(PredicateType)
	*p = x
	return p
}

func (x PredicateType) String() string {
	switch x {
	case PREDICATE_TYPE_UNSPECIFIED:
		return "Unspecified"
	case PREDICATE_TYPE_UNIVERSAL:
		return "Universal"
	case PREDICATE_TYPE_EMPTY:
		return "Empty"
	case PREDICATE_TYPE_AND:
		return "And"
	case PREDICATE_TYPE_OR:
		return "Or"
	case PREDICATE_TYPE_NOT:
		return "Not"
	case PREDICATE_TYPE_NAMESPACE_ID:
		return "NamespaceId"
	case PREDICATE_TYPE_TASK_TYPE:
		return "TaskType"
	case PREDICATE_TYPE_DESTINATION:
		return "Destination"
	case PREDICATE_TYPE_OUTBOUND_TASK_GROUP:
		return "OutboundTaskGroup"
	case

		// Deprecated: Use PredicateType.Descriptor instead.
		PREDICATE_TYPE_OUTBOUND_TASK:
		return "OutboundTask"
	default:
		return strconv.Itoa(int(x))
	}

}

func (PredicateType) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_server_api_enums_v1_predicate_proto_enumTypes[0].Descriptor()
}

func (PredicateType) Type() protoreflect.EnumType {
	return &file_temporal_server_api_enums_v1_predicate_proto_enumTypes[0]
}

func (x PredicateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

func (PredicateType) EnumDescriptor() ([]byte, []int) {
	return file_temporal_server_api_enums_v1_predicate_proto_rawDescGZIP(), []int{0}
}

var File_temporal_server_api_enums_v1_predicate_proto protoreflect.FileDescriptor

const file_temporal_server_api_enums_v1_predicate_proto_rawDesc = "" +
	"\n" +
	",temporal/server/api/enums/v1/predicate.proto\x12\x1ctemporal.server.api.enums.v1*\xd7\x02\n" +
	"\rPredicateType\x12\x1e\n" +
	"\x1aPREDICATE_TYPE_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18PREDICATE_TYPE_UNIVERSAL\x10\x01\x12\x18\n" +
	"\x14PREDICATE_TYPE_EMPTY\x10\x02\x12\x16\n" +
	"\x12PREDICATE_TYPE_AND\x10\x03\x12\x15\n" +
	"\x11PREDICATE_TYPE_OR\x10\x04\x12\x16\n" +
	"\x12PREDICATE_TYPE_NOT\x10\x05\x12\x1f\n" +
	"\x1bPREDICATE_TYPE_NAMESPACE_ID\x10\x06\x12\x1c\n" +
	"\x18PREDICATE_TYPE_TASK_TYPE\x10\a\x12\x1e\n" +
	"\x1aPREDICATE_TYPE_DESTINATION\x10\b\x12&\n" +
	"\"PREDICATE_TYPE_OUTBOUND_TASK_GROUP\x10\t\x12 \n" +
	"\x1cPREDICATE_TYPE_OUTBOUND_TASK\x10\n" +
	"B*Z(go.temporal.io/server/api/enums/v1;enumsb\x06proto3"

var (
	file_temporal_server_api_enums_v1_predicate_proto_rawDescOnce sync.Once
	file_temporal_server_api_enums_v1_predicate_proto_rawDescData []byte
)

func file_temporal_server_api_enums_v1_predicate_proto_rawDescGZIP() []byte {
	file_temporal_server_api_enums_v1_predicate_proto_rawDescOnce.Do(func() {
		file_temporal_server_api_enums_v1_predicate_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_temporal_server_api_enums_v1_predicate_proto_rawDesc), len(file_temporal_server_api_enums_v1_predicate_proto_rawDesc)))
	})
	return file_temporal_server_api_enums_v1_predicate_proto_rawDescData
}

var file_temporal_server_api_enums_v1_predicate_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_temporal_server_api_enums_v1_predicate_proto_goTypes = []any{
	(PredicateType)(0), // 0: temporal.server.api.enums.v1.PredicateType
}
var file_temporal_server_api_enums_v1_predicate_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_temporal_server_api_enums_v1_predicate_proto_init() }
func file_temporal_server_api_enums_v1_predicate_proto_init() {
	if File_temporal_server_api_enums_v1_predicate_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_temporal_server_api_enums_v1_predicate_proto_rawDesc), len(file_temporal_server_api_enums_v1_predicate_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_server_api_enums_v1_predicate_proto_goTypes,
		DependencyIndexes: file_temporal_server_api_enums_v1_predicate_proto_depIdxs,
		EnumInfos:         file_temporal_server_api_enums_v1_predicate_proto_enumTypes,
	}.Build()
	File_temporal_server_api_enums_v1_predicate_proto = out.File
	file_temporal_server_api_enums_v1_predicate_proto_goTypes = nil
	file_temporal_server_api_enums_v1_predicate_proto_depIdxs = nil
}
