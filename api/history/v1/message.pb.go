// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/server/api/history/v1/message.proto

package history

import (
	bytes "bytes"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	v1 "go.temporal.io/api/history/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TransientWorkflowTaskInfo struct {
	// A list of history events that are to be appended to the "real" workflow history.
	HistorySuffix []*v1.HistoryEvent `protobuf:"bytes,3,rep,name=history_suffix,json=historySuffix,proto3" json:"history_suffix,omitempty"`
}

func (m *TransientWorkflowTaskInfo) Reset()      { *m = TransientWorkflowTaskInfo{} }
func (*TransientWorkflowTaskInfo) ProtoMessage() {}
func (*TransientWorkflowTaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_670cd05c700ece14, []int{0}
}
func (m *TransientWorkflowTaskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransientWorkflowTaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransientWorkflowTaskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransientWorkflowTaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransientWorkflowTaskInfo.Merge(m, src)
}
func (m *TransientWorkflowTaskInfo) XXX_Size() int {
	return m.Size()
}
func (m *TransientWorkflowTaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TransientWorkflowTaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TransientWorkflowTaskInfo proto.InternalMessageInfo

func (m *TransientWorkflowTaskInfo) GetHistorySuffix() []*v1.HistoryEvent {
	if m != nil {
		return m.HistorySuffix
	}
	return nil
}

// VersionHistoryItem contains signal eventId and the corresponding version.
type VersionHistoryItem struct {
	EventId int64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Version int64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *VersionHistoryItem) Reset()      { *m = VersionHistoryItem{} }
func (*VersionHistoryItem) ProtoMessage() {}
func (*VersionHistoryItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_670cd05c700ece14, []int{1}
}
func (m *VersionHistoryItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionHistoryItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionHistoryItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VersionHistoryItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionHistoryItem.Merge(m, src)
}
func (m *VersionHistoryItem) XXX_Size() int {
	return m.Size()
}
func (m *VersionHistoryItem) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionHistoryItem.DiscardUnknown(m)
}

var xxx_messageInfo_VersionHistoryItem proto.InternalMessageInfo

func (m *VersionHistoryItem) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *VersionHistoryItem) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

// VersionHistory contains the version history of a branch.
type VersionHistory struct {
	BranchToken []byte                `protobuf:"bytes,1,opt,name=branch_token,json=branchToken,proto3" json:"branch_token,omitempty"`
	Items       []*VersionHistoryItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *VersionHistory) Reset()      { *m = VersionHistory{} }
func (*VersionHistory) ProtoMessage() {}
func (*VersionHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_670cd05c700ece14, []int{2}
}
func (m *VersionHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VersionHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionHistory.Merge(m, src)
}
func (m *VersionHistory) XXX_Size() int {
	return m.Size()
}
func (m *VersionHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionHistory.DiscardUnknown(m)
}

var xxx_messageInfo_VersionHistory proto.InternalMessageInfo

func (m *VersionHistory) GetBranchToken() []byte {
	if m != nil {
		return m.BranchToken
	}
	return nil
}

func (m *VersionHistory) GetItems() []*VersionHistoryItem {
	if m != nil {
		return m.Items
	}
	return nil
}

// VersionHistories contains all version histories from all branches.
type VersionHistories struct {
	CurrentVersionHistoryIndex int32             `protobuf:"varint,1,opt,name=current_version_history_index,json=currentVersionHistoryIndex,proto3" json:"current_version_history_index,omitempty"`
	Histories                  []*VersionHistory `protobuf:"bytes,2,rep,name=histories,proto3" json:"histories,omitempty"`
}

func (m *VersionHistories) Reset()      { *m = VersionHistories{} }
func (*VersionHistories) ProtoMessage() {}
func (*VersionHistories) Descriptor() ([]byte, []int) {
	return fileDescriptor_670cd05c700ece14, []int{3}
}
func (m *VersionHistories) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionHistories) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionHistories.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VersionHistories) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionHistories.Merge(m, src)
}
func (m *VersionHistories) XXX_Size() int {
	return m.Size()
}
func (m *VersionHistories) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionHistories.DiscardUnknown(m)
}

var xxx_messageInfo_VersionHistories proto.InternalMessageInfo

func (m *VersionHistories) GetCurrentVersionHistoryIndex() int32 {
	if m != nil {
		return m.CurrentVersionHistoryIndex
	}
	return 0
}

func (m *VersionHistories) GetHistories() []*VersionHistory {
	if m != nil {
		return m.Histories
	}
	return nil
}

type TaskKey struct {
	TaskId   int64      `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	FireTime *time.Time `protobuf:"bytes,2,opt,name=fire_time,json=fireTime,proto3,stdtime" json:"fire_time,omitempty"`
}

func (m *TaskKey) Reset()      { *m = TaskKey{} }
func (*TaskKey) ProtoMessage() {}
func (*TaskKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_670cd05c700ece14, []int{4}
}
func (m *TaskKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskKey.Merge(m, src)
}
func (m *TaskKey) XXX_Size() int {
	return m.Size()
}
func (m *TaskKey) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskKey.DiscardUnknown(m)
}

var xxx_messageInfo_TaskKey proto.InternalMessageInfo

func (m *TaskKey) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *TaskKey) GetFireTime() *time.Time {
	if m != nil {
		return m.FireTime
	}
	return nil
}

type TaskRange struct {
	InclusiveMinTaskKey *TaskKey `protobuf:"bytes,1,opt,name=inclusive_min_task_key,json=inclusiveMinTaskKey,proto3" json:"inclusive_min_task_key,omitempty"`
	ExclusiveMaxTaskKey *TaskKey `protobuf:"bytes,2,opt,name=exclusive_max_task_key,json=exclusiveMaxTaskKey,proto3" json:"exclusive_max_task_key,omitempty"`
}

func (m *TaskRange) Reset()      { *m = TaskRange{} }
func (*TaskRange) ProtoMessage() {}
func (*TaskRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_670cd05c700ece14, []int{5}
}
func (m *TaskRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskRange.Merge(m, src)
}
func (m *TaskRange) XXX_Size() int {
	return m.Size()
}
func (m *TaskRange) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskRange.DiscardUnknown(m)
}

var xxx_messageInfo_TaskRange proto.InternalMessageInfo

func (m *TaskRange) GetInclusiveMinTaskKey() *TaskKey {
	if m != nil {
		return m.InclusiveMinTaskKey
	}
	return nil
}

func (m *TaskRange) GetExclusiveMaxTaskKey() *TaskKey {
	if m != nil {
		return m.ExclusiveMaxTaskKey
	}
	return nil
}

type HistoryEventPointer struct {
	EventId int64 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (m *HistoryEventPointer) Reset()      { *m = HistoryEventPointer{} }
func (*HistoryEventPointer) ProtoMessage() {}
func (*HistoryEventPointer) Descriptor() ([]byte, []int) {
	return fileDescriptor_670cd05c700ece14, []int{6}
}
func (m *HistoryEventPointer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoryEventPointer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoryEventPointer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoryEventPointer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryEventPointer.Merge(m, src)
}
func (m *HistoryEventPointer) XXX_Size() int {
	return m.Size()
}
func (m *HistoryEventPointer) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryEventPointer.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryEventPointer proto.InternalMessageInfo

func (m *HistoryEventPointer) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func init() {
	proto.RegisterType((*TransientWorkflowTaskInfo)(nil), "temporal.server.api.history.v1.TransientWorkflowTaskInfo")
	proto.RegisterType((*VersionHistoryItem)(nil), "temporal.server.api.history.v1.VersionHistoryItem")
	proto.RegisterType((*VersionHistory)(nil), "temporal.server.api.history.v1.VersionHistory")
	proto.RegisterType((*VersionHistories)(nil), "temporal.server.api.history.v1.VersionHistories")
	proto.RegisterType((*TaskKey)(nil), "temporal.server.api.history.v1.TaskKey")
	proto.RegisterType((*TaskRange)(nil), "temporal.server.api.history.v1.TaskRange")
	proto.RegisterType((*HistoryEventPointer)(nil), "temporal.server.api.history.v1.HistoryEventPointer")
}

func init() {
	proto.RegisterFile("temporal/server/api/history/v1/message.proto", fileDescriptor_670cd05c700ece14)
}

var fileDescriptor_670cd05c700ece14 = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x41, 0x4b, 0x1b, 0x41,
	0x14, 0xc7, 0x33, 0x89, 0x9a, 0x38, 0xb1, 0x22, 0x2b, 0xd8, 0x18, 0xe8, 0xa8, 0x0b, 0x52, 0x0f,
	0x32, 0x5b, 0xd3, 0x63, 0xe9, 0xa1, 0x42, 0xc1, 0x58, 0x85, 0xb2, 0x0d, 0x2d, 0x14, 0x61, 0x99,
	0x24, 0x2f, 0xeb, 0x90, 0xec, 0x4c, 0x98, 0xd9, 0xa4, 0xf1, 0x50, 0xe8, 0x47, 0xf0, 0x3b, 0xf4,
	0xd2, 0x6f, 0xd2, 0x1e, 0x3d, 0x7a, 0x6b, 0x5d, 0x2f, 0x3d, 0xfa, 0x11, 0xca, 0xce, 0xce, 0x26,
	0xb5, 0x2d, 0x16, 0x6f, 0x33, 0x6f, 0xfe, 0xef, 0x37, 0xff, 0x37, 0xef, 0x31, 0x78, 0x37, 0x86,
	0x68, 0x28, 0x15, 0x1b, 0x78, 0x1a, 0xd4, 0x18, 0x94, 0xc7, 0x86, 0xdc, 0x3b, 0xe5, 0x3a, 0x96,
	0xea, 0xcc, 0x1b, 0xef, 0x79, 0x11, 0x68, 0xcd, 0x42, 0xa0, 0x43, 0x25, 0x63, 0xe9, 0x90, 0x5c,
	0x4d, 0x33, 0x35, 0x65, 0x43, 0x4e, 0xad, 0x9a, 0x8e, 0xf7, 0xea, 0x1b, 0xa1, 0x94, 0xe1, 0x00,
	0x3c, 0xa3, 0x6e, 0x8f, 0x7a, 0x5e, 0xcc, 0x23, 0xd0, 0x31, 0x8b, 0x86, 0x19, 0xa0, 0xbe, 0xd5,
	0x85, 0x21, 0x88, 0x2e, 0x88, 0x0e, 0x07, 0xed, 0x85, 0x32, 0x94, 0x26, 0x6e, 0x56, 0x56, 0xb2,
	0x3d, 0x75, 0x74, 0x97, 0x15, 0x77, 0x84, 0xd7, 0x5b, 0x8a, 0x09, 0xcd, 0x41, 0xc4, 0xef, 0xa4,
	0xea, 0xf7, 0x06, 0xf2, 0x43, 0x8b, 0xe9, 0x7e, 0x53, 0xf4, 0xa4, 0x73, 0x84, 0x97, 0x6d, 0x62,
	0xa0, 0x47, 0xbd, 0x1e, 0x9f, 0xd4, 0x4a, 0x9b, 0xa5, 0x9d, 0x6a, 0x63, 0x9b, 0x4e, 0x0b, 0xb8,
	0xed, 0x9c, 0x1e, 0x64, 0xcb, 0x97, 0x63, 0x10, 0xb1, 0xff, 0xc0, 0x1e, 0xbc, 0x31, 0xb9, 0x87,
	0x73, 0x15, 0xb4, 0x52, 0x3c, 0x9c, 0xab, 0x14, 0x57, 0x4a, 0x6e, 0x13, 0x3b, 0x6f, 0x41, 0x69,
	0x2e, 0x85, 0xcd, 0x68, 0xc6, 0x10, 0x39, 0xeb, 0xb8, 0x02, 0x69, 0x66, 0xc0, 0xbb, 0x35, 0xb4,
	0x89, 0x76, 0x4a, 0x7e, 0xd9, 0xec, 0x9b, 0x5d, 0xa7, 0x86, 0xcb, 0xe3, 0x2c, 0xa1, 0x56, 0xcc,
	0x4e, 0xec, 0xd6, 0xfd, 0x88, 0x97, 0x6f, 0xa3, 0x9c, 0x2d, 0xbc, 0xd4, 0x56, 0x4c, 0x74, 0x4e,
	0x83, 0x58, 0xf6, 0x41, 0x18, 0xd4, 0x92, 0x5f, 0xcd, 0x62, 0xad, 0x34, 0xe4, 0x1c, 0xe0, 0x79,
	0x1e, 0x43, 0xa4, 0x6b, 0x45, 0x53, 0x50, 0x83, 0xde, 0xdd, 0x11, 0xfa, 0xb7, 0x59, 0x3f, 0x03,
	0xb8, 0x9f, 0x11, 0x5e, 0xb9, 0x75, 0xca, 0x41, 0x3b, 0x2f, 0xf0, 0xa3, 0xce, 0x48, 0xa9, 0xb4,
	0x14, 0x6b, 0x33, 0xc8, 0x1f, 0x92, 0x8b, 0x2e, 0x4c, 0x8c, 0xa5, 0x79, 0xbf, 0x6e, 0x45, 0x7f,
	0xd0, 0x53, 0x85, 0x73, 0x84, 0x17, 0x4f, 0x73, 0x9e, 0x75, 0x49, 0xef, 0xe7, 0xd2, 0x9f, 0x01,
	0x5c, 0x86, 0xcb, 0x69, 0x57, 0x5f, 0xc1, 0x99, 0xf3, 0x10, 0x97, 0x63, 0xa6, 0xfb, 0xb3, 0x37,
	0x5e, 0x48, 0xb7, 0xcd, 0xae, 0xf3, 0x1c, 0x2f, 0xf6, 0xb8, 0x82, 0x20, 0x1d, 0x36, 0xf3, 0xc8,
	0xd5, 0x46, 0x9d, 0x66, 0x93, 0x48, 0xf3, 0x49, 0xa4, 0xad, 0x7c, 0x12, 0xf7, 0xe7, 0xce, 0xbf,
	0x6f, 0x20, 0xbf, 0x92, 0xa6, 0xa4, 0x41, 0xf7, 0x2b, 0xc2, 0x8b, 0xe9, 0x1d, 0x3e, 0x13, 0x21,
	0x38, 0x27, 0x78, 0x8d, 0x8b, 0xce, 0x60, 0xa4, 0xf9, 0x18, 0x82, 0x88, 0x8b, 0xc0, 0xdc, 0xd9,
	0x87, 0x33, 0x73, 0x69, 0xb5, 0xf1, 0xf8, 0x7f, 0xb5, 0x58, 0xbb, 0xfe, 0xea, 0x14, 0x73, 0xcc,
	0x45, 0x5e, 0xc3, 0x09, 0x5e, 0x83, 0xc9, 0x94, 0xce, 0x26, 0x33, 0x7a, 0xf1, 0x9e, 0xf4, 0x29,
	0xe6, 0x98, 0x4d, 0x6c, 0xd0, 0x7d, 0x82, 0x57, 0x7f, 0x9f, 0xe3, 0xd7, 0x92, 0x8b, 0x18, 0xd4,
	0x1d, 0xd3, 0xb9, 0xdf, 0xbe, 0xb8, 0x22, 0x85, 0xcb, 0x2b, 0x52, 0xb8, 0xb9, 0x22, 0xe8, 0x53,
	0x42, 0xd0, 0x97, 0x84, 0xa0, 0x6f, 0x09, 0x41, 0x17, 0x09, 0x41, 0x3f, 0x12, 0x82, 0x7e, 0x26,
	0xa4, 0x70, 0x93, 0x10, 0x74, 0x7e, 0x4d, 0x0a, 0x17, 0xd7, 0xa4, 0x70, 0x79, 0x4d, 0x0a, 0xef,
	0x77, 0x43, 0x39, 0xf3, 0xc9, 0xe5, 0xbf, 0xbf, 0x8e, 0x67, 0x76, 0xd9, 0x5e, 0x30, 0x3d, 0x78,
	0xfa, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x9b, 0x7d, 0x47, 0x6b, 0x04, 0x00, 0x00,
}

func (this *TransientWorkflowTaskInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransientWorkflowTaskInfo)
	if !ok {
		that2, ok := that.(TransientWorkflowTaskInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HistorySuffix) != len(that1.HistorySuffix) {
		return false
	}
	for i := range this.HistorySuffix {
		if !this.HistorySuffix[i].Equal(that1.HistorySuffix[i]) {
			return false
		}
	}
	return true
}
func (this *VersionHistoryItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionHistoryItem)
	if !ok {
		that2, ok := that.(VersionHistoryItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *VersionHistory) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionHistory)
	if !ok {
		that2, ok := that.(VersionHistory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.BranchToken, that1.BranchToken) {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *VersionHistories) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionHistories)
	if !ok {
		that2, ok := that.(VersionHistories)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CurrentVersionHistoryIndex != that1.CurrentVersionHistoryIndex {
		return false
	}
	if len(this.Histories) != len(that1.Histories) {
		return false
	}
	for i := range this.Histories {
		if !this.Histories[i].Equal(that1.Histories[i]) {
			return false
		}
	}
	return true
}
func (this *TaskKey) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskKey)
	if !ok {
		that2, ok := that.(TaskKey)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if that1.FireTime == nil {
		if this.FireTime != nil {
			return false
		}
	} else if !this.FireTime.Equal(*that1.FireTime) {
		return false
	}
	return true
}
func (this *TaskRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskRange)
	if !ok {
		that2, ok := that.(TaskRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InclusiveMinTaskKey.Equal(that1.InclusiveMinTaskKey) {
		return false
	}
	if !this.ExclusiveMaxTaskKey.Equal(that1.ExclusiveMaxTaskKey) {
		return false
	}
	return true
}
func (this *HistoryEventPointer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryEventPointer)
	if !ok {
		that2, ok := that.(HistoryEventPointer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	return true
}
func (this *TransientWorkflowTaskInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&history.TransientWorkflowTaskInfo{")
	if this.HistorySuffix != nil {
		s = append(s, "HistorySuffix: "+fmt.Sprintf("%#v", this.HistorySuffix)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VersionHistoryItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&history.VersionHistoryItem{")
	s = append(s, "EventId: "+fmt.Sprintf("%#v", this.EventId)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VersionHistory) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&history.VersionHistory{")
	s = append(s, "BranchToken: "+fmt.Sprintf("%#v", this.BranchToken)+",\n")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VersionHistories) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&history.VersionHistories{")
	s = append(s, "CurrentVersionHistoryIndex: "+fmt.Sprintf("%#v", this.CurrentVersionHistoryIndex)+",\n")
	if this.Histories != nil {
		s = append(s, "Histories: "+fmt.Sprintf("%#v", this.Histories)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskKey) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&history.TaskKey{")
	s = append(s, "TaskId: "+fmt.Sprintf("%#v", this.TaskId)+",\n")
	s = append(s, "FireTime: "+fmt.Sprintf("%#v", this.FireTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskRange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&history.TaskRange{")
	if this.InclusiveMinTaskKey != nil {
		s = append(s, "InclusiveMinTaskKey: "+fmt.Sprintf("%#v", this.InclusiveMinTaskKey)+",\n")
	}
	if this.ExclusiveMaxTaskKey != nil {
		s = append(s, "ExclusiveMaxTaskKey: "+fmt.Sprintf("%#v", this.ExclusiveMaxTaskKey)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HistoryEventPointer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&history.HistoryEventPointer{")
	s = append(s, "EventId: "+fmt.Sprintf("%#v", this.EventId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TransientWorkflowTaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransientWorkflowTaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransientWorkflowTaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HistorySuffix) > 0 {
		for iNdEx := len(m.HistorySuffix) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HistorySuffix[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *VersionHistoryItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionHistoryItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VersionHistoryItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if m.EventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VersionHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VersionHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BranchToken) > 0 {
		i -= len(m.BranchToken)
		copy(dAtA[i:], m.BranchToken)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BranchToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VersionHistories) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionHistories) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VersionHistories) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Histories) > 0 {
		for iNdEx := len(m.Histories) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Histories[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.CurrentVersionHistoryIndex != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CurrentVersionHistoryIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FireTime != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FireTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.FireTime):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintMessage(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x12
	}
	if m.TaskId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExclusiveMaxTaskKey != nil {
		{
			size, err := m.ExclusiveMaxTaskKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.InclusiveMinTaskKey != nil {
		{
			size, err := m.InclusiveMinTaskKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HistoryEventPointer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryEventPointer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryEventPointer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TransientWorkflowTaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HistorySuffix) > 0 {
		for _, e := range m.HistorySuffix {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *VersionHistoryItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovMessage(uint64(m.EventId))
	}
	if m.Version != 0 {
		n += 1 + sovMessage(uint64(m.Version))
	}
	return n
}

func (m *VersionHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BranchToken)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *VersionHistories) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentVersionHistoryIndex != 0 {
		n += 1 + sovMessage(uint64(m.CurrentVersionHistoryIndex))
	}
	if len(m.Histories) > 0 {
		for _, e := range m.Histories {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *TaskKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovMessage(uint64(m.TaskId))
	}
	if m.FireTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FireTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *TaskRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InclusiveMinTaskKey != nil {
		l = m.InclusiveMinTaskKey.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ExclusiveMaxTaskKey != nil {
		l = m.ExclusiveMaxTaskKey.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *HistoryEventPointer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovMessage(uint64(m.EventId))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TransientWorkflowTaskInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHistorySuffix := "[]*HistoryEvent{"
	for _, f := range this.HistorySuffix {
		repeatedStringForHistorySuffix += strings.Replace(fmt.Sprintf("%v", f), "HistoryEvent", "v1.HistoryEvent", 1) + ","
	}
	repeatedStringForHistorySuffix += "}"
	s := strings.Join([]string{`&TransientWorkflowTaskInfo{`,
		`HistorySuffix:` + repeatedStringForHistorySuffix + `,`,
		`}`,
	}, "")
	return s
}
func (this *VersionHistoryItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VersionHistoryItem{`,
		`EventId:` + fmt.Sprintf("%v", this.EventId) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VersionHistory) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*VersionHistoryItem{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(f.String(), "VersionHistoryItem", "VersionHistoryItem", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&VersionHistory{`,
		`BranchToken:` + fmt.Sprintf("%v", this.BranchToken) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *VersionHistories) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHistories := "[]*VersionHistory{"
	for _, f := range this.Histories {
		repeatedStringForHistories += strings.Replace(f.String(), "VersionHistory", "VersionHistory", 1) + ","
	}
	repeatedStringForHistories += "}"
	s := strings.Join([]string{`&VersionHistories{`,
		`CurrentVersionHistoryIndex:` + fmt.Sprintf("%v", this.CurrentVersionHistoryIndex) + `,`,
		`Histories:` + repeatedStringForHistories + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskKey) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskKey{`,
		`TaskId:` + fmt.Sprintf("%v", this.TaskId) + `,`,
		`FireTime:` + strings.Replace(fmt.Sprintf("%v", this.FireTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskRange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskRange{`,
		`InclusiveMinTaskKey:` + strings.Replace(this.InclusiveMinTaskKey.String(), "TaskKey", "TaskKey", 1) + `,`,
		`ExclusiveMaxTaskKey:` + strings.Replace(this.ExclusiveMaxTaskKey.String(), "TaskKey", "TaskKey", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryEventPointer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryEventPointer{`,
		`EventId:` + fmt.Sprintf("%v", this.EventId) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TransientWorkflowTaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransientWorkflowTaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransientWorkflowTaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistorySuffix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistorySuffix = append(m.HistorySuffix, &v1.HistoryEvent{})
			if err := m.HistorySuffix[len(m.HistorySuffix)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionHistoryItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionHistoryItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionHistoryItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchToken = append(m.BranchToken[:0], dAtA[iNdEx:postIndex]...)
			if m.BranchToken == nil {
				m.BranchToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &VersionHistoryItem{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionHistories) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionHistories: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionHistories: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentVersionHistoryIndex", wireType)
			}
			m.CurrentVersionHistoryIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentVersionHistoryIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Histories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Histories = append(m.Histories, &VersionHistory{})
			if err := m.Histories[len(m.Histories)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FireTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FireTime == nil {
				m.FireTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FireTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InclusiveMinTaskKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InclusiveMinTaskKey == nil {
				m.InclusiveMinTaskKey = &TaskKey{}
			}
			if err := m.InclusiveMinTaskKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExclusiveMaxTaskKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExclusiveMaxTaskKey == nil {
				m.ExclusiveMaxTaskKey = &TaskKey{}
			}
			if err := m.ExclusiveMaxTaskKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryEventPointer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryEventPointer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryEventPointer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
