// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/server/api/persistenceblobs/v1/message.proto

package persistenceblobs

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	v12 "go.temporal.io/server/api/enums/v1"
	v13 "go.temporal.io/server/api/replication/v1"
	v11 "go.temporal.io/temporal-proto/common/v1"
	v14 "go.temporal.io/temporal-proto/enums/v1"
	v1 "go.temporal.io/temporal-proto/failure/v1"
	v15 "go.temporal.io/temporal-proto/namespace/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ImmutableClusterMetadata contains initialization configuration and metadata for the cluster.
type ImmutableClusterMetadata struct {
	ClusterName       string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	HistoryShardCount int32  `protobuf:"varint,2,opt,name=history_shard_count,json=historyShardCount,proto3" json:"history_shard_count,omitempty"`
}

func (m *ImmutableClusterMetadata) Reset()      { *m = ImmutableClusterMetadata{} }
func (*ImmutableClusterMetadata) ProtoMessage() {}
func (*ImmutableClusterMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{0}
}
func (m *ImmutableClusterMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImmutableClusterMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImmutableClusterMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImmutableClusterMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImmutableClusterMetadata.Merge(m, src)
}
func (m *ImmutableClusterMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ImmutableClusterMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ImmutableClusterMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ImmutableClusterMetadata proto.InternalMessageInfo

func (m *ImmutableClusterMetadata) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *ImmutableClusterMetadata) GetHistoryShardCount() int32 {
	if m != nil {
		return m.HistoryShardCount
	}
	return 0
}

type ActivityInfo struct {
	Version                       int64            `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	ScheduledEventBatchId         int64            `protobuf:"varint,2,opt,name=scheduled_event_batch_id,json=scheduledEventBatchId,proto3" json:"scheduled_event_batch_id,omitempty"`
	ScheduledEvent                []byte           `protobuf:"bytes,3,opt,name=scheduled_event,json=scheduledEvent,proto3" json:"scheduled_event,omitempty"`
	ScheduledEventEncoding        string           `protobuf:"bytes,4,opt,name=scheduled_event_encoding,json=scheduledEventEncoding,proto3" json:"scheduled_event_encoding,omitempty"`
	ScheduledTimeNanos            int64            `protobuf:"varint,5,opt,name=scheduled_time_nanos,json=scheduledTimeNanos,proto3" json:"scheduled_time_nanos,omitempty"`
	StartedId                     int64            `protobuf:"varint,6,opt,name=started_id,json=startedId,proto3" json:"started_id,omitempty"`
	StartedEvent                  []byte           `protobuf:"bytes,7,opt,name=started_event,json=startedEvent,proto3" json:"started_event,omitempty"`
	StartedEventEncoding          string           `protobuf:"bytes,8,opt,name=started_event_encoding,json=startedEventEncoding,proto3" json:"started_event_encoding,omitempty"`
	StartedTimeNanos              int64            `protobuf:"varint,9,opt,name=started_time_nanos,json=startedTimeNanos,proto3" json:"started_time_nanos,omitempty"`
	ActivityId                    string           `protobuf:"bytes,10,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	RequestId                     string           `protobuf:"bytes,11,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ScheduleToStartTimeoutSeconds int32            `protobuf:"varint,12,opt,name=schedule_to_start_timeout_seconds,json=scheduleToStartTimeoutSeconds,proto3" json:"schedule_to_start_timeout_seconds,omitempty"`
	ScheduleToCloseTimeoutSeconds int32            `protobuf:"varint,13,opt,name=schedule_to_close_timeout_seconds,json=scheduleToCloseTimeoutSeconds,proto3" json:"schedule_to_close_timeout_seconds,omitempty"`
	StartToCloseTimeoutSeconds    int32            `protobuf:"varint,14,opt,name=start_to_close_timeout_seconds,json=startToCloseTimeoutSeconds,proto3" json:"start_to_close_timeout_seconds,omitempty"`
	HeartbeatTimeoutSeconds       int32            `protobuf:"varint,15,opt,name=heartbeat_timeout_seconds,json=heartbeatTimeoutSeconds,proto3" json:"heartbeat_timeout_seconds,omitempty"`
	CancelRequested               bool             `protobuf:"varint,16,opt,name=cancel_requested,json=cancelRequested,proto3" json:"cancel_requested,omitempty"`
	CancelRequestId               int64            `protobuf:"varint,17,opt,name=cancel_request_id,json=cancelRequestId,proto3" json:"cancel_request_id,omitempty"`
	TimerTaskStatus               int32            `protobuf:"varint,18,opt,name=timer_task_status,json=timerTaskStatus,proto3" json:"timer_task_status,omitempty"`
	Attempt                       int32            `protobuf:"varint,19,opt,name=attempt,proto3" json:"attempt,omitempty"`
	TaskQueue                     string           `protobuf:"bytes,20,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	StartedIdentity               string           `protobuf:"bytes,21,opt,name=started_identity,json=startedIdentity,proto3" json:"started_identity,omitempty"`
	HasRetryPolicy                bool             `protobuf:"varint,22,opt,name=has_retry_policy,json=hasRetryPolicy,proto3" json:"has_retry_policy,omitempty"`
	RetryInitialIntervalSeconds   int32            `protobuf:"varint,23,opt,name=retry_initial_interval_seconds,json=retryInitialIntervalSeconds,proto3" json:"retry_initial_interval_seconds,omitempty"`
	RetryMaximumIntervalSeconds   int32            `protobuf:"varint,24,opt,name=retry_maximum_interval_seconds,json=retryMaximumIntervalSeconds,proto3" json:"retry_maximum_interval_seconds,omitempty"`
	RetryMaximumAttempts          int32            `protobuf:"varint,25,opt,name=retry_maximum_attempts,json=retryMaximumAttempts,proto3" json:"retry_maximum_attempts,omitempty"`
	RetryExpirationTimeNanos      int64            `protobuf:"varint,26,opt,name=retry_expiration_time_nanos,json=retryExpirationTimeNanos,proto3" json:"retry_expiration_time_nanos,omitempty"`
	RetryBackoffCoefficient       float64          `protobuf:"fixed64,27,opt,name=retry_backoff_coefficient,json=retryBackoffCoefficient,proto3" json:"retry_backoff_coefficient,omitempty"`
	RetryNonRetryableErrorTypes   []string         `protobuf:"bytes,28,rep,name=retry_non_retryable_error_types,json=retryNonRetryableErrorTypes,proto3" json:"retry_non_retryable_error_types,omitempty"`
	RetryLastFailure              *v1.Failure      `protobuf:"bytes,29,opt,name=retry_last_failure,json=retryLastFailure,proto3" json:"retry_last_failure,omitempty"`
	RetryLastWorkerIdentity       string           `protobuf:"bytes,30,opt,name=retry_last_worker_identity,json=retryLastWorkerIdentity,proto3" json:"retry_last_worker_identity,omitempty"`
	NamespaceId                   string           `protobuf:"bytes,31,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	ScheduleId                    int64            `protobuf:"varint,32,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	LastHeartbeatDetails          *v11.Payloads    `protobuf:"bytes,33,opt,name=last_heartbeat_details,json=lastHeartbeatDetails,proto3" json:"last_heartbeat_details,omitempty"`
	LastHeartbeatUpdatedTime      *types.Timestamp `protobuf:"bytes,34,opt,name=last_heartbeat_updated_time,json=lastHeartbeatUpdatedTime,proto3" json:"last_heartbeat_updated_time,omitempty"`
}

func (m *ActivityInfo) Reset()      { *m = ActivityInfo{} }
func (*ActivityInfo) ProtoMessage() {}
func (*ActivityInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{1}
}
func (m *ActivityInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActivityInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityInfo.Merge(m, src)
}
func (m *ActivityInfo) XXX_Size() int {
	return m.Size()
}
func (m *ActivityInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityInfo proto.InternalMessageInfo

func (m *ActivityInfo) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ActivityInfo) GetScheduledEventBatchId() int64 {
	if m != nil {
		return m.ScheduledEventBatchId
	}
	return 0
}

func (m *ActivityInfo) GetScheduledEvent() []byte {
	if m != nil {
		return m.ScheduledEvent
	}
	return nil
}

func (m *ActivityInfo) GetScheduledEventEncoding() string {
	if m != nil {
		return m.ScheduledEventEncoding
	}
	return ""
}

func (m *ActivityInfo) GetScheduledTimeNanos() int64 {
	if m != nil {
		return m.ScheduledTimeNanos
	}
	return 0
}

func (m *ActivityInfo) GetStartedId() int64 {
	if m != nil {
		return m.StartedId
	}
	return 0
}

func (m *ActivityInfo) GetStartedEvent() []byte {
	if m != nil {
		return m.StartedEvent
	}
	return nil
}

func (m *ActivityInfo) GetStartedEventEncoding() string {
	if m != nil {
		return m.StartedEventEncoding
	}
	return ""
}

func (m *ActivityInfo) GetStartedTimeNanos() int64 {
	if m != nil {
		return m.StartedTimeNanos
	}
	return 0
}

func (m *ActivityInfo) GetActivityId() string {
	if m != nil {
		return m.ActivityId
	}
	return ""
}

func (m *ActivityInfo) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *ActivityInfo) GetScheduleToStartTimeoutSeconds() int32 {
	if m != nil {
		return m.ScheduleToStartTimeoutSeconds
	}
	return 0
}

func (m *ActivityInfo) GetScheduleToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.ScheduleToCloseTimeoutSeconds
	}
	return 0
}

func (m *ActivityInfo) GetStartToCloseTimeoutSeconds() int32 {
	if m != nil {
		return m.StartToCloseTimeoutSeconds
	}
	return 0
}

func (m *ActivityInfo) GetHeartbeatTimeoutSeconds() int32 {
	if m != nil {
		return m.HeartbeatTimeoutSeconds
	}
	return 0
}

func (m *ActivityInfo) GetCancelRequested() bool {
	if m != nil {
		return m.CancelRequested
	}
	return false
}

func (m *ActivityInfo) GetCancelRequestId() int64 {
	if m != nil {
		return m.CancelRequestId
	}
	return 0
}

func (m *ActivityInfo) GetTimerTaskStatus() int32 {
	if m != nil {
		return m.TimerTaskStatus
	}
	return 0
}

func (m *ActivityInfo) GetAttempt() int32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *ActivityInfo) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

func (m *ActivityInfo) GetStartedIdentity() string {
	if m != nil {
		return m.StartedIdentity
	}
	return ""
}

func (m *ActivityInfo) GetHasRetryPolicy() bool {
	if m != nil {
		return m.HasRetryPolicy
	}
	return false
}

func (m *ActivityInfo) GetRetryInitialIntervalSeconds() int32 {
	if m != nil {
		return m.RetryInitialIntervalSeconds
	}
	return 0
}

func (m *ActivityInfo) GetRetryMaximumIntervalSeconds() int32 {
	if m != nil {
		return m.RetryMaximumIntervalSeconds
	}
	return 0
}

func (m *ActivityInfo) GetRetryMaximumAttempts() int32 {
	if m != nil {
		return m.RetryMaximumAttempts
	}
	return 0
}

func (m *ActivityInfo) GetRetryExpirationTimeNanos() int64 {
	if m != nil {
		return m.RetryExpirationTimeNanos
	}
	return 0
}

func (m *ActivityInfo) GetRetryBackoffCoefficient() float64 {
	if m != nil {
		return m.RetryBackoffCoefficient
	}
	return 0
}

func (m *ActivityInfo) GetRetryNonRetryableErrorTypes() []string {
	if m != nil {
		return m.RetryNonRetryableErrorTypes
	}
	return nil
}

func (m *ActivityInfo) GetRetryLastFailure() *v1.Failure {
	if m != nil {
		return m.RetryLastFailure
	}
	return nil
}

func (m *ActivityInfo) GetRetryLastWorkerIdentity() string {
	if m != nil {
		return m.RetryLastWorkerIdentity
	}
	return ""
}

func (m *ActivityInfo) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *ActivityInfo) GetScheduleId() int64 {
	if m != nil {
		return m.ScheduleId
	}
	return 0
}

func (m *ActivityInfo) GetLastHeartbeatDetails() *v11.Payloads {
	if m != nil {
		return m.LastHeartbeatDetails
	}
	return nil
}

func (m *ActivityInfo) GetLastHeartbeatUpdatedTime() *types.Timestamp {
	if m != nil {
		return m.LastHeartbeatUpdatedTime
	}
	return nil
}

type ShardInfo struct {
	ShardId                      int32                       `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	RangeId                      int64                       `protobuf:"varint,2,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	Owner                        string                      `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	ReplicationAckLevel          int64                       `protobuf:"varint,4,opt,name=replication_ack_level,json=replicationAckLevel,proto3" json:"replication_ack_level,omitempty"`
	TransferAckLevel             int64                       `protobuf:"varint,5,opt,name=transfer_ack_level,json=transferAckLevel,proto3" json:"transfer_ack_level,omitempty"`
	StolenSinceRenew             int32                       `protobuf:"varint,6,opt,name=stolen_since_renew,json=stolenSinceRenew,proto3" json:"stolen_since_renew,omitempty"`
	UpdatedAt                    *types.Timestamp            `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	TimerAckLevel                *types.Timestamp            `protobuf:"bytes,8,opt,name=timer_ack_level,json=timerAckLevel,proto3" json:"timer_ack_level,omitempty"`
	NamespaceNotificationVersion int64                       `protobuf:"varint,9,opt,name=namespace_notification_version,json=namespaceNotificationVersion,proto3" json:"namespace_notification_version,omitempty"`
	ClusterTransferAckLevel      map[string]int64            `protobuf:"bytes,10,rep,name=cluster_transfer_ack_level,json=clusterTransferAckLevel,proto3" json:"cluster_transfer_ack_level,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ClusterTimerAckLevel         map[string]*types.Timestamp `protobuf:"bytes,11,rep,name=cluster_timer_ack_level,json=clusterTimerAckLevel,proto3" json:"cluster_timer_ack_level,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClusterReplicationLevel      map[string]int64            `protobuf:"bytes,12,rep,name=cluster_replication_level,json=clusterReplicationLevel,proto3" json:"cluster_replication_level,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ReplicationDlqAckLevel       map[string]int64            `protobuf:"bytes,13,rep,name=replication_dlq_ack_level,json=replicationDlqAckLevel,proto3" json:"replication_dlq_ack_level,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *ShardInfo) Reset()      { *m = ShardInfo{} }
func (*ShardInfo) ProtoMessage() {}
func (*ShardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{2}
}
func (m *ShardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardInfo.Merge(m, src)
}
func (m *ShardInfo) XXX_Size() int {
	return m.Size()
}
func (m *ShardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ShardInfo proto.InternalMessageInfo

func (m *ShardInfo) GetShardId() int32 {
	if m != nil {
		return m.ShardId
	}
	return 0
}

func (m *ShardInfo) GetRangeId() int64 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

func (m *ShardInfo) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ShardInfo) GetReplicationAckLevel() int64 {
	if m != nil {
		return m.ReplicationAckLevel
	}
	return 0
}

func (m *ShardInfo) GetTransferAckLevel() int64 {
	if m != nil {
		return m.TransferAckLevel
	}
	return 0
}

func (m *ShardInfo) GetStolenSinceRenew() int32 {
	if m != nil {
		return m.StolenSinceRenew
	}
	return 0
}

func (m *ShardInfo) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *ShardInfo) GetTimerAckLevel() *types.Timestamp {
	if m != nil {
		return m.TimerAckLevel
	}
	return nil
}

func (m *ShardInfo) GetNamespaceNotificationVersion() int64 {
	if m != nil {
		return m.NamespaceNotificationVersion
	}
	return 0
}

func (m *ShardInfo) GetClusterTransferAckLevel() map[string]int64 {
	if m != nil {
		return m.ClusterTransferAckLevel
	}
	return nil
}

func (m *ShardInfo) GetClusterTimerAckLevel() map[string]*types.Timestamp {
	if m != nil {
		return m.ClusterTimerAckLevel
	}
	return nil
}

func (m *ShardInfo) GetClusterReplicationLevel() map[string]int64 {
	if m != nil {
		return m.ClusterReplicationLevel
	}
	return nil
}

func (m *ShardInfo) GetReplicationDlqAckLevel() map[string]int64 {
	if m != nil {
		return m.ReplicationDlqAckLevel
	}
	return nil
}

type ReplicationTaskInfo struct {
	NamespaceId             string                          `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	WorkflowId              string                          `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId                   string                          `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	TaskType                v12.TaskType                    `protobuf:"varint,4,opt,name=task_type,json=taskType,proto3,enum=temporal.server.api.enums.v1.TaskType" json:"task_type,omitempty"`
	Version                 int64                           `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	FirstEventId            int64                           `protobuf:"varint,6,opt,name=first_event_id,json=firstEventId,proto3" json:"first_event_id,omitempty"`
	NextEventId             int64                           `protobuf:"varint,7,opt,name=next_event_id,json=nextEventId,proto3" json:"next_event_id,omitempty"`
	ScheduledId             int64                           `protobuf:"varint,8,opt,name=scheduled_id,json=scheduledId,proto3" json:"scheduled_id,omitempty"`
	EventStoreVersion       int32                           `protobuf:"varint,9,opt,name=event_store_version,json=eventStoreVersion,proto3" json:"event_store_version,omitempty"`
	NewRunEventStoreVersion int32                           `protobuf:"varint,10,opt,name=new_run_event_store_version,json=newRunEventStoreVersion,proto3" json:"new_run_event_store_version,omitempty"`
	BranchToken             []byte                          `protobuf:"bytes,11,opt,name=branch_token,json=branchToken,proto3" json:"branch_token,omitempty"`
	LastReplicationInfo     map[string]*v13.ReplicationInfo `protobuf:"bytes,12,rep,name=last_replication_info,json=lastReplicationInfo,proto3" json:"last_replication_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NewRunBranchToken       []byte                          `protobuf:"bytes,13,opt,name=new_run_branch_token,json=newRunBranchToken,proto3" json:"new_run_branch_token,omitempty"`
	ResetWorkflow           bool                            `protobuf:"varint,14,opt,name=reset_workflow,json=resetWorkflow,proto3" json:"reset_workflow,omitempty"`
	TaskId                  int64                           `protobuf:"varint,15,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *ReplicationTaskInfo) Reset()      { *m = ReplicationTaskInfo{} }
func (*ReplicationTaskInfo) ProtoMessage() {}
func (*ReplicationTaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{3}
}
func (m *ReplicationTaskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationTaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicationTaskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicationTaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationTaskInfo.Merge(m, src)
}
func (m *ReplicationTaskInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationTaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationTaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationTaskInfo proto.InternalMessageInfo

func (m *ReplicationTaskInfo) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *ReplicationTaskInfo) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *ReplicationTaskInfo) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *ReplicationTaskInfo) GetTaskType() v12.TaskType {
	if m != nil {
		return m.TaskType
	}
	return v12.TASK_TYPE_UNSPECIFIED
}

func (m *ReplicationTaskInfo) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ReplicationTaskInfo) GetFirstEventId() int64 {
	if m != nil {
		return m.FirstEventId
	}
	return 0
}

func (m *ReplicationTaskInfo) GetNextEventId() int64 {
	if m != nil {
		return m.NextEventId
	}
	return 0
}

func (m *ReplicationTaskInfo) GetScheduledId() int64 {
	if m != nil {
		return m.ScheduledId
	}
	return 0
}

func (m *ReplicationTaskInfo) GetEventStoreVersion() int32 {
	if m != nil {
		return m.EventStoreVersion
	}
	return 0
}

func (m *ReplicationTaskInfo) GetNewRunEventStoreVersion() int32 {
	if m != nil {
		return m.NewRunEventStoreVersion
	}
	return 0
}

func (m *ReplicationTaskInfo) GetBranchToken() []byte {
	if m != nil {
		return m.BranchToken
	}
	return nil
}

func (m *ReplicationTaskInfo) GetLastReplicationInfo() map[string]*v13.ReplicationInfo {
	if m != nil {
		return m.LastReplicationInfo
	}
	return nil
}

func (m *ReplicationTaskInfo) GetNewRunBranchToken() []byte {
	if m != nil {
		return m.NewRunBranchToken
	}
	return nil
}

func (m *ReplicationTaskInfo) GetResetWorkflow() bool {
	if m != nil {
		return m.ResetWorkflow
	}
	return false
}

func (m *ReplicationTaskInfo) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

type TimerTaskInfo struct {
	NamespaceId         string                  `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	WorkflowId          string                  `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId               string                  `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	TaskType            v12.TaskType            `protobuf:"varint,4,opt,name=task_type,json=taskType,proto3,enum=temporal.server.api.enums.v1.TaskType" json:"task_type,omitempty"`
	TimeoutType         v14.TimeoutType         `protobuf:"varint,5,opt,name=timeout_type,json=timeoutType,proto3,enum=temporal.enums.v1.TimeoutType" json:"timeout_type,omitempty"`
	WorkflowBackoffType v12.WorkflowBackoffType `protobuf:"varint,6,opt,name=workflow_backoff_type,json=workflowBackoffType,proto3,enum=temporal.server.api.enums.v1.WorkflowBackoffType" json:"workflow_backoff_type,omitempty"`
	Version             int64                   `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
	ScheduleAttempt     int64                   `protobuf:"varint,8,opt,name=schedule_attempt,json=scheduleAttempt,proto3" json:"schedule_attempt,omitempty"`
	EventId             int64                   `protobuf:"varint,9,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TaskId              int64                   `protobuf:"varint,10,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	VisibilityTimestamp *types.Timestamp        `protobuf:"bytes,11,opt,name=visibility_timestamp,json=visibilityTimestamp,proto3" json:"visibility_timestamp,omitempty"`
}

func (m *TimerTaskInfo) Reset()      { *m = TimerTaskInfo{} }
func (*TimerTaskInfo) ProtoMessage() {}
func (*TimerTaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{4}
}
func (m *TimerTaskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimerTaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimerTaskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimerTaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimerTaskInfo.Merge(m, src)
}
func (m *TimerTaskInfo) XXX_Size() int {
	return m.Size()
}
func (m *TimerTaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TimerTaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TimerTaskInfo proto.InternalMessageInfo

func (m *TimerTaskInfo) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *TimerTaskInfo) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *TimerTaskInfo) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *TimerTaskInfo) GetTaskType() v12.TaskType {
	if m != nil {
		return m.TaskType
	}
	return v12.TASK_TYPE_UNSPECIFIED
}

func (m *TimerTaskInfo) GetTimeoutType() v14.TimeoutType {
	if m != nil {
		return m.TimeoutType
	}
	return v14.TIMEOUT_TYPE_UNSPECIFIED
}

func (m *TimerTaskInfo) GetWorkflowBackoffType() v12.WorkflowBackoffType {
	if m != nil {
		return m.WorkflowBackoffType
	}
	return v12.WORKFLOW_BACKOFF_TYPE_UNSPECIFIED
}

func (m *TimerTaskInfo) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TimerTaskInfo) GetScheduleAttempt() int64 {
	if m != nil {
		return m.ScheduleAttempt
	}
	return 0
}

func (m *TimerTaskInfo) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *TimerTaskInfo) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *TimerTaskInfo) GetVisibilityTimestamp() *types.Timestamp {
	if m != nil {
		return m.VisibilityTimestamp
	}
	return nil
}

type TransferTaskInfo struct {
	NamespaceId             string           `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	WorkflowId              string           `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId                   string           `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	TaskType                v12.TaskType     `protobuf:"varint,4,opt,name=task_type,json=taskType,proto3,enum=temporal.server.api.enums.v1.TaskType" json:"task_type,omitempty"`
	TargetNamespaceId       string           `protobuf:"bytes,5,opt,name=target_namespace_id,json=targetNamespaceId,proto3" json:"target_namespace_id,omitempty"`
	TargetWorkflowId        string           `protobuf:"bytes,6,opt,name=target_workflow_id,json=targetWorkflowId,proto3" json:"target_workflow_id,omitempty"`
	TargetRunId             string           `protobuf:"bytes,7,opt,name=target_run_id,json=targetRunId,proto3" json:"target_run_id,omitempty"`
	TaskQueue               string           `protobuf:"bytes,8,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	TargetChildWorkflowOnly bool             `protobuf:"varint,9,opt,name=target_child_workflow_only,json=targetChildWorkflowOnly,proto3" json:"target_child_workflow_only,omitempty"`
	ScheduleId              int64            `protobuf:"varint,10,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	Version                 int64            `protobuf:"varint,11,opt,name=version,proto3" json:"version,omitempty"`
	TaskId                  int64            `protobuf:"varint,12,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	VisibilityTimestamp     *types.Timestamp `protobuf:"bytes,13,opt,name=visibility_timestamp,json=visibilityTimestamp,proto3" json:"visibility_timestamp,omitempty"`
	RecordVisibility        bool             `protobuf:"varint,14,opt,name=record_visibility,json=recordVisibility,proto3" json:"record_visibility,omitempty"`
}

func (m *TransferTaskInfo) Reset()      { *m = TransferTaskInfo{} }
func (*TransferTaskInfo) ProtoMessage() {}
func (*TransferTaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{5}
}
func (m *TransferTaskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferTaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferTaskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferTaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferTaskInfo.Merge(m, src)
}
func (m *TransferTaskInfo) XXX_Size() int {
	return m.Size()
}
func (m *TransferTaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferTaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TransferTaskInfo proto.InternalMessageInfo

func (m *TransferTaskInfo) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *TransferTaskInfo) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *TransferTaskInfo) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *TransferTaskInfo) GetTaskType() v12.TaskType {
	if m != nil {
		return m.TaskType
	}
	return v12.TASK_TYPE_UNSPECIFIED
}

func (m *TransferTaskInfo) GetTargetNamespaceId() string {
	if m != nil {
		return m.TargetNamespaceId
	}
	return ""
}

func (m *TransferTaskInfo) GetTargetWorkflowId() string {
	if m != nil {
		return m.TargetWorkflowId
	}
	return ""
}

func (m *TransferTaskInfo) GetTargetRunId() string {
	if m != nil {
		return m.TargetRunId
	}
	return ""
}

func (m *TransferTaskInfo) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

func (m *TransferTaskInfo) GetTargetChildWorkflowOnly() bool {
	if m != nil {
		return m.TargetChildWorkflowOnly
	}
	return false
}

func (m *TransferTaskInfo) GetScheduleId() int64 {
	if m != nil {
		return m.ScheduleId
	}
	return 0
}

func (m *TransferTaskInfo) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TransferTaskInfo) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *TransferTaskInfo) GetVisibilityTimestamp() *types.Timestamp {
	if m != nil {
		return m.VisibilityTimestamp
	}
	return nil
}

func (m *TransferTaskInfo) GetRecordVisibility() bool {
	if m != nil {
		return m.RecordVisibility
	}
	return false
}

// HistoryBranchRange represents a piece of range for a branch.
type HistoryBranchRange struct {
	// BranchId of original branch forked from.
	BranchId string `protobuf:"bytes,1,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	// Beginning node for the range, inclusive.
	BeginNodeId int64 `protobuf:"varint,2,opt,name=begin_node_id,json=beginNodeId,proto3" json:"begin_node_id,omitempty"`
	// Ending node for the range, exclusive.
	EndNodeId int64 `protobuf:"varint,3,opt,name=end_node_id,json=endNodeId,proto3" json:"end_node_id,omitempty"`
}

func (m *HistoryBranchRange) Reset()      { *m = HistoryBranchRange{} }
func (*HistoryBranchRange) ProtoMessage() {}
func (*HistoryBranchRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{6}
}
func (m *HistoryBranchRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoryBranchRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoryBranchRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoryBranchRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryBranchRange.Merge(m, src)
}
func (m *HistoryBranchRange) XXX_Size() int {
	return m.Size()
}
func (m *HistoryBranchRange) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryBranchRange.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryBranchRange proto.InternalMessageInfo

func (m *HistoryBranchRange) GetBranchId() string {
	if m != nil {
		return m.BranchId
	}
	return ""
}

func (m *HistoryBranchRange) GetBeginNodeId() int64 {
	if m != nil {
		return m.BeginNodeId
	}
	return 0
}

func (m *HistoryBranchRange) GetEndNodeId() int64 {
	if m != nil {
		return m.EndNodeId
	}
	return 0
}

// For history persistence to serialize/deserialize branch details.
type HistoryBranch struct {
	TreeId    string                `protobuf:"bytes,1,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty"`
	BranchId  string                `protobuf:"bytes,2,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	Ancestors []*HistoryBranchRange `protobuf:"bytes,3,rep,name=ancestors,proto3" json:"ancestors,omitempty"`
}

func (m *HistoryBranch) Reset()      { *m = HistoryBranch{} }
func (*HistoryBranch) ProtoMessage() {}
func (*HistoryBranch) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{7}
}
func (m *HistoryBranch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoryBranch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoryBranch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoryBranch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryBranch.Merge(m, src)
}
func (m *HistoryBranch) XXX_Size() int {
	return m.Size()
}
func (m *HistoryBranch) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryBranch.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryBranch proto.InternalMessageInfo

func (m *HistoryBranch) GetTreeId() string {
	if m != nil {
		return m.TreeId
	}
	return ""
}

func (m *HistoryBranch) GetBranchId() string {
	if m != nil {
		return m.BranchId
	}
	return ""
}

func (m *HistoryBranch) GetAncestors() []*HistoryBranchRange {
	if m != nil {
		return m.Ancestors
	}
	return nil
}

type HistoryTreeInfo struct {
	BranchInfo *HistoryBranch `protobuf:"bytes,1,opt,name=branch_info,json=branchInfo,proto3" json:"branch_info,omitempty"`
	// For fork operation to prevent race condition of leaking event data when forking branches fail. Also can be used for clean up leaked data.
	ForkTime *types.Timestamp `protobuf:"bytes,2,opt,name=fork_time,json=forkTime,proto3" json:"fork_time,omitempty"`
	// For lookup back to workflow during debugging, also background cleanup when fork operation cannot finish self cleanup due to crash.
	Info string `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *HistoryTreeInfo) Reset()      { *m = HistoryTreeInfo{} }
func (*HistoryTreeInfo) ProtoMessage() {}
func (*HistoryTreeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{8}
}
func (m *HistoryTreeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoryTreeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoryTreeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoryTreeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryTreeInfo.Merge(m, src)
}
func (m *HistoryTreeInfo) XXX_Size() int {
	return m.Size()
}
func (m *HistoryTreeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryTreeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryTreeInfo proto.InternalMessageInfo

func (m *HistoryTreeInfo) GetBranchInfo() *HistoryBranch {
	if m != nil {
		return m.BranchInfo
	}
	return nil
}

func (m *HistoryTreeInfo) GetForkTime() *types.Timestamp {
	if m != nil {
		return m.ForkTime
	}
	return nil
}

func (m *HistoryTreeInfo) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

type TimerInfo struct {
	Version    int64            `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	StartedId  int64            `protobuf:"varint,2,opt,name=started_id,json=startedId,proto3" json:"started_id,omitempty"`
	ExpiryTime *types.Timestamp `protobuf:"bytes,3,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	TaskStatus int64            `protobuf:"varint,4,opt,name=task_status,json=taskStatus,proto3" json:"task_status,omitempty"`
	// timerId serves the purpose of indicating whether a timer task is generated for this timer info.
	TimerId string `protobuf:"bytes,5,opt,name=timer_id,json=timerId,proto3" json:"timer_id,omitempty"`
}

func (m *TimerInfo) Reset()      { *m = TimerInfo{} }
func (*TimerInfo) ProtoMessage() {}
func (*TimerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{9}
}
func (m *TimerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimerInfo.Merge(m, src)
}
func (m *TimerInfo) XXX_Size() int {
	return m.Size()
}
func (m *TimerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TimerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TimerInfo proto.InternalMessageInfo

func (m *TimerInfo) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TimerInfo) GetStartedId() int64 {
	if m != nil {
		return m.StartedId
	}
	return 0
}

func (m *TimerInfo) GetExpiryTime() *types.Timestamp {
	if m != nil {
		return m.ExpiryTime
	}
	return nil
}

func (m *TimerInfo) GetTaskStatus() int64 {
	if m != nil {
		return m.TaskStatus
	}
	return 0
}

func (m *TimerInfo) GetTimerId() string {
	if m != nil {
		return m.TimerId
	}
	return ""
}

type TaskInfo struct {
	NamespaceId string           `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	WorkflowId  string           `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId       string           `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	ScheduleId  int64            `protobuf:"varint,4,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty"`
	CreatedTime *types.Timestamp `protobuf:"bytes,5,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	Expiry      *types.Timestamp `protobuf:"bytes,6,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (m *TaskInfo) Reset()      { *m = TaskInfo{} }
func (*TaskInfo) ProtoMessage() {}
func (*TaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{10}
}
func (m *TaskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskInfo.Merge(m, src)
}
func (m *TaskInfo) XXX_Size() int {
	return m.Size()
}
func (m *TaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TaskInfo proto.InternalMessageInfo

func (m *TaskInfo) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *TaskInfo) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *TaskInfo) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *TaskInfo) GetScheduleId() int64 {
	if m != nil {
		return m.ScheduleId
	}
	return 0
}

func (m *TaskInfo) GetCreatedTime() *types.Timestamp {
	if m != nil {
		return m.CreatedTime
	}
	return nil
}

func (m *TaskInfo) GetExpiry() *types.Timestamp {
	if m != nil {
		return m.Expiry
	}
	return nil
}

type AllocatedTaskInfo struct {
	Data   *TaskInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	TaskId int64     `protobuf:"varint,8,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *AllocatedTaskInfo) Reset()      { *m = AllocatedTaskInfo{} }
func (*AllocatedTaskInfo) ProtoMessage() {}
func (*AllocatedTaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{11}
}
func (m *AllocatedTaskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocatedTaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllocatedTaskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllocatedTaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocatedTaskInfo.Merge(m, src)
}
func (m *AllocatedTaskInfo) XXX_Size() int {
	return m.Size()
}
func (m *AllocatedTaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocatedTaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AllocatedTaskInfo proto.InternalMessageInfo

func (m *AllocatedTaskInfo) GetData() *TaskInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AllocatedTaskInfo) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

type TaskQueueInfo struct {
	NamespaceId string            `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TaskType    v14.TaskQueueType `protobuf:"varint,3,opt,name=task_type,json=taskType,proto3,enum=temporal.enums.v1.TaskQueueType" json:"task_type,omitempty"`
	Kind        v14.TaskQueueKind `protobuf:"varint,5,opt,name=kind,proto3,enum=temporal.enums.v1.TaskQueueKind" json:"kind,omitempty"`
	AckLevel    int64             `protobuf:"varint,6,opt,name=ack_level,json=ackLevel,proto3" json:"ack_level,omitempty"`
	Expiry      *types.Timestamp  `protobuf:"bytes,7,opt,name=expiry,proto3" json:"expiry,omitempty"`
	LastUpdated *types.Timestamp  `protobuf:"bytes,8,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (m *TaskQueueInfo) Reset()      { *m = TaskQueueInfo{} }
func (*TaskQueueInfo) ProtoMessage() {}
func (*TaskQueueInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{12}
}
func (m *TaskQueueInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskQueueInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskQueueInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskQueueInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskQueueInfo.Merge(m, src)
}
func (m *TaskQueueInfo) XXX_Size() int {
	return m.Size()
}
func (m *TaskQueueInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskQueueInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TaskQueueInfo proto.InternalMessageInfo

func (m *TaskQueueInfo) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *TaskQueueInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskQueueInfo) GetTaskType() v14.TaskQueueType {
	if m != nil {
		return m.TaskType
	}
	return v14.TASK_QUEUE_TYPE_UNSPECIFIED
}

func (m *TaskQueueInfo) GetKind() v14.TaskQueueKind {
	if m != nil {
		return m.Kind
	}
	return v14.TASK_QUEUE_KIND_UNSPECIFIED
}

func (m *TaskQueueInfo) GetAckLevel() int64 {
	if m != nil {
		return m.AckLevel
	}
	return 0
}

func (m *TaskQueueInfo) GetExpiry() *types.Timestamp {
	if m != nil {
		return m.Expiry
	}
	return nil
}

func (m *TaskQueueInfo) GetLastUpdated() *types.Timestamp {
	if m != nil {
		return m.LastUpdated
	}
	return nil
}

type SignalInfo struct {
	Version               int64         `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	InitiatedEventBatchId int64         `protobuf:"varint,2,opt,name=initiated_event_batch_id,json=initiatedEventBatchId,proto3" json:"initiated_event_batch_id,omitempty"`
	RequestId             string        `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Name                  string        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Input                 *v11.Payloads `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	Control               string        `protobuf:"bytes,6,opt,name=control,proto3" json:"control,omitempty"`
	InitiatedId           int64         `protobuf:"varint,7,opt,name=initiated_id,json=initiatedId,proto3" json:"initiated_id,omitempty"`
}

func (m *SignalInfo) Reset()      { *m = SignalInfo{} }
func (*SignalInfo) ProtoMessage() {}
func (*SignalInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{13}
}
func (m *SignalInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignalInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignalInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignalInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignalInfo.Merge(m, src)
}
func (m *SignalInfo) XXX_Size() int {
	return m.Size()
}
func (m *SignalInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SignalInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SignalInfo proto.InternalMessageInfo

func (m *SignalInfo) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *SignalInfo) GetInitiatedEventBatchId() int64 {
	if m != nil {
		return m.InitiatedEventBatchId
	}
	return 0
}

func (m *SignalInfo) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *SignalInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SignalInfo) GetInput() *v11.Payloads {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *SignalInfo) GetControl() string {
	if m != nil {
		return m.Control
	}
	return ""
}

func (m *SignalInfo) GetInitiatedId() int64 {
	if m != nil {
		return m.InitiatedId
	}
	return 0
}

type RequestCancelInfo struct {
	Version               int64  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	InitiatedEventBatchId int64  `protobuf:"varint,2,opt,name=initiated_event_batch_id,json=initiatedEventBatchId,proto3" json:"initiated_event_batch_id,omitempty"`
	CancelRequestId       string `protobuf:"bytes,3,opt,name=cancel_request_id,json=cancelRequestId,proto3" json:"cancel_request_id,omitempty"`
	InitiatedId           int64  `protobuf:"varint,4,opt,name=initiated_id,json=initiatedId,proto3" json:"initiated_id,omitempty"`
}

func (m *RequestCancelInfo) Reset()      { *m = RequestCancelInfo{} }
func (*RequestCancelInfo) ProtoMessage() {}
func (*RequestCancelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{14}
}
func (m *RequestCancelInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCancelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCancelInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCancelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCancelInfo.Merge(m, src)
}
func (m *RequestCancelInfo) XXX_Size() int {
	return m.Size()
}
func (m *RequestCancelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCancelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCancelInfo proto.InternalMessageInfo

func (m *RequestCancelInfo) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RequestCancelInfo) GetInitiatedEventBatchId() int64 {
	if m != nil {
		return m.InitiatedEventBatchId
	}
	return 0
}

func (m *RequestCancelInfo) GetCancelRequestId() string {
	if m != nil {
		return m.CancelRequestId
	}
	return ""
}

func (m *RequestCancelInfo) GetInitiatedId() int64 {
	if m != nil {
		return m.InitiatedId
	}
	return 0
}

type WorkflowExecutionState struct {
	CreateRequestId string                      `protobuf:"bytes,1,opt,name=create_request_id,json=createRequestId,proto3" json:"create_request_id,omitempty"`
	RunId           string                      `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	State           v12.WorkflowExecutionState  `protobuf:"varint,3,opt,name=state,proto3,enum=temporal.server.api.enums.v1.WorkflowExecutionState" json:"state,omitempty"`
	Status          v14.WorkflowExecutionStatus `protobuf:"varint,4,opt,name=status,proto3,enum=temporal.enums.v1.WorkflowExecutionStatus" json:"status,omitempty"`
}

func (m *WorkflowExecutionState) Reset()      { *m = WorkflowExecutionState{} }
func (*WorkflowExecutionState) ProtoMessage() {}
func (*WorkflowExecutionState) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{15}
}
func (m *WorkflowExecutionState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionState.Merge(m, src)
}
func (m *WorkflowExecutionState) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionState) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionState.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionState proto.InternalMessageInfo

func (m *WorkflowExecutionState) GetCreateRequestId() string {
	if m != nil {
		return m.CreateRequestId
	}
	return ""
}

func (m *WorkflowExecutionState) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *WorkflowExecutionState) GetState() v12.WorkflowExecutionState {
	if m != nil {
		return m.State
	}
	return v12.WORKFLOW_EXECUTION_STATE_UNSPECIFIED
}

func (m *WorkflowExecutionState) GetStatus() v14.WorkflowExecutionStatus {
	if m != nil {
		return m.Status
	}
	return v14.WORKFLOW_EXECUTION_STATUS_UNSPECIFIED
}

type WorkflowExecutionInfo struct {
	NamespaceId                             string                  `protobuf:"bytes,61,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	WorkflowId                              string                  `protobuf:"bytes,62,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	ParentNamespaceId                       string                  `protobuf:"bytes,1,opt,name=parent_namespace_id,json=parentNamespaceId,proto3" json:"parent_namespace_id,omitempty"`
	ParentWorkflowId                        string                  `protobuf:"bytes,2,opt,name=parent_workflow_id,json=parentWorkflowId,proto3" json:"parent_workflow_id,omitempty"`
	ParentRunId                             string                  `protobuf:"bytes,3,opt,name=parent_run_id,json=parentRunId,proto3" json:"parent_run_id,omitempty"`
	InitiatedId                             int64                   `protobuf:"varint,4,opt,name=initiated_id,json=initiatedId,proto3" json:"initiated_id,omitempty"`
	CompletionEventBatchId                  int64                   `protobuf:"varint,5,opt,name=completion_event_batch_id,json=completionEventBatchId,proto3" json:"completion_event_batch_id,omitempty"`
	CompletionEvent                         []byte                  `protobuf:"bytes,6,opt,name=completion_event,json=completionEvent,proto3" json:"completion_event,omitempty"`
	CompletionEventEncoding                 string                  `protobuf:"bytes,7,opt,name=completion_event_encoding,json=completionEventEncoding,proto3" json:"completion_event_encoding,omitempty"`
	TaskQueue                               string                  `protobuf:"bytes,8,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	WorkflowTypeName                        string                  `protobuf:"bytes,9,opt,name=workflow_type_name,json=workflowTypeName,proto3" json:"workflow_type_name,omitempty"`
	WorkflowExecutionTimeoutSeconds         int32                   `protobuf:"varint,10,opt,name=workflow_execution_timeout_seconds,json=workflowExecutionTimeoutSeconds,proto3" json:"workflow_execution_timeout_seconds,omitempty"`
	WorkflowRunTimeoutSeconds               int32                   `protobuf:"varint,11,opt,name=workflow_run_timeout_seconds,json=workflowRunTimeoutSeconds,proto3" json:"workflow_run_timeout_seconds,omitempty"`
	WorkflowTaskTimeoutSeconds              int32                   `protobuf:"varint,12,opt,name=workflow_task_timeout_seconds,json=workflowTaskTimeoutSeconds,proto3" json:"workflow_task_timeout_seconds,omitempty"`
	StartVersion                            int64                   `protobuf:"varint,15,opt,name=start_version,json=startVersion,proto3" json:"start_version,omitempty"`
	CurrentVersion                          int64                   `protobuf:"varint,16,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty"`
	ReplicationData                         *ReplicationData        `protobuf:"bytes,17,opt,name=replication_data,json=replicationData,proto3" json:"replication_data,omitempty"`
	LastEventTaskId                         int64                   `protobuf:"varint,19,opt,name=last_event_task_id,json=lastEventTaskId,proto3" json:"last_event_task_id,omitempty"`
	LastFirstEventId                        int64                   `protobuf:"varint,20,opt,name=last_first_event_id,json=lastFirstEventId,proto3" json:"last_first_event_id,omitempty"`
	LastProcessedEvent                      int64                   `protobuf:"varint,21,opt,name=last_processed_event,json=lastProcessedEvent,proto3" json:"last_processed_event,omitempty"`
	StartTimeNanos                          int64                   `protobuf:"varint,22,opt,name=start_time_nanos,json=startTimeNanos,proto3" json:"start_time_nanos,omitempty"`
	LastUpdatedTimeNanos                    int64                   `protobuf:"varint,23,opt,name=last_updated_time_nanos,json=lastUpdatedTimeNanos,proto3" json:"last_updated_time_nanos,omitempty"`
	DecisionVersion                         int64                   `protobuf:"varint,24,opt,name=decision_version,json=decisionVersion,proto3" json:"decision_version,omitempty"`
	DecisionScheduleId                      int64                   `protobuf:"varint,25,opt,name=decision_schedule_id,json=decisionScheduleId,proto3" json:"decision_schedule_id,omitempty"`
	DecisionStartedId                       int64                   `protobuf:"varint,26,opt,name=decision_started_id,json=decisionStartedId,proto3" json:"decision_started_id,omitempty"`
	DecisionTimeout                         int32                   `protobuf:"varint,27,opt,name=decision_timeout,json=decisionTimeout,proto3" json:"decision_timeout,omitempty"`
	DecisionAttempt                         int64                   `protobuf:"varint,28,opt,name=decision_attempt,json=decisionAttempt,proto3" json:"decision_attempt,omitempty"`
	DecisionStartedTimestampNanos           int64                   `protobuf:"varint,29,opt,name=decision_started_timestamp_nanos,json=decisionStartedTimestampNanos,proto3" json:"decision_started_timestamp_nanos,omitempty"`
	DecisionScheduledTimestampNanos         int64                   `protobuf:"varint,30,opt,name=decision_scheduled_timestamp_nanos,json=decisionScheduledTimestampNanos,proto3" json:"decision_scheduled_timestamp_nanos,omitempty"`
	CancelRequested                         bool                    `protobuf:"varint,31,opt,name=cancel_requested,json=cancelRequested,proto3" json:"cancel_requested,omitempty"`
	DecisionOriginalScheduledTimestampNanos int64                   `protobuf:"varint,32,opt,name=decision_original_scheduled_timestamp_nanos,json=decisionOriginalScheduledTimestampNanos,proto3" json:"decision_original_scheduled_timestamp_nanos,omitempty"`
	DecisionRequestId                       string                  `protobuf:"bytes,34,opt,name=decision_request_id,json=decisionRequestId,proto3" json:"decision_request_id,omitempty"`
	CancelRequestId                         string                  `protobuf:"bytes,35,opt,name=cancel_request_id,json=cancelRequestId,proto3" json:"cancel_request_id,omitempty"`
	StickyTaskQueue                         string                  `protobuf:"bytes,36,opt,name=sticky_task_queue,json=stickyTaskQueue,proto3" json:"sticky_task_queue,omitempty"`
	StickyScheduleToStartTimeout            int64                   `protobuf:"varint,37,opt,name=sticky_schedule_to_start_timeout,json=stickyScheduleToStartTimeout,proto3" json:"sticky_schedule_to_start_timeout,omitempty"`
	RetryAttempt                            int64                   `protobuf:"varint,38,opt,name=retry_attempt,json=retryAttempt,proto3" json:"retry_attempt,omitempty"`
	RetryInitialIntervalSeconds             int32                   `protobuf:"varint,39,opt,name=retry_initial_interval_seconds,json=retryInitialIntervalSeconds,proto3" json:"retry_initial_interval_seconds,omitempty"`
	RetryMaximumIntervalSeconds             int32                   `protobuf:"varint,40,opt,name=retry_maximum_interval_seconds,json=retryMaximumIntervalSeconds,proto3" json:"retry_maximum_interval_seconds,omitempty"`
	RetryMaximumAttempts                    int32                   `protobuf:"varint,41,opt,name=retry_maximum_attempts,json=retryMaximumAttempts,proto3" json:"retry_maximum_attempts,omitempty"`
	RetryBackoffCoefficient                 float64                 `protobuf:"fixed64,42,opt,name=retry_backoff_coefficient,json=retryBackoffCoefficient,proto3" json:"retry_backoff_coefficient,omitempty"`
	RetryExpirationTimeNanos                int64                   `protobuf:"varint,43,opt,name=retry_expiration_time_nanos,json=retryExpirationTimeNanos,proto3" json:"retry_expiration_time_nanos,omitempty"`
	RetryNonRetryableErrorTypes             []string                `protobuf:"bytes,44,rep,name=retry_non_retryable_error_types,json=retryNonRetryableErrorTypes,proto3" json:"retry_non_retryable_error_types,omitempty"`
	HasRetryPolicy                          bool                    `protobuf:"varint,45,opt,name=has_retry_policy,json=hasRetryPolicy,proto3" json:"has_retry_policy,omitempty"`
	CronSchedule                            string                  `protobuf:"bytes,46,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	EventStoreVersion                       int32                   `protobuf:"varint,47,opt,name=event_store_version,json=eventStoreVersion,proto3" json:"event_store_version,omitempty"`
	EventBranchToken                        []byte                  `protobuf:"bytes,48,opt,name=event_branch_token,json=eventBranchToken,proto3" json:"event_branch_token,omitempty"`
	SignalCount                             int64                   `protobuf:"varint,49,opt,name=signal_count,json=signalCount,proto3" json:"signal_count,omitempty"`
	HistorySize                             int64                   `protobuf:"varint,50,opt,name=history_size,json=historySize,proto3" json:"history_size,omitempty"`
	ClientLibraryVersion                    string                  `protobuf:"bytes,51,opt,name=client_library_version,json=clientLibraryVersion,proto3" json:"client_library_version,omitempty"`
	ClientFeatureVersion                    string                  `protobuf:"bytes,52,opt,name=client_feature_version,json=clientFeatureVersion,proto3" json:"client_feature_version,omitempty"`
	ClientImpl                              string                  `protobuf:"bytes,53,opt,name=client_impl,json=clientImpl,proto3" json:"client_impl,omitempty"`
	AutoResetPoints                         []byte                  `protobuf:"bytes,54,opt,name=auto_reset_points,json=autoResetPoints,proto3" json:"auto_reset_points,omitempty"`
	AutoResetPointsEncoding                 string                  `protobuf:"bytes,55,opt,name=auto_reset_points_encoding,json=autoResetPointsEncoding,proto3" json:"auto_reset_points_encoding,omitempty"`
	SearchAttributes                        map[string]*v11.Payload `protobuf:"bytes,56,rep,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Memo                                    map[string]*v11.Payload `protobuf:"bytes,57,rep,name=memo,proto3" json:"memo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VersionHistories                        []byte                  `protobuf:"bytes,58,opt,name=version_histories,json=versionHistories,proto3" json:"version_histories,omitempty"`
	VersionHistoriesEncoding                string                  `protobuf:"bytes,59,opt,name=version_histories_encoding,json=versionHistoriesEncoding,proto3" json:"version_histories_encoding,omitempty"`
}

func (m *WorkflowExecutionInfo) Reset()      { *m = WorkflowExecutionInfo{} }
func (*WorkflowExecutionInfo) ProtoMessage() {}
func (*WorkflowExecutionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{16}
}
func (m *WorkflowExecutionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowExecutionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowExecutionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowExecutionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowExecutionInfo.Merge(m, src)
}
func (m *WorkflowExecutionInfo) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowExecutionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowExecutionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowExecutionInfo proto.InternalMessageInfo

func (m *WorkflowExecutionInfo) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *WorkflowExecutionInfo) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *WorkflowExecutionInfo) GetParentNamespaceId() string {
	if m != nil {
		return m.ParentNamespaceId
	}
	return ""
}

func (m *WorkflowExecutionInfo) GetParentWorkflowId() string {
	if m != nil {
		return m.ParentWorkflowId
	}
	return ""
}

func (m *WorkflowExecutionInfo) GetParentRunId() string {
	if m != nil {
		return m.ParentRunId
	}
	return ""
}

func (m *WorkflowExecutionInfo) GetInitiatedId() int64 {
	if m != nil {
		return m.InitiatedId
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetCompletionEventBatchId() int64 {
	if m != nil {
		return m.CompletionEventBatchId
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetCompletionEvent() []byte {
	if m != nil {
		return m.CompletionEvent
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetCompletionEventEncoding() string {
	if m != nil {
		return m.CompletionEventEncoding
	}
	return ""
}

func (m *WorkflowExecutionInfo) GetTaskQueue() string {
	if m != nil {
		return m.TaskQueue
	}
	return ""
}

func (m *WorkflowExecutionInfo) GetWorkflowTypeName() string {
	if m != nil {
		return m.WorkflowTypeName
	}
	return ""
}

func (m *WorkflowExecutionInfo) GetWorkflowExecutionTimeoutSeconds() int32 {
	if m != nil {
		return m.WorkflowExecutionTimeoutSeconds
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetWorkflowRunTimeoutSeconds() int32 {
	if m != nil {
		return m.WorkflowRunTimeoutSeconds
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetWorkflowTaskTimeoutSeconds() int32 {
	if m != nil {
		return m.WorkflowTaskTimeoutSeconds
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetStartVersion() int64 {
	if m != nil {
		return m.StartVersion
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetCurrentVersion() int64 {
	if m != nil {
		return m.CurrentVersion
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetReplicationData() *ReplicationData {
	if m != nil {
		return m.ReplicationData
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetLastEventTaskId() int64 {
	if m != nil {
		return m.LastEventTaskId
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetLastFirstEventId() int64 {
	if m != nil {
		return m.LastFirstEventId
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetLastProcessedEvent() int64 {
	if m != nil {
		return m.LastProcessedEvent
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetStartTimeNanos() int64 {
	if m != nil {
		return m.StartTimeNanos
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetLastUpdatedTimeNanos() int64 {
	if m != nil {
		return m.LastUpdatedTimeNanos
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetDecisionVersion() int64 {
	if m != nil {
		return m.DecisionVersion
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetDecisionScheduleId() int64 {
	if m != nil {
		return m.DecisionScheduleId
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetDecisionStartedId() int64 {
	if m != nil {
		return m.DecisionStartedId
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetDecisionTimeout() int32 {
	if m != nil {
		return m.DecisionTimeout
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetDecisionAttempt() int64 {
	if m != nil {
		return m.DecisionAttempt
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetDecisionStartedTimestampNanos() int64 {
	if m != nil {
		return m.DecisionStartedTimestampNanos
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetDecisionScheduledTimestampNanos() int64 {
	if m != nil {
		return m.DecisionScheduledTimestampNanos
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetCancelRequested() bool {
	if m != nil {
		return m.CancelRequested
	}
	return false
}

func (m *WorkflowExecutionInfo) GetDecisionOriginalScheduledTimestampNanos() int64 {
	if m != nil {
		return m.DecisionOriginalScheduledTimestampNanos
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetDecisionRequestId() string {
	if m != nil {
		return m.DecisionRequestId
	}
	return ""
}

func (m *WorkflowExecutionInfo) GetCancelRequestId() string {
	if m != nil {
		return m.CancelRequestId
	}
	return ""
}

func (m *WorkflowExecutionInfo) GetStickyTaskQueue() string {
	if m != nil {
		return m.StickyTaskQueue
	}
	return ""
}

func (m *WorkflowExecutionInfo) GetStickyScheduleToStartTimeout() int64 {
	if m != nil {
		return m.StickyScheduleToStartTimeout
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetRetryAttempt() int64 {
	if m != nil {
		return m.RetryAttempt
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetRetryInitialIntervalSeconds() int32 {
	if m != nil {
		return m.RetryInitialIntervalSeconds
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetRetryMaximumIntervalSeconds() int32 {
	if m != nil {
		return m.RetryMaximumIntervalSeconds
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetRetryMaximumAttempts() int32 {
	if m != nil {
		return m.RetryMaximumAttempts
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetRetryBackoffCoefficient() float64 {
	if m != nil {
		return m.RetryBackoffCoefficient
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetRetryExpirationTimeNanos() int64 {
	if m != nil {
		return m.RetryExpirationTimeNanos
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetRetryNonRetryableErrorTypes() []string {
	if m != nil {
		return m.RetryNonRetryableErrorTypes
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetHasRetryPolicy() bool {
	if m != nil {
		return m.HasRetryPolicy
	}
	return false
}

func (m *WorkflowExecutionInfo) GetCronSchedule() string {
	if m != nil {
		return m.CronSchedule
	}
	return ""
}

func (m *WorkflowExecutionInfo) GetEventStoreVersion() int32 {
	if m != nil {
		return m.EventStoreVersion
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetEventBranchToken() []byte {
	if m != nil {
		return m.EventBranchToken
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetSignalCount() int64 {
	if m != nil {
		return m.SignalCount
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetHistorySize() int64 {
	if m != nil {
		return m.HistorySize
	}
	return 0
}

func (m *WorkflowExecutionInfo) GetClientLibraryVersion() string {
	if m != nil {
		return m.ClientLibraryVersion
	}
	return ""
}

func (m *WorkflowExecutionInfo) GetClientFeatureVersion() string {
	if m != nil {
		return m.ClientFeatureVersion
	}
	return ""
}

func (m *WorkflowExecutionInfo) GetClientImpl() string {
	if m != nil {
		return m.ClientImpl
	}
	return ""
}

func (m *WorkflowExecutionInfo) GetAutoResetPoints() []byte {
	if m != nil {
		return m.AutoResetPoints
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetAutoResetPointsEncoding() string {
	if m != nil {
		return m.AutoResetPointsEncoding
	}
	return ""
}

func (m *WorkflowExecutionInfo) GetSearchAttributes() map[string]*v11.Payload {
	if m != nil {
		return m.SearchAttributes
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetMemo() map[string]*v11.Payload {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetVersionHistories() []byte {
	if m != nil {
		return m.VersionHistories
	}
	return nil
}

func (m *WorkflowExecutionInfo) GetVersionHistoriesEncoding() string {
	if m != nil {
		return m.VersionHistoriesEncoding
	}
	return ""
}

type Checksum struct {
	Version int32              `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Flavor  v12.ChecksumFlavor `protobuf:"varint,2,opt,name=flavor,proto3,enum=temporal.server.api.enums.v1.ChecksumFlavor" json:"flavor,omitempty"`
	Value   []byte             `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Checksum) Reset()      { *m = Checksum{} }
func (*Checksum) ProtoMessage() {}
func (*Checksum) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{17}
}
func (m *Checksum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Checksum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Checksum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Checksum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Checksum.Merge(m, src)
}
func (m *Checksum) XXX_Size() int {
	return m.Size()
}
func (m *Checksum) XXX_DiscardUnknown() {
	xxx_messageInfo_Checksum.DiscardUnknown(m)
}

var xxx_messageInfo_Checksum proto.InternalMessageInfo

func (m *Checksum) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Checksum) GetFlavor() v12.ChecksumFlavor {
	if m != nil {
		return m.Flavor
	}
	return v12.CHECKSUM_FLAVOR_UNSPECIFIED
}

func (m *Checksum) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type ChildExecutionInfo struct {
	Version                int64                 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	InitiatedEventBatchId  int64                 `protobuf:"varint,2,opt,name=initiated_event_batch_id,json=initiatedEventBatchId,proto3" json:"initiated_event_batch_id,omitempty"`
	StartedId              int64                 `protobuf:"varint,3,opt,name=started_id,json=startedId,proto3" json:"started_id,omitempty"`
	InitiatedEvent         []byte                `protobuf:"bytes,4,opt,name=initiated_event,json=initiatedEvent,proto3" json:"initiated_event,omitempty"`
	InitiatedEventEncoding string                `protobuf:"bytes,5,opt,name=initiated_event_encoding,json=initiatedEventEncoding,proto3" json:"initiated_event_encoding,omitempty"`
	StartedWorkflowId      string                `protobuf:"bytes,6,opt,name=started_workflow_id,json=startedWorkflowId,proto3" json:"started_workflow_id,omitempty"`
	StartedRunId           string                `protobuf:"bytes,7,opt,name=started_run_id,json=startedRunId,proto3" json:"started_run_id,omitempty"`
	StartedEvent           []byte                `protobuf:"bytes,8,opt,name=started_event,json=startedEvent,proto3" json:"started_event,omitempty"`
	StartedEventEncoding   string                `protobuf:"bytes,9,opt,name=started_event_encoding,json=startedEventEncoding,proto3" json:"started_event_encoding,omitempty"`
	CreateRequestId        string                `protobuf:"bytes,10,opt,name=create_request_id,json=createRequestId,proto3" json:"create_request_id,omitempty"`
	Namespace              string                `protobuf:"bytes,11,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowTypeName       string                `protobuf:"bytes,12,opt,name=workflow_type_name,json=workflowTypeName,proto3" json:"workflow_type_name,omitempty"`
	ParentClosePolicy      v14.ParentClosePolicy `protobuf:"varint,13,opt,name=parent_close_policy,json=parentClosePolicy,proto3,enum=temporal.enums.v1.ParentClosePolicy" json:"parent_close_policy,omitempty"`
	InitiatedId            int64                 `protobuf:"varint,14,opt,name=initiated_id,json=initiatedId,proto3" json:"initiated_id,omitempty"`
}

func (m *ChildExecutionInfo) Reset()      { *m = ChildExecutionInfo{} }
func (*ChildExecutionInfo) ProtoMessage() {}
func (*ChildExecutionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{18}
}
func (m *ChildExecutionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChildExecutionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChildExecutionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChildExecutionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChildExecutionInfo.Merge(m, src)
}
func (m *ChildExecutionInfo) XXX_Size() int {
	return m.Size()
}
func (m *ChildExecutionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChildExecutionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChildExecutionInfo proto.InternalMessageInfo

func (m *ChildExecutionInfo) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ChildExecutionInfo) GetInitiatedEventBatchId() int64 {
	if m != nil {
		return m.InitiatedEventBatchId
	}
	return 0
}

func (m *ChildExecutionInfo) GetStartedId() int64 {
	if m != nil {
		return m.StartedId
	}
	return 0
}

func (m *ChildExecutionInfo) GetInitiatedEvent() []byte {
	if m != nil {
		return m.InitiatedEvent
	}
	return nil
}

func (m *ChildExecutionInfo) GetInitiatedEventEncoding() string {
	if m != nil {
		return m.InitiatedEventEncoding
	}
	return ""
}

func (m *ChildExecutionInfo) GetStartedWorkflowId() string {
	if m != nil {
		return m.StartedWorkflowId
	}
	return ""
}

func (m *ChildExecutionInfo) GetStartedRunId() string {
	if m != nil {
		return m.StartedRunId
	}
	return ""
}

func (m *ChildExecutionInfo) GetStartedEvent() []byte {
	if m != nil {
		return m.StartedEvent
	}
	return nil
}

func (m *ChildExecutionInfo) GetStartedEventEncoding() string {
	if m != nil {
		return m.StartedEventEncoding
	}
	return ""
}

func (m *ChildExecutionInfo) GetCreateRequestId() string {
	if m != nil {
		return m.CreateRequestId
	}
	return ""
}

func (m *ChildExecutionInfo) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ChildExecutionInfo) GetWorkflowTypeName() string {
	if m != nil {
		return m.WorkflowTypeName
	}
	return ""
}

func (m *ChildExecutionInfo) GetParentClosePolicy() v14.ParentClosePolicy {
	if m != nil {
		return m.ParentClosePolicy
	}
	return v14.PARENT_CLOSE_POLICY_UNSPECIFIED
}

func (m *ChildExecutionInfo) GetInitiatedId() int64 {
	if m != nil {
		return m.InitiatedId
	}
	return 0
}

type NamespaceDetail struct {
	Info                        *NamespaceInfo              `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Config                      *NamespaceConfig            `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	ReplicationConfig           *NamespaceReplicationConfig `protobuf:"bytes,3,opt,name=replication_config,json=replicationConfig,proto3" json:"replication_config,omitempty"`
	ConfigVersion               int64                       `protobuf:"varint,9,opt,name=config_version,json=configVersion,proto3" json:"config_version,omitempty"`
	FailoverNotificationVersion int64                       `protobuf:"varint,11,opt,name=failover_notification_version,json=failoverNotificationVersion,proto3" json:"failover_notification_version,omitempty"`
	FailoverVersion             int64                       `protobuf:"varint,12,opt,name=failover_version,json=failoverVersion,proto3" json:"failover_version,omitempty"`
	FailoverEndTime             int64                       `protobuf:"varint,13,opt,name=failover_end_time,json=failoverEndTime,proto3" json:"failover_end_time,omitempty"`
}

func (m *NamespaceDetail) Reset()      { *m = NamespaceDetail{} }
func (*NamespaceDetail) ProtoMessage() {}
func (*NamespaceDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{19}
}
func (m *NamespaceDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceDetail.Merge(m, src)
}
func (m *NamespaceDetail) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceDetail.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceDetail proto.InternalMessageInfo

func (m *NamespaceDetail) GetInfo() *NamespaceInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *NamespaceDetail) GetConfig() *NamespaceConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *NamespaceDetail) GetReplicationConfig() *NamespaceReplicationConfig {
	if m != nil {
		return m.ReplicationConfig
	}
	return nil
}

func (m *NamespaceDetail) GetConfigVersion() int64 {
	if m != nil {
		return m.ConfigVersion
	}
	return 0
}

func (m *NamespaceDetail) GetFailoverNotificationVersion() int64 {
	if m != nil {
		return m.FailoverNotificationVersion
	}
	return 0
}

func (m *NamespaceDetail) GetFailoverVersion() int64 {
	if m != nil {
		return m.FailoverVersion
	}
	return 0
}

func (m *NamespaceDetail) GetFailoverEndTime() int64 {
	if m != nil {
		return m.FailoverEndTime
	}
	return 0
}

type NamespaceInfo struct {
	Id          string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status      v14.NamespaceStatus `protobuf:"varint,2,opt,name=status,proto3,enum=temporal.enums.v1.NamespaceStatus" json:"status,omitempty"`
	Name        string              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string              `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Owner       string              `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
	Data        map[string]string   `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *NamespaceInfo) Reset()      { *m = NamespaceInfo{} }
func (*NamespaceInfo) ProtoMessage() {}
func (*NamespaceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{20}
}
func (m *NamespaceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceInfo.Merge(m, src)
}
func (m *NamespaceInfo) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceInfo proto.InternalMessageInfo

func (m *NamespaceInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NamespaceInfo) GetStatus() v14.NamespaceStatus {
	if m != nil {
		return m.Status
	}
	return v14.NAMESPACE_STATUS_UNSPECIFIED
}

func (m *NamespaceInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NamespaceInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NamespaceInfo) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *NamespaceInfo) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type NamespaceReplicationConfig struct {
	ActiveClusterName string   `protobuf:"bytes,1,opt,name=active_cluster_name,json=activeClusterName,proto3" json:"active_cluster_name,omitempty"`
	Clusters          []string `protobuf:"bytes,2,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (m *NamespaceReplicationConfig) Reset()      { *m = NamespaceReplicationConfig{} }
func (*NamespaceReplicationConfig) ProtoMessage() {}
func (*NamespaceReplicationConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{21}
}
func (m *NamespaceReplicationConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceReplicationConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceReplicationConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceReplicationConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceReplicationConfig.Merge(m, src)
}
func (m *NamespaceReplicationConfig) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceReplicationConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceReplicationConfig.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceReplicationConfig proto.InternalMessageInfo

func (m *NamespaceReplicationConfig) GetActiveClusterName() string {
	if m != nil {
		return m.ActiveClusterName
	}
	return ""
}

func (m *NamespaceReplicationConfig) GetClusters() []string {
	if m != nil {
		return m.Clusters
	}
	return nil
}

type NamespaceConfig struct {
	RetentionDays            int32              `protobuf:"varint,1,opt,name=retention_days,json=retentionDays,proto3" json:"retention_days,omitempty"`
	EmitMetric               bool               `protobuf:"varint,2,opt,name=emit_metric,json=emitMetric,proto3" json:"emit_metric,omitempty"`
	ArchivalBucket           string             `protobuf:"bytes,3,opt,name=archival_bucket,json=archivalBucket,proto3" json:"archival_bucket,omitempty"`
	BadBinaries              *v15.BadBinaries   `protobuf:"bytes,16,opt,name=bad_binaries,json=badBinaries,proto3" json:"bad_binaries,omitempty"`
	HistoryArchivalStatus    v14.ArchivalStatus `protobuf:"varint,18,opt,name=history_archival_status,json=historyArchivalStatus,proto3,enum=temporal.enums.v1.ArchivalStatus" json:"history_archival_status,omitempty"`
	HistoryArchivalUri       string             `protobuf:"bytes,19,opt,name=history_archival_uri,json=historyArchivalUri,proto3" json:"history_archival_uri,omitempty"`
	VisibilityArchivalStatus v14.ArchivalStatus `protobuf:"varint,20,opt,name=visibility_archival_status,json=visibilityArchivalStatus,proto3,enum=temporal.enums.v1.ArchivalStatus" json:"visibility_archival_status,omitempty"`
	VisibilityArchivalUri    string             `protobuf:"bytes,21,opt,name=visibility_archival_uri,json=visibilityArchivalUri,proto3" json:"visibility_archival_uri,omitempty"`
}

func (m *NamespaceConfig) Reset()      { *m = NamespaceConfig{} }
func (*NamespaceConfig) ProtoMessage() {}
func (*NamespaceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{22}
}
func (m *NamespaceConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceConfig.Merge(m, src)
}
func (m *NamespaceConfig) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceConfig proto.InternalMessageInfo

func (m *NamespaceConfig) GetRetentionDays() int32 {
	if m != nil {
		return m.RetentionDays
	}
	return 0
}

func (m *NamespaceConfig) GetEmitMetric() bool {
	if m != nil {
		return m.EmitMetric
	}
	return false
}

func (m *NamespaceConfig) GetArchivalBucket() string {
	if m != nil {
		return m.ArchivalBucket
	}
	return ""
}

func (m *NamespaceConfig) GetBadBinaries() *v15.BadBinaries {
	if m != nil {
		return m.BadBinaries
	}
	return nil
}

func (m *NamespaceConfig) GetHistoryArchivalStatus() v14.ArchivalStatus {
	if m != nil {
		return m.HistoryArchivalStatus
	}
	return v14.ARCHIVAL_STATUS_UNSPECIFIED
}

func (m *NamespaceConfig) GetHistoryArchivalUri() string {
	if m != nil {
		return m.HistoryArchivalUri
	}
	return ""
}

func (m *NamespaceConfig) GetVisibilityArchivalStatus() v14.ArchivalStatus {
	if m != nil {
		return m.VisibilityArchivalStatus
	}
	return v14.ARCHIVAL_STATUS_UNSPECIFIED
}

func (m *NamespaceConfig) GetVisibilityArchivalUri() string {
	if m != nil {
		return m.VisibilityArchivalUri
	}
	return ""
}

// ReplicationData represents mutable state information for global namespaces.
// This information is used by replication protocol when applying events from remote clusters
// only used in cassandra
type ReplicationData struct {
	LastWriteEventId    int64                           `protobuf:"varint,1,opt,name=last_write_event_id,json=lastWriteEventId,proto3" json:"last_write_event_id,omitempty"`
	LastReplicationInfo map[string]*v13.ReplicationInfo `protobuf:"bytes,2,rep,name=last_replication_info,json=lastReplicationInfo,proto3" json:"last_replication_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ReplicationData) Reset()      { *m = ReplicationData{} }
func (*ReplicationData) ProtoMessage() {}
func (*ReplicationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{23}
}
func (m *ReplicationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicationData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationData.Merge(m, src)
}
func (m *ReplicationData) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationData) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationData.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationData proto.InternalMessageInfo

func (m *ReplicationData) GetLastWriteEventId() int64 {
	if m != nil {
		return m.LastWriteEventId
	}
	return 0
}

func (m *ReplicationData) GetLastReplicationInfo() map[string]*v13.ReplicationInfo {
	if m != nil {
		return m.LastReplicationInfo
	}
	return nil
}

type ReplicationVersions struct {
	StartVersion     *types.Int64Value `protobuf:"bytes,15,opt,name=start_version,json=startVersion,proto3" json:"start_version,omitempty"`
	LastWriteVersion *types.Int64Value `protobuf:"bytes,16,opt,name=last_write_version,json=lastWriteVersion,proto3" json:"last_write_version,omitempty"`
}

func (m *ReplicationVersions) Reset()      { *m = ReplicationVersions{} }
func (*ReplicationVersions) ProtoMessage() {}
func (*ReplicationVersions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef806e155800e59a, []int{24}
}
func (m *ReplicationVersions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationVersions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicationVersions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicationVersions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationVersions.Merge(m, src)
}
func (m *ReplicationVersions) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationVersions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationVersions.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationVersions proto.InternalMessageInfo

func (m *ReplicationVersions) GetStartVersion() *types.Int64Value {
	if m != nil {
		return m.StartVersion
	}
	return nil
}

func (m *ReplicationVersions) GetLastWriteVersion() *types.Int64Value {
	if m != nil {
		return m.LastWriteVersion
	}
	return nil
}

func init() {
	proto.RegisterType((*ImmutableClusterMetadata)(nil), "temporal.server.api.persistenceblobs.v1.ImmutableClusterMetadata")
	proto.RegisterType((*ActivityInfo)(nil), "temporal.server.api.persistenceblobs.v1.ActivityInfo")
	proto.RegisterType((*ShardInfo)(nil), "temporal.server.api.persistenceblobs.v1.ShardInfo")
	proto.RegisterMapType((map[string]int64)(nil), "temporal.server.api.persistenceblobs.v1.ShardInfo.ClusterReplicationLevelEntry")
	proto.RegisterMapType((map[string]*types.Timestamp)(nil), "temporal.server.api.persistenceblobs.v1.ShardInfo.ClusterTimerAckLevelEntry")
	proto.RegisterMapType((map[string]int64)(nil), "temporal.server.api.persistenceblobs.v1.ShardInfo.ClusterTransferAckLevelEntry")
	proto.RegisterMapType((map[string]int64)(nil), "temporal.server.api.persistenceblobs.v1.ShardInfo.ReplicationDlqAckLevelEntry")
	proto.RegisterType((*ReplicationTaskInfo)(nil), "temporal.server.api.persistenceblobs.v1.ReplicationTaskInfo")
	proto.RegisterMapType((map[string]*v13.ReplicationInfo)(nil), "temporal.server.api.persistenceblobs.v1.ReplicationTaskInfo.LastReplicationInfoEntry")
	proto.RegisterType((*TimerTaskInfo)(nil), "temporal.server.api.persistenceblobs.v1.TimerTaskInfo")
	proto.RegisterType((*TransferTaskInfo)(nil), "temporal.server.api.persistenceblobs.v1.TransferTaskInfo")
	proto.RegisterType((*HistoryBranchRange)(nil), "temporal.server.api.persistenceblobs.v1.HistoryBranchRange")
	proto.RegisterType((*HistoryBranch)(nil), "temporal.server.api.persistenceblobs.v1.HistoryBranch")
	proto.RegisterType((*HistoryTreeInfo)(nil), "temporal.server.api.persistenceblobs.v1.HistoryTreeInfo")
	proto.RegisterType((*TimerInfo)(nil), "temporal.server.api.persistenceblobs.v1.TimerInfo")
	proto.RegisterType((*TaskInfo)(nil), "temporal.server.api.persistenceblobs.v1.TaskInfo")
	proto.RegisterType((*AllocatedTaskInfo)(nil), "temporal.server.api.persistenceblobs.v1.AllocatedTaskInfo")
	proto.RegisterType((*TaskQueueInfo)(nil), "temporal.server.api.persistenceblobs.v1.TaskQueueInfo")
	proto.RegisterType((*SignalInfo)(nil), "temporal.server.api.persistenceblobs.v1.SignalInfo")
	proto.RegisterType((*RequestCancelInfo)(nil), "temporal.server.api.persistenceblobs.v1.RequestCancelInfo")
	proto.RegisterType((*WorkflowExecutionState)(nil), "temporal.server.api.persistenceblobs.v1.WorkflowExecutionState")
	proto.RegisterType((*WorkflowExecutionInfo)(nil), "temporal.server.api.persistenceblobs.v1.WorkflowExecutionInfo")
	proto.RegisterMapType((map[string]*v11.Payload)(nil), "temporal.server.api.persistenceblobs.v1.WorkflowExecutionInfo.MemoEntry")
	proto.RegisterMapType((map[string]*v11.Payload)(nil), "temporal.server.api.persistenceblobs.v1.WorkflowExecutionInfo.SearchAttributesEntry")
	proto.RegisterType((*Checksum)(nil), "temporal.server.api.persistenceblobs.v1.Checksum")
	proto.RegisterType((*ChildExecutionInfo)(nil), "temporal.server.api.persistenceblobs.v1.ChildExecutionInfo")
	proto.RegisterType((*NamespaceDetail)(nil), "temporal.server.api.persistenceblobs.v1.NamespaceDetail")
	proto.RegisterType((*NamespaceInfo)(nil), "temporal.server.api.persistenceblobs.v1.NamespaceInfo")
	proto.RegisterMapType((map[string]string)(nil), "temporal.server.api.persistenceblobs.v1.NamespaceInfo.DataEntry")
	proto.RegisterType((*NamespaceReplicationConfig)(nil), "temporal.server.api.persistenceblobs.v1.NamespaceReplicationConfig")
	proto.RegisterType((*NamespaceConfig)(nil), "temporal.server.api.persistenceblobs.v1.NamespaceConfig")
	proto.RegisterType((*ReplicationData)(nil), "temporal.server.api.persistenceblobs.v1.ReplicationData")
	proto.RegisterMapType((map[string]*v13.ReplicationInfo)(nil), "temporal.server.api.persistenceblobs.v1.ReplicationData.LastReplicationInfoEntry")
	proto.RegisterType((*ReplicationVersions)(nil), "temporal.server.api.persistenceblobs.v1.ReplicationVersions")
}

func init() {
	proto.RegisterFile("temporal/server/api/persistenceblobs/v1/message.proto", fileDescriptor_ef806e155800e59a)
}

var fileDescriptor_ef806e155800e59a = []byte{
	// 4130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x3b, 0x4b, 0x73, 0x1b, 0x47,
	0x7a, 0x02, 0xdf, 0xf8, 0x00, 0x90, 0x40, 0xf3, 0x35, 0x84, 0x24, 0x88, 0x82, 0xed, 0x15, 0x65,
	0x69, 0x21, 0x89, 0x96, 0x6d, 0x59, 0x5a, 0x6f, 0x56, 0xa4, 0xa8, 0x08, 0xb6, 0x25, 0x6b, 0x87,
	0xb4, 0x55, 0x4e, 0x6d, 0xd5, 0x64, 0x38, 0xd3, 0x24, 0xa7, 0x38, 0x98, 0x81, 0x67, 0x06, 0xa4,
	0xb9, 0xb9, 0x38, 0xb5, 0x95, 0x43, 0x6a, 0x73, 0xc8, 0x4f, 0xc8, 0xe3, 0x92, 0x3f, 0x90, 0xe4,
	0x94, 0x63, 0x2a, 0x5b, 0x95, 0x8b, 0x8f, 0x7b, 0x5c, 0xcb, 0x95, 0xaa, 0x54, 0xe5, 0x90, 0xbd,
	0xe6, 0x96, 0xea, 0xaf, 0x1f, 0xd3, 0x33, 0x18, 0x82, 0x94, 0xbc, 0x9b, 0xd4, 0xde, 0x88, 0xef,
	0xd5, 0xdf, 0x74, 0x7f, 0xfd, 0x3d, 0x9b, 0xf0, 0x6e, 0x42, 0x7b, 0xfd, 0x30, 0xb2, 0xfd, 0x5b,
	0x31, 0x8d, 0x8e, 0x68, 0x74, 0xcb, 0xee, 0x7b, 0xb7, 0xfa, 0x34, 0x8a, 0xbd, 0x38, 0xa1, 0x81,
	0x43, 0x77, 0xfd, 0x70, 0x37, 0xbe, 0x75, 0x74, 0xe7, 0x56, 0x8f, 0xc6, 0xb1, 0xbd, 0x4f, 0x3b,
	0xfd, 0x28, 0x4c, 0x42, 0x72, 0x4d, 0xb2, 0x75, 0x38, 0x5b, 0xc7, 0xee, 0x7b, 0x9d, 0x3c, 0x5b,
	0xe7, 0xe8, 0x4e, 0xf3, 0xca, 0x7e, 0x18, 0xee, 0xfb, 0xf4, 0x16, 0xb2, 0xed, 0x0e, 0xf6, 0x6e,
	0x25, 0x5e, 0x8f, 0xc6, 0x89, 0xdd, 0xeb, 0x73, 0x49, 0xcd, 0x56, 0x9e, 0xe0, 0x38, 0xb2, 0xfb,
	0x4c, 0x92, 0xc0, 0xaf, 0x2a, 0x05, 0x9d, 0xb0, 0xd7, 0x0b, 0x83, 0x21, 0x5d, 0x34, 0x0a, 0x1a,
	0x0c, 0x7a, 0xa8, 0xec, 0x71, 0x18, 0x1d, 0xee, 0xf9, 0xe1, 0xb1, 0xa0, 0xb8, 0x3a, 0x4c, 0x11,
	0xd8, 0x3d, 0x1a, 0xf7, 0x6d, 0x47, 0x0a, 0x79, 0x43, 0x91, 0x28, 0xcc, 0xf0, 0x4a, 0xed, 0x61,
	0x39, 0x89, 0x1d, 0x1f, 0x5a, 0x5f, 0x0e, 0xe8, 0x80, 0x0e, 0xad, 0xb5, 0x67, 0x7b, 0xfe, 0x20,
	0x2a, 0x10, 0x73, 0xbd, 0x68, 0xcf, 0x95, 0x44, 0xfe, 0x99, 0x82, 0xf4, 0xc6, 0x48, 0xd2, 0xdc,
	0x67, 0x5e, 0x1b, 0x49, 0xcc, 0x34, 0x15, 0x84, 0xb7, 0x8b, 0x08, 0x23, 0xda, 0xf7, 0x3d, 0xc7,
	0x4e, 0xbc, 0x82, 0x3d, 0x6e, 0xf7, 0xc0, 0xe8, 0xf6, 0x7a, 0x83, 0xc4, 0xde, 0xf5, 0xe9, 0xa6,
	0x3f, 0x88, 0x13, 0x1a, 0x3d, 0xa5, 0x89, 0xed, 0xda, 0x89, 0x4d, 0xae, 0x42, 0xd5, 0xe1, 0x20,
	0x8b, 0xed, 0x9d, 0x51, 0x5a, 0x2d, 0xad, 0x95, 0xcd, 0x8a, 0x80, 0x3d, 0xb3, 0x7b, 0x94, 0x74,
	0x60, 0xfe, 0xc0, 0x8b, 0x93, 0x30, 0x3a, 0xb1, 0xe2, 0x03, 0x3b, 0x72, 0x2d, 0x27, 0x1c, 0x04,
	0x89, 0x31, 0xb6, 0x5a, 0x5a, 0x9b, 0x34, 0x1b, 0x02, 0xb5, 0xcd, 0x30, 0x9b, 0x0c, 0xd1, 0xfe,
	0x7a, 0x16, 0xaa, 0x0f, 0x9d, 0xc4, 0x3b, 0xf2, 0x92, 0x93, 0x6e, 0xb0, 0x17, 0x12, 0x03, 0xa6,
	0x8f, 0x98, 0x75, 0x85, 0x01, 0x8a, 0x1f, 0x37, 0xe5, 0x4f, 0xf2, 0x3e, 0x18, 0xb1, 0x73, 0x40,
	0xdd, 0x81, 0x4f, 0x5d, 0x8b, 0x1e, 0xd1, 0x20, 0xb1, 0x76, 0xed, 0xc4, 0x39, 0xb0, 0x3c, 0x17,
	0xe5, 0x8f, 0x9b, 0x8b, 0x0a, 0xbf, 0xc5, 0xd0, 0x1b, 0x0c, 0xdb, 0x75, 0xc9, 0x35, 0x98, 0xcb,
	0x31, 0x1a, 0xe3, 0xab, 0xa5, 0xb5, 0xaa, 0x39, 0x9b, 0xa5, 0x27, 0xf7, 0x86, 0x57, 0xa0, 0x81,
	0x13, 0xba, 0x5e, 0xb0, 0x6f, 0x4c, 0xe0, 0xb7, 0x2e, 0x65, 0x39, 0xb6, 0x04, 0x96, 0xdc, 0x86,
	0x85, 0x94, 0x93, 0x19, 0xbe, 0x15, 0xd8, 0x41, 0x18, 0x1b, 0x93, 0xa8, 0x17, 0x51, 0xb8, 0x1d,
	0xaf, 0x47, 0x9f, 0x31, 0x0c, 0xb9, 0x0c, 0x10, 0x27, 0x76, 0x94, 0x50, 0x97, 0xe9, 0x3f, 0x85,
	0x74, 0x65, 0x01, 0xe9, 0xba, 0xe4, 0x0d, 0xa8, 0x49, 0x34, 0xd7, 0x78, 0x1a, 0x35, 0xae, 0x0a,
	0x20, 0xd7, 0xf7, 0x2e, 0x2c, 0x65, 0x88, 0x52, 0x6d, 0x67, 0x50, 0xdb, 0x05, 0x9d, 0x5a, 0xe9,
	0x7a, 0x13, 0x88, 0xe4, 0xd2, 0x34, 0x2d, 0xa3, 0x06, 0x75, 0x81, 0x49, 0xf5, 0xbc, 0x02, 0x15,
	0x5b, 0x9c, 0x0f, 0x53, 0x14, 0x50, 0x30, 0x48, 0x50, 0xd7, 0x65, 0x1f, 0x12, 0xd1, 0x2f, 0x07,
	0x34, 0x4e, 0x18, 0xbe, 0x82, 0xf8, 0xb2, 0x80, 0x74, 0x5d, 0xf2, 0x04, 0xae, 0xca, 0xaf, 0xb7,
	0x92, 0xd0, 0x42, 0xf9, 0xb8, 0x6e, 0x38, 0x48, 0xac, 0x98, 0x3a, 0x61, 0xe0, 0xc6, 0x46, 0x15,
	0xcd, 0xe3, 0xb2, 0x24, 0xdc, 0x09, 0xb7, 0x19, 0xd9, 0x0e, 0xa7, 0xda, 0xe6, 0x44, 0x79, 0x49,
	0x8e, 0x1f, 0xc6, 0x74, 0x48, 0x52, 0x2d, 0x2f, 0x69, 0x93, 0x91, 0xe5, 0x24, 0x6d, 0x40, 0x4b,
	0xe8, 0x71, 0x9a, 0x98, 0x59, 0x14, 0xd3, 0x44, 0xaa, 0x62, 0x19, 0xf7, 0x61, 0xe5, 0x80, 0xda,
	0x51, 0xb2, 0x4b, 0xed, 0xe1, 0xef, 0x99, 0x43, 0xf6, 0x65, 0x45, 0x90, 0xe3, 0xbd, 0x0e, 0x75,
	0xc7, 0x0e, 0x1c, 0xea, 0x5b, 0x62, 0x9f, 0xa8, 0x6b, 0xd4, 0x57, 0x4b, 0x6b, 0x33, 0xe6, 0x1c,
	0x87, 0x9b, 0x12, 0x4c, 0xde, 0x86, 0x46, 0x96, 0x94, 0x6d, 0x72, 0x03, 0xcf, 0x2a, 0x4b, 0xdb,
	0x45, 0x5a, 0xa6, 0x48, 0x64, 0xa1, 0xab, 0x8a, 0x13, 0x3b, 0x19, 0xc4, 0x06, 0x41, 0x55, 0xe6,
	0x10, 0xb1, 0x63, 0xc7, 0x87, 0xdb, 0x08, 0x66, 0xd7, 0xcc, 0x4e, 0x98, 0x73, 0x48, 0x8c, 0x79,
	0xa4, 0x90, 0x3f, 0xd9, 0x79, 0xa6, 0xae, 0xce, 0x58, 0xe0, 0xe7, 0xc9, 0x20, 0x3f, 0x65, 0x00,
	0xa6, 0x7b, 0x6a, 0xb7, 0x34, 0x48, 0xbc, 0xe4, 0xc4, 0x58, 0x44, 0xa2, 0x39, 0x65, 0xbd, 0x1c,
	0x4c, 0xd6, 0xa0, 0x7e, 0x60, 0xc7, 0x56, 0x44, 0x93, 0xe8, 0xc4, 0xea, 0x87, 0xbe, 0xe7, 0x9c,
	0x18, 0x4b, 0xf8, 0x99, 0xb3, 0x07, 0x76, 0x6c, 0x32, 0xf0, 0x73, 0x84, 0x92, 0x4d, 0x68, 0x71,
	0x2a, 0x2f, 0xf0, 0x12, 0xcf, 0xf6, 0x2d, 0x2f, 0x48, 0x68, 0x74, 0x64, 0xfb, 0x6a, 0x47, 0x97,
	0x51, 0xc9, 0x8b, 0x48, 0xd5, 0xe5, 0x44, 0x5d, 0x41, 0x23, 0x77, 0x55, 0x09, 0xe9, 0xd9, 0x5f,
	0x79, 0xbd, 0x41, 0x6f, 0x58, 0x88, 0xa1, 0x09, 0x79, 0xca, 0x89, 0xf2, 0x42, 0xee, 0xc2, 0x52,
	0x56, 0x88, 0xd8, 0x96, 0xd8, 0x58, 0x41, 0xe6, 0x05, 0x9d, 0xf9, 0xa1, 0xc0, 0x91, 0x0f, 0x81,
	0x0b, 0xb5, 0xe8, 0x57, 0x7d, 0x2f, 0x42, 0xcf, 0xaa, 0xdf, 0xad, 0x26, 0x9e, 0x97, 0x81, 0x24,
	0x5b, 0x8a, 0x22, 0xbd, 0x63, 0xf7, 0x61, 0x85, 0xb3, 0xef, 0xda, 0xce, 0x61, 0xb8, 0xb7, 0x67,
	0x39, 0x21, 0xdd, 0xdb, 0xf3, 0x1c, 0x8f, 0x5d, 0xfc, 0x8b, 0xab, 0xa5, 0xb5, 0x92, 0xb9, 0x8c,
	0x04, 0x1b, 0x1c, 0xbf, 0x99, 0xa2, 0xc9, 0x23, 0xb8, 0xc2, 0x79, 0x83, 0x30, 0xe0, 0x5b, 0xcd,
	0x3c, 0xb7, 0x45, 0xa3, 0x28, 0x8c, 0xac, 0xe4, 0xa4, 0x4f, 0x63, 0xe3, 0xd2, 0xea, 0xf8, 0x5a,
	0x59, 0x7c, 0xf6, 0xb3, 0x30, 0x30, 0x25, 0xd1, 0x16, 0xa3, 0xd9, 0x61, 0x24, 0xe4, 0x23, 0x20,
	0x5c, 0x8a, 0x6f, 0xc7, 0x89, 0x25, 0xe2, 0x99, 0x71, 0x79, 0xb5, 0xb4, 0x56, 0x59, 0xbf, 0xd4,
	0x51, 0x29, 0x80, 0x40, 0x74, 0x8e, 0xee, 0x74, 0x1e, 0xf3, 0x3f, 0xcd, 0x3a, 0xf2, 0x7d, 0x62,
	0xc7, 0x89, 0x80, 0x90, 0x07, 0xd0, 0xd4, 0x64, 0xb1, 0xc8, 0x45, 0xa3, 0xd4, 0x56, 0x5a, 0x68,
	0x2b, 0xcb, 0x8a, 0xeb, 0x05, 0xe2, 0x95, 0xcd, 0x5c, 0x85, 0xaa, 0x0a, 0xcb, 0xcc, 0xd4, 0xaf,
	0xf0, 0x10, 0xa3, 0x60, 0x5d, 0x97, 0x79, 0x24, 0xe5, 0x07, 0x3c, 0xd7, 0x58, 0xc5, 0xcd, 0x05,
	0x09, 0xea, 0xba, 0xc4, 0x84, 0x25, 0x5c, 0x3a, 0xbd, 0x9f, 0x2e, 0x4d, 0x6c, 0xcf, 0x8f, 0x8d,
	0xab, 0xf9, 0x0f, 0x12, 0x21, 0xf8, 0xe8, 0x4e, 0xe7, 0xb9, 0x7d, 0xe2, 0x87, 0xb6, 0x1b, 0x9b,
	0x0b, 0x8c, 0xf7, 0x89, 0x64, 0x7d, 0xc4, 0x39, 0xc9, 0x17, 0x70, 0x31, 0x27, 0x73, 0xd0, 0x77,
	0x6d, 0xe9, 0x43, 0x8d, 0x36, 0x0a, 0x6e, 0x76, 0x78, 0x8a, 0xd3, 0x91, 0x29, 0x4e, 0x67, 0x47,
	0xe6, 0x40, 0xa6, 0x91, 0x11, 0xfb, 0x19, 0x67, 0x66, 0xe8, 0xf6, 0xdf, 0x03, 0x94, 0x31, 0x22,
	0x62, 0xfc, 0x5b, 0x81, 0x19, 0x1e, 0x38, 0x3d, 0x17, 0x03, 0xe0, 0xa4, 0x39, 0x8d, 0xbf, 0xbb,
	0x2e, 0x43, 0x45, 0x76, 0xb0, 0x4f, 0xd3, 0x80, 0x37, 0x8d, 0xbf, 0xbb, 0x2e, 0x59, 0x80, 0xc9,
	0xf0, 0x38, 0xa0, 0x11, 0x06, 0xb6, 0xb2, 0xc9, 0x7f, 0x90, 0x75, 0x58, 0xd4, 0x62, 0xbd, 0x65,
	0x3b, 0x87, 0x96, 0x4f, 0x8f, 0xa8, 0x8f, 0xc1, 0x6c, 0xdc, 0x9c, 0xd7, 0x90, 0x0f, 0x9d, 0xc3,
	0x4f, 0x18, 0x8a, 0x45, 0x87, 0x24, 0xb2, 0x83, 0x78, 0x8f, 0x46, 0x1a, 0x03, 0x8f, 0x63, 0x75,
	0x89, 0xd1, 0xa9, 0xe3, 0x24, 0xf4, 0x69, 0x60, 0xc5, 0x5e, 0xe0, 0x50, 0x2b, 0xa2, 0x01, 0x3d,
	0xc6, 0x68, 0x36, 0xc9, 0x62, 0x09, 0xc3, 0x6c, 0x33, 0x84, 0xc9, 0xe0, 0xe4, 0x03, 0x00, 0xb9,
	0x6b, 0x36, 0x8f, 0x68, 0xa3, 0xf7, 0xac, 0x2c, 0xa8, 0x1f, 0x26, 0x64, 0x03, 0xb8, 0x0b, 0xd3,
	0x74, 0x9a, 0x39, 0x93, 0xbf, 0x86, 0x2c, 0x4a, 0xd9, 0x47, 0xd0, 0x4a, 0x6d, 0x2b, 0x08, 0x13,
	0x6f, 0x4f, 0xee, 0x8c, 0xcc, 0x38, 0x78, 0x10, 0xbc, 0xa4, 0xa8, 0x9e, 0x69, 0x44, 0x9f, 0x8b,
	0x34, 0xe4, 0xaf, 0x4a, 0xd0, 0x94, 0x59, 0x50, 0xc1, 0x4e, 0xc1, 0xea, 0xf8, 0x5a, 0x65, 0xfd,
	0xd3, 0xce, 0x39, 0xd3, 0xe6, 0x8e, 0x3a, 0xf9, 0x8e, 0xc8, 0xb6, 0x76, 0x72, 0x7b, 0xbc, 0x15,
	0x24, 0xd1, 0x89, 0xb9, 0xec, 0x14, 0x63, 0xc9, 0x2f, 0x4a, 0xb0, 0xac, 0xd4, 0xc9, 0xed, 0x50,
	0x05, 0x75, 0xf9, 0xe4, 0x7b, 0xe8, 0xa2, 0xef, 0x1f, 0x57, 0x64, 0xc1, 0x29, 0x40, 0x91, 0x5f,
	0x96, 0x60, 0x45, 0x6a, 0xa1, 0x9b, 0x1c, 0xd7, 0xa3, 0xfa, 0x7d, 0xf7, 0xc4, 0x4c, 0x45, 0x16,
	0xec, 0x49, 0x1e, 0x4b, 0xfe, 0xb2, 0xc4, 0x1c, 0x6a, 0xaa, 0x85, 0xeb, 0x7f, 0xa9, 0xed, 0x4a,
	0x0d, 0xb5, 0x79, 0xf6, 0x1a, 0xda, 0x68, 0x0b, 0x3d, 0xf2, 0xbf, 0xcc, 0xee, 0xcb, 0x52, 0x54,
	0x88, 0x6c, 0x7e, 0x04, 0x97, 0x46, 0x1d, 0x2c, 0xa9, 0xc3, 0xf8, 0x21, 0x3d, 0x11, 0xa9, 0x34,
	0xfb, 0x93, 0xdd, 0xe5, 0x23, 0xdb, 0x1f, 0x50, 0x71, 0xc7, 0xf9, 0x8f, 0xfb, 0x63, 0xf7, 0x4a,
	0x4d, 0x07, 0x56, 0x4e, 0x3d, 0x98, 0x02, 0x41, 0xb7, 0x75, 0x41, 0xa3, 0x6f, 0x8a, 0xb6, 0x48,
	0xaa, 0x70, 0xe1, 0xae, 0xbf, 0x92, 0xc2, 0x5d, 0xb8, 0x38, 0x62, 0xcf, 0x5e, 0x45, 0x54, 0xfb,
	0xdf, 0xa6, 0x60, 0x5e, 0x93, 0xc5, 0x52, 0x19, 0xf4, 0x97, 0xf9, 0x80, 0x51, 0x2a, 0x0c, 0x18,
	0xb2, 0x7e, 0x92, 0xae, 0xb3, 0x6c, 0x82, 0x04, 0x75, 0x5d, 0xb2, 0x08, 0x53, 0xd1, 0x20, 0x60,
	0x38, 0xe1, 0x3e, 0xa3, 0x41, 0xd0, 0x75, 0xc9, 0x26, 0x60, 0xde, 0x83, 0x51, 0x14, 0x5d, 0xe6,
	0xec, 0xfa, 0x0f, 0x0a, 0xad, 0x06, 0x2b, 0x2f, 0x66, 0x2a, 0x4c, 0x2b, 0x16, 0x50, 0xcd, 0x99,
	0x44, 0xfc, 0xa5, 0xd7, 0x33, 0x93, 0xd9, 0x7a, 0xe6, 0x4d, 0x98, 0xdd, 0xf3, 0xa2, 0x38, 0x11,
	0xb9, 0xbb, 0xaa, 0x02, 0xaa, 0x08, 0xc5, 0x9c, 0xbd, 0xeb, 0x92, 0x36, 0xd4, 0x02, 0xfa, 0x95,
	0x46, 0x34, 0x8d, 0x44, 0x15, 0x06, 0x94, 0x34, 0x57, 0xa1, 0x9a, 0x56, 0x1f, 0x9e, 0x8b, 0x9e,
	0x71, 0xdc, 0x54, 0x51, 0x92, 0xc5, 0x8e, 0x0e, 0xcc, 0x73, 0x09, 0xac, 0x00, 0xa3, 0x19, 0x87,
	0x37, 0x69, 0x36, 0x10, 0xb5, 0xcd, 0x30, 0xd2, 0xcb, 0xfd, 0x08, 0x2e, 0x06, 0xf4, 0xd8, 0x62,
	0xdb, 0x52, 0xc4, 0x07, 0x3c, 0xc1, 0x0d, 0xe8, 0xb1, 0x39, 0x08, 0xb6, 0x86, 0xb8, 0xaf, 0x42,
	0x75, 0x37, 0xb2, 0x03, 0xe7, 0xc0, 0x4a, 0xc2, 0x43, 0x1a, 0x60, 0x55, 0x50, 0x35, 0x2b, 0x1c,
	0xb6, 0xc3, 0x40, 0xec, 0x8e, 0x2e, 0x62, 0x44, 0xd5, 0x2f, 0xaa, 0x17, 0xec, 0x85, 0xc2, 0x5b,
	0x7c, 0x76, 0xee, 0xfb, 0x59, 0x60, 0x15, 0x1d, 0x96, 0x59, 0x68, 0x70, 0x06, 0xe3, 0xd7, 0x74,
	0xde, 0x1f, 0xc6, 0x90, 0x5b, 0xb0, 0x20, 0x3f, 0x36, 0xa3, 0x76, 0x0d, 0xd5, 0x6e, 0xf0, 0xaf,
	0xdc, 0xd0, 0x94, 0x7f, 0x0b, 0x66, 0x23, 0x1a, 0x53, 0x9e, 0xdd, 0x30, 0x23, 0xc2, 0x82, 0x61,
	0xc6, 0xac, 0x21, 0xf4, 0x85, 0x00, 0x92, 0x65, 0x98, 0x46, 0x03, 0xf2, 0x5c, 0xac, 0x08, 0xc6,
	0xcd, 0x29, 0xf6, 0xb3, 0xeb, 0x36, 0xff, 0x0c, 0x8c, 0xd3, 0x34, 0x2c, 0xb8, 0x14, 0xdd, 0xec,
	0x3d, 0x7e, 0xa7, 0x70, 0x67, 0xb4, 0x6d, 0xcc, 0x6d, 0x0a, 0x13, 0xad, 0xdf, 0xa4, 0xbf, 0x9d,
	0x80, 0xda, 0x8e, 0x2c, 0x07, 0xfe, 0x20, 0xee, 0xd0, 0x43, 0xa8, 0xca, 0x0a, 0x0b, 0xe5, 0x4c,
	0xa2, 0x9c, 0x56, 0x2a, 0x27, 0x65, 0xe6, 0x64, 0xc8, 0x5f, 0x49, 0xd2, 0x1f, 0x84, 0xc2, 0xa2,
	0xd2, 0x5f, 0x66, 0xd9, 0x28, 0x6b, 0x0a, 0x65, 0xdd, 0x19, 0xad, 0x93, 0x3c, 0x51, 0x91, 0x7f,
	0xa3, 0xf8, 0xf9, 0xe3, 0x61, 0xa0, 0x7e, 0xdb, 0xa7, 0xb3, 0xb7, 0x9d, 0xd5, 0x4d, 0x32, 0x6b,
	0x95, 0x95, 0x17, 0xbf, 0xa7, 0xaa, 0x39, 0x21, 0xca, 0x09, 0x96, 0xe7, 0xa9, 0xdb, 0xce, 0x33,
	0x92, 0x69, 0x2a, 0x6e, 0xba, 0x66, 0x51, 0xa0, 0x5b, 0x14, 0x79, 0x0a, 0x0b, 0x47, 0x5e, 0xec,
	0xed, 0x7a, 0x3e, 0x2b, 0xd4, 0x55, 0xeb, 0x0d, 0x6f, 0xde, 0x68, 0xd7, 0x3f, 0x9f, 0xf2, 0x29,
	0x60, 0xfb, 0x37, 0x13, 0x50, 0x97, 0xf1, 0xea, 0x0f, 0xc6, 0x4c, 0x3a, 0x30, 0x9f, 0xd8, 0xd1,
	0x3e, 0x4d, 0xac, 0x8c, 0x9a, 0x93, 0xb8, 0x50, 0x83, 0xa3, 0x9e, 0x69, 0xca, 0xb2, 0x54, 0x97,
	0xd3, 0xeb, 0x3a, 0x4f, 0x21, 0x79, 0x9d, 0x63, 0x5e, 0xa4, 0x9a, 0xb7, 0xa1, 0x26, 0xa8, 0xc5,
	0x07, 0x4c, 0xf3, 0xcf, 0xe7, 0x40, 0x13, 0x3f, 0x23, 0x5b, 0x3b, 0xcf, 0xe4, 0x6b, 0xe7, 0x07,
	0xd0, 0x14, 0x22, 0x9c, 0x03, 0xcf, 0x77, 0xd3, 0x65, 0xc3, 0xc0, 0x3f, 0xc1, 0xa3, 0x9e, 0x31,
	0x97, 0x39, 0xc5, 0x26, 0x23, 0x90, 0xab, 0x7f, 0x1a, 0xf8, 0x27, 0xf9, 0xb2, 0x07, 0x86, 0xca,
	0x1e, 0xcd, 0xf6, 0x2a, 0x59, 0xdb, 0xd3, 0xac, 0xa6, 0x7a, 0x2e, 0xab, 0xa9, 0xbd, 0x96, 0xd5,
	0x90, 0x1b, 0xd0, 0x88, 0xa8, 0x13, 0x46, 0xae, 0x95, 0x62, 0x85, 0x67, 0xac, 0x73, 0xc4, 0xe7,
	0x0a, 0xde, 0x1e, 0x00, 0x79, 0xc2, 0xdb, 0x81, 0xdc, 0xb3, 0x9a, 0xac, 0x94, 0x21, 0x17, 0xa1,
	0x2c, 0x5c, 0xb0, 0x32, 0xb0, 0x19, 0x0e, 0xe0, 0x47, 0xb0, 0x4b, 0xf7, 0xbd, 0xc0, 0x0a, 0x42,
	0x57, 0xab, 0x82, 0x2a, 0x08, 0x7c, 0x16, 0xba, 0x6c, 0x17, 0x5a, 0x50, 0xa1, 0x81, 0xab, 0x28,
	0xc6, 0x79, 0x63, 0x8d, 0x06, 0x2e, 0xc7, 0xb7, 0xff, 0xa6, 0x04, 0xb5, 0xcc, 0xba, 0xb8, 0x3b,
	0x11, 0xd5, 0x2c, 0x7a, 0x8a, 0xfd, 0xec, 0xba, 0x59, 0x5d, 0xc6, 0x72, 0xba, 0x7c, 0x01, 0x65,
	0x3b, 0x70, 0x28, 0x13, 0x14, 0x1b, 0xe3, 0x18, 0xb2, 0x1e, 0x9c, 0x3b, 0x64, 0x0d, 0x7f, 0xb8,
	0x99, 0x4a, 0x6b, 0xff, 0x73, 0x09, 0xe6, 0x04, 0xc5, 0x0e, 0xd3, 0x84, 0xdd, 0xbd, 0x17, 0x50,
	0x91, 0xba, 0xb0, 0x18, 0x59, 0xc2, 0x03, 0x7a, 0xef, 0x35, 0x17, 0x04, 0xf1, 0x15, 0x4c, 0xf0,
	0xfb, 0x50, 0xde, 0x0b, 0xa3, 0x43, 0x5e, 0xc6, 0x9e, 0x9d, 0x28, 0xce, 0x30, 0x62, 0xf6, 0x93,
	0x10, 0x98, 0x40, 0x55, 0xf8, 0x3d, 0xc6, 0xbf, 0xdb, 0xff, 0x52, 0x82, 0x32, 0x86, 0x96, 0x33,
	0x5a, 0xb9, 0xd9, 0xe6, 0xe7, 0x58, 0xbe, 0xf9, 0xf9, 0x00, 0x2a, 0xd8, 0x48, 0xe1, 0x26, 0x89,
	0x2b, 0x8c, 0xd6, 0x0a, 0x38, 0x39, 0xea, 0x75, 0x05, 0x2a, 0x7a, 0xff, 0x8b, 0x97, 0xba, 0x78,
	0x2d, 0x45, 0xeb, 0x6b, 0x05, 0x66, 0x78, 0xa1, 0xa4, 0x7c, 0xc3, 0x34, 0xfe, 0xee, 0xba, 0xed,
	0xff, 0x29, 0xc1, 0xcc, 0xff, 0x85, 0xbb, 0xcb, 0xdd, 0xe5, 0x89, 0xa1, 0xbb, 0xfc, 0x21, 0x54,
	0x9d, 0x88, 0xa6, 0xfd, 0x85, 0xc9, 0x33, 0xb7, 0xa0, 0x22, 0xe8, 0x71, 0x0f, 0xd6, 0x61, 0x8a,
	0xef, 0x08, 0x7a, 0xb3, 0xd1, 0x8c, 0x82, 0xb2, 0x1d, 0x43, 0xe3, 0xa1, 0xef, 0x87, 0x0e, 0x0a,
	0x91, 0x7b, 0xb0, 0x05, 0x13, 0xae, 0x9d, 0xd8, 0xc2, 0xde, 0xee, 0x9c, 0xdb, 0xde, 0xa4, 0x00,
	0x13, 0xd9, 0x75, 0x07, 0x34, 0xa3, 0x3b, 0xa0, 0xf6, 0xbf, 0x8f, 0x41, 0x6d, 0x47, 0xfa, 0xc7,
	0xf3, 0xee, 0x3a, 0x81, 0x09, 0x1c, 0x3f, 0xf0, 0xed, 0xc6, 0xbf, 0xc9, 0x87, 0x7a, 0x00, 0x19,
	0xc7, 0x00, 0xb2, 0x5a, 0x94, 0x1f, 0xc8, 0xb5, 0x72, 0xa1, 0xe3, 0x2e, 0x4c, 0x1c, 0x7a, 0x81,
	0x2b, 0x32, 0x8b, 0x91, 0x9c, 0x1f, 0x7b, 0x81, 0x6b, 0x22, 0x35, 0x73, 0x10, 0x69, 0x59, 0xc9,
	0x93, 0xf7, 0x19, 0x5b, 0x96, 0xc4, 0xe9, 0x19, 0x4c, 0x9f, 0xf7, 0x0c, 0xd8, 0xb1, 0x63, 0x4e,
	0x2c, 0xfa, 0x1e, 0xe7, 0x68, 0x71, 0x54, 0x18, 0xbd, 0xe8, 0x26, 0xb5, 0x7f, 0x31, 0x06, 0xb0,
	0xed, 0xed, 0x07, 0xb6, 0x7f, 0xf6, 0x28, 0x85, 0x77, 0x5a, 0x93, 0x53, 0x47, 0x29, 0x0a, 0x9f,
	0x19, 0xa5, 0x64, 0x9b, 0xfd, 0xe3, 0xf9, 0x66, 0xbf, 0x3c, 0x99, 0x09, 0xed, 0x64, 0xd6, 0x61,
	0xd2, 0x0b, 0xfa, 0x83, 0x44, 0xd8, 0xf0, 0xe8, 0xe6, 0x1b, 0x27, 0x65, 0x9a, 0x3b, 0x61, 0x90,
	0x44, 0xa1, 0x2f, 0xc2, 0xb1, 0xfc, 0xc9, 0xcc, 0x23, 0xd5, 0x3c, 0xad, 0x86, 0x14, 0xac, 0xeb,
	0xb6, 0xff, 0xb1, 0x04, 0x0d, 0xd1, 0x14, 0xdf, 0xc4, 0x0e, 0xf9, 0xef, 0x6b, 0x33, 0x0a, 0x7b,
	0xf3, 0x7c, 0x4f, 0x86, 0x7a, 0xf3, 0x79, 0xbd, 0x27, 0x86, 0xf5, 0xfe, 0xaf, 0x12, 0x2c, 0xc9,
	0x88, 0xbf, 0xf5, 0x15, 0x75, 0x06, 0x2c, 0x79, 0x67, 0x3e, 0x8b, 0xe2, 0x4a, 0x78, 0xbd, 0xf5,
	0x95, 0x4a, 0x62, 0x25, 0x44, 0xa4, 0x2b, 0xa5, 0x2e, 0x67, 0x4c, 0x77, 0x39, 0x1f, 0xc1, 0x24,
	0xf3, 0x88, 0xf2, 0x72, 0xdc, 0x3d, 0x5f, 0xc2, 0x9b, 0xd5, 0xc3, 0xe4, 0x22, 0xc8, 0x06, 0x4c,
	0x69, 0xde, 0x75, 0x76, 0xfd, 0xed, 0x82, 0xfb, 0x52, 0x28, 0x61, 0x10, 0x9b, 0x82, 0xb3, 0xfd,
	0xab, 0x15, 0x58, 0x1c, 0xa2, 0x29, 0xf4, 0x00, 0x1f, 0x9e, 0xe9, 0x77, 0x7f, 0x3c, 0xe4, 0x77,
	0x3b, 0x30, 0xdf, 0xb7, 0x23, 0x76, 0x94, 0x05, 0xce, 0xa4, 0xc1, 0x51, 0xb9, 0x54, 0x50, 0xd0,
	0x0f, 0xfb, 0xf3, 0x3a, 0xc7, 0x64, 0x53, 0x41, 0x41, 0x9d, 0x71, 0xee, 0x15, 0x0e, 0xe4, 0xa9,
	0xe0, 0xd9, 0x07, 0x4e, 0x3e, 0x80, 0x15, 0x27, 0xec, 0xf5, 0x7d, 0x8a, 0xb5, 0x6f, 0xce, 0xf2,
	0x78, 0xb3, 0x60, 0x29, 0x25, 0xc8, 0x98, 0xde, 0x75, 0xa8, 0xe7, 0x59, 0xf1, 0xa6, 0x54, 0xcd,
	0xb9, 0x1c, 0x07, 0xb9, 0x5f, 0xb0, 0x8a, 0x9a, 0x13, 0xf2, 0x1c, 0x76, 0x39, 0xc7, 0xa3, 0x46,
	0x85, 0x67, 0xe4, 0xb3, 0x37, 0x81, 0xa8, 0xed, 0x62, 0x8e, 0x97, 0x4f, 0x85, 0xcb, 0x7c, 0xd7,
	0x24, 0x86, 0xf9, 0x57, 0x1c, 0x0d, 0x7f, 0x0c, 0x6d, 0x45, 0x4d, 0xe5, 0x89, 0x0f, 0x8d, 0xce,
	0x78, 0x67, 0xe1, 0xca, 0x71, 0xde, 0x34, 0x72, 0x23, 0xb4, 0x3f, 0x82, 0x4b, 0x4a, 0x18, 0x3b,
	0x84, 0xbc, 0x98, 0x0a, 0x8a, 0x59, 0x91, 0x34, 0xe6, 0x20, 0x2f, 0xe0, 0x21, 0x5c, 0x4e, 0x75,
	0xc7, 0xc8, 0x51, 0x38, 0x93, 0x6c, 0xaa, 0xcf, 0x60, 0xa1, 0x22, 0x2b, 0x42, 0xce, 0x68, 0x55,
	0x57, 0x84, 0x17, 0xf9, 0x7c, 0x46, 0x2b, 0x5b, 0x21, 0xd7, 0x60, 0xce, 0x19, 0x44, 0x68, 0x2c,
	0x92, 0xac, 0x8e, 0x64, 0xb3, 0x02, 0x2c, 0x09, 0x1d, 0xa8, 0x67, 0x7a, 0x96, 0x2c, 0xec, 0x36,
	0xd0, 0x65, 0xde, 0x7b, 0x9d, 0x56, 0xc8, 0x23, 0x3b, 0xb1, 0xcd, 0xb9, 0x28, 0x0b, 0x20, 0x37,
	0x80, 0x60, 0x80, 0xe1, 0x66, 0x20, 0x63, 0xf2, 0x3c, 0xaf, 0x43, 0x19, 0x06, 0xcf, 0x7f, 0x87,
	0x57, 0x07, 0x3f, 0x84, 0x79, 0x3e, 0x0e, 0xca, 0x76, 0xa9, 0x16, 0xf8, 0x2c, 0x80, 0xa1, 0x1e,
	0xeb, 0x9d, 0xaa, 0xdb, 0x80, 0xa3, 0x13, 0xab, 0x1f, 0x85, 0x0e, 0x8d, 0x63, 0x35, 0xb9, 0x5e,
	0xe4, 0x33, 0x70, 0x86, 0x7b, 0x2e, 0x51, 0xdc, 0x34, 0xd7, 0xc4, 0x2c, 0x51, 0x9f, 0x95, 0x2d,
	0xf1, 0xcd, 0x89, 0xe5, 0x00, 0x98, 0x4f, 0xc8, 0xde, 0x85, 0x65, 0x3d, 0x30, 0xea, 0x0c, 0xcb,
	0xc8, 0xb0, 0xa0, 0xc5, 0xc1, 0x94, 0xed, 0x3a, 0xd4, 0x5d, 0xea, 0x78, 0xb1, 0xde, 0xe3, 0x37,
	0xf8, 0xc7, 0x4a, 0xb8, 0xdc, 0xfe, 0xdb, 0xb0, 0xa0, 0x48, 0xf5, 0xdc, 0x6c, 0x85, 0x6b, 0x2f,
	0x71, 0xdb, 0x69, 0x8e, 0xd6, 0x81, 0xf9, 0x94, 0x23, 0xcd, 0x66, 0xf9, 0xb0, 0xaf, 0xa1, 0x18,
	0x54, 0x56, 0xab, 0x2b, 0x23, 0x8c, 0x0d, 0x87, 0x7b, 0x93, 0xa9, 0x32, 0xc2, 0xc0, 0x32, 0xa4,
	0xb2, 0x59, 0x70, 0x29, 0xab, 0xb7, 0x6c, 0x16, 0xfc, 0x31, 0xac, 0x0e, 0x69, 0xa1, 0x0a, 0x39,
	0xb1, 0x45, 0x97, 0x91, 0xf5, 0x72, 0x4e, 0x25, 0x95, 0x44, 0xf0, 0xbd, 0xfa, 0x18, 0xda, 0x43,
	0x1b, 0x30, 0x2c, 0xaa, 0x85, 0xa2, 0xae, 0xe4, 0xb7, 0x23, 0x2f, 0xac, 0x68, 0xc2, 0x7d, 0xa5,
	0x78, 0xc2, 0xfd, 0x33, 0xb8, 0xa1, 0xd6, 0x0d, 0x23, 0x6f, 0xdf, 0x0b, 0x6c, 0x7f, 0x84, 0x02,
	0x7c, 0xdc, 0x77, 0x4d, 0xb2, 0x7c, 0x2a, 0x38, 0x4e, 0x53, 0x44, 0x3f, 0x24, 0x2d, 0x76, 0xb6,
	0x79, 0x20, 0x90, 0xa8, 0xcc, 0x0c, 0x7d, 0x38, 0xa6, 0xbf, 0x51, 0x1c, 0xd3, 0xdf, 0x86, 0x46,
	0x9c, 0x78, 0xce, 0xe1, 0x89, 0xa5, 0x39, 0xc9, 0x37, 0xe5, 0x2c, 0x9c, 0x21, 0x54, 0xd2, 0x48,
	0x1e, 0xc3, 0xaa, 0xa0, 0x3d, 0xf5, 0x35, 0x84, 0xf1, 0x16, 0x9f, 0x3e, 0x71, 0xba, 0xed, 0xc2,
	0xb7, 0x10, 0xcc, 0xe7, 0xf0, 0xe1, 0xaa, 0x34, 0x8b, 0x1f, 0x70, 0x9f, 0x83, 0x40, 0x69, 0x13,
	0x67, 0x8f, 0xd3, 0xaf, 0xfd, 0x2e, 0xc6, 0xe9, 0x6b, 0xdf, 0x67, 0x9c, 0x7e, 0x7d, 0xc4, 0x38,
	0x7d, 0xe4, 0x3c, 0xfc, 0xed, 0xd1, 0xf3, 0xf0, 0x33, 0x46, 0xf1, 0x37, 0xce, 0x18, 0xc5, 0x9f,
	0x63, 0x9c, 0x7e, 0xf3, 0xec, 0x71, 0x7a, 0xd1, 0xcb, 0x87, 0x1f, 0x16, 0xbe, 0x7c, 0x78, 0x03,
	0x6a, 0x4e, 0xa4, 0xdd, 0x38, 0xa3, 0x83, 0xf6, 0x53, 0x65, 0x40, 0x69, 0x02, 0xa7, 0x35, 0xef,
	0x6f, 0x9d, 0xd6, 0xbc, 0xbf, 0x09, 0x44, 0x64, 0x13, 0x7a, 0x37, 0xfb, 0x36, 0xe6, 0x07, 0x75,
	0xc4, 0xe8, 0xcd, 0xec, 0xab, 0x50, 0x8d, 0xb1, 0x68, 0x10, 0x6f, 0xb5, 0xee, 0x88, 0xe9, 0x01,
	0xc2, 0xf0, 0x95, 0x16, 0x23, 0x51, 0xaf, 0xba, 0xbc, 0x9f, 0x53, 0x63, 0x9d, 0x93, 0xc8, 0xe7,
	0x5c, 0xde, 0xcf, 0x59, 0x05, 0xb5, 0xe4, 0xf8, 0xec, 0x04, 0x2c, 0xdf, 0xdb, 0x8d, 0xec, 0xe8,
	0x44, 0xa9, 0xf9, 0x0e, 0x7f, 0x8b, 0xc4, 0xb1, 0x9f, 0x70, 0xa4, 0xd4, 0x34, 0xe5, 0xda, 0xa3,
	0x76, 0x32, 0xd0, 0x3e, 0xee, 0xae, 0xce, 0xf5, 0x98, 0x23, 0x25, 0xd7, 0x15, 0xa8, 0x08, 0x2e,
	0xaf, 0xd7, 0xf7, 0x8d, 0x77, 0x79, 0xfa, 0xc7, 0x41, 0xdd, 0x5e, 0xdf, 0x67, 0x37, 0xd3, 0x1e,
	0x24, 0xa1, 0xc5, 0x9b, 0xf4, 0xfd, 0xd0, 0x0b, 0x92, 0xd8, 0x78, 0x8f, 0xe7, 0x47, 0x0c, 0x61,
	0x32, 0xf8, 0x73, 0x04, 0x93, 0x07, 0xd0, 0x1c, 0xa2, 0x4d, 0x13, 0xa4, 0xf7, 0x79, 0x82, 0x94,
	0x63, 0x52, 0x09, 0xd2, 0x9f, 0x97, 0xa0, 0x11, 0x53, 0x3b, 0x72, 0x0e, 0x98, 0x65, 0x47, 0xde,
	0xee, 0x20, 0xa1, 0xb1, 0x71, 0x0f, 0xdb, 0x41, 0x3b, 0xe7, 0x0e, 0xdb, 0x85, 0x79, 0x70, 0x67,
	0x1b, 0xe5, 0x3e, 0x54, 0x62, 0xf9, 0x00, 0xa3, 0x1e, 0xe7, 0xc0, 0xe4, 0x67, 0x30, 0xd1, 0xa3,
	0xbd, 0xd0, 0xf8, 0x00, 0x57, 0x7d, 0xf2, 0x3d, 0x57, 0x7d, 0x4a, 0x7b, 0x62, 0x54, 0x82, 0x52,
	0xc9, 0x0d, 0x68, 0x88, 0x23, 0xb1, 0xf8, 0x71, 0x7b, 0x34, 0x36, 0xee, 0x73, 0x53, 0x12, 0x88,
	0x27, 0x12, 0x4e, 0x7e, 0x04, 0xcd, 0x21, 0xe2, 0x74, 0x2f, 0x1f, 0xe0, 0x5e, 0x1a, 0x79, 0x2e,
	0xb9, 0x99, 0xcd, 0x3f, 0x85, 0xc5, 0xc2, 0x6f, 0x2e, 0x18, 0x89, 0xdc, 0xc9, 0x8e, 0x44, 0x2e,
	0x8e, 0x28, 0x2a, 0xf5, 0x79, 0xe4, 0x0e, 0x94, 0xd5, 0xf7, 0xfd, 0xce, 0xa4, 0xb6, 0xbf, 0x2e,
	0xc1, 0xcc, 0xe6, 0x01, 0x75, 0x0e, 0xe3, 0x41, 0x2f, 0x5f, 0x67, 0x4e, 0xa6, 0x75, 0xe6, 0x23,
	0x98, 0xda, 0xf3, 0xed, 0xa3, 0x30, 0x42, 0xf1, 0xb3, 0xeb, 0x37, 0x47, 0x97, 0x60, 0x52, 0xe2,
	0x63, 0xe4, 0x31, 0x05, 0x6f, 0x3a, 0x21, 0xe5, 0x4f, 0x18, 0xf9, 0x8f, 0xf6, 0x2f, 0x27, 0x81,
	0x60, 0xcb, 0x38, 0x5b, 0x4a, 0xfd, 0x7e, 0x3a, 0x00, 0x5a, 0xb2, 0x33, 0x9e, 0x6f, 0xdd, 0x5d,
	0x83, 0xb9, 0x9c, 0x5c, 0xac, 0x7c, 0xaa, 0xe6, 0x6c, 0x56, 0x1c, 0xb9, 0x37, 0xac, 0x80, 0x32,
	0x14, 0xde, 0x95, 0x5b, 0xca, 0x72, 0xa8, 0x3b, 0xd7, 0x81, 0x79, 0xa9, 0xc1, 0x70, 0xdf, 0xbe,
	0x21, 0x50, 0x5a, 0xb5, 0xf6, 0x26, 0xcc, 0x4a, 0xfa, 0x4c, 0xe7, 0x5e, 0xbe, 0xa5, 0xe4, 0xf5,
	0xda, 0xd0, 0x83, 0xcb, 0x99, 0x57, 0x7a, 0x70, 0x59, 0x1e, 0xf1, 0xe0, 0xb2, 0xb0, 0x7a, 0x87,
	0xe2, 0xea, 0xfd, 0x12, 0x94, 0x55, 0xc5, 0x2a, 0x1f, 0x53, 0x2a, 0xc0, 0x29, 0x05, 0x57, 0xf5,
	0x94, 0x82, 0x6b, 0x47, 0x15, 0xc1, 0xfc, 0x91, 0xa3, 0x08, 0x44, 0x35, 0xb4, 0xbe, 0x37, 0x0b,
	0x6a, 0xf6, 0xe7, 0x48, 0x8d, 0xaf, 0x1d, 0x79, 0x78, 0x92, 0xa5, 0xb2, 0x06, 0x1a, 0x2a, 0x6c,
	0x67, 0x87, 0x3b, 0x19, 0xff, 0x31, 0x0e, 0x73, 0xaa, 0xba, 0xe6, 0x2f, 0xa8, 0xc8, 0x47, 0xa2,
	0x5d, 0xfc, 0xaa, 0x9d, 0xeb, 0xb4, 0x4a, 0xc7, 0x76, 0x22, 0x93, 0x41, 0x9e, 0xc3, 0x94, 0x13,
	0x06, 0x7b, 0xde, 0xbe, 0xb8, 0xa8, 0xf7, 0x5e, 0x5d, 0xda, 0x26, 0xf2, 0x9b, 0x42, 0x0e, 0x89,
	0x80, 0xe8, 0xc5, 0x97, 0x90, 0xce, 0x1b, 0xcf, 0x9b, 0xaf, 0x2e, 0x5d, 0xab, 0xc3, 0xc4, 0x42,
	0x8d, 0x28, 0x0f, 0x22, 0x6f, 0xc1, 0x2c, 0x5f, 0x27, 0xf7, 0xfc, 0xa8, 0xc6, 0xa1, 0x32, 0xd8,
	0x6d, 0xc0, 0xe5, 0x3d, 0xdb, 0xf3, 0xc3, 0x23, 0x1a, 0x15, 0x3f, 0x5a, 0xe2, 0xc3, 0x9e, 0x8b,
	0x92, 0xa8, 0xe8, 0xcd, 0xd2, 0x75, 0xa8, 0x2b, 0x19, 0x92, 0x8d, 0x4f, 0x82, 0xe6, 0x24, 0x5c,
	0x92, 0xbe, 0x0d, 0x0d, 0x45, 0x4a, 0x03, 0xd1, 0x7e, 0xae, 0x65, 0x69, 0xb7, 0x02, 0xfe, 0x72,
	0xed, 0x9f, 0xc6, 0xa0, 0x96, 0x39, 0x1f, 0x32, 0x0b, 0x63, 0xaa, 0xcd, 0x32, 0xe6, 0xb9, 0xe4,
	0xbe, 0xea, 0x14, 0x71, 0x9f, 0xd7, 0x2e, 0xb0, 0x3a, 0x25, 0x21, 0xdb, 0x21, 0x52, 0xcd, 0xc4,
	0x71, 0xad, 0x99, 0xb8, 0x0a, 0x15, 0x97, 0xc6, 0x4e, 0xe4, 0xf5, 0xd9, 0xe7, 0x89, 0x3e, 0xa3,
	0x0e, 0x4a, 0x5f, 0xc2, 0x4d, 0xea, 0x2f, 0xe1, 0x76, 0x44, 0x1f, 0x7b, 0x0a, 0x63, 0xe4, 0x4f,
	0x5e, 0xcf, 0xfa, 0x3a, 0xac, 0x84, 0x16, 0xb1, 0x91, 0x49, 0x6b, 0xbe, 0x0f, 0x65, 0x05, 0x3a,
	0xeb, 0x31, 0x4b, 0x59, 0x8f, 0x18, 0x07, 0xd0, 0x3c, 0xdd, 0x56, 0x98, 0x83, 0xc3, 0xf7, 0xd5,
	0xd4, 0x2a, 0x78, 0x6d, 0xdf, 0xe0, 0xa8, 0x4d, 0xed, 0xcd, 0x7d, 0x13, 0x66, 0x04, 0x21, 0xdb,
	0x66, 0x96, 0x9c, 0xaa, 0xdf, 0xed, 0xff, 0xd6, 0xaf, 0x62, 0x6a, 0x78, 0x11, 0x4d, 0x68, 0x20,
	0xfa, 0x0c, 0x27, 0xb1, 0x88, 0x54, 0x35, 0x05, 0x7d, 0x64, 0x9f, 0xe0, 0xcb, 0x6f, 0xda, 0xf3,
	0x12, 0xab, 0x47, 0x93, 0xc8, 0x73, 0xf0, 0x23, 0x66, 0x4c, 0x60, 0xa0, 0xa7, 0x08, 0x61, 0xbe,
	0x9e, 0x45, 0x6b, 0x8f, 0xd5, 0x04, 0xbb, 0x03, 0xe7, 0x90, 0x26, 0xe2, 0xac, 0x66, 0x25, 0x78,
	0x03, 0xa1, 0x64, 0x0b, 0xaa, 0xbb, 0xb6, 0x6b, 0xed, 0x7a, 0x81, 0x8d, 0xe9, 0x43, 0x1d, 0xef,
	0x95, 0x66, 0x0b, 0xe9, 0xff, 0x68, 0x1c, 0xdd, 0xe9, 0x6c, 0xd8, 0xee, 0x86, 0xa0, 0x34, 0x2b,
	0xbb, 0xe9, 0x0f, 0xf2, 0x05, 0x2c, 0xcb, 0x2c, 0x54, 0xad, 0xab, 0xbd, 0x72, 0x9e, 0x5d, 0xbf,
	0x5a, 0x60, 0x5d, 0x0f, 0x05, 0xa5, 0x30, 0xae, 0x45, 0x21, 0x21, 0x0b, 0x66, 0xd5, 0xff, 0x90,
	0xe8, 0x41, 0xe4, 0x61, 0x67, 0xa4, 0x6c, 0x92, 0x1c, 0xd3, 0x67, 0x91, 0x47, 0x2c, 0x68, 0x6a,
	0xa3, 0xd3, 0xbc, 0x3e, 0x0b, 0xe7, 0xd5, 0xc7, 0x48, 0x85, 0xe4, 0x54, 0x7a, 0x0f, 0x96, 0x8b,
	0x16, 0x60, 0x5a, 0xf1, 0xf7, 0xd6, 0x8b, 0xc3, 0xac, 0x9f, 0x45, 0x5e, 0xfb, 0x5f, 0xc7, 0x60,
	0x2e, 0xd7, 0x07, 0x52, 0x9d, 0x9c, 0xe3, 0xc8, 0x4b, 0x68, 0xda, 0xc9, 0x29, 0xa5, 0x9d, 0x9c,
	0x17, 0x0c, 0x23, 0x3b, 0x39, 0x7f, 0x71, 0xea, 0xdb, 0x9c, 0x31, 0xbc, 0x3f, 0x3f, 0x7d, 0xdd,
	0x86, 0xd4, 0xab, 0xbd, 0xcb, 0xf9, 0xff, 0x7d, 0x26, 0xf3, 0x77, 0xa5, 0xcc, 0x83, 0x33, 0xe1,
	0x1f, 0x63, 0xf2, 0x93, 0xa2, 0xae, 0x1f, 0x4b, 0x16, 0xf3, 0x43, 0x9a, 0x6e, 0x90, 0xbc, 0x77,
	0xf7, 0x73, 0x26, 0x2f, 0xd7, 0x12, 0xec, 0x8a, 0x26, 0x1c, 0x3f, 0x0d, 0xbd, 0x2b, 0x78, 0x86,
	0x98, 0xf4, 0xa4, 0x84, 0xa8, 0x8d, 0xe4, 0x9b, 0x6f, 0x5b, 0x17, 0x7e, 0xfd, 0x6d, 0xeb, 0xc2,
	0x6f, 0xbf, 0x6d, 0x95, 0xbe, 0x7e, 0xd9, 0x2a, 0xfd, 0xc3, 0xcb, 0x56, 0xe9, 0x57, 0x2f, 0x5b,
	0xa5, 0x6f, 0x5e, 0xb6, 0x4a, 0xbf, 0x79, 0xd9, 0x2a, 0xfd, 0xe7, 0xcb, 0xd6, 0x85, 0xdf, 0xbe,
	0x6c, 0x95, 0xfe, 0xfa, 0xbb, 0xd6, 0x85, 0x6f, 0xbe, 0x6b, 0x5d, 0xf8, 0xf5, 0x77, 0xad, 0x0b,
	0x7f, 0xf2, 0xe3, 0xfd, 0x30, 0xdd, 0x1c, 0x2f, 0x3c, 0xe3, 0x1f, 0xc2, 0x1e, 0xe4, 0x61, 0xbb,
	0x53, 0xa8, 0xdc, 0x3b, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x63, 0x26, 0x0d, 0x53, 0x36,
	0x00, 0x00,
}

func (this *ImmutableClusterMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImmutableClusterMetadata)
	if !ok {
		that2, ok := that.(ImmutableClusterMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClusterName != that1.ClusterName {
		return false
	}
	if this.HistoryShardCount != that1.HistoryShardCount {
		return false
	}
	return true
}
func (this *ActivityInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivityInfo)
	if !ok {
		that2, ok := that.(ActivityInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.ScheduledEventBatchId != that1.ScheduledEventBatchId {
		return false
	}
	if !bytes.Equal(this.ScheduledEvent, that1.ScheduledEvent) {
		return false
	}
	if this.ScheduledEventEncoding != that1.ScheduledEventEncoding {
		return false
	}
	if this.ScheduledTimeNanos != that1.ScheduledTimeNanos {
		return false
	}
	if this.StartedId != that1.StartedId {
		return false
	}
	if !bytes.Equal(this.StartedEvent, that1.StartedEvent) {
		return false
	}
	if this.StartedEventEncoding != that1.StartedEventEncoding {
		return false
	}
	if this.StartedTimeNanos != that1.StartedTimeNanos {
		return false
	}
	if this.ActivityId != that1.ActivityId {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if this.ScheduleToStartTimeoutSeconds != that1.ScheduleToStartTimeoutSeconds {
		return false
	}
	if this.ScheduleToCloseTimeoutSeconds != that1.ScheduleToCloseTimeoutSeconds {
		return false
	}
	if this.StartToCloseTimeoutSeconds != that1.StartToCloseTimeoutSeconds {
		return false
	}
	if this.HeartbeatTimeoutSeconds != that1.HeartbeatTimeoutSeconds {
		return false
	}
	if this.CancelRequested != that1.CancelRequested {
		return false
	}
	if this.CancelRequestId != that1.CancelRequestId {
		return false
	}
	if this.TimerTaskStatus != that1.TimerTaskStatus {
		return false
	}
	if this.Attempt != that1.Attempt {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	if this.StartedIdentity != that1.StartedIdentity {
		return false
	}
	if this.HasRetryPolicy != that1.HasRetryPolicy {
		return false
	}
	if this.RetryInitialIntervalSeconds != that1.RetryInitialIntervalSeconds {
		return false
	}
	if this.RetryMaximumIntervalSeconds != that1.RetryMaximumIntervalSeconds {
		return false
	}
	if this.RetryMaximumAttempts != that1.RetryMaximumAttempts {
		return false
	}
	if this.RetryExpirationTimeNanos != that1.RetryExpirationTimeNanos {
		return false
	}
	if this.RetryBackoffCoefficient != that1.RetryBackoffCoefficient {
		return false
	}
	if len(this.RetryNonRetryableErrorTypes) != len(that1.RetryNonRetryableErrorTypes) {
		return false
	}
	for i := range this.RetryNonRetryableErrorTypes {
		if this.RetryNonRetryableErrorTypes[i] != that1.RetryNonRetryableErrorTypes[i] {
			return false
		}
	}
	if !this.RetryLastFailure.Equal(that1.RetryLastFailure) {
		return false
	}
	if this.RetryLastWorkerIdentity != that1.RetryLastWorkerIdentity {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.ScheduleId != that1.ScheduleId {
		return false
	}
	if !this.LastHeartbeatDetails.Equal(that1.LastHeartbeatDetails) {
		return false
	}
	if !this.LastHeartbeatUpdatedTime.Equal(that1.LastHeartbeatUpdatedTime) {
		return false
	}
	return true
}
func (this *ShardInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShardInfo)
	if !ok {
		that2, ok := that.(ShardInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ShardId != that1.ShardId {
		return false
	}
	if this.RangeId != that1.RangeId {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if this.ReplicationAckLevel != that1.ReplicationAckLevel {
		return false
	}
	if this.TransferAckLevel != that1.TransferAckLevel {
		return false
	}
	if this.StolenSinceRenew != that1.StolenSinceRenew {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.TimerAckLevel.Equal(that1.TimerAckLevel) {
		return false
	}
	if this.NamespaceNotificationVersion != that1.NamespaceNotificationVersion {
		return false
	}
	if len(this.ClusterTransferAckLevel) != len(that1.ClusterTransferAckLevel) {
		return false
	}
	for i := range this.ClusterTransferAckLevel {
		if this.ClusterTransferAckLevel[i] != that1.ClusterTransferAckLevel[i] {
			return false
		}
	}
	if len(this.ClusterTimerAckLevel) != len(that1.ClusterTimerAckLevel) {
		return false
	}
	for i := range this.ClusterTimerAckLevel {
		if !this.ClusterTimerAckLevel[i].Equal(that1.ClusterTimerAckLevel[i]) {
			return false
		}
	}
	if len(this.ClusterReplicationLevel) != len(that1.ClusterReplicationLevel) {
		return false
	}
	for i := range this.ClusterReplicationLevel {
		if this.ClusterReplicationLevel[i] != that1.ClusterReplicationLevel[i] {
			return false
		}
	}
	if len(this.ReplicationDlqAckLevel) != len(that1.ReplicationDlqAckLevel) {
		return false
	}
	for i := range this.ReplicationDlqAckLevel {
		if this.ReplicationDlqAckLevel[i] != that1.ReplicationDlqAckLevel[i] {
			return false
		}
	}
	return true
}
func (this *ReplicationTaskInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationTaskInfo)
	if !ok {
		that2, ok := that.(ReplicationTaskInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if this.TaskType != that1.TaskType {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.FirstEventId != that1.FirstEventId {
		return false
	}
	if this.NextEventId != that1.NextEventId {
		return false
	}
	if this.ScheduledId != that1.ScheduledId {
		return false
	}
	if this.EventStoreVersion != that1.EventStoreVersion {
		return false
	}
	if this.NewRunEventStoreVersion != that1.NewRunEventStoreVersion {
		return false
	}
	if !bytes.Equal(this.BranchToken, that1.BranchToken) {
		return false
	}
	if len(this.LastReplicationInfo) != len(that1.LastReplicationInfo) {
		return false
	}
	for i := range this.LastReplicationInfo {
		if !this.LastReplicationInfo[i].Equal(that1.LastReplicationInfo[i]) {
			return false
		}
	}
	if !bytes.Equal(this.NewRunBranchToken, that1.NewRunBranchToken) {
		return false
	}
	if this.ResetWorkflow != that1.ResetWorkflow {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	return true
}
func (this *TimerTaskInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimerTaskInfo)
	if !ok {
		that2, ok := that.(TimerTaskInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if this.TaskType != that1.TaskType {
		return false
	}
	if this.TimeoutType != that1.TimeoutType {
		return false
	}
	if this.WorkflowBackoffType != that1.WorkflowBackoffType {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.ScheduleAttempt != that1.ScheduleAttempt {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if !this.VisibilityTimestamp.Equal(that1.VisibilityTimestamp) {
		return false
	}
	return true
}
func (this *TransferTaskInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransferTaskInfo)
	if !ok {
		that2, ok := that.(TransferTaskInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if this.TaskType != that1.TaskType {
		return false
	}
	if this.TargetNamespaceId != that1.TargetNamespaceId {
		return false
	}
	if this.TargetWorkflowId != that1.TargetWorkflowId {
		return false
	}
	if this.TargetRunId != that1.TargetRunId {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	if this.TargetChildWorkflowOnly != that1.TargetChildWorkflowOnly {
		return false
	}
	if this.ScheduleId != that1.ScheduleId {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if !this.VisibilityTimestamp.Equal(that1.VisibilityTimestamp) {
		return false
	}
	if this.RecordVisibility != that1.RecordVisibility {
		return false
	}
	return true
}
func (this *HistoryBranchRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryBranchRange)
	if !ok {
		that2, ok := that.(HistoryBranchRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BranchId != that1.BranchId {
		return false
	}
	if this.BeginNodeId != that1.BeginNodeId {
		return false
	}
	if this.EndNodeId != that1.EndNodeId {
		return false
	}
	return true
}
func (this *HistoryBranch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryBranch)
	if !ok {
		that2, ok := that.(HistoryBranch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TreeId != that1.TreeId {
		return false
	}
	if this.BranchId != that1.BranchId {
		return false
	}
	if len(this.Ancestors) != len(that1.Ancestors) {
		return false
	}
	for i := range this.Ancestors {
		if !this.Ancestors[i].Equal(that1.Ancestors[i]) {
			return false
		}
	}
	return true
}
func (this *HistoryTreeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryTreeInfo)
	if !ok {
		that2, ok := that.(HistoryTreeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BranchInfo.Equal(that1.BranchInfo) {
		return false
	}
	if !this.ForkTime.Equal(that1.ForkTime) {
		return false
	}
	if this.Info != that1.Info {
		return false
	}
	return true
}
func (this *TimerInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TimerInfo)
	if !ok {
		that2, ok := that.(TimerInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.StartedId != that1.StartedId {
		return false
	}
	if !this.ExpiryTime.Equal(that1.ExpiryTime) {
		return false
	}
	if this.TaskStatus != that1.TaskStatus {
		return false
	}
	if this.TimerId != that1.TimerId {
		return false
	}
	return true
}
func (this *TaskInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskInfo)
	if !ok {
		that2, ok := that.(TaskInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if this.ScheduleId != that1.ScheduleId {
		return false
	}
	if !this.CreatedTime.Equal(that1.CreatedTime) {
		return false
	}
	if !this.Expiry.Equal(that1.Expiry) {
		return false
	}
	return true
}
func (this *AllocatedTaskInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllocatedTaskInfo)
	if !ok {
		that2, ok := that.(AllocatedTaskInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	return true
}
func (this *TaskQueueInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskQueueInfo)
	if !ok {
		that2, ok := that.(TaskQueueInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.TaskType != that1.TaskType {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.AckLevel != that1.AckLevel {
		return false
	}
	if !this.Expiry.Equal(that1.Expiry) {
		return false
	}
	if !this.LastUpdated.Equal(that1.LastUpdated) {
		return false
	}
	return true
}
func (this *SignalInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignalInfo)
	if !ok {
		that2, ok := that.(SignalInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.InitiatedEventBatchId != that1.InitiatedEventBatchId {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Input.Equal(that1.Input) {
		return false
	}
	if this.Control != that1.Control {
		return false
	}
	if this.InitiatedId != that1.InitiatedId {
		return false
	}
	return true
}
func (this *RequestCancelInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestCancelInfo)
	if !ok {
		that2, ok := that.(RequestCancelInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.InitiatedEventBatchId != that1.InitiatedEventBatchId {
		return false
	}
	if this.CancelRequestId != that1.CancelRequestId {
		return false
	}
	if this.InitiatedId != that1.InitiatedId {
		return false
	}
	return true
}
func (this *WorkflowExecutionState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowExecutionState)
	if !ok {
		that2, ok := that.(WorkflowExecutionState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CreateRequestId != that1.CreateRequestId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *WorkflowExecutionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowExecutionInfo)
	if !ok {
		that2, ok := that.(WorkflowExecutionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.ParentNamespaceId != that1.ParentNamespaceId {
		return false
	}
	if this.ParentWorkflowId != that1.ParentWorkflowId {
		return false
	}
	if this.ParentRunId != that1.ParentRunId {
		return false
	}
	if this.InitiatedId != that1.InitiatedId {
		return false
	}
	if this.CompletionEventBatchId != that1.CompletionEventBatchId {
		return false
	}
	if !bytes.Equal(this.CompletionEvent, that1.CompletionEvent) {
		return false
	}
	if this.CompletionEventEncoding != that1.CompletionEventEncoding {
		return false
	}
	if this.TaskQueue != that1.TaskQueue {
		return false
	}
	if this.WorkflowTypeName != that1.WorkflowTypeName {
		return false
	}
	if this.WorkflowExecutionTimeoutSeconds != that1.WorkflowExecutionTimeoutSeconds {
		return false
	}
	if this.WorkflowRunTimeoutSeconds != that1.WorkflowRunTimeoutSeconds {
		return false
	}
	if this.WorkflowTaskTimeoutSeconds != that1.WorkflowTaskTimeoutSeconds {
		return false
	}
	if this.StartVersion != that1.StartVersion {
		return false
	}
	if this.CurrentVersion != that1.CurrentVersion {
		return false
	}
	if !this.ReplicationData.Equal(that1.ReplicationData) {
		return false
	}
	if this.LastEventTaskId != that1.LastEventTaskId {
		return false
	}
	if this.LastFirstEventId != that1.LastFirstEventId {
		return false
	}
	if this.LastProcessedEvent != that1.LastProcessedEvent {
		return false
	}
	if this.StartTimeNanos != that1.StartTimeNanos {
		return false
	}
	if this.LastUpdatedTimeNanos != that1.LastUpdatedTimeNanos {
		return false
	}
	if this.DecisionVersion != that1.DecisionVersion {
		return false
	}
	if this.DecisionScheduleId != that1.DecisionScheduleId {
		return false
	}
	if this.DecisionStartedId != that1.DecisionStartedId {
		return false
	}
	if this.DecisionTimeout != that1.DecisionTimeout {
		return false
	}
	if this.DecisionAttempt != that1.DecisionAttempt {
		return false
	}
	if this.DecisionStartedTimestampNanos != that1.DecisionStartedTimestampNanos {
		return false
	}
	if this.DecisionScheduledTimestampNanos != that1.DecisionScheduledTimestampNanos {
		return false
	}
	if this.CancelRequested != that1.CancelRequested {
		return false
	}
	if this.DecisionOriginalScheduledTimestampNanos != that1.DecisionOriginalScheduledTimestampNanos {
		return false
	}
	if this.DecisionRequestId != that1.DecisionRequestId {
		return false
	}
	if this.CancelRequestId != that1.CancelRequestId {
		return false
	}
	if this.StickyTaskQueue != that1.StickyTaskQueue {
		return false
	}
	if this.StickyScheduleToStartTimeout != that1.StickyScheduleToStartTimeout {
		return false
	}
	if this.RetryAttempt != that1.RetryAttempt {
		return false
	}
	if this.RetryInitialIntervalSeconds != that1.RetryInitialIntervalSeconds {
		return false
	}
	if this.RetryMaximumIntervalSeconds != that1.RetryMaximumIntervalSeconds {
		return false
	}
	if this.RetryMaximumAttempts != that1.RetryMaximumAttempts {
		return false
	}
	if this.RetryBackoffCoefficient != that1.RetryBackoffCoefficient {
		return false
	}
	if this.RetryExpirationTimeNanos != that1.RetryExpirationTimeNanos {
		return false
	}
	if len(this.RetryNonRetryableErrorTypes) != len(that1.RetryNonRetryableErrorTypes) {
		return false
	}
	for i := range this.RetryNonRetryableErrorTypes {
		if this.RetryNonRetryableErrorTypes[i] != that1.RetryNonRetryableErrorTypes[i] {
			return false
		}
	}
	if this.HasRetryPolicy != that1.HasRetryPolicy {
		return false
	}
	if this.CronSchedule != that1.CronSchedule {
		return false
	}
	if this.EventStoreVersion != that1.EventStoreVersion {
		return false
	}
	if !bytes.Equal(this.EventBranchToken, that1.EventBranchToken) {
		return false
	}
	if this.SignalCount != that1.SignalCount {
		return false
	}
	if this.HistorySize != that1.HistorySize {
		return false
	}
	if this.ClientLibraryVersion != that1.ClientLibraryVersion {
		return false
	}
	if this.ClientFeatureVersion != that1.ClientFeatureVersion {
		return false
	}
	if this.ClientImpl != that1.ClientImpl {
		return false
	}
	if !bytes.Equal(this.AutoResetPoints, that1.AutoResetPoints) {
		return false
	}
	if this.AutoResetPointsEncoding != that1.AutoResetPointsEncoding {
		return false
	}
	if len(this.SearchAttributes) != len(that1.SearchAttributes) {
		return false
	}
	for i := range this.SearchAttributes {
		if !this.SearchAttributes[i].Equal(that1.SearchAttributes[i]) {
			return false
		}
	}
	if len(this.Memo) != len(that1.Memo) {
		return false
	}
	for i := range this.Memo {
		if !this.Memo[i].Equal(that1.Memo[i]) {
			return false
		}
	}
	if !bytes.Equal(this.VersionHistories, that1.VersionHistories) {
		return false
	}
	if this.VersionHistoriesEncoding != that1.VersionHistoriesEncoding {
		return false
	}
	return true
}
func (this *Checksum) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Checksum)
	if !ok {
		that2, ok := that.(Checksum)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Flavor != that1.Flavor {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	return true
}
func (this *ChildExecutionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChildExecutionInfo)
	if !ok {
		that2, ok := that.(ChildExecutionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.InitiatedEventBatchId != that1.InitiatedEventBatchId {
		return false
	}
	if this.StartedId != that1.StartedId {
		return false
	}
	if !bytes.Equal(this.InitiatedEvent, that1.InitiatedEvent) {
		return false
	}
	if this.InitiatedEventEncoding != that1.InitiatedEventEncoding {
		return false
	}
	if this.StartedWorkflowId != that1.StartedWorkflowId {
		return false
	}
	if this.StartedRunId != that1.StartedRunId {
		return false
	}
	if !bytes.Equal(this.StartedEvent, that1.StartedEvent) {
		return false
	}
	if this.StartedEventEncoding != that1.StartedEventEncoding {
		return false
	}
	if this.CreateRequestId != that1.CreateRequestId {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.WorkflowTypeName != that1.WorkflowTypeName {
		return false
	}
	if this.ParentClosePolicy != that1.ParentClosePolicy {
		return false
	}
	if this.InitiatedId != that1.InitiatedId {
		return false
	}
	return true
}
func (this *NamespaceDetail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NamespaceDetail)
	if !ok {
		that2, ok := that.(NamespaceDetail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if !this.ReplicationConfig.Equal(that1.ReplicationConfig) {
		return false
	}
	if this.ConfigVersion != that1.ConfigVersion {
		return false
	}
	if this.FailoverNotificationVersion != that1.FailoverNotificationVersion {
		return false
	}
	if this.FailoverVersion != that1.FailoverVersion {
		return false
	}
	if this.FailoverEndTime != that1.FailoverEndTime {
		return false
	}
	return true
}
func (this *NamespaceInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NamespaceInfo)
	if !ok {
		that2, ok := that.(NamespaceInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if this.Data[i] != that1.Data[i] {
			return false
		}
	}
	return true
}
func (this *NamespaceReplicationConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NamespaceReplicationConfig)
	if !ok {
		that2, ok := that.(NamespaceReplicationConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ActiveClusterName != that1.ActiveClusterName {
		return false
	}
	if len(this.Clusters) != len(that1.Clusters) {
		return false
	}
	for i := range this.Clusters {
		if this.Clusters[i] != that1.Clusters[i] {
			return false
		}
	}
	return true
}
func (this *NamespaceConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NamespaceConfig)
	if !ok {
		that2, ok := that.(NamespaceConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RetentionDays != that1.RetentionDays {
		return false
	}
	if this.EmitMetric != that1.EmitMetric {
		return false
	}
	if this.ArchivalBucket != that1.ArchivalBucket {
		return false
	}
	if !this.BadBinaries.Equal(that1.BadBinaries) {
		return false
	}
	if this.HistoryArchivalStatus != that1.HistoryArchivalStatus {
		return false
	}
	if this.HistoryArchivalUri != that1.HistoryArchivalUri {
		return false
	}
	if this.VisibilityArchivalStatus != that1.VisibilityArchivalStatus {
		return false
	}
	if this.VisibilityArchivalUri != that1.VisibilityArchivalUri {
		return false
	}
	return true
}
func (this *ReplicationData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationData)
	if !ok {
		that2, ok := that.(ReplicationData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LastWriteEventId != that1.LastWriteEventId {
		return false
	}
	if len(this.LastReplicationInfo) != len(that1.LastReplicationInfo) {
		return false
	}
	for i := range this.LastReplicationInfo {
		if !this.LastReplicationInfo[i].Equal(that1.LastReplicationInfo[i]) {
			return false
		}
	}
	return true
}
func (this *ReplicationVersions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationVersions)
	if !ok {
		that2, ok := that.(ReplicationVersions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StartVersion.Equal(that1.StartVersion) {
		return false
	}
	if !this.LastWriteVersion.Equal(that1.LastWriteVersion) {
		return false
	}
	return true
}
func (this *ImmutableClusterMetadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&persistenceblobs.ImmutableClusterMetadata{")
	s = append(s, "ClusterName: "+fmt.Sprintf("%#v", this.ClusterName)+",\n")
	s = append(s, "HistoryShardCount: "+fmt.Sprintf("%#v", this.HistoryShardCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActivityInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 38)
	s = append(s, "&persistenceblobs.ActivityInfo{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "ScheduledEventBatchId: "+fmt.Sprintf("%#v", this.ScheduledEventBatchId)+",\n")
	s = append(s, "ScheduledEvent: "+fmt.Sprintf("%#v", this.ScheduledEvent)+",\n")
	s = append(s, "ScheduledEventEncoding: "+fmt.Sprintf("%#v", this.ScheduledEventEncoding)+",\n")
	s = append(s, "ScheduledTimeNanos: "+fmt.Sprintf("%#v", this.ScheduledTimeNanos)+",\n")
	s = append(s, "StartedId: "+fmt.Sprintf("%#v", this.StartedId)+",\n")
	s = append(s, "StartedEvent: "+fmt.Sprintf("%#v", this.StartedEvent)+",\n")
	s = append(s, "StartedEventEncoding: "+fmt.Sprintf("%#v", this.StartedEventEncoding)+",\n")
	s = append(s, "StartedTimeNanos: "+fmt.Sprintf("%#v", this.StartedTimeNanos)+",\n")
	s = append(s, "ActivityId: "+fmt.Sprintf("%#v", this.ActivityId)+",\n")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "ScheduleToStartTimeoutSeconds: "+fmt.Sprintf("%#v", this.ScheduleToStartTimeoutSeconds)+",\n")
	s = append(s, "ScheduleToCloseTimeoutSeconds: "+fmt.Sprintf("%#v", this.ScheduleToCloseTimeoutSeconds)+",\n")
	s = append(s, "StartToCloseTimeoutSeconds: "+fmt.Sprintf("%#v", this.StartToCloseTimeoutSeconds)+",\n")
	s = append(s, "HeartbeatTimeoutSeconds: "+fmt.Sprintf("%#v", this.HeartbeatTimeoutSeconds)+",\n")
	s = append(s, "CancelRequested: "+fmt.Sprintf("%#v", this.CancelRequested)+",\n")
	s = append(s, "CancelRequestId: "+fmt.Sprintf("%#v", this.CancelRequestId)+",\n")
	s = append(s, "TimerTaskStatus: "+fmt.Sprintf("%#v", this.TimerTaskStatus)+",\n")
	s = append(s, "Attempt: "+fmt.Sprintf("%#v", this.Attempt)+",\n")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	s = append(s, "StartedIdentity: "+fmt.Sprintf("%#v", this.StartedIdentity)+",\n")
	s = append(s, "HasRetryPolicy: "+fmt.Sprintf("%#v", this.HasRetryPolicy)+",\n")
	s = append(s, "RetryInitialIntervalSeconds: "+fmt.Sprintf("%#v", this.RetryInitialIntervalSeconds)+",\n")
	s = append(s, "RetryMaximumIntervalSeconds: "+fmt.Sprintf("%#v", this.RetryMaximumIntervalSeconds)+",\n")
	s = append(s, "RetryMaximumAttempts: "+fmt.Sprintf("%#v", this.RetryMaximumAttempts)+",\n")
	s = append(s, "RetryExpirationTimeNanos: "+fmt.Sprintf("%#v", this.RetryExpirationTimeNanos)+",\n")
	s = append(s, "RetryBackoffCoefficient: "+fmt.Sprintf("%#v", this.RetryBackoffCoefficient)+",\n")
	s = append(s, "RetryNonRetryableErrorTypes: "+fmt.Sprintf("%#v", this.RetryNonRetryableErrorTypes)+",\n")
	if this.RetryLastFailure != nil {
		s = append(s, "RetryLastFailure: "+fmt.Sprintf("%#v", this.RetryLastFailure)+",\n")
	}
	s = append(s, "RetryLastWorkerIdentity: "+fmt.Sprintf("%#v", this.RetryLastWorkerIdentity)+",\n")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "ScheduleId: "+fmt.Sprintf("%#v", this.ScheduleId)+",\n")
	if this.LastHeartbeatDetails != nil {
		s = append(s, "LastHeartbeatDetails: "+fmt.Sprintf("%#v", this.LastHeartbeatDetails)+",\n")
	}
	if this.LastHeartbeatUpdatedTime != nil {
		s = append(s, "LastHeartbeatUpdatedTime: "+fmt.Sprintf("%#v", this.LastHeartbeatUpdatedTime)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShardInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&persistenceblobs.ShardInfo{")
	s = append(s, "ShardId: "+fmt.Sprintf("%#v", this.ShardId)+",\n")
	s = append(s, "RangeId: "+fmt.Sprintf("%#v", this.RangeId)+",\n")
	s = append(s, "Owner: "+fmt.Sprintf("%#v", this.Owner)+",\n")
	s = append(s, "ReplicationAckLevel: "+fmt.Sprintf("%#v", this.ReplicationAckLevel)+",\n")
	s = append(s, "TransferAckLevel: "+fmt.Sprintf("%#v", this.TransferAckLevel)+",\n")
	s = append(s, "StolenSinceRenew: "+fmt.Sprintf("%#v", this.StolenSinceRenew)+",\n")
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.TimerAckLevel != nil {
		s = append(s, "TimerAckLevel: "+fmt.Sprintf("%#v", this.TimerAckLevel)+",\n")
	}
	s = append(s, "NamespaceNotificationVersion: "+fmt.Sprintf("%#v", this.NamespaceNotificationVersion)+",\n")
	keysForClusterTransferAckLevel := make([]string, 0, len(this.ClusterTransferAckLevel))
	for k, _ := range this.ClusterTransferAckLevel {
		keysForClusterTransferAckLevel = append(keysForClusterTransferAckLevel, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForClusterTransferAckLevel)
	mapStringForClusterTransferAckLevel := "map[string]int64{"
	for _, k := range keysForClusterTransferAckLevel {
		mapStringForClusterTransferAckLevel += fmt.Sprintf("%#v: %#v,", k, this.ClusterTransferAckLevel[k])
	}
	mapStringForClusterTransferAckLevel += "}"
	if this.ClusterTransferAckLevel != nil {
		s = append(s, "ClusterTransferAckLevel: "+mapStringForClusterTransferAckLevel+",\n")
	}
	keysForClusterTimerAckLevel := make([]string, 0, len(this.ClusterTimerAckLevel))
	for k, _ := range this.ClusterTimerAckLevel {
		keysForClusterTimerAckLevel = append(keysForClusterTimerAckLevel, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForClusterTimerAckLevel)
	mapStringForClusterTimerAckLevel := "map[string]*types.Timestamp{"
	for _, k := range keysForClusterTimerAckLevel {
		mapStringForClusterTimerAckLevel += fmt.Sprintf("%#v: %#v,", k, this.ClusterTimerAckLevel[k])
	}
	mapStringForClusterTimerAckLevel += "}"
	if this.ClusterTimerAckLevel != nil {
		s = append(s, "ClusterTimerAckLevel: "+mapStringForClusterTimerAckLevel+",\n")
	}
	keysForClusterReplicationLevel := make([]string, 0, len(this.ClusterReplicationLevel))
	for k, _ := range this.ClusterReplicationLevel {
		keysForClusterReplicationLevel = append(keysForClusterReplicationLevel, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForClusterReplicationLevel)
	mapStringForClusterReplicationLevel := "map[string]int64{"
	for _, k := range keysForClusterReplicationLevel {
		mapStringForClusterReplicationLevel += fmt.Sprintf("%#v: %#v,", k, this.ClusterReplicationLevel[k])
	}
	mapStringForClusterReplicationLevel += "}"
	if this.ClusterReplicationLevel != nil {
		s = append(s, "ClusterReplicationLevel: "+mapStringForClusterReplicationLevel+",\n")
	}
	keysForReplicationDlqAckLevel := make([]string, 0, len(this.ReplicationDlqAckLevel))
	for k, _ := range this.ReplicationDlqAckLevel {
		keysForReplicationDlqAckLevel = append(keysForReplicationDlqAckLevel, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForReplicationDlqAckLevel)
	mapStringForReplicationDlqAckLevel := "map[string]int64{"
	for _, k := range keysForReplicationDlqAckLevel {
		mapStringForReplicationDlqAckLevel += fmt.Sprintf("%#v: %#v,", k, this.ReplicationDlqAckLevel[k])
	}
	mapStringForReplicationDlqAckLevel += "}"
	if this.ReplicationDlqAckLevel != nil {
		s = append(s, "ReplicationDlqAckLevel: "+mapStringForReplicationDlqAckLevel+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplicationTaskInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&persistenceblobs.ReplicationTaskInfo{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "TaskType: "+fmt.Sprintf("%#v", this.TaskType)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "FirstEventId: "+fmt.Sprintf("%#v", this.FirstEventId)+",\n")
	s = append(s, "NextEventId: "+fmt.Sprintf("%#v", this.NextEventId)+",\n")
	s = append(s, "ScheduledId: "+fmt.Sprintf("%#v", this.ScheduledId)+",\n")
	s = append(s, "EventStoreVersion: "+fmt.Sprintf("%#v", this.EventStoreVersion)+",\n")
	s = append(s, "NewRunEventStoreVersion: "+fmt.Sprintf("%#v", this.NewRunEventStoreVersion)+",\n")
	s = append(s, "BranchToken: "+fmt.Sprintf("%#v", this.BranchToken)+",\n")
	keysForLastReplicationInfo := make([]string, 0, len(this.LastReplicationInfo))
	for k, _ := range this.LastReplicationInfo {
		keysForLastReplicationInfo = append(keysForLastReplicationInfo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLastReplicationInfo)
	mapStringForLastReplicationInfo := "map[string]*v13.ReplicationInfo{"
	for _, k := range keysForLastReplicationInfo {
		mapStringForLastReplicationInfo += fmt.Sprintf("%#v: %#v,", k, this.LastReplicationInfo[k])
	}
	mapStringForLastReplicationInfo += "}"
	if this.LastReplicationInfo != nil {
		s = append(s, "LastReplicationInfo: "+mapStringForLastReplicationInfo+",\n")
	}
	s = append(s, "NewRunBranchToken: "+fmt.Sprintf("%#v", this.NewRunBranchToken)+",\n")
	s = append(s, "ResetWorkflow: "+fmt.Sprintf("%#v", this.ResetWorkflow)+",\n")
	s = append(s, "TaskId: "+fmt.Sprintf("%#v", this.TaskId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TimerTaskInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&persistenceblobs.TimerTaskInfo{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "TaskType: "+fmt.Sprintf("%#v", this.TaskType)+",\n")
	s = append(s, "TimeoutType: "+fmt.Sprintf("%#v", this.TimeoutType)+",\n")
	s = append(s, "WorkflowBackoffType: "+fmt.Sprintf("%#v", this.WorkflowBackoffType)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "ScheduleAttempt: "+fmt.Sprintf("%#v", this.ScheduleAttempt)+",\n")
	s = append(s, "EventId: "+fmt.Sprintf("%#v", this.EventId)+",\n")
	s = append(s, "TaskId: "+fmt.Sprintf("%#v", this.TaskId)+",\n")
	if this.VisibilityTimestamp != nil {
		s = append(s, "VisibilityTimestamp: "+fmt.Sprintf("%#v", this.VisibilityTimestamp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransferTaskInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&persistenceblobs.TransferTaskInfo{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "TaskType: "+fmt.Sprintf("%#v", this.TaskType)+",\n")
	s = append(s, "TargetNamespaceId: "+fmt.Sprintf("%#v", this.TargetNamespaceId)+",\n")
	s = append(s, "TargetWorkflowId: "+fmt.Sprintf("%#v", this.TargetWorkflowId)+",\n")
	s = append(s, "TargetRunId: "+fmt.Sprintf("%#v", this.TargetRunId)+",\n")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	s = append(s, "TargetChildWorkflowOnly: "+fmt.Sprintf("%#v", this.TargetChildWorkflowOnly)+",\n")
	s = append(s, "ScheduleId: "+fmt.Sprintf("%#v", this.ScheduleId)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "TaskId: "+fmt.Sprintf("%#v", this.TaskId)+",\n")
	if this.VisibilityTimestamp != nil {
		s = append(s, "VisibilityTimestamp: "+fmt.Sprintf("%#v", this.VisibilityTimestamp)+",\n")
	}
	s = append(s, "RecordVisibility: "+fmt.Sprintf("%#v", this.RecordVisibility)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HistoryBranchRange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&persistenceblobs.HistoryBranchRange{")
	s = append(s, "BranchId: "+fmt.Sprintf("%#v", this.BranchId)+",\n")
	s = append(s, "BeginNodeId: "+fmt.Sprintf("%#v", this.BeginNodeId)+",\n")
	s = append(s, "EndNodeId: "+fmt.Sprintf("%#v", this.EndNodeId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HistoryBranch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&persistenceblobs.HistoryBranch{")
	s = append(s, "TreeId: "+fmt.Sprintf("%#v", this.TreeId)+",\n")
	s = append(s, "BranchId: "+fmt.Sprintf("%#v", this.BranchId)+",\n")
	if this.Ancestors != nil {
		s = append(s, "Ancestors: "+fmt.Sprintf("%#v", this.Ancestors)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HistoryTreeInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&persistenceblobs.HistoryTreeInfo{")
	if this.BranchInfo != nil {
		s = append(s, "BranchInfo: "+fmt.Sprintf("%#v", this.BranchInfo)+",\n")
	}
	if this.ForkTime != nil {
		s = append(s, "ForkTime: "+fmt.Sprintf("%#v", this.ForkTime)+",\n")
	}
	s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TimerInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&persistenceblobs.TimerInfo{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "StartedId: "+fmt.Sprintf("%#v", this.StartedId)+",\n")
	if this.ExpiryTime != nil {
		s = append(s, "ExpiryTime: "+fmt.Sprintf("%#v", this.ExpiryTime)+",\n")
	}
	s = append(s, "TaskStatus: "+fmt.Sprintf("%#v", this.TaskStatus)+",\n")
	s = append(s, "TimerId: "+fmt.Sprintf("%#v", this.TimerId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&persistenceblobs.TaskInfo{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "ScheduleId: "+fmt.Sprintf("%#v", this.ScheduleId)+",\n")
	if this.CreatedTime != nil {
		s = append(s, "CreatedTime: "+fmt.Sprintf("%#v", this.CreatedTime)+",\n")
	}
	if this.Expiry != nil {
		s = append(s, "Expiry: "+fmt.Sprintf("%#v", this.Expiry)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllocatedTaskInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&persistenceblobs.AllocatedTaskInfo{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "TaskId: "+fmt.Sprintf("%#v", this.TaskId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskQueueInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&persistenceblobs.TaskQueueInfo{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "TaskType: "+fmt.Sprintf("%#v", this.TaskType)+",\n")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "AckLevel: "+fmt.Sprintf("%#v", this.AckLevel)+",\n")
	if this.Expiry != nil {
		s = append(s, "Expiry: "+fmt.Sprintf("%#v", this.Expiry)+",\n")
	}
	if this.LastUpdated != nil {
		s = append(s, "LastUpdated: "+fmt.Sprintf("%#v", this.LastUpdated)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignalInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&persistenceblobs.SignalInfo{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "InitiatedEventBatchId: "+fmt.Sprintf("%#v", this.InitiatedEventBatchId)+",\n")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Input != nil {
		s = append(s, "Input: "+fmt.Sprintf("%#v", this.Input)+",\n")
	}
	s = append(s, "Control: "+fmt.Sprintf("%#v", this.Control)+",\n")
	s = append(s, "InitiatedId: "+fmt.Sprintf("%#v", this.InitiatedId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCancelInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&persistenceblobs.RequestCancelInfo{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "InitiatedEventBatchId: "+fmt.Sprintf("%#v", this.InitiatedEventBatchId)+",\n")
	s = append(s, "CancelRequestId: "+fmt.Sprintf("%#v", this.CancelRequestId)+",\n")
	s = append(s, "InitiatedId: "+fmt.Sprintf("%#v", this.InitiatedId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowExecutionState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&persistenceblobs.WorkflowExecutionState{")
	s = append(s, "CreateRequestId: "+fmt.Sprintf("%#v", this.CreateRequestId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowExecutionInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 61)
	s = append(s, "&persistenceblobs.WorkflowExecutionInfo{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "ParentNamespaceId: "+fmt.Sprintf("%#v", this.ParentNamespaceId)+",\n")
	s = append(s, "ParentWorkflowId: "+fmt.Sprintf("%#v", this.ParentWorkflowId)+",\n")
	s = append(s, "ParentRunId: "+fmt.Sprintf("%#v", this.ParentRunId)+",\n")
	s = append(s, "InitiatedId: "+fmt.Sprintf("%#v", this.InitiatedId)+",\n")
	s = append(s, "CompletionEventBatchId: "+fmt.Sprintf("%#v", this.CompletionEventBatchId)+",\n")
	s = append(s, "CompletionEvent: "+fmt.Sprintf("%#v", this.CompletionEvent)+",\n")
	s = append(s, "CompletionEventEncoding: "+fmt.Sprintf("%#v", this.CompletionEventEncoding)+",\n")
	s = append(s, "TaskQueue: "+fmt.Sprintf("%#v", this.TaskQueue)+",\n")
	s = append(s, "WorkflowTypeName: "+fmt.Sprintf("%#v", this.WorkflowTypeName)+",\n")
	s = append(s, "WorkflowExecutionTimeoutSeconds: "+fmt.Sprintf("%#v", this.WorkflowExecutionTimeoutSeconds)+",\n")
	s = append(s, "WorkflowRunTimeoutSeconds: "+fmt.Sprintf("%#v", this.WorkflowRunTimeoutSeconds)+",\n")
	s = append(s, "WorkflowTaskTimeoutSeconds: "+fmt.Sprintf("%#v", this.WorkflowTaskTimeoutSeconds)+",\n")
	s = append(s, "StartVersion: "+fmt.Sprintf("%#v", this.StartVersion)+",\n")
	s = append(s, "CurrentVersion: "+fmt.Sprintf("%#v", this.CurrentVersion)+",\n")
	if this.ReplicationData != nil {
		s = append(s, "ReplicationData: "+fmt.Sprintf("%#v", this.ReplicationData)+",\n")
	}
	s = append(s, "LastEventTaskId: "+fmt.Sprintf("%#v", this.LastEventTaskId)+",\n")
	s = append(s, "LastFirstEventId: "+fmt.Sprintf("%#v", this.LastFirstEventId)+",\n")
	s = append(s, "LastProcessedEvent: "+fmt.Sprintf("%#v", this.LastProcessedEvent)+",\n")
	s = append(s, "StartTimeNanos: "+fmt.Sprintf("%#v", this.StartTimeNanos)+",\n")
	s = append(s, "LastUpdatedTimeNanos: "+fmt.Sprintf("%#v", this.LastUpdatedTimeNanos)+",\n")
	s = append(s, "DecisionVersion: "+fmt.Sprintf("%#v", this.DecisionVersion)+",\n")
	s = append(s, "DecisionScheduleId: "+fmt.Sprintf("%#v", this.DecisionScheduleId)+",\n")
	s = append(s, "DecisionStartedId: "+fmt.Sprintf("%#v", this.DecisionStartedId)+",\n")
	s = append(s, "DecisionTimeout: "+fmt.Sprintf("%#v", this.DecisionTimeout)+",\n")
	s = append(s, "DecisionAttempt: "+fmt.Sprintf("%#v", this.DecisionAttempt)+",\n")
	s = append(s, "DecisionStartedTimestampNanos: "+fmt.Sprintf("%#v", this.DecisionStartedTimestampNanos)+",\n")
	s = append(s, "DecisionScheduledTimestampNanos: "+fmt.Sprintf("%#v", this.DecisionScheduledTimestampNanos)+",\n")
	s = append(s, "CancelRequested: "+fmt.Sprintf("%#v", this.CancelRequested)+",\n")
	s = append(s, "DecisionOriginalScheduledTimestampNanos: "+fmt.Sprintf("%#v", this.DecisionOriginalScheduledTimestampNanos)+",\n")
	s = append(s, "DecisionRequestId: "+fmt.Sprintf("%#v", this.DecisionRequestId)+",\n")
	s = append(s, "CancelRequestId: "+fmt.Sprintf("%#v", this.CancelRequestId)+",\n")
	s = append(s, "StickyTaskQueue: "+fmt.Sprintf("%#v", this.StickyTaskQueue)+",\n")
	s = append(s, "StickyScheduleToStartTimeout: "+fmt.Sprintf("%#v", this.StickyScheduleToStartTimeout)+",\n")
	s = append(s, "RetryAttempt: "+fmt.Sprintf("%#v", this.RetryAttempt)+",\n")
	s = append(s, "RetryInitialIntervalSeconds: "+fmt.Sprintf("%#v", this.RetryInitialIntervalSeconds)+",\n")
	s = append(s, "RetryMaximumIntervalSeconds: "+fmt.Sprintf("%#v", this.RetryMaximumIntervalSeconds)+",\n")
	s = append(s, "RetryMaximumAttempts: "+fmt.Sprintf("%#v", this.RetryMaximumAttempts)+",\n")
	s = append(s, "RetryBackoffCoefficient: "+fmt.Sprintf("%#v", this.RetryBackoffCoefficient)+",\n")
	s = append(s, "RetryExpirationTimeNanos: "+fmt.Sprintf("%#v", this.RetryExpirationTimeNanos)+",\n")
	s = append(s, "RetryNonRetryableErrorTypes: "+fmt.Sprintf("%#v", this.RetryNonRetryableErrorTypes)+",\n")
	s = append(s, "HasRetryPolicy: "+fmt.Sprintf("%#v", this.HasRetryPolicy)+",\n")
	s = append(s, "CronSchedule: "+fmt.Sprintf("%#v", this.CronSchedule)+",\n")
	s = append(s, "EventStoreVersion: "+fmt.Sprintf("%#v", this.EventStoreVersion)+",\n")
	s = append(s, "EventBranchToken: "+fmt.Sprintf("%#v", this.EventBranchToken)+",\n")
	s = append(s, "SignalCount: "+fmt.Sprintf("%#v", this.SignalCount)+",\n")
	s = append(s, "HistorySize: "+fmt.Sprintf("%#v", this.HistorySize)+",\n")
	s = append(s, "ClientLibraryVersion: "+fmt.Sprintf("%#v", this.ClientLibraryVersion)+",\n")
	s = append(s, "ClientFeatureVersion: "+fmt.Sprintf("%#v", this.ClientFeatureVersion)+",\n")
	s = append(s, "ClientImpl: "+fmt.Sprintf("%#v", this.ClientImpl)+",\n")
	s = append(s, "AutoResetPoints: "+fmt.Sprintf("%#v", this.AutoResetPoints)+",\n")
	s = append(s, "AutoResetPointsEncoding: "+fmt.Sprintf("%#v", this.AutoResetPointsEncoding)+",\n")
	keysForSearchAttributes := make([]string, 0, len(this.SearchAttributes))
	for k, _ := range this.SearchAttributes {
		keysForSearchAttributes = append(keysForSearchAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSearchAttributes)
	mapStringForSearchAttributes := "map[string]*v11.Payload{"
	for _, k := range keysForSearchAttributes {
		mapStringForSearchAttributes += fmt.Sprintf("%#v: %#v,", k, this.SearchAttributes[k])
	}
	mapStringForSearchAttributes += "}"
	if this.SearchAttributes != nil {
		s = append(s, "SearchAttributes: "+mapStringForSearchAttributes+",\n")
	}
	keysForMemo := make([]string, 0, len(this.Memo))
	for k, _ := range this.Memo {
		keysForMemo = append(keysForMemo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMemo)
	mapStringForMemo := "map[string]*v11.Payload{"
	for _, k := range keysForMemo {
		mapStringForMemo += fmt.Sprintf("%#v: %#v,", k, this.Memo[k])
	}
	mapStringForMemo += "}"
	if this.Memo != nil {
		s = append(s, "Memo: "+mapStringForMemo+",\n")
	}
	s = append(s, "VersionHistories: "+fmt.Sprintf("%#v", this.VersionHistories)+",\n")
	s = append(s, "VersionHistoriesEncoding: "+fmt.Sprintf("%#v", this.VersionHistoriesEncoding)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Checksum) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&persistenceblobs.Checksum{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Flavor: "+fmt.Sprintf("%#v", this.Flavor)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChildExecutionInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&persistenceblobs.ChildExecutionInfo{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "InitiatedEventBatchId: "+fmt.Sprintf("%#v", this.InitiatedEventBatchId)+",\n")
	s = append(s, "StartedId: "+fmt.Sprintf("%#v", this.StartedId)+",\n")
	s = append(s, "InitiatedEvent: "+fmt.Sprintf("%#v", this.InitiatedEvent)+",\n")
	s = append(s, "InitiatedEventEncoding: "+fmt.Sprintf("%#v", this.InitiatedEventEncoding)+",\n")
	s = append(s, "StartedWorkflowId: "+fmt.Sprintf("%#v", this.StartedWorkflowId)+",\n")
	s = append(s, "StartedRunId: "+fmt.Sprintf("%#v", this.StartedRunId)+",\n")
	s = append(s, "StartedEvent: "+fmt.Sprintf("%#v", this.StartedEvent)+",\n")
	s = append(s, "StartedEventEncoding: "+fmt.Sprintf("%#v", this.StartedEventEncoding)+",\n")
	s = append(s, "CreateRequestId: "+fmt.Sprintf("%#v", this.CreateRequestId)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "WorkflowTypeName: "+fmt.Sprintf("%#v", this.WorkflowTypeName)+",\n")
	s = append(s, "ParentClosePolicy: "+fmt.Sprintf("%#v", this.ParentClosePolicy)+",\n")
	s = append(s, "InitiatedId: "+fmt.Sprintf("%#v", this.InitiatedId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NamespaceDetail) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&persistenceblobs.NamespaceDetail{")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	if this.ReplicationConfig != nil {
		s = append(s, "ReplicationConfig: "+fmt.Sprintf("%#v", this.ReplicationConfig)+",\n")
	}
	s = append(s, "ConfigVersion: "+fmt.Sprintf("%#v", this.ConfigVersion)+",\n")
	s = append(s, "FailoverNotificationVersion: "+fmt.Sprintf("%#v", this.FailoverNotificationVersion)+",\n")
	s = append(s, "FailoverVersion: "+fmt.Sprintf("%#v", this.FailoverVersion)+",\n")
	s = append(s, "FailoverEndTime: "+fmt.Sprintf("%#v", this.FailoverEndTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NamespaceInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&persistenceblobs.NamespaceInfo{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Owner: "+fmt.Sprintf("%#v", this.Owner)+",\n")
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%#v: %#v,", k, this.Data[k])
	}
	mapStringForData += "}"
	if this.Data != nil {
		s = append(s, "Data: "+mapStringForData+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NamespaceReplicationConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&persistenceblobs.NamespaceReplicationConfig{")
	s = append(s, "ActiveClusterName: "+fmt.Sprintf("%#v", this.ActiveClusterName)+",\n")
	s = append(s, "Clusters: "+fmt.Sprintf("%#v", this.Clusters)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NamespaceConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&persistenceblobs.NamespaceConfig{")
	s = append(s, "RetentionDays: "+fmt.Sprintf("%#v", this.RetentionDays)+",\n")
	s = append(s, "EmitMetric: "+fmt.Sprintf("%#v", this.EmitMetric)+",\n")
	s = append(s, "ArchivalBucket: "+fmt.Sprintf("%#v", this.ArchivalBucket)+",\n")
	if this.BadBinaries != nil {
		s = append(s, "BadBinaries: "+fmt.Sprintf("%#v", this.BadBinaries)+",\n")
	}
	s = append(s, "HistoryArchivalStatus: "+fmt.Sprintf("%#v", this.HistoryArchivalStatus)+",\n")
	s = append(s, "HistoryArchivalUri: "+fmt.Sprintf("%#v", this.HistoryArchivalUri)+",\n")
	s = append(s, "VisibilityArchivalStatus: "+fmt.Sprintf("%#v", this.VisibilityArchivalStatus)+",\n")
	s = append(s, "VisibilityArchivalUri: "+fmt.Sprintf("%#v", this.VisibilityArchivalUri)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplicationData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&persistenceblobs.ReplicationData{")
	s = append(s, "LastWriteEventId: "+fmt.Sprintf("%#v", this.LastWriteEventId)+",\n")
	keysForLastReplicationInfo := make([]string, 0, len(this.LastReplicationInfo))
	for k, _ := range this.LastReplicationInfo {
		keysForLastReplicationInfo = append(keysForLastReplicationInfo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLastReplicationInfo)
	mapStringForLastReplicationInfo := "map[string]*v13.ReplicationInfo{"
	for _, k := range keysForLastReplicationInfo {
		mapStringForLastReplicationInfo += fmt.Sprintf("%#v: %#v,", k, this.LastReplicationInfo[k])
	}
	mapStringForLastReplicationInfo += "}"
	if this.LastReplicationInfo != nil {
		s = append(s, "LastReplicationInfo: "+mapStringForLastReplicationInfo+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplicationVersions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&persistenceblobs.ReplicationVersions{")
	if this.StartVersion != nil {
		s = append(s, "StartVersion: "+fmt.Sprintf("%#v", this.StartVersion)+",\n")
	}
	if this.LastWriteVersion != nil {
		s = append(s, "LastWriteVersion: "+fmt.Sprintf("%#v", this.LastWriteVersion)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ImmutableClusterMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImmutableClusterMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImmutableClusterMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HistoryShardCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.HistoryShardCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ClusterName) > 0 {
		i -= len(m.ClusterName)
		copy(dAtA[i:], m.ClusterName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ClusterName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActivityInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActivityInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastHeartbeatUpdatedTime != nil {
		{
			size, err := m.LastHeartbeatUpdatedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if m.LastHeartbeatDetails != nil {
		{
			size, err := m.LastHeartbeatDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if m.ScheduleId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduleId))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if len(m.RetryLastWorkerIdentity) > 0 {
		i -= len(m.RetryLastWorkerIdentity)
		copy(dAtA[i:], m.RetryLastWorkerIdentity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RetryLastWorkerIdentity)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.RetryLastFailure != nil {
		{
			size, err := m.RetryLastFailure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	if len(m.RetryNonRetryableErrorTypes) > 0 {
		for iNdEx := len(m.RetryNonRetryableErrorTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RetryNonRetryableErrorTypes[iNdEx])
			copy(dAtA[i:], m.RetryNonRetryableErrorTypes[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.RetryNonRetryableErrorTypes[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xe2
		}
	}
	if m.RetryBackoffCoefficient != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RetryBackoffCoefficient))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd9
	}
	if m.RetryExpirationTimeNanos != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RetryExpirationTimeNanos))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.RetryMaximumAttempts != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RetryMaximumAttempts))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.RetryMaximumIntervalSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RetryMaximumIntervalSeconds))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.RetryInitialIntervalSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RetryInitialIntervalSeconds))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.HasRetryPolicy {
		i--
		if m.HasRetryPolicy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if len(m.StartedIdentity) > 0 {
		i -= len(m.StartedIdentity)
		copy(dAtA[i:], m.StartedIdentity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.StartedIdentity)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.Attempt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.TimerTaskStatus != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TimerTaskStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.CancelRequestId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CancelRequestId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CancelRequested {
		i--
		if m.CancelRequested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.HeartbeatTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.HeartbeatTimeoutSeconds))
		i--
		dAtA[i] = 0x78
	}
	if m.StartToCloseTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x70
	}
	if m.ScheduleToCloseTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduleToCloseTimeoutSeconds))
		i--
		dAtA[i] = 0x68
	}
	if m.ScheduleToStartTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduleToStartTimeoutSeconds))
		i--
		dAtA[i] = 0x60
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ActivityId) > 0 {
		i -= len(m.ActivityId)
		copy(dAtA[i:], m.ActivityId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ActivityId)))
		i--
		dAtA[i] = 0x52
	}
	if m.StartedTimeNanos != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedTimeNanos))
		i--
		dAtA[i] = 0x48
	}
	if len(m.StartedEventEncoding) > 0 {
		i -= len(m.StartedEventEncoding)
		copy(dAtA[i:], m.StartedEventEncoding)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.StartedEventEncoding)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.StartedEvent) > 0 {
		i -= len(m.StartedEvent)
		copy(dAtA[i:], m.StartedEvent)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.StartedEvent)))
		i--
		dAtA[i] = 0x3a
	}
	if m.StartedId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedId))
		i--
		dAtA[i] = 0x30
	}
	if m.ScheduledTimeNanos != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledTimeNanos))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ScheduledEventEncoding) > 0 {
		i -= len(m.ScheduledEventEncoding)
		copy(dAtA[i:], m.ScheduledEventEncoding)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ScheduledEventEncoding)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ScheduledEvent) > 0 {
		i -= len(m.ScheduledEvent)
		copy(dAtA[i:], m.ScheduledEvent)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ScheduledEvent)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ScheduledEventBatchId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventBatchId))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReplicationDlqAckLevel) > 0 {
		for k := range m.ReplicationDlqAckLevel {
			v := m.ReplicationDlqAckLevel[k]
			baseI := i
			i = encodeVarintMessage(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.ClusterReplicationLevel) > 0 {
		for k := range m.ClusterReplicationLevel {
			v := m.ClusterReplicationLevel[k]
			baseI := i
			i = encodeVarintMessage(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.ClusterTimerAckLevel) > 0 {
		for k := range m.ClusterTimerAckLevel {
			v := m.ClusterTimerAckLevel[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMessage(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.ClusterTransferAckLevel) > 0 {
		for k := range m.ClusterTransferAckLevel {
			v := m.ClusterTransferAckLevel[k]
			baseI := i
			i = encodeVarintMessage(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.NamespaceNotificationVersion != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.NamespaceNotificationVersion))
		i--
		dAtA[i] = 0x48
	}
	if m.TimerAckLevel != nil {
		{
			size, err := m.TimerAckLevel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.StolenSinceRenew != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StolenSinceRenew))
		i--
		dAtA[i] = 0x30
	}
	if m.TransferAckLevel != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TransferAckLevel))
		i--
		dAtA[i] = 0x28
	}
	if m.ReplicationAckLevel != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ReplicationAckLevel))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RangeId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RangeId))
		i--
		dAtA[i] = 0x10
	}
	if m.ShardId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ShardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationTaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationTaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationTaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x78
	}
	if m.ResetWorkflow {
		i--
		if m.ResetWorkflow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if len(m.NewRunBranchToken) > 0 {
		i -= len(m.NewRunBranchToken)
		copy(dAtA[i:], m.NewRunBranchToken)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NewRunBranchToken)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.LastReplicationInfo) > 0 {
		for k := range m.LastReplicationInfo {
			v := m.LastReplicationInfo[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMessage(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.BranchToken) > 0 {
		i -= len(m.BranchToken)
		copy(dAtA[i:], m.BranchToken)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BranchToken)))
		i--
		dAtA[i] = 0x5a
	}
	if m.NewRunEventStoreVersion != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.NewRunEventStoreVersion))
		i--
		dAtA[i] = 0x50
	}
	if m.EventStoreVersion != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.EventStoreVersion))
		i--
		dAtA[i] = 0x48
	}
	if m.ScheduledId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledId))
		i--
		dAtA[i] = 0x40
	}
	if m.NextEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.NextEventId))
		i--
		dAtA[i] = 0x38
	}
	if m.FirstEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.FirstEventId))
		i--
		dAtA[i] = 0x30
	}
	if m.Version != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x28
	}
	if m.TaskType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TaskType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimerTaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimerTaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimerTaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VisibilityTimestamp != nil {
		{
			size, err := m.VisibilityTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.TaskId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x50
	}
	if m.EventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x48
	}
	if m.ScheduleAttempt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduleAttempt))
		i--
		dAtA[i] = 0x40
	}
	if m.Version != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x38
	}
	if m.WorkflowBackoffType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowBackoffType))
		i--
		dAtA[i] = 0x30
	}
	if m.TimeoutType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TimeoutType))
		i--
		dAtA[i] = 0x28
	}
	if m.TaskType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TaskType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransferTaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferTaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferTaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordVisibility {
		i--
		if m.RecordVisibility {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.VisibilityTimestamp != nil {
		{
			size, err := m.VisibilityTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.TaskId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x60
	}
	if m.Version != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x58
	}
	if m.ScheduleId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduleId))
		i--
		dAtA[i] = 0x50
	}
	if m.TargetChildWorkflowOnly {
		i--
		if m.TargetChildWorkflowOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TargetRunId) > 0 {
		i -= len(m.TargetRunId)
		copy(dAtA[i:], m.TargetRunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TargetRunId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TargetWorkflowId) > 0 {
		i -= len(m.TargetWorkflowId)
		copy(dAtA[i:], m.TargetWorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TargetWorkflowId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TargetNamespaceId) > 0 {
		i -= len(m.TargetNamespaceId)
		copy(dAtA[i:], m.TargetNamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TargetNamespaceId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TaskType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TaskType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HistoryBranchRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryBranchRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryBranchRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndNodeId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.EndNodeId))
		i--
		dAtA[i] = 0x18
	}
	if m.BeginNodeId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.BeginNodeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BranchId) > 0 {
		i -= len(m.BranchId)
		copy(dAtA[i:], m.BranchId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BranchId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HistoryBranch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryBranch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryBranch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ancestors) > 0 {
		for iNdEx := len(m.Ancestors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ancestors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BranchId) > 0 {
		i -= len(m.BranchId)
		copy(dAtA[i:], m.BranchId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.BranchId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TreeId) > 0 {
		i -= len(m.TreeId)
		copy(dAtA[i:], m.TreeId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TreeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HistoryTreeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryTreeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryTreeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		i -= len(m.Info)
		copy(dAtA[i:], m.Info)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Info)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ForkTime != nil {
		{
			size, err := m.ForkTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BranchInfo != nil {
		{
			size, err := m.BranchInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimerId) > 0 {
		i -= len(m.TimerId)
		copy(dAtA[i:], m.TimerId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TimerId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TaskStatus != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TaskStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.ExpiryTime != nil {
		{
			size, err := m.ExpiryTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.StartedId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedId))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiry != nil {
		{
			size, err := m.Expiry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.CreatedTime != nil {
		{
			size, err := m.CreatedTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ScheduleId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduleId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AllocatedTaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocatedTaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocatedTaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x40
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskQueueInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskQueueInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskQueueInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastUpdated != nil {
		{
			size, err := m.LastUpdated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Expiry != nil {
		{
			size, err := m.Expiry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.AckLevel != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.AckLevel))
		i--
		dAtA[i] = 0x30
	}
	if m.Kind != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x28
	}
	if m.TaskType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TaskType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignalInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignalInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignalInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InitiatedId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Control) > 0 {
		i -= len(m.Control)
		copy(dAtA[i:], m.Control)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Control)))
		i--
		dAtA[i] = 0x32
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.InitiatedEventBatchId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventBatchId))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestCancelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCancelInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCancelInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InitiatedId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CancelRequestId) > 0 {
		i -= len(m.CancelRequestId)
		copy(dAtA[i:], m.CancelRequestId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CancelRequestId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.InitiatedEventBatchId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventBatchId))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.State != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CreateRequestId) > 0 {
		i -= len(m.CreateRequestId)
		copy(dAtA[i:], m.CreateRequestId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CreateRequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowExecutionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowExecutionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowExecutionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf2
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	if len(m.VersionHistoriesEncoding) > 0 {
		i -= len(m.VersionHistoriesEncoding)
		copy(dAtA[i:], m.VersionHistoriesEncoding)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.VersionHistoriesEncoding)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xda
	}
	if len(m.VersionHistories) > 0 {
		i -= len(m.VersionHistories)
		copy(dAtA[i:], m.VersionHistories)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.VersionHistories)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	if len(m.Memo) > 0 {
		for k := range m.Memo {
			v := m.Memo[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMessage(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.SearchAttributes) > 0 {
		for k := range m.SearchAttributes {
			v := m.SearchAttributes[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMessage(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.AutoResetPointsEncoding) > 0 {
		i -= len(m.AutoResetPointsEncoding)
		copy(dAtA[i:], m.AutoResetPointsEncoding)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.AutoResetPointsEncoding)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	if len(m.AutoResetPoints) > 0 {
		i -= len(m.AutoResetPoints)
		copy(dAtA[i:], m.AutoResetPoints)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.AutoResetPoints)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb2
	}
	if len(m.ClientImpl) > 0 {
		i -= len(m.ClientImpl)
		copy(dAtA[i:], m.ClientImpl)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ClientImpl)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	if len(m.ClientFeatureVersion) > 0 {
		i -= len(m.ClientFeatureVersion)
		copy(dAtA[i:], m.ClientFeatureVersion)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ClientFeatureVersion)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	if len(m.ClientLibraryVersion) > 0 {
		i -= len(m.ClientLibraryVersion)
		copy(dAtA[i:], m.ClientLibraryVersion)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ClientLibraryVersion)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	if m.HistorySize != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.HistorySize))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x90
	}
	if m.SignalCount != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SignalCount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x88
	}
	if len(m.EventBranchToken) > 0 {
		i -= len(m.EventBranchToken)
		copy(dAtA[i:], m.EventBranchToken)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.EventBranchToken)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x82
	}
	if m.EventStoreVersion != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.EventStoreVersion))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf8
	}
	if len(m.CronSchedule) > 0 {
		i -= len(m.CronSchedule)
		copy(dAtA[i:], m.CronSchedule)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CronSchedule)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf2
	}
	if m.HasRetryPolicy {
		i--
		if m.HasRetryPolicy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe8
	}
	if len(m.RetryNonRetryableErrorTypes) > 0 {
		for iNdEx := len(m.RetryNonRetryableErrorTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RetryNonRetryableErrorTypes[iNdEx])
			copy(dAtA[i:], m.RetryNonRetryableErrorTypes[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.RetryNonRetryableErrorTypes[iNdEx])))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xe2
		}
	}
	if m.RetryExpirationTimeNanos != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RetryExpirationTimeNanos))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd8
	}
	if m.RetryBackoffCoefficient != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RetryBackoffCoefficient))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd1
	}
	if m.RetryMaximumAttempts != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RetryMaximumAttempts))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc8
	}
	if m.RetryMaximumIntervalSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RetryMaximumIntervalSeconds))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc0
	}
	if m.RetryInitialIntervalSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RetryInitialIntervalSeconds))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if m.RetryAttempt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RetryAttempt))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if m.StickyScheduleToStartTimeout != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StickyScheduleToStartTimeout))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if len(m.StickyTaskQueue) > 0 {
		i -= len(m.StickyTaskQueue)
		copy(dAtA[i:], m.StickyTaskQueue)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.StickyTaskQueue)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if len(m.CancelRequestId) > 0 {
		i -= len(m.CancelRequestId)
		copy(dAtA[i:], m.CancelRequestId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CancelRequestId)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if len(m.DecisionRequestId) > 0 {
		i -= len(m.DecisionRequestId)
		copy(dAtA[i:], m.DecisionRequestId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.DecisionRequestId)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if m.DecisionOriginalScheduledTimestampNanos != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionOriginalScheduledTimestampNanos))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.CancelRequested {
		i--
		if m.CancelRequested {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.DecisionScheduledTimestampNanos != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionScheduledTimestampNanos))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.DecisionStartedTimestampNanos != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionStartedTimestampNanos))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.DecisionAttempt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionAttempt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.DecisionTimeout != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionTimeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.DecisionStartedId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionStartedId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.DecisionScheduleId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionScheduleId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.DecisionVersion != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.DecisionVersion))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.LastUpdatedTimeNanos != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LastUpdatedTimeNanos))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.StartTimeNanos != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartTimeNanos))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.LastProcessedEvent != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LastProcessedEvent))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.LastFirstEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LastFirstEventId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.LastEventTaskId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LastEventTaskId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.ReplicationData != nil {
		{
			size, err := m.ReplicationData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.CurrentVersion != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CurrentVersion))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.StartVersion != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartVersion))
		i--
		dAtA[i] = 0x78
	}
	if m.WorkflowTaskTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowTaskTimeoutSeconds))
		i--
		dAtA[i] = 0x60
	}
	if m.WorkflowRunTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowRunTimeoutSeconds))
		i--
		dAtA[i] = 0x58
	}
	if m.WorkflowExecutionTimeoutSeconds != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.WorkflowExecutionTimeoutSeconds))
		i--
		dAtA[i] = 0x50
	}
	if len(m.WorkflowTypeName) > 0 {
		i -= len(m.WorkflowTypeName)
		copy(dAtA[i:], m.WorkflowTypeName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowTypeName)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TaskQueue) > 0 {
		i -= len(m.TaskQueue)
		copy(dAtA[i:], m.TaskQueue)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TaskQueue)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CompletionEventEncoding) > 0 {
		i -= len(m.CompletionEventEncoding)
		copy(dAtA[i:], m.CompletionEventEncoding)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CompletionEventEncoding)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CompletionEvent) > 0 {
		i -= len(m.CompletionEvent)
		copy(dAtA[i:], m.CompletionEvent)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CompletionEvent)))
		i--
		dAtA[i] = 0x32
	}
	if m.CompletionEventBatchId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CompletionEventBatchId))
		i--
		dAtA[i] = 0x28
	}
	if m.InitiatedId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ParentRunId) > 0 {
		i -= len(m.ParentRunId)
		copy(dAtA[i:], m.ParentRunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ParentRunId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentWorkflowId) > 0 {
		i -= len(m.ParentWorkflowId)
		copy(dAtA[i:], m.ParentWorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ParentWorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ParentNamespaceId) > 0 {
		i -= len(m.ParentNamespaceId)
		copy(dAtA[i:], m.ParentNamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ParentNamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Checksum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Checksum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Checksum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Flavor != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Flavor))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChildExecutionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChildExecutionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChildExecutionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InitiatedId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedId))
		i--
		dAtA[i] = 0x70
	}
	if m.ParentClosePolicy != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ParentClosePolicy))
		i--
		dAtA[i] = 0x68
	}
	if len(m.WorkflowTypeName) > 0 {
		i -= len(m.WorkflowTypeName)
		copy(dAtA[i:], m.WorkflowTypeName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowTypeName)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.CreateRequestId) > 0 {
		i -= len(m.CreateRequestId)
		copy(dAtA[i:], m.CreateRequestId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CreateRequestId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.StartedEventEncoding) > 0 {
		i -= len(m.StartedEventEncoding)
		copy(dAtA[i:], m.StartedEventEncoding)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.StartedEventEncoding)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.StartedEvent) > 0 {
		i -= len(m.StartedEvent)
		copy(dAtA[i:], m.StartedEvent)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.StartedEvent)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.StartedRunId) > 0 {
		i -= len(m.StartedRunId)
		copy(dAtA[i:], m.StartedRunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.StartedRunId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.StartedWorkflowId) > 0 {
		i -= len(m.StartedWorkflowId)
		copy(dAtA[i:], m.StartedWorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.StartedWorkflowId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InitiatedEventEncoding) > 0 {
		i -= len(m.InitiatedEventEncoding)
		copy(dAtA[i:], m.InitiatedEventEncoding)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.InitiatedEventEncoding)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.InitiatedEvent) > 0 {
		i -= len(m.InitiatedEvent)
		copy(dAtA[i:], m.InitiatedEvent)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.InitiatedEvent)))
		i--
		dAtA[i] = 0x22
	}
	if m.StartedId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedId))
		i--
		dAtA[i] = 0x18
	}
	if m.InitiatedEventBatchId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InitiatedEventBatchId))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FailoverEndTime != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.FailoverEndTime))
		i--
		dAtA[i] = 0x68
	}
	if m.FailoverVersion != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.FailoverVersion))
		i--
		dAtA[i] = 0x60
	}
	if m.FailoverNotificationVersion != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.FailoverNotificationVersion))
		i--
		dAtA[i] = 0x58
	}
	if m.ConfigVersion != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ConfigVersion))
		i--
		dAtA[i] = 0x48
	}
	if m.ReplicationConfig != nil {
		{
			size, err := m.ReplicationConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMessage(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceReplicationConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceReplicationConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceReplicationConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Clusters) > 0 {
		for iNdEx := len(m.Clusters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Clusters[iNdEx])
			copy(dAtA[i:], m.Clusters[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.Clusters[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ActiveClusterName) > 0 {
		i -= len(m.ActiveClusterName)
		copy(dAtA[i:], m.ActiveClusterName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ActiveClusterName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VisibilityArchivalUri) > 0 {
		i -= len(m.VisibilityArchivalUri)
		copy(dAtA[i:], m.VisibilityArchivalUri)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.VisibilityArchivalUri)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.VisibilityArchivalStatus != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.VisibilityArchivalStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.HistoryArchivalUri) > 0 {
		i -= len(m.HistoryArchivalUri)
		copy(dAtA[i:], m.HistoryArchivalUri)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.HistoryArchivalUri)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.HistoryArchivalStatus != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.HistoryArchivalStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.BadBinaries != nil {
		{
			size, err := m.BadBinaries.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.ArchivalBucket) > 0 {
		i -= len(m.ArchivalBucket)
		copy(dAtA[i:], m.ArchivalBucket)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.ArchivalBucket)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EmitMetric {
		i--
		if m.EmitMetric {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.RetentionDays != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.RetentionDays))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastReplicationInfo) > 0 {
		for k := range m.LastReplicationInfo {
			v := m.LastReplicationInfo[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMessage(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMessage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMessage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.LastWriteEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LastWriteEventId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationVersions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationVersions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationVersions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastWriteVersion != nil {
		{
			size, err := m.LastWriteVersion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.StartVersion != nil {
		{
			size, err := m.StartVersion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ImmutableClusterMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.HistoryShardCount != 0 {
		n += 1 + sovMessage(uint64(m.HistoryShardCount))
	}
	return n
}

func (m *ActivityInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovMessage(uint64(m.Version))
	}
	if m.ScheduledEventBatchId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventBatchId))
	}
	l = len(m.ScheduledEvent)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ScheduledEventEncoding)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ScheduledTimeNanos != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledTimeNanos))
	}
	if m.StartedId != 0 {
		n += 1 + sovMessage(uint64(m.StartedId))
	}
	l = len(m.StartedEvent)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.StartedEventEncoding)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StartedTimeNanos != 0 {
		n += 1 + sovMessage(uint64(m.StartedTimeNanos))
	}
	l = len(m.ActivityId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ScheduleToStartTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.ScheduleToStartTimeoutSeconds))
	}
	if m.ScheduleToCloseTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.ScheduleToCloseTimeoutSeconds))
	}
	if m.StartToCloseTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.StartToCloseTimeoutSeconds))
	}
	if m.HeartbeatTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.HeartbeatTimeoutSeconds))
	}
	if m.CancelRequested {
		n += 3
	}
	if m.CancelRequestId != 0 {
		n += 2 + sovMessage(uint64(m.CancelRequestId))
	}
	if m.TimerTaskStatus != 0 {
		n += 2 + sovMessage(uint64(m.TimerTaskStatus))
	}
	if m.Attempt != 0 {
		n += 2 + sovMessage(uint64(m.Attempt))
	}
	l = len(m.TaskQueue)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.StartedIdentity)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.HasRetryPolicy {
		n += 3
	}
	if m.RetryInitialIntervalSeconds != 0 {
		n += 2 + sovMessage(uint64(m.RetryInitialIntervalSeconds))
	}
	if m.RetryMaximumIntervalSeconds != 0 {
		n += 2 + sovMessage(uint64(m.RetryMaximumIntervalSeconds))
	}
	if m.RetryMaximumAttempts != 0 {
		n += 2 + sovMessage(uint64(m.RetryMaximumAttempts))
	}
	if m.RetryExpirationTimeNanos != 0 {
		n += 2 + sovMessage(uint64(m.RetryExpirationTimeNanos))
	}
	if m.RetryBackoffCoefficient != 0 {
		n += 10
	}
	if len(m.RetryNonRetryableErrorTypes) > 0 {
		for _, s := range m.RetryNonRetryableErrorTypes {
			l = len(s)
			n += 2 + l + sovMessage(uint64(l))
		}
	}
	if m.RetryLastFailure != nil {
		l = m.RetryLastFailure.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.RetryLastWorkerIdentity)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.NamespaceId)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.ScheduleId != 0 {
		n += 2 + sovMessage(uint64(m.ScheduleId))
	}
	if m.LastHeartbeatDetails != nil {
		l = m.LastHeartbeatDetails.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.LastHeartbeatUpdatedTime != nil {
		l = m.LastHeartbeatUpdatedTime.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ShardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardId != 0 {
		n += 1 + sovMessage(uint64(m.ShardId))
	}
	if m.RangeId != 0 {
		n += 1 + sovMessage(uint64(m.RangeId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ReplicationAckLevel != 0 {
		n += 1 + sovMessage(uint64(m.ReplicationAckLevel))
	}
	if m.TransferAckLevel != 0 {
		n += 1 + sovMessage(uint64(m.TransferAckLevel))
	}
	if m.StolenSinceRenew != 0 {
		n += 1 + sovMessage(uint64(m.StolenSinceRenew))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TimerAckLevel != nil {
		l = m.TimerAckLevel.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.NamespaceNotificationVersion != 0 {
		n += 1 + sovMessage(uint64(m.NamespaceNotificationVersion))
	}
	if len(m.ClusterTransferAckLevel) > 0 {
		for k, v := range m.ClusterTransferAckLevel {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + 1 + sovMessage(uint64(v))
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	if len(m.ClusterTimerAckLevel) > 0 {
		for k, v := range m.ClusterTimerAckLevel {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMessage(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	if len(m.ClusterReplicationLevel) > 0 {
		for k, v := range m.ClusterReplicationLevel {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + 1 + sovMessage(uint64(v))
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	if len(m.ReplicationDlqAckLevel) > 0 {
		for k, v := range m.ReplicationDlqAckLevel {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + 1 + sovMessage(uint64(v))
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ReplicationTaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TaskType != 0 {
		n += 1 + sovMessage(uint64(m.TaskType))
	}
	if m.Version != 0 {
		n += 1 + sovMessage(uint64(m.Version))
	}
	if m.FirstEventId != 0 {
		n += 1 + sovMessage(uint64(m.FirstEventId))
	}
	if m.NextEventId != 0 {
		n += 1 + sovMessage(uint64(m.NextEventId))
	}
	if m.ScheduledId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledId))
	}
	if m.EventStoreVersion != 0 {
		n += 1 + sovMessage(uint64(m.EventStoreVersion))
	}
	if m.NewRunEventStoreVersion != 0 {
		n += 1 + sovMessage(uint64(m.NewRunEventStoreVersion))
	}
	l = len(m.BranchToken)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.LastReplicationInfo) > 0 {
		for k, v := range m.LastReplicationInfo {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMessage(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	l = len(m.NewRunBranchToken)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ResetWorkflow {
		n += 2
	}
	if m.TaskId != 0 {
		n += 1 + sovMessage(uint64(m.TaskId))
	}
	return n
}

func (m *TimerTaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TaskType != 0 {
		n += 1 + sovMessage(uint64(m.TaskType))
	}
	if m.TimeoutType != 0 {
		n += 1 + sovMessage(uint64(m.TimeoutType))
	}
	if m.WorkflowBackoffType != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowBackoffType))
	}
	if m.Version != 0 {
		n += 1 + sovMessage(uint64(m.Version))
	}
	if m.ScheduleAttempt != 0 {
		n += 1 + sovMessage(uint64(m.ScheduleAttempt))
	}
	if m.EventId != 0 {
		n += 1 + sovMessage(uint64(m.EventId))
	}
	if m.TaskId != 0 {
		n += 1 + sovMessage(uint64(m.TaskId))
	}
	if m.VisibilityTimestamp != nil {
		l = m.VisibilityTimestamp.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *TransferTaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TaskType != 0 {
		n += 1 + sovMessage(uint64(m.TaskType))
	}
	l = len(m.TargetNamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TargetWorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TargetRunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TargetChildWorkflowOnly {
		n += 2
	}
	if m.ScheduleId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduleId))
	}
	if m.Version != 0 {
		n += 1 + sovMessage(uint64(m.Version))
	}
	if m.TaskId != 0 {
		n += 1 + sovMessage(uint64(m.TaskId))
	}
	if m.VisibilityTimestamp != nil {
		l = m.VisibilityTimestamp.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.RecordVisibility {
		n += 2
	}
	return n
}

func (m *HistoryBranchRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BranchId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.BeginNodeId != 0 {
		n += 1 + sovMessage(uint64(m.BeginNodeId))
	}
	if m.EndNodeId != 0 {
		n += 1 + sovMessage(uint64(m.EndNodeId))
	}
	return n
}

func (m *HistoryBranch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TreeId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.BranchId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.Ancestors) > 0 {
		for _, e := range m.Ancestors {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *HistoryTreeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BranchInfo != nil {
		l = m.BranchInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ForkTime != nil {
		l = m.ForkTime.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *TimerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovMessage(uint64(m.Version))
	}
	if m.StartedId != 0 {
		n += 1 + sovMessage(uint64(m.StartedId))
	}
	if m.ExpiryTime != nil {
		l = m.ExpiryTime.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TaskStatus != 0 {
		n += 1 + sovMessage(uint64(m.TaskStatus))
	}
	l = len(m.TimerId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *TaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ScheduleId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduleId))
	}
	if m.CreatedTime != nil {
		l = m.CreatedTime.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Expiry != nil {
		l = m.Expiry.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *AllocatedTaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TaskId != 0 {
		n += 1 + sovMessage(uint64(m.TaskId))
	}
	return n
}

func (m *TaskQueueInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TaskType != 0 {
		n += 1 + sovMessage(uint64(m.TaskType))
	}
	if m.Kind != 0 {
		n += 1 + sovMessage(uint64(m.Kind))
	}
	if m.AckLevel != 0 {
		n += 1 + sovMessage(uint64(m.AckLevel))
	}
	if m.Expiry != nil {
		l = m.Expiry.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LastUpdated != nil {
		l = m.LastUpdated.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *SignalInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovMessage(uint64(m.Version))
	}
	if m.InitiatedEventBatchId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventBatchId))
	}
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Control)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedId))
	}
	return n
}

func (m *RequestCancelInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovMessage(uint64(m.Version))
	}
	if m.InitiatedEventBatchId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventBatchId))
	}
	l = len(m.CancelRequestId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedId))
	}
	return n
}

func (m *WorkflowExecutionState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CreateRequestId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMessage(uint64(m.State))
	}
	if m.Status != 0 {
		n += 1 + sovMessage(uint64(m.Status))
	}
	return n
}

func (m *WorkflowExecutionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParentNamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ParentWorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.ParentRunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.InitiatedId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedId))
	}
	if m.CompletionEventBatchId != 0 {
		n += 1 + sovMessage(uint64(m.CompletionEventBatchId))
	}
	l = len(m.CompletionEvent)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.CompletionEventEncoding)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TaskQueue)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowTypeName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.WorkflowExecutionTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowExecutionTimeoutSeconds))
	}
	if m.WorkflowRunTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowRunTimeoutSeconds))
	}
	if m.WorkflowTaskTimeoutSeconds != 0 {
		n += 1 + sovMessage(uint64(m.WorkflowTaskTimeoutSeconds))
	}
	if m.StartVersion != 0 {
		n += 1 + sovMessage(uint64(m.StartVersion))
	}
	if m.CurrentVersion != 0 {
		n += 2 + sovMessage(uint64(m.CurrentVersion))
	}
	if m.ReplicationData != nil {
		l = m.ReplicationData.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.LastEventTaskId != 0 {
		n += 2 + sovMessage(uint64(m.LastEventTaskId))
	}
	if m.LastFirstEventId != 0 {
		n += 2 + sovMessage(uint64(m.LastFirstEventId))
	}
	if m.LastProcessedEvent != 0 {
		n += 2 + sovMessage(uint64(m.LastProcessedEvent))
	}
	if m.StartTimeNanos != 0 {
		n += 2 + sovMessage(uint64(m.StartTimeNanos))
	}
	if m.LastUpdatedTimeNanos != 0 {
		n += 2 + sovMessage(uint64(m.LastUpdatedTimeNanos))
	}
	if m.DecisionVersion != 0 {
		n += 2 + sovMessage(uint64(m.DecisionVersion))
	}
	if m.DecisionScheduleId != 0 {
		n += 2 + sovMessage(uint64(m.DecisionScheduleId))
	}
	if m.DecisionStartedId != 0 {
		n += 2 + sovMessage(uint64(m.DecisionStartedId))
	}
	if m.DecisionTimeout != 0 {
		n += 2 + sovMessage(uint64(m.DecisionTimeout))
	}
	if m.DecisionAttempt != 0 {
		n += 2 + sovMessage(uint64(m.DecisionAttempt))
	}
	if m.DecisionStartedTimestampNanos != 0 {
		n += 2 + sovMessage(uint64(m.DecisionStartedTimestampNanos))
	}
	if m.DecisionScheduledTimestampNanos != 0 {
		n += 2 + sovMessage(uint64(m.DecisionScheduledTimestampNanos))
	}
	if m.CancelRequested {
		n += 3
	}
	if m.DecisionOriginalScheduledTimestampNanos != 0 {
		n += 2 + sovMessage(uint64(m.DecisionOriginalScheduledTimestampNanos))
	}
	l = len(m.DecisionRequestId)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.CancelRequestId)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.StickyTaskQueue)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.StickyScheduleToStartTimeout != 0 {
		n += 2 + sovMessage(uint64(m.StickyScheduleToStartTimeout))
	}
	if m.RetryAttempt != 0 {
		n += 2 + sovMessage(uint64(m.RetryAttempt))
	}
	if m.RetryInitialIntervalSeconds != 0 {
		n += 2 + sovMessage(uint64(m.RetryInitialIntervalSeconds))
	}
	if m.RetryMaximumIntervalSeconds != 0 {
		n += 2 + sovMessage(uint64(m.RetryMaximumIntervalSeconds))
	}
	if m.RetryMaximumAttempts != 0 {
		n += 2 + sovMessage(uint64(m.RetryMaximumAttempts))
	}
	if m.RetryBackoffCoefficient != 0 {
		n += 10
	}
	if m.RetryExpirationTimeNanos != 0 {
		n += 2 + sovMessage(uint64(m.RetryExpirationTimeNanos))
	}
	if len(m.RetryNonRetryableErrorTypes) > 0 {
		for _, s := range m.RetryNonRetryableErrorTypes {
			l = len(s)
			n += 2 + l + sovMessage(uint64(l))
		}
	}
	if m.HasRetryPolicy {
		n += 3
	}
	l = len(m.CronSchedule)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.EventStoreVersion != 0 {
		n += 2 + sovMessage(uint64(m.EventStoreVersion))
	}
	l = len(m.EventBranchToken)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.SignalCount != 0 {
		n += 2 + sovMessage(uint64(m.SignalCount))
	}
	if m.HistorySize != 0 {
		n += 2 + sovMessage(uint64(m.HistorySize))
	}
	l = len(m.ClientLibraryVersion)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.ClientFeatureVersion)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.ClientImpl)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.AutoResetPoints)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.AutoResetPointsEncoding)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if len(m.SearchAttributes) > 0 {
		for k, v := range m.SearchAttributes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMessage(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovMessage(uint64(mapEntrySize))
		}
	}
	if len(m.Memo) > 0 {
		for k, v := range m.Memo {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMessage(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovMessage(uint64(mapEntrySize))
		}
	}
	l = len(m.VersionHistories)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.VersionHistoriesEncoding)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.NamespaceId)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *Checksum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovMessage(uint64(m.Version))
	}
	if m.Flavor != 0 {
		n += 1 + sovMessage(uint64(m.Flavor))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ChildExecutionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovMessage(uint64(m.Version))
	}
	if m.InitiatedEventBatchId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedEventBatchId))
	}
	if m.StartedId != 0 {
		n += 1 + sovMessage(uint64(m.StartedId))
	}
	l = len(m.InitiatedEvent)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.InitiatedEventEncoding)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.StartedWorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.StartedRunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.StartedEvent)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.StartedEventEncoding)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.CreateRequestId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowTypeName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ParentClosePolicy != 0 {
		n += 1 + sovMessage(uint64(m.ParentClosePolicy))
	}
	if m.InitiatedId != 0 {
		n += 1 + sovMessage(uint64(m.InitiatedId))
	}
	return n
}

func (m *NamespaceDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ReplicationConfig != nil {
		l = m.ReplicationConfig.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ConfigVersion != 0 {
		n += 1 + sovMessage(uint64(m.ConfigVersion))
	}
	if m.FailoverNotificationVersion != 0 {
		n += 1 + sovMessage(uint64(m.FailoverNotificationVersion))
	}
	if m.FailoverVersion != 0 {
		n += 1 + sovMessage(uint64(m.FailoverVersion))
	}
	if m.FailoverEndTime != 0 {
		n += 1 + sovMessage(uint64(m.FailoverEndTime))
	}
	return n
}

func (m *NamespaceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMessage(uint64(m.Status))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + 1 + len(v) + sovMessage(uint64(len(v)))
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NamespaceReplicationConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ActiveClusterName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.Clusters) > 0 {
		for _, s := range m.Clusters {
			l = len(s)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *NamespaceConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetentionDays != 0 {
		n += 1 + sovMessage(uint64(m.RetentionDays))
	}
	if m.EmitMetric {
		n += 2
	}
	l = len(m.ArchivalBucket)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.BadBinaries != nil {
		l = m.BadBinaries.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.HistoryArchivalStatus != 0 {
		n += 2 + sovMessage(uint64(m.HistoryArchivalStatus))
	}
	l = len(m.HistoryArchivalUri)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	if m.VisibilityArchivalStatus != 0 {
		n += 2 + sovMessage(uint64(m.VisibilityArchivalStatus))
	}
	l = len(m.VisibilityArchivalUri)
	if l > 0 {
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ReplicationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastWriteEventId != 0 {
		n += 1 + sovMessage(uint64(m.LastWriteEventId))
	}
	if len(m.LastReplicationInfo) > 0 {
		for k, v := range m.LastReplicationInfo {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMessage(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovMessage(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ReplicationVersions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartVersion != nil {
		l = m.StartVersion.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LastWriteVersion != nil {
		l = m.LastWriteVersion.Size()
		n += 2 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ImmutableClusterMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImmutableClusterMetadata{`,
		`ClusterName:` + fmt.Sprintf("%v", this.ClusterName) + `,`,
		`HistoryShardCount:` + fmt.Sprintf("%v", this.HistoryShardCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivityInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivityInfo{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`ScheduledEventBatchId:` + fmt.Sprintf("%v", this.ScheduledEventBatchId) + `,`,
		`ScheduledEvent:` + fmt.Sprintf("%v", this.ScheduledEvent) + `,`,
		`ScheduledEventEncoding:` + fmt.Sprintf("%v", this.ScheduledEventEncoding) + `,`,
		`ScheduledTimeNanos:` + fmt.Sprintf("%v", this.ScheduledTimeNanos) + `,`,
		`StartedId:` + fmt.Sprintf("%v", this.StartedId) + `,`,
		`StartedEvent:` + fmt.Sprintf("%v", this.StartedEvent) + `,`,
		`StartedEventEncoding:` + fmt.Sprintf("%v", this.StartedEventEncoding) + `,`,
		`StartedTimeNanos:` + fmt.Sprintf("%v", this.StartedTimeNanos) + `,`,
		`ActivityId:` + fmt.Sprintf("%v", this.ActivityId) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`ScheduleToStartTimeoutSeconds:` + fmt.Sprintf("%v", this.ScheduleToStartTimeoutSeconds) + `,`,
		`ScheduleToCloseTimeoutSeconds:` + fmt.Sprintf("%v", this.ScheduleToCloseTimeoutSeconds) + `,`,
		`StartToCloseTimeoutSeconds:` + fmt.Sprintf("%v", this.StartToCloseTimeoutSeconds) + `,`,
		`HeartbeatTimeoutSeconds:` + fmt.Sprintf("%v", this.HeartbeatTimeoutSeconds) + `,`,
		`CancelRequested:` + fmt.Sprintf("%v", this.CancelRequested) + `,`,
		`CancelRequestId:` + fmt.Sprintf("%v", this.CancelRequestId) + `,`,
		`TimerTaskStatus:` + fmt.Sprintf("%v", this.TimerTaskStatus) + `,`,
		`Attempt:` + fmt.Sprintf("%v", this.Attempt) + `,`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`StartedIdentity:` + fmt.Sprintf("%v", this.StartedIdentity) + `,`,
		`HasRetryPolicy:` + fmt.Sprintf("%v", this.HasRetryPolicy) + `,`,
		`RetryInitialIntervalSeconds:` + fmt.Sprintf("%v", this.RetryInitialIntervalSeconds) + `,`,
		`RetryMaximumIntervalSeconds:` + fmt.Sprintf("%v", this.RetryMaximumIntervalSeconds) + `,`,
		`RetryMaximumAttempts:` + fmt.Sprintf("%v", this.RetryMaximumAttempts) + `,`,
		`RetryExpirationTimeNanos:` + fmt.Sprintf("%v", this.RetryExpirationTimeNanos) + `,`,
		`RetryBackoffCoefficient:` + fmt.Sprintf("%v", this.RetryBackoffCoefficient) + `,`,
		`RetryNonRetryableErrorTypes:` + fmt.Sprintf("%v", this.RetryNonRetryableErrorTypes) + `,`,
		`RetryLastFailure:` + strings.Replace(fmt.Sprintf("%v", this.RetryLastFailure), "Failure", "v1.Failure", 1) + `,`,
		`RetryLastWorkerIdentity:` + fmt.Sprintf("%v", this.RetryLastWorkerIdentity) + `,`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`ScheduleId:` + fmt.Sprintf("%v", this.ScheduleId) + `,`,
		`LastHeartbeatDetails:` + strings.Replace(fmt.Sprintf("%v", this.LastHeartbeatDetails), "Payloads", "v11.Payloads", 1) + `,`,
		`LastHeartbeatUpdatedTime:` + strings.Replace(fmt.Sprintf("%v", this.LastHeartbeatUpdatedTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShardInfo) String() string {
	if this == nil {
		return "nil"
	}
	keysForClusterTransferAckLevel := make([]string, 0, len(this.ClusterTransferAckLevel))
	for k, _ := range this.ClusterTransferAckLevel {
		keysForClusterTransferAckLevel = append(keysForClusterTransferAckLevel, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForClusterTransferAckLevel)
	mapStringForClusterTransferAckLevel := "map[string]int64{"
	for _, k := range keysForClusterTransferAckLevel {
		mapStringForClusterTransferAckLevel += fmt.Sprintf("%v: %v,", k, this.ClusterTransferAckLevel[k])
	}
	mapStringForClusterTransferAckLevel += "}"
	keysForClusterTimerAckLevel := make([]string, 0, len(this.ClusterTimerAckLevel))
	for k, _ := range this.ClusterTimerAckLevel {
		keysForClusterTimerAckLevel = append(keysForClusterTimerAckLevel, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForClusterTimerAckLevel)
	mapStringForClusterTimerAckLevel := "map[string]*types.Timestamp{"
	for _, k := range keysForClusterTimerAckLevel {
		mapStringForClusterTimerAckLevel += fmt.Sprintf("%v: %v,", k, this.ClusterTimerAckLevel[k])
	}
	mapStringForClusterTimerAckLevel += "}"
	keysForClusterReplicationLevel := make([]string, 0, len(this.ClusterReplicationLevel))
	for k, _ := range this.ClusterReplicationLevel {
		keysForClusterReplicationLevel = append(keysForClusterReplicationLevel, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForClusterReplicationLevel)
	mapStringForClusterReplicationLevel := "map[string]int64{"
	for _, k := range keysForClusterReplicationLevel {
		mapStringForClusterReplicationLevel += fmt.Sprintf("%v: %v,", k, this.ClusterReplicationLevel[k])
	}
	mapStringForClusterReplicationLevel += "}"
	keysForReplicationDlqAckLevel := make([]string, 0, len(this.ReplicationDlqAckLevel))
	for k, _ := range this.ReplicationDlqAckLevel {
		keysForReplicationDlqAckLevel = append(keysForReplicationDlqAckLevel, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForReplicationDlqAckLevel)
	mapStringForReplicationDlqAckLevel := "map[string]int64{"
	for _, k := range keysForReplicationDlqAckLevel {
		mapStringForReplicationDlqAckLevel += fmt.Sprintf("%v: %v,", k, this.ReplicationDlqAckLevel[k])
	}
	mapStringForReplicationDlqAckLevel += "}"
	s := strings.Join([]string{`&ShardInfo{`,
		`ShardId:` + fmt.Sprintf("%v", this.ShardId) + `,`,
		`RangeId:` + fmt.Sprintf("%v", this.RangeId) + `,`,
		`Owner:` + fmt.Sprintf("%v", this.Owner) + `,`,
		`ReplicationAckLevel:` + fmt.Sprintf("%v", this.ReplicationAckLevel) + `,`,
		`TransferAckLevel:` + fmt.Sprintf("%v", this.TransferAckLevel) + `,`,
		`StolenSinceRenew:` + fmt.Sprintf("%v", this.StolenSinceRenew) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`TimerAckLevel:` + strings.Replace(fmt.Sprintf("%v", this.TimerAckLevel), "Timestamp", "types.Timestamp", 1) + `,`,
		`NamespaceNotificationVersion:` + fmt.Sprintf("%v", this.NamespaceNotificationVersion) + `,`,
		`ClusterTransferAckLevel:` + mapStringForClusterTransferAckLevel + `,`,
		`ClusterTimerAckLevel:` + mapStringForClusterTimerAckLevel + `,`,
		`ClusterReplicationLevel:` + mapStringForClusterReplicationLevel + `,`,
		`ReplicationDlqAckLevel:` + mapStringForReplicationDlqAckLevel + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationTaskInfo) String() string {
	if this == nil {
		return "nil"
	}
	keysForLastReplicationInfo := make([]string, 0, len(this.LastReplicationInfo))
	for k, _ := range this.LastReplicationInfo {
		keysForLastReplicationInfo = append(keysForLastReplicationInfo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLastReplicationInfo)
	mapStringForLastReplicationInfo := "map[string]*v13.ReplicationInfo{"
	for _, k := range keysForLastReplicationInfo {
		mapStringForLastReplicationInfo += fmt.Sprintf("%v: %v,", k, this.LastReplicationInfo[k])
	}
	mapStringForLastReplicationInfo += "}"
	s := strings.Join([]string{`&ReplicationTaskInfo{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`TaskType:` + fmt.Sprintf("%v", this.TaskType) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`FirstEventId:` + fmt.Sprintf("%v", this.FirstEventId) + `,`,
		`NextEventId:` + fmt.Sprintf("%v", this.NextEventId) + `,`,
		`ScheduledId:` + fmt.Sprintf("%v", this.ScheduledId) + `,`,
		`EventStoreVersion:` + fmt.Sprintf("%v", this.EventStoreVersion) + `,`,
		`NewRunEventStoreVersion:` + fmt.Sprintf("%v", this.NewRunEventStoreVersion) + `,`,
		`BranchToken:` + fmt.Sprintf("%v", this.BranchToken) + `,`,
		`LastReplicationInfo:` + mapStringForLastReplicationInfo + `,`,
		`NewRunBranchToken:` + fmt.Sprintf("%v", this.NewRunBranchToken) + `,`,
		`ResetWorkflow:` + fmt.Sprintf("%v", this.ResetWorkflow) + `,`,
		`TaskId:` + fmt.Sprintf("%v", this.TaskId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TimerTaskInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimerTaskInfo{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`TaskType:` + fmt.Sprintf("%v", this.TaskType) + `,`,
		`TimeoutType:` + fmt.Sprintf("%v", this.TimeoutType) + `,`,
		`WorkflowBackoffType:` + fmt.Sprintf("%v", this.WorkflowBackoffType) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`ScheduleAttempt:` + fmt.Sprintf("%v", this.ScheduleAttempt) + `,`,
		`EventId:` + fmt.Sprintf("%v", this.EventId) + `,`,
		`TaskId:` + fmt.Sprintf("%v", this.TaskId) + `,`,
		`VisibilityTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.VisibilityTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransferTaskInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransferTaskInfo{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`TaskType:` + fmt.Sprintf("%v", this.TaskType) + `,`,
		`TargetNamespaceId:` + fmt.Sprintf("%v", this.TargetNamespaceId) + `,`,
		`TargetWorkflowId:` + fmt.Sprintf("%v", this.TargetWorkflowId) + `,`,
		`TargetRunId:` + fmt.Sprintf("%v", this.TargetRunId) + `,`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`TargetChildWorkflowOnly:` + fmt.Sprintf("%v", this.TargetChildWorkflowOnly) + `,`,
		`ScheduleId:` + fmt.Sprintf("%v", this.ScheduleId) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`TaskId:` + fmt.Sprintf("%v", this.TaskId) + `,`,
		`VisibilityTimestamp:` + strings.Replace(fmt.Sprintf("%v", this.VisibilityTimestamp), "Timestamp", "types.Timestamp", 1) + `,`,
		`RecordVisibility:` + fmt.Sprintf("%v", this.RecordVisibility) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryBranchRange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryBranchRange{`,
		`BranchId:` + fmt.Sprintf("%v", this.BranchId) + `,`,
		`BeginNodeId:` + fmt.Sprintf("%v", this.BeginNodeId) + `,`,
		`EndNodeId:` + fmt.Sprintf("%v", this.EndNodeId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryBranch) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAncestors := "[]*HistoryBranchRange{"
	for _, f := range this.Ancestors {
		repeatedStringForAncestors += strings.Replace(f.String(), "HistoryBranchRange", "HistoryBranchRange", 1) + ","
	}
	repeatedStringForAncestors += "}"
	s := strings.Join([]string{`&HistoryBranch{`,
		`TreeId:` + fmt.Sprintf("%v", this.TreeId) + `,`,
		`BranchId:` + fmt.Sprintf("%v", this.BranchId) + `,`,
		`Ancestors:` + repeatedStringForAncestors + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryTreeInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryTreeInfo{`,
		`BranchInfo:` + strings.Replace(this.BranchInfo.String(), "HistoryBranch", "HistoryBranch", 1) + `,`,
		`ForkTime:` + strings.Replace(fmt.Sprintf("%v", this.ForkTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`Info:` + fmt.Sprintf("%v", this.Info) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TimerInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimerInfo{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`StartedId:` + fmt.Sprintf("%v", this.StartedId) + `,`,
		`ExpiryTime:` + strings.Replace(fmt.Sprintf("%v", this.ExpiryTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`TaskStatus:` + fmt.Sprintf("%v", this.TaskStatus) + `,`,
		`TimerId:` + fmt.Sprintf("%v", this.TimerId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskInfo{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`ScheduleId:` + fmt.Sprintf("%v", this.ScheduleId) + `,`,
		`CreatedTime:` + strings.Replace(fmt.Sprintf("%v", this.CreatedTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`Expiry:` + strings.Replace(fmt.Sprintf("%v", this.Expiry), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllocatedTaskInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllocatedTaskInfo{`,
		`Data:` + strings.Replace(this.Data.String(), "TaskInfo", "TaskInfo", 1) + `,`,
		`TaskId:` + fmt.Sprintf("%v", this.TaskId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskQueueInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskQueueInfo{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`TaskType:` + fmt.Sprintf("%v", this.TaskType) + `,`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`AckLevel:` + fmt.Sprintf("%v", this.AckLevel) + `,`,
		`Expiry:` + strings.Replace(fmt.Sprintf("%v", this.Expiry), "Timestamp", "types.Timestamp", 1) + `,`,
		`LastUpdated:` + strings.Replace(fmt.Sprintf("%v", this.LastUpdated), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignalInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignalInfo{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`InitiatedEventBatchId:` + fmt.Sprintf("%v", this.InitiatedEventBatchId) + `,`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Input:` + strings.Replace(fmt.Sprintf("%v", this.Input), "Payloads", "v11.Payloads", 1) + `,`,
		`Control:` + fmt.Sprintf("%v", this.Control) + `,`,
		`InitiatedId:` + fmt.Sprintf("%v", this.InitiatedId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCancelInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCancelInfo{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`InitiatedEventBatchId:` + fmt.Sprintf("%v", this.InitiatedEventBatchId) + `,`,
		`CancelRequestId:` + fmt.Sprintf("%v", this.CancelRequestId) + `,`,
		`InitiatedId:` + fmt.Sprintf("%v", this.InitiatedId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowExecutionState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WorkflowExecutionState{`,
		`CreateRequestId:` + fmt.Sprintf("%v", this.CreateRequestId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowExecutionInfo) String() string {
	if this == nil {
		return "nil"
	}
	keysForSearchAttributes := make([]string, 0, len(this.SearchAttributes))
	for k, _ := range this.SearchAttributes {
		keysForSearchAttributes = append(keysForSearchAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSearchAttributes)
	mapStringForSearchAttributes := "map[string]*v11.Payload{"
	for _, k := range keysForSearchAttributes {
		mapStringForSearchAttributes += fmt.Sprintf("%v: %v,", k, this.SearchAttributes[k])
	}
	mapStringForSearchAttributes += "}"
	keysForMemo := make([]string, 0, len(this.Memo))
	for k, _ := range this.Memo {
		keysForMemo = append(keysForMemo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMemo)
	mapStringForMemo := "map[string]*v11.Payload{"
	for _, k := range keysForMemo {
		mapStringForMemo += fmt.Sprintf("%v: %v,", k, this.Memo[k])
	}
	mapStringForMemo += "}"
	s := strings.Join([]string{`&WorkflowExecutionInfo{`,
		`ParentNamespaceId:` + fmt.Sprintf("%v", this.ParentNamespaceId) + `,`,
		`ParentWorkflowId:` + fmt.Sprintf("%v", this.ParentWorkflowId) + `,`,
		`ParentRunId:` + fmt.Sprintf("%v", this.ParentRunId) + `,`,
		`InitiatedId:` + fmt.Sprintf("%v", this.InitiatedId) + `,`,
		`CompletionEventBatchId:` + fmt.Sprintf("%v", this.CompletionEventBatchId) + `,`,
		`CompletionEvent:` + fmt.Sprintf("%v", this.CompletionEvent) + `,`,
		`CompletionEventEncoding:` + fmt.Sprintf("%v", this.CompletionEventEncoding) + `,`,
		`TaskQueue:` + fmt.Sprintf("%v", this.TaskQueue) + `,`,
		`WorkflowTypeName:` + fmt.Sprintf("%v", this.WorkflowTypeName) + `,`,
		`WorkflowExecutionTimeoutSeconds:` + fmt.Sprintf("%v", this.WorkflowExecutionTimeoutSeconds) + `,`,
		`WorkflowRunTimeoutSeconds:` + fmt.Sprintf("%v", this.WorkflowRunTimeoutSeconds) + `,`,
		`WorkflowTaskTimeoutSeconds:` + fmt.Sprintf("%v", this.WorkflowTaskTimeoutSeconds) + `,`,
		`StartVersion:` + fmt.Sprintf("%v", this.StartVersion) + `,`,
		`CurrentVersion:` + fmt.Sprintf("%v", this.CurrentVersion) + `,`,
		`ReplicationData:` + strings.Replace(this.ReplicationData.String(), "ReplicationData", "ReplicationData", 1) + `,`,
		`LastEventTaskId:` + fmt.Sprintf("%v", this.LastEventTaskId) + `,`,
		`LastFirstEventId:` + fmt.Sprintf("%v", this.LastFirstEventId) + `,`,
		`LastProcessedEvent:` + fmt.Sprintf("%v", this.LastProcessedEvent) + `,`,
		`StartTimeNanos:` + fmt.Sprintf("%v", this.StartTimeNanos) + `,`,
		`LastUpdatedTimeNanos:` + fmt.Sprintf("%v", this.LastUpdatedTimeNanos) + `,`,
		`DecisionVersion:` + fmt.Sprintf("%v", this.DecisionVersion) + `,`,
		`DecisionScheduleId:` + fmt.Sprintf("%v", this.DecisionScheduleId) + `,`,
		`DecisionStartedId:` + fmt.Sprintf("%v", this.DecisionStartedId) + `,`,
		`DecisionTimeout:` + fmt.Sprintf("%v", this.DecisionTimeout) + `,`,
		`DecisionAttempt:` + fmt.Sprintf("%v", this.DecisionAttempt) + `,`,
		`DecisionStartedTimestampNanos:` + fmt.Sprintf("%v", this.DecisionStartedTimestampNanos) + `,`,
		`DecisionScheduledTimestampNanos:` + fmt.Sprintf("%v", this.DecisionScheduledTimestampNanos) + `,`,
		`CancelRequested:` + fmt.Sprintf("%v", this.CancelRequested) + `,`,
		`DecisionOriginalScheduledTimestampNanos:` + fmt.Sprintf("%v", this.DecisionOriginalScheduledTimestampNanos) + `,`,
		`DecisionRequestId:` + fmt.Sprintf("%v", this.DecisionRequestId) + `,`,
		`CancelRequestId:` + fmt.Sprintf("%v", this.CancelRequestId) + `,`,
		`StickyTaskQueue:` + fmt.Sprintf("%v", this.StickyTaskQueue) + `,`,
		`StickyScheduleToStartTimeout:` + fmt.Sprintf("%v", this.StickyScheduleToStartTimeout) + `,`,
		`RetryAttempt:` + fmt.Sprintf("%v", this.RetryAttempt) + `,`,
		`RetryInitialIntervalSeconds:` + fmt.Sprintf("%v", this.RetryInitialIntervalSeconds) + `,`,
		`RetryMaximumIntervalSeconds:` + fmt.Sprintf("%v", this.RetryMaximumIntervalSeconds) + `,`,
		`RetryMaximumAttempts:` + fmt.Sprintf("%v", this.RetryMaximumAttempts) + `,`,
		`RetryBackoffCoefficient:` + fmt.Sprintf("%v", this.RetryBackoffCoefficient) + `,`,
		`RetryExpirationTimeNanos:` + fmt.Sprintf("%v", this.RetryExpirationTimeNanos) + `,`,
		`RetryNonRetryableErrorTypes:` + fmt.Sprintf("%v", this.RetryNonRetryableErrorTypes) + `,`,
		`HasRetryPolicy:` + fmt.Sprintf("%v", this.HasRetryPolicy) + `,`,
		`CronSchedule:` + fmt.Sprintf("%v", this.CronSchedule) + `,`,
		`EventStoreVersion:` + fmt.Sprintf("%v", this.EventStoreVersion) + `,`,
		`EventBranchToken:` + fmt.Sprintf("%v", this.EventBranchToken) + `,`,
		`SignalCount:` + fmt.Sprintf("%v", this.SignalCount) + `,`,
		`HistorySize:` + fmt.Sprintf("%v", this.HistorySize) + `,`,
		`ClientLibraryVersion:` + fmt.Sprintf("%v", this.ClientLibraryVersion) + `,`,
		`ClientFeatureVersion:` + fmt.Sprintf("%v", this.ClientFeatureVersion) + `,`,
		`ClientImpl:` + fmt.Sprintf("%v", this.ClientImpl) + `,`,
		`AutoResetPoints:` + fmt.Sprintf("%v", this.AutoResetPoints) + `,`,
		`AutoResetPointsEncoding:` + fmt.Sprintf("%v", this.AutoResetPointsEncoding) + `,`,
		`SearchAttributes:` + mapStringForSearchAttributes + `,`,
		`Memo:` + mapStringForMemo + `,`,
		`VersionHistories:` + fmt.Sprintf("%v", this.VersionHistories) + `,`,
		`VersionHistoriesEncoding:` + fmt.Sprintf("%v", this.VersionHistoriesEncoding) + `,`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Checksum) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Checksum{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Flavor:` + fmt.Sprintf("%v", this.Flavor) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChildExecutionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChildExecutionInfo{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`InitiatedEventBatchId:` + fmt.Sprintf("%v", this.InitiatedEventBatchId) + `,`,
		`StartedId:` + fmt.Sprintf("%v", this.StartedId) + `,`,
		`InitiatedEvent:` + fmt.Sprintf("%v", this.InitiatedEvent) + `,`,
		`InitiatedEventEncoding:` + fmt.Sprintf("%v", this.InitiatedEventEncoding) + `,`,
		`StartedWorkflowId:` + fmt.Sprintf("%v", this.StartedWorkflowId) + `,`,
		`StartedRunId:` + fmt.Sprintf("%v", this.StartedRunId) + `,`,
		`StartedEvent:` + fmt.Sprintf("%v", this.StartedEvent) + `,`,
		`StartedEventEncoding:` + fmt.Sprintf("%v", this.StartedEventEncoding) + `,`,
		`CreateRequestId:` + fmt.Sprintf("%v", this.CreateRequestId) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`WorkflowTypeName:` + fmt.Sprintf("%v", this.WorkflowTypeName) + `,`,
		`ParentClosePolicy:` + fmt.Sprintf("%v", this.ParentClosePolicy) + `,`,
		`InitiatedId:` + fmt.Sprintf("%v", this.InitiatedId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamespaceDetail) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NamespaceDetail{`,
		`Info:` + strings.Replace(this.Info.String(), "NamespaceInfo", "NamespaceInfo", 1) + `,`,
		`Config:` + strings.Replace(this.Config.String(), "NamespaceConfig", "NamespaceConfig", 1) + `,`,
		`ReplicationConfig:` + strings.Replace(this.ReplicationConfig.String(), "NamespaceReplicationConfig", "NamespaceReplicationConfig", 1) + `,`,
		`ConfigVersion:` + fmt.Sprintf("%v", this.ConfigVersion) + `,`,
		`FailoverNotificationVersion:` + fmt.Sprintf("%v", this.FailoverNotificationVersion) + `,`,
		`FailoverVersion:` + fmt.Sprintf("%v", this.FailoverVersion) + `,`,
		`FailoverEndTime:` + fmt.Sprintf("%v", this.FailoverEndTime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamespaceInfo) String() string {
	if this == nil {
		return "nil"
	}
	keysForData := make([]string, 0, len(this.Data))
	for k, _ := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%v: %v,", k, this.Data[k])
	}
	mapStringForData += "}"
	s := strings.Join([]string{`&NamespaceInfo{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Owner:` + fmt.Sprintf("%v", this.Owner) + `,`,
		`Data:` + mapStringForData + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamespaceReplicationConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NamespaceReplicationConfig{`,
		`ActiveClusterName:` + fmt.Sprintf("%v", this.ActiveClusterName) + `,`,
		`Clusters:` + fmt.Sprintf("%v", this.Clusters) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamespaceConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NamespaceConfig{`,
		`RetentionDays:` + fmt.Sprintf("%v", this.RetentionDays) + `,`,
		`EmitMetric:` + fmt.Sprintf("%v", this.EmitMetric) + `,`,
		`ArchivalBucket:` + fmt.Sprintf("%v", this.ArchivalBucket) + `,`,
		`BadBinaries:` + strings.Replace(fmt.Sprintf("%v", this.BadBinaries), "BadBinaries", "v15.BadBinaries", 1) + `,`,
		`HistoryArchivalStatus:` + fmt.Sprintf("%v", this.HistoryArchivalStatus) + `,`,
		`HistoryArchivalUri:` + fmt.Sprintf("%v", this.HistoryArchivalUri) + `,`,
		`VisibilityArchivalStatus:` + fmt.Sprintf("%v", this.VisibilityArchivalStatus) + `,`,
		`VisibilityArchivalUri:` + fmt.Sprintf("%v", this.VisibilityArchivalUri) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationData) String() string {
	if this == nil {
		return "nil"
	}
	keysForLastReplicationInfo := make([]string, 0, len(this.LastReplicationInfo))
	for k, _ := range this.LastReplicationInfo {
		keysForLastReplicationInfo = append(keysForLastReplicationInfo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLastReplicationInfo)
	mapStringForLastReplicationInfo := "map[string]*v13.ReplicationInfo{"
	for _, k := range keysForLastReplicationInfo {
		mapStringForLastReplicationInfo += fmt.Sprintf("%v: %v,", k, this.LastReplicationInfo[k])
	}
	mapStringForLastReplicationInfo += "}"
	s := strings.Join([]string{`&ReplicationData{`,
		`LastWriteEventId:` + fmt.Sprintf("%v", this.LastWriteEventId) + `,`,
		`LastReplicationInfo:` + mapStringForLastReplicationInfo + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationVersions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationVersions{`,
		`StartVersion:` + strings.Replace(fmt.Sprintf("%v", this.StartVersion), "Int64Value", "types.Int64Value", 1) + `,`,
		`LastWriteVersion:` + strings.Replace(fmt.Sprintf("%v", this.LastWriteVersion), "Int64Value", "types.Int64Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ImmutableClusterMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImmutableClusterMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImmutableClusterMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryShardCount", wireType)
			}
			m.HistoryShardCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryShardCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventBatchId", wireType)
			}
			m.ScheduledEventBatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventBatchId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEvent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScheduledEvent = append(m.ScheduledEvent[:0], dAtA[iNdEx:postIndex]...)
			if m.ScheduledEvent == nil {
				m.ScheduledEvent = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventEncoding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScheduledEventEncoding = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTimeNanos", wireType)
			}
			m.ScheduledTimeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledTimeNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedId", wireType)
			}
			m.StartedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEvent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartedEvent = append(m.StartedEvent[:0], dAtA[iNdEx:postIndex]...)
			if m.StartedEvent == nil {
				m.StartedEvent = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventEncoding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartedEventEncoding = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedTimeNanos", wireType)
			}
			m.StartedTimeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedTimeNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToStartTimeoutSeconds", wireType)
			}
			m.ScheduleToStartTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleToStartTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleToCloseTimeoutSeconds", wireType)
			}
			m.ScheduleToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartToCloseTimeoutSeconds", wireType)
			}
			m.StartToCloseTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartToCloseTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatTimeoutSeconds", wireType)
			}
			m.HeartbeatTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeartbeatTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelRequested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelRequested = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelRequestId", wireType)
			}
			m.CancelRequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CancelRequestId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerTaskStatus", wireType)
			}
			m.TimerTaskStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimerTaskStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedIdentity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartedIdentity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasRetryPolicy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasRetryPolicy = bool(v != 0)
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryInitialIntervalSeconds", wireType)
			}
			m.RetryInitialIntervalSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryInitialIntervalSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryMaximumIntervalSeconds", wireType)
			}
			m.RetryMaximumIntervalSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryMaximumIntervalSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryMaximumAttempts", wireType)
			}
			m.RetryMaximumAttempts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryMaximumAttempts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryExpirationTimeNanos", wireType)
			}
			m.RetryExpirationTimeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryExpirationTimeNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryBackoffCoefficient", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RetryBackoffCoefficient = float64(math.Float64frombits(v))
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryNonRetryableErrorTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetryNonRetryableErrorTypes = append(m.RetryNonRetryableErrorTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryLastFailure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RetryLastFailure == nil {
				m.RetryLastFailure = &v1.Failure{}
			}
			if err := m.RetryLastFailure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryLastWorkerIdentity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetryLastWorkerIdentity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleId", wireType)
			}
			m.ScheduleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastHeartbeatDetails == nil {
				m.LastHeartbeatDetails = &v11.Payloads{}
			}
			if err := m.LastHeartbeatDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatUpdatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastHeartbeatUpdatedTime == nil {
				m.LastHeartbeatUpdatedTime = &types.Timestamp{}
			}
			if err := m.LastHeartbeatUpdatedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardId", wireType)
			}
			m.ShardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationAckLevel", wireType)
			}
			m.ReplicationAckLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicationAckLevel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferAckLevel", wireType)
			}
			m.TransferAckLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransferAckLevel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StolenSinceRenew", wireType)
			}
			m.StolenSinceRenew = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StolenSinceRenew |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerAckLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimerAckLevel == nil {
				m.TimerAckLevel = &types.Timestamp{}
			}
			if err := m.TimerAckLevel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceNotificationVersion", wireType)
			}
			m.NamespaceNotificationVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NamespaceNotificationVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterTransferAckLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterTransferAckLevel == nil {
				m.ClusterTransferAckLevel = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ClusterTransferAckLevel[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterTimerAckLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterTimerAckLevel == nil {
				m.ClusterTimerAckLevel = make(map[string]*types.Timestamp)
			}
			var mapkey string
			var mapvalue *types.Timestamp
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMessage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMessage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.Timestamp{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ClusterTimerAckLevel[mapkey] = mapvalue
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterReplicationLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClusterReplicationLevel == nil {
				m.ClusterReplicationLevel = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ClusterReplicationLevel[mapkey] = mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationDlqAckLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplicationDlqAckLevel == nil {
				m.ReplicationDlqAckLevel = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ReplicationDlqAckLevel[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationTaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationTaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationTaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskType", wireType)
			}
			m.TaskType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskType |= v12.TaskType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstEventId", wireType)
			}
			m.FirstEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEventId", wireType)
			}
			m.NextEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledId", wireType)
			}
			m.ScheduledId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventStoreVersion", wireType)
			}
			m.EventStoreVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventStoreVersion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRunEventStoreVersion", wireType)
			}
			m.NewRunEventStoreVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewRunEventStoreVersion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchToken = append(m.BranchToken[:0], dAtA[iNdEx:postIndex]...)
			if m.BranchToken == nil {
				m.BranchToken = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReplicationInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastReplicationInfo == nil {
				m.LastReplicationInfo = make(map[string]*v13.ReplicationInfo)
			}
			var mapkey string
			var mapvalue *v13.ReplicationInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMessage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMessage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &v13.ReplicationInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LastReplicationInfo[mapkey] = mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRunBranchToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewRunBranchToken = append(m.NewRunBranchToken[:0], dAtA[iNdEx:postIndex]...)
			if m.NewRunBranchToken == nil {
				m.NewRunBranchToken = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResetWorkflow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ResetWorkflow = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimerTaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimerTaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimerTaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskType", wireType)
			}
			m.TaskType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskType |= v12.TaskType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutType", wireType)
			}
			m.TimeoutType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutType |= v14.TimeoutType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowBackoffType", wireType)
			}
			m.WorkflowBackoffType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowBackoffType |= v12.WorkflowBackoffType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleAttempt", wireType)
			}
			m.ScheduleAttempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleAttempt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VisibilityTimestamp == nil {
				m.VisibilityTimestamp = &types.Timestamp{}
			}
			if err := m.VisibilityTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferTaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferTaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferTaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskType", wireType)
			}
			m.TaskType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskType |= v12.TaskType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetNamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetNamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetWorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetWorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetRunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetRunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetChildWorkflowOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TargetChildWorkflowOnly = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleId", wireType)
			}
			m.ScheduleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VisibilityTimestamp == nil {
				m.VisibilityTimestamp = &types.Timestamp{}
			}
			if err := m.VisibilityTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordVisibility", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecordVisibility = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryBranchRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryBranchRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryBranchRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginNodeId", wireType)
			}
			m.BeginNodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginNodeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndNodeId", wireType)
			}
			m.EndNodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndNodeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryBranch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryBranch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryBranch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TreeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BranchId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ancestors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ancestors = append(m.Ancestors, &HistoryBranchRange{})
			if err := m.Ancestors[len(m.Ancestors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryTreeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryTreeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryTreeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BranchInfo == nil {
				m.BranchInfo = &HistoryBranch{}
			}
			if err := m.BranchInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForkTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForkTime == nil {
				m.ForkTime = &types.Timestamp{}
			}
			if err := m.ForkTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedId", wireType)
			}
			m.StartedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiryTime == nil {
				m.ExpiryTime = &types.Timestamp{}
			}
			if err := m.ExpiryTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskStatus", wireType)
			}
			m.TaskStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskStatus |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleId", wireType)
			}
			m.ScheduleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedTime == nil {
				m.CreatedTime = &types.Timestamp{}
			}
			if err := m.CreatedTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiry == nil {
				m.Expiry = &types.Timestamp{}
			}
			if err := m.Expiry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocatedTaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocatedTaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocatedTaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &TaskInfo{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskQueueInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskQueueInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskQueueInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskType", wireType)
			}
			m.TaskType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskType |= v14.TaskQueueType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= v14.TaskQueueKind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckLevel", wireType)
			}
			m.AckLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckLevel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiry == nil {
				m.Expiry = &types.Timestamp{}
			}
			if err := m.Expiry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdated == nil {
				m.LastUpdated = &types.Timestamp{}
			}
			if err := m.LastUpdated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignalInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignalInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignalInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventBatchId", wireType)
			}
			m.InitiatedEventBatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventBatchId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &v11.Payloads{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Control", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Control = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedId", wireType)
			}
			m.InitiatedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCancelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCancelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCancelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventBatchId", wireType)
			}
			m.InitiatedEventBatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventBatchId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedId", wireType)
			}
			m.InitiatedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= v12.WorkflowExecutionState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= v14.WorkflowExecutionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowExecutionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowExecutionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowExecutionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentNamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentNamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentWorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentWorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentRunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentRunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedId", wireType)
			}
			m.InitiatedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionEventBatchId", wireType)
			}
			m.CompletionEventBatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompletionEventBatchId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionEvent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletionEvent = append(m.CompletionEvent[:0], dAtA[iNdEx:postIndex]...)
			if m.CompletionEvent == nil {
				m.CompletionEvent = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionEventEncoding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletionEventEncoding = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowTypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowExecutionTimeoutSeconds", wireType)
			}
			m.WorkflowExecutionTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowExecutionTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowRunTimeoutSeconds", wireType)
			}
			m.WorkflowRunTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowRunTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTaskTimeoutSeconds", wireType)
			}
			m.WorkflowTaskTimeoutSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkflowTaskTimeoutSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartVersion", wireType)
			}
			m.StartVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentVersion", wireType)
			}
			m.CurrentVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplicationData == nil {
				m.ReplicationData = &ReplicationData{}
			}
			if err := m.ReplicationData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastEventTaskId", wireType)
			}
			m.LastEventTaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastEventTaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFirstEventId", wireType)
			}
			m.LastFirstEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastFirstEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastProcessedEvent", wireType)
			}
			m.LastProcessedEvent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastProcessedEvent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeNanos", wireType)
			}
			m.StartTimeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTimeNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedTimeNanos", wireType)
			}
			m.LastUpdatedTimeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdatedTimeNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionVersion", wireType)
			}
			m.DecisionVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionScheduleId", wireType)
			}
			m.DecisionScheduleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionScheduleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionStartedId", wireType)
			}
			m.DecisionStartedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionStartedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTimeout", wireType)
			}
			m.DecisionTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTimeout |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionAttempt", wireType)
			}
			m.DecisionAttempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionAttempt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionStartedTimestampNanos", wireType)
			}
			m.DecisionStartedTimestampNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionStartedTimestampNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionScheduledTimestampNanos", wireType)
			}
			m.DecisionScheduledTimestampNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionScheduledTimestampNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelRequested", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelRequested = bool(v != 0)
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionOriginalScheduledTimestampNanos", wireType)
			}
			m.DecisionOriginalScheduledTimestampNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionOriginalScheduledTimestampNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DecisionRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancelRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickyTaskQueue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StickyTaskQueue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickyScheduleToStartTimeout", wireType)
			}
			m.StickyScheduleToStartTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickyScheduleToStartTimeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryAttempt", wireType)
			}
			m.RetryAttempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryAttempt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryInitialIntervalSeconds", wireType)
			}
			m.RetryInitialIntervalSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryInitialIntervalSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryMaximumIntervalSeconds", wireType)
			}
			m.RetryMaximumIntervalSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryMaximumIntervalSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryMaximumAttempts", wireType)
			}
			m.RetryMaximumAttempts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryMaximumAttempts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryBackoffCoefficient", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RetryBackoffCoefficient = float64(math.Float64frombits(v))
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryExpirationTimeNanos", wireType)
			}
			m.RetryExpirationTimeNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryExpirationTimeNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryNonRetryableErrorTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetryNonRetryableErrorTypes = append(m.RetryNonRetryableErrorTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasRetryPolicy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasRetryPolicy = bool(v != 0)
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronSchedule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CronSchedule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventStoreVersion", wireType)
			}
			m.EventStoreVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventStoreVersion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventBranchToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventBranchToken = append(m.EventBranchToken[:0], dAtA[iNdEx:postIndex]...)
			if m.EventBranchToken == nil {
				m.EventBranchToken = []byte{}
			}
			iNdEx = postIndex
		case 49:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignalCount", wireType)
			}
			m.SignalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignalCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistorySize", wireType)
			}
			m.HistorySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistorySize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientLibraryVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientLibraryVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientFeatureVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientFeatureVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientImpl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientImpl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoResetPoints", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoResetPoints = append(m.AutoResetPoints[:0], dAtA[iNdEx:postIndex]...)
			if m.AutoResetPoints == nil {
				m.AutoResetPoints = []byte{}
			}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoResetPointsEncoding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoResetPointsEncoding = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SearchAttributes == nil {
				m.SearchAttributes = make(map[string]*v11.Payload)
			}
			var mapkey string
			var mapvalue *v11.Payload
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMessage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMessage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &v11.Payload{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SearchAttributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Memo == nil {
				m.Memo = make(map[string]*v11.Payload)
			}
			var mapkey string
			var mapvalue *v11.Payload
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMessage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMessage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &v11.Payload{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Memo[mapkey] = mapvalue
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionHistories", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionHistories = append(m.VersionHistories[:0], dAtA[iNdEx:postIndex]...)
			if m.VersionHistories == nil {
				m.VersionHistories = []byte{}
			}
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionHistoriesEncoding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionHistoriesEncoding = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Checksum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Checksum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Checksum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flavor", wireType)
			}
			m.Flavor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flavor |= v12.ChecksumFlavor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChildExecutionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildExecutionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildExecutionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventBatchId", wireType)
			}
			m.InitiatedEventBatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedEventBatchId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedId", wireType)
			}
			m.StartedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEvent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitiatedEvent = append(m.InitiatedEvent[:0], dAtA[iNdEx:postIndex]...)
			if m.InitiatedEvent == nil {
				m.InitiatedEvent = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedEventEncoding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitiatedEventEncoding = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedWorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartedWorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedRunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartedRunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEvent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartedEvent = append(m.StartedEvent[:0], dAtA[iNdEx:postIndex]...)
			if m.StartedEvent == nil {
				m.StartedEvent = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventEncoding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartedEventEncoding = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowTypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentClosePolicy", wireType)
			}
			m.ParentClosePolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentClosePolicy |= v14.ParentClosePolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatedId", wireType)
			}
			m.InitiatedId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitiatedId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &NamespaceInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &NamespaceConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplicationConfig == nil {
				m.ReplicationConfig = &NamespaceReplicationConfig{}
			}
			if err := m.ReplicationConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigVersion", wireType)
			}
			m.ConfigVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverNotificationVersion", wireType)
			}
			m.FailoverNotificationVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailoverNotificationVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverVersion", wireType)
			}
			m.FailoverVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailoverVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverEndTime", wireType)
			}
			m.FailoverEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailoverEndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= v14.NamespaceStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceReplicationConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceReplicationConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceReplicationConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveClusterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveClusterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clusters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clusters = append(m.Clusters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetentionDays", wireType)
			}
			m.RetentionDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetentionDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmitMetric", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EmitMetric = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArchivalBucket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArchivalBucket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadBinaries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BadBinaries == nil {
				m.BadBinaries = &v15.BadBinaries{}
			}
			if err := m.BadBinaries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryArchivalStatus", wireType)
			}
			m.HistoryArchivalStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryArchivalStatus |= v14.ArchivalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryArchivalUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoryArchivalUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityArchivalStatus", wireType)
			}
			m.VisibilityArchivalStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VisibilityArchivalStatus |= v14.ArchivalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityArchivalUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisibilityArchivalUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWriteEventId", wireType)
			}
			m.LastWriteEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastWriteEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReplicationInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastReplicationInfo == nil {
				m.LastReplicationInfo = make(map[string]*v13.ReplicationInfo)
			}
			var mapkey string
			var mapvalue *v13.ReplicationInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMessage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMessage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMessage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &v13.ReplicationInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LastReplicationInfo[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationVersions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationVersions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationVersions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartVersion == nil {
				m.StartVersion = &types.Int64Value{}
			}
			if err := m.StartVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWriteVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastWriteVersion == nil {
				m.LastWriteVersion = &types.Int64Value{}
			}
			if err := m.LastWriteVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
