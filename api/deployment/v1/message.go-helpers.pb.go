// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package deployment

import (
	"google.golang.org/protobuf/proto"
)

// Marshal an object of type TaskQueueData to the protobuf v3 wire format
func (val *TaskQueueData) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type TaskQueueData from the protobuf v3 wire format
func (val *TaskQueueData) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *TaskQueueData) Size() int {
	return proto.Size(val)
}

// Equal returns whether two TaskQueueData values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *TaskQueueData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *TaskQueueData
	switch t := that.(type) {
	case *TaskQueueData:
		that1 = t
	case TaskQueueData:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type DeploymentLocalState to the protobuf v3 wire format
func (val *DeploymentLocalState) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type DeploymentLocalState from the protobuf v3 wire format
func (val *DeploymentLocalState) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *DeploymentLocalState) Size() int {
	return proto.Size(val)
}

// Equal returns whether two DeploymentLocalState values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *DeploymentLocalState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *DeploymentLocalState
	switch t := that.(type) {
	case *DeploymentLocalState:
		that1 = t
	case DeploymentLocalState:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type DeploymentWorkflowArgs to the protobuf v3 wire format
func (val *DeploymentWorkflowArgs) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type DeploymentWorkflowArgs from the protobuf v3 wire format
func (val *DeploymentWorkflowArgs) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *DeploymentWorkflowArgs) Size() int {
	return proto.Size(val)
}

// Equal returns whether two DeploymentWorkflowArgs values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *DeploymentWorkflowArgs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *DeploymentWorkflowArgs
	switch t := that.(type) {
	case *DeploymentWorkflowArgs:
		that1 = t
	case DeploymentWorkflowArgs:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type DeploymentSeriesWorkflowArgs to the protobuf v3 wire format
func (val *DeploymentSeriesWorkflowArgs) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type DeploymentSeriesWorkflowArgs from the protobuf v3 wire format
func (val *DeploymentSeriesWorkflowArgs) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *DeploymentSeriesWorkflowArgs) Size() int {
	return proto.Size(val)
}

// Equal returns whether two DeploymentSeriesWorkflowArgs values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *DeploymentSeriesWorkflowArgs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *DeploymentSeriesWorkflowArgs
	switch t := that.(type) {
	case *DeploymentSeriesWorkflowArgs:
		that1 = t
	case DeploymentSeriesWorkflowArgs:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type RegisterWorkerInDeploymentArgs to the protobuf v3 wire format
func (val *RegisterWorkerInDeploymentArgs) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type RegisterWorkerInDeploymentArgs from the protobuf v3 wire format
func (val *RegisterWorkerInDeploymentArgs) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *RegisterWorkerInDeploymentArgs) Size() int {
	return proto.Size(val)
}

// Equal returns whether two RegisterWorkerInDeploymentArgs values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *RegisterWorkerInDeploymentArgs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *RegisterWorkerInDeploymentArgs
	switch t := that.(type) {
	case *RegisterWorkerInDeploymentArgs:
		that1 = t
	case RegisterWorkerInDeploymentArgs:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type QueryDescribeDeploymentResponse to the protobuf v3 wire format
func (val *QueryDescribeDeploymentResponse) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type QueryDescribeDeploymentResponse from the protobuf v3 wire format
func (val *QueryDescribeDeploymentResponse) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *QueryDescribeDeploymentResponse) Size() int {
	return proto.Size(val)
}

// Equal returns whether two QueryDescribeDeploymentResponse values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *QueryDescribeDeploymentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *QueryDescribeDeploymentResponse
	switch t := that.(type) {
	case *QueryDescribeDeploymentResponse:
		that1 = t
	case QueryDescribeDeploymentResponse:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type DeploymentWorkflowMemo to the protobuf v3 wire format
func (val *DeploymentWorkflowMemo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type DeploymentWorkflowMemo from the protobuf v3 wire format
func (val *DeploymentWorkflowMemo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *DeploymentWorkflowMemo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two DeploymentWorkflowMemo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *DeploymentWorkflowMemo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *DeploymentWorkflowMemo
	switch t := that.(type) {
	case *DeploymentWorkflowMemo:
		that1 = t
	case DeploymentWorkflowMemo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type StartDeploymentSeriesRequest to the protobuf v3 wire format
func (val *StartDeploymentSeriesRequest) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type StartDeploymentSeriesRequest from the protobuf v3 wire format
func (val *StartDeploymentSeriesRequest) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *StartDeploymentSeriesRequest) Size() int {
	return proto.Size(val)
}

// Equal returns whether two StartDeploymentSeriesRequest values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *StartDeploymentSeriesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *StartDeploymentSeriesRequest
	switch t := that.(type) {
	case *StartDeploymentSeriesRequest:
		that1 = t
	case StartDeploymentSeriesRequest:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type SyncUserDataRequest to the protobuf v3 wire format
func (val *SyncUserDataRequest) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type SyncUserDataRequest from the protobuf v3 wire format
func (val *SyncUserDataRequest) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *SyncUserDataRequest) Size() int {
	return proto.Size(val)
}

// Equal returns whether two SyncUserDataRequest values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *SyncUserDataRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *SyncUserDataRequest
	switch t := that.(type) {
	case *SyncUserDataRequest:
		that1 = t
	case SyncUserDataRequest:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}
