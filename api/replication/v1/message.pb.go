// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/server/api/replication/v1/message.proto

package repication

import (
	bytes "bytes"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	v13 "go.temporal.io/api/common/v1"
	v14 "go.temporal.io/api/failure/v1"
	v11 "go.temporal.io/api/namespace/v1"
	v12 "go.temporal.io/api/replication/v1"
	v1 "go.temporal.io/server/api/enums/v1"
	v15 "go.temporal.io/server/api/history/v1"
	v17 "go.temporal.io/server/api/persistence/v1"
	v16 "go.temporal.io/server/api/workflow/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ReplicationTask struct {
	TaskType     v1.ReplicationTaskType `protobuf:"varint,1,opt,name=task_type,json=taskType,proto3,enum=temporal.server.api.enums.v1.ReplicationTaskType" json:"task_type,omitempty"`
	SourceTaskId int64                  `protobuf:"varint,2,opt,name=source_task_id,json=sourceTaskId,proto3" json:"source_task_id,omitempty"`
	// Types that are valid to be assigned to Attributes:
	//	*ReplicationTask_NamespaceTaskAttributes
	//	*ReplicationTask_SyncShardStatusTaskAttributes
	//	*ReplicationTask_SyncActivityTaskAttributes
	//	*ReplicationTask_HistoryTaskAttributes
	//	*ReplicationTask_SyncWorkflowStateTaskAttributes
	//	*ReplicationTask_TaskQueueUserDataAttributes
	//	*ReplicationTask_RawAttributes
	Attributes     isReplicationTask_Attributes `protobuf_oneof:"attributes"`
	VisibilityTime *time.Time                   `protobuf:"bytes,9,opt,name=visibility_time,json=visibilityTime,proto3,stdtime" json:"visibility_time,omitempty"`
}

func (m *ReplicationTask) Reset()      { *m = ReplicationTask{} }
func (*ReplicationTask) ProtoMessage() {}
func (*ReplicationTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_edd9fae2af6b0532, []int{0}
}
func (m *ReplicationTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicationTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicationTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationTask.Merge(m, src)
}
func (m *ReplicationTask) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationTask.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationTask proto.InternalMessageInfo

type isReplicationTask_Attributes interface {
	isReplicationTask_Attributes()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReplicationTask_NamespaceTaskAttributes struct {
	NamespaceTaskAttributes *NamespaceTaskAttributes `protobuf:"bytes,3,opt,name=namespace_task_attributes,json=namespaceTaskAttributes,proto3,oneof" json:"namespace_task_attributes,omitempty"`
}
type ReplicationTask_SyncShardStatusTaskAttributes struct {
	SyncShardStatusTaskAttributes *SyncShardStatusTaskAttributes `protobuf:"bytes,5,opt,name=sync_shard_status_task_attributes,json=syncShardStatusTaskAttributes,proto3,oneof" json:"sync_shard_status_task_attributes,omitempty"`
}
type ReplicationTask_SyncActivityTaskAttributes struct {
	SyncActivityTaskAttributes *SyncActivityTaskAttributes `protobuf:"bytes,6,opt,name=sync_activity_task_attributes,json=syncActivityTaskAttributes,proto3,oneof" json:"sync_activity_task_attributes,omitempty"`
}
type ReplicationTask_HistoryTaskAttributes struct {
	HistoryTaskAttributes *HistoryTaskAttributes `protobuf:"bytes,8,opt,name=history_task_attributes,json=historyTaskAttributes,proto3,oneof" json:"history_task_attributes,omitempty"`
}
type ReplicationTask_SyncWorkflowStateTaskAttributes struct {
	SyncWorkflowStateTaskAttributes *SyncWorkflowStateTaskAttributes `protobuf:"bytes,10,opt,name=sync_workflow_state_task_attributes,json=syncWorkflowStateTaskAttributes,proto3,oneof" json:"sync_workflow_state_task_attributes,omitempty"`
}
type ReplicationTask_TaskQueueUserDataAttributes struct {
	TaskQueueUserDataAttributes *TaskQueueUserDataAttributes `protobuf:"bytes,11,opt,name=task_queue_user_data_attributes,json=taskQueueUserDataAttributes,proto3,oneof" json:"task_queue_user_data_attributes,omitempty"`
}
type ReplicationTask_RawAttributes struct {
	RawAttributes *RawTaskAttributes `protobuf:"bytes,12,opt,name=raw_attributes,json=rawAttributes,proto3,oneof" json:"raw_attributes,omitempty"`
}

func (*ReplicationTask_NamespaceTaskAttributes) isReplicationTask_Attributes()         {}
func (*ReplicationTask_SyncShardStatusTaskAttributes) isReplicationTask_Attributes()   {}
func (*ReplicationTask_SyncActivityTaskAttributes) isReplicationTask_Attributes()      {}
func (*ReplicationTask_HistoryTaskAttributes) isReplicationTask_Attributes()           {}
func (*ReplicationTask_SyncWorkflowStateTaskAttributes) isReplicationTask_Attributes() {}
func (*ReplicationTask_TaskQueueUserDataAttributes) isReplicationTask_Attributes()     {}
func (*ReplicationTask_RawAttributes) isReplicationTask_Attributes()                   {}

func (m *ReplicationTask) GetAttributes() isReplicationTask_Attributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *ReplicationTask) GetTaskType() v1.ReplicationTaskType {
	if m != nil {
		return m.TaskType
	}
	return v1.REPLICATION_TASK_TYPE_UNSPECIFIED
}

func (m *ReplicationTask) GetSourceTaskId() int64 {
	if m != nil {
		return m.SourceTaskId
	}
	return 0
}

func (m *ReplicationTask) GetNamespaceTaskAttributes() *NamespaceTaskAttributes {
	if x, ok := m.GetAttributes().(*ReplicationTask_NamespaceTaskAttributes); ok {
		return x.NamespaceTaskAttributes
	}
	return nil
}

func (m *ReplicationTask) GetSyncShardStatusTaskAttributes() *SyncShardStatusTaskAttributes {
	if x, ok := m.GetAttributes().(*ReplicationTask_SyncShardStatusTaskAttributes); ok {
		return x.SyncShardStatusTaskAttributes
	}
	return nil
}

func (m *ReplicationTask) GetSyncActivityTaskAttributes() *SyncActivityTaskAttributes {
	if x, ok := m.GetAttributes().(*ReplicationTask_SyncActivityTaskAttributes); ok {
		return x.SyncActivityTaskAttributes
	}
	return nil
}

func (m *ReplicationTask) GetHistoryTaskAttributes() *HistoryTaskAttributes {
	if x, ok := m.GetAttributes().(*ReplicationTask_HistoryTaskAttributes); ok {
		return x.HistoryTaskAttributes
	}
	return nil
}

func (m *ReplicationTask) GetSyncWorkflowStateTaskAttributes() *SyncWorkflowStateTaskAttributes {
	if x, ok := m.GetAttributes().(*ReplicationTask_SyncWorkflowStateTaskAttributes); ok {
		return x.SyncWorkflowStateTaskAttributes
	}
	return nil
}

func (m *ReplicationTask) GetTaskQueueUserDataAttributes() *TaskQueueUserDataAttributes {
	if x, ok := m.GetAttributes().(*ReplicationTask_TaskQueueUserDataAttributes); ok {
		return x.TaskQueueUserDataAttributes
	}
	return nil
}

func (m *ReplicationTask) GetRawAttributes() *RawTaskAttributes {
	if x, ok := m.GetAttributes().(*ReplicationTask_RawAttributes); ok {
		return x.RawAttributes
	}
	return nil
}

func (m *ReplicationTask) GetVisibilityTime() *time.Time {
	if m != nil {
		return m.VisibilityTime
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReplicationTask) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReplicationTask_NamespaceTaskAttributes)(nil),
		(*ReplicationTask_SyncShardStatusTaskAttributes)(nil),
		(*ReplicationTask_SyncActivityTaskAttributes)(nil),
		(*ReplicationTask_HistoryTaskAttributes)(nil),
		(*ReplicationTask_SyncWorkflowStateTaskAttributes)(nil),
		(*ReplicationTask_TaskQueueUserDataAttributes)(nil),
		(*ReplicationTask_RawAttributes)(nil),
	}
}

type ReplicationToken struct {
	ShardId int32 `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	// lastRetrievedMessageId is where the next fetch should begin with.
	LastRetrievedMessageId int64 `protobuf:"varint,2,opt,name=last_retrieved_message_id,json=lastRetrievedMessageId,proto3" json:"last_retrieved_message_id,omitempty"`
	// lastProcessedMessageId is the last messageId that is processed on the passive side.
	// This can be different than lastRetrievedMessageId if passive side supports prefetching messages.
	LastProcessedMessageId int64 `protobuf:"varint,3,opt,name=last_processed_message_id,json=lastProcessedMessageId,proto3" json:"last_processed_message_id,omitempty"`
	// The VisibilityTime of last processed ReplicationTask
	LastProcessedVisibilityTime *time.Time `protobuf:"bytes,4,opt,name=last_processed_visibility_time,json=lastProcessedVisibilityTime,proto3,stdtime" json:"last_processed_visibility_time,omitempty"`
}

func (m *ReplicationToken) Reset()      { *m = ReplicationToken{} }
func (*ReplicationToken) ProtoMessage() {}
func (*ReplicationToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_edd9fae2af6b0532, []int{1}
}
func (m *ReplicationToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicationToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicationToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationToken.Merge(m, src)
}
func (m *ReplicationToken) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationToken) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationToken.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationToken proto.InternalMessageInfo

func (m *ReplicationToken) GetShardId() int32 {
	if m != nil {
		return m.ShardId
	}
	return 0
}

func (m *ReplicationToken) GetLastRetrievedMessageId() int64 {
	if m != nil {
		return m.LastRetrievedMessageId
	}
	return 0
}

func (m *ReplicationToken) GetLastProcessedMessageId() int64 {
	if m != nil {
		return m.LastProcessedMessageId
	}
	return 0
}

func (m *ReplicationToken) GetLastProcessedVisibilityTime() *time.Time {
	if m != nil {
		return m.LastProcessedVisibilityTime
	}
	return nil
}

type SyncShardStatus struct {
	StatusTime *time.Time `protobuf:"bytes,1,opt,name=status_time,json=statusTime,proto3,stdtime" json:"status_time,omitempty"`
}

func (m *SyncShardStatus) Reset()      { *m = SyncShardStatus{} }
func (*SyncShardStatus) ProtoMessage() {}
func (*SyncShardStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_edd9fae2af6b0532, []int{2}
}
func (m *SyncShardStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncShardStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncShardStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncShardStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncShardStatus.Merge(m, src)
}
func (m *SyncShardStatus) XXX_Size() int {
	return m.Size()
}
func (m *SyncShardStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncShardStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SyncShardStatus proto.InternalMessageInfo

func (m *SyncShardStatus) GetStatusTime() *time.Time {
	if m != nil {
		return m.StatusTime
	}
	return nil
}

type SyncReplicationState struct {
	InclusiveLowWatermark     int64      `protobuf:"varint,1,opt,name=inclusive_low_watermark,json=inclusiveLowWatermark,proto3" json:"inclusive_low_watermark,omitempty"`
	InclusiveLowWatermarkTime *time.Time `protobuf:"bytes,2,opt,name=inclusive_low_watermark_time,json=inclusiveLowWatermarkTime,proto3,stdtime" json:"inclusive_low_watermark_time,omitempty"`
}

func (m *SyncReplicationState) Reset()      { *m = SyncReplicationState{} }
func (*SyncReplicationState) ProtoMessage() {}
func (*SyncReplicationState) Descriptor() ([]byte, []int) {
	return fileDescriptor_edd9fae2af6b0532, []int{3}
}
func (m *SyncReplicationState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncReplicationState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncReplicationState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncReplicationState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncReplicationState.Merge(m, src)
}
func (m *SyncReplicationState) XXX_Size() int {
	return m.Size()
}
func (m *SyncReplicationState) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncReplicationState.DiscardUnknown(m)
}

var xxx_messageInfo_SyncReplicationState proto.InternalMessageInfo

func (m *SyncReplicationState) GetInclusiveLowWatermark() int64 {
	if m != nil {
		return m.InclusiveLowWatermark
	}
	return 0
}

func (m *SyncReplicationState) GetInclusiveLowWatermarkTime() *time.Time {
	if m != nil {
		return m.InclusiveLowWatermarkTime
	}
	return nil
}

type ReplicationMessages struct {
	ReplicationTasks []*ReplicationTask `protobuf:"bytes,1,rep,name=replication_tasks,json=replicationTasks,proto3" json:"replication_tasks,omitempty"`
	// This can be different than the last taskId in the above list, because sender can decide to skip tasks (e.g. for completed workflows).
	LastRetrievedMessageId int64 `protobuf:"varint,2,opt,name=last_retrieved_message_id,json=lastRetrievedMessageId,proto3" json:"last_retrieved_message_id,omitempty"`
	// Hint for flow control.
	HasMore         bool             `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	SyncShardStatus *SyncShardStatus `protobuf:"bytes,4,opt,name=sync_shard_status,json=syncShardStatus,proto3" json:"sync_shard_status,omitempty"`
}

func (m *ReplicationMessages) Reset()      { *m = ReplicationMessages{} }
func (*ReplicationMessages) ProtoMessage() {}
func (*ReplicationMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_edd9fae2af6b0532, []int{4}
}
func (m *ReplicationMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicationMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicationMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationMessages.Merge(m, src)
}
func (m *ReplicationMessages) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationMessages.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationMessages proto.InternalMessageInfo

func (m *ReplicationMessages) GetReplicationTasks() []*ReplicationTask {
	if m != nil {
		return m.ReplicationTasks
	}
	return nil
}

func (m *ReplicationMessages) GetLastRetrievedMessageId() int64 {
	if m != nil {
		return m.LastRetrievedMessageId
	}
	return 0
}

func (m *ReplicationMessages) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *ReplicationMessages) GetSyncShardStatus() *SyncShardStatus {
	if m != nil {
		return m.SyncShardStatus
	}
	return nil
}

type WorkflowReplicationMessages struct {
	ReplicationTasks []*ReplicationTask `protobuf:"bytes,1,rep,name=replication_tasks,json=replicationTasks,proto3" json:"replication_tasks,omitempty"`
	// This can be different than the last taskId in the above list, because sender can decide to skip tasks (e.g. for completed workflows).
	ExclusiveHighWatermark     int64      `protobuf:"varint,2,opt,name=exclusive_high_watermark,json=exclusiveHighWatermark,proto3" json:"exclusive_high_watermark,omitempty"`
	ExclusiveHighWatermarkTime *time.Time `protobuf:"bytes,3,opt,name=exclusive_high_watermark_time,json=exclusiveHighWatermarkTime,proto3,stdtime" json:"exclusive_high_watermark_time,omitempty"`
}

func (m *WorkflowReplicationMessages) Reset()      { *m = WorkflowReplicationMessages{} }
func (*WorkflowReplicationMessages) ProtoMessage() {}
func (*WorkflowReplicationMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_edd9fae2af6b0532, []int{5}
}
func (m *WorkflowReplicationMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WorkflowReplicationMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WorkflowReplicationMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WorkflowReplicationMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkflowReplicationMessages.Merge(m, src)
}
func (m *WorkflowReplicationMessages) XXX_Size() int {
	return m.Size()
}
func (m *WorkflowReplicationMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkflowReplicationMessages.DiscardUnknown(m)
}

var xxx_messageInfo_WorkflowReplicationMessages proto.InternalMessageInfo

func (m *WorkflowReplicationMessages) GetReplicationTasks() []*ReplicationTask {
	if m != nil {
		return m.ReplicationTasks
	}
	return nil
}

func (m *WorkflowReplicationMessages) GetExclusiveHighWatermark() int64 {
	if m != nil {
		return m.ExclusiveHighWatermark
	}
	return 0
}

func (m *WorkflowReplicationMessages) GetExclusiveHighWatermarkTime() *time.Time {
	if m != nil {
		return m.ExclusiveHighWatermarkTime
	}
	return nil
}

type ReplicationTaskInfo struct {
	NamespaceId      string      `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	WorkflowId       string      `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId            string      `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	TaskType         v1.TaskType `protobuf:"varint,4,opt,name=task_type,json=taskType,proto3,enum=temporal.server.api.enums.v1.TaskType" json:"task_type,omitempty"`
	TaskId           int64       `protobuf:"varint,5,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Version          int64       `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	FirstEventId     int64       `protobuf:"varint,7,opt,name=first_event_id,json=firstEventId,proto3" json:"first_event_id,omitempty"`
	NextEventId      int64       `protobuf:"varint,8,opt,name=next_event_id,json=nextEventId,proto3" json:"next_event_id,omitempty"`
	ScheduledEventId int64       `protobuf:"varint,9,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
}

func (m *ReplicationTaskInfo) Reset()      { *m = ReplicationTaskInfo{} }
func (*ReplicationTaskInfo) ProtoMessage() {}
func (*ReplicationTaskInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_edd9fae2af6b0532, []int{6}
}
func (m *ReplicationTaskInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicationTaskInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplicationTaskInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplicationTaskInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicationTaskInfo.Merge(m, src)
}
func (m *ReplicationTaskInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReplicationTaskInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicationTaskInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicationTaskInfo proto.InternalMessageInfo

func (m *ReplicationTaskInfo) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *ReplicationTaskInfo) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *ReplicationTaskInfo) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *ReplicationTaskInfo) GetTaskType() v1.TaskType {
	if m != nil {
		return m.TaskType
	}
	return v1.TASK_TYPE_UNSPECIFIED
}

func (m *ReplicationTaskInfo) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *ReplicationTaskInfo) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ReplicationTaskInfo) GetFirstEventId() int64 {
	if m != nil {
		return m.FirstEventId
	}
	return 0
}

func (m *ReplicationTaskInfo) GetNextEventId() int64 {
	if m != nil {
		return m.NextEventId
	}
	return 0
}

func (m *ReplicationTaskInfo) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

type NamespaceTaskAttributes struct {
	NamespaceOperation v1.NamespaceOperation           `protobuf:"varint,1,opt,name=namespace_operation,json=namespaceOperation,proto3,enum=temporal.server.api.enums.v1.NamespaceOperation" json:"namespace_operation,omitempty"`
	Id                 string                          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Info               *v11.NamespaceInfo              `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Config             *v11.NamespaceConfig            `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	ReplicationConfig  *v12.NamespaceReplicationConfig `protobuf:"bytes,5,opt,name=replication_config,json=replicationConfig,proto3" json:"replication_config,omitempty"`
	ConfigVersion      int64                           `protobuf:"varint,6,opt,name=config_version,json=configVersion,proto3" json:"config_version,omitempty"`
	FailoverVersion    int64                           `protobuf:"varint,7,opt,name=failover_version,json=failoverVersion,proto3" json:"failover_version,omitempty"`
	FailoverHistory    []*v12.FailoverStatus           `protobuf:"bytes,8,rep,name=failover_history,json=failoverHistory,proto3" json:"failover_history,omitempty"`
}

func (m *NamespaceTaskAttributes) Reset()      { *m = NamespaceTaskAttributes{} }
func (*NamespaceTaskAttributes) ProtoMessage() {}
func (*NamespaceTaskAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_edd9fae2af6b0532, []int{7}
}
func (m *NamespaceTaskAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceTaskAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceTaskAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceTaskAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceTaskAttributes.Merge(m, src)
}
func (m *NamespaceTaskAttributes) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceTaskAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceTaskAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceTaskAttributes proto.InternalMessageInfo

func (m *NamespaceTaskAttributes) GetNamespaceOperation() v1.NamespaceOperation {
	if m != nil {
		return m.NamespaceOperation
	}
	return v1.NAMESPACE_OPERATION_UNSPECIFIED
}

func (m *NamespaceTaskAttributes) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NamespaceTaskAttributes) GetInfo() *v11.NamespaceInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *NamespaceTaskAttributes) GetConfig() *v11.NamespaceConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *NamespaceTaskAttributes) GetReplicationConfig() *v12.NamespaceReplicationConfig {
	if m != nil {
		return m.ReplicationConfig
	}
	return nil
}

func (m *NamespaceTaskAttributes) GetConfigVersion() int64 {
	if m != nil {
		return m.ConfigVersion
	}
	return 0
}

func (m *NamespaceTaskAttributes) GetFailoverVersion() int64 {
	if m != nil {
		return m.FailoverVersion
	}
	return 0
}

func (m *NamespaceTaskAttributes) GetFailoverHistory() []*v12.FailoverStatus {
	if m != nil {
		return m.FailoverHistory
	}
	return nil
}

type SyncShardStatusTaskAttributes struct {
	SourceCluster string     `protobuf:"bytes,1,opt,name=source_cluster,json=sourceCluster,proto3" json:"source_cluster,omitempty"`
	ShardId       int32      `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	StatusTime    *time.Time `protobuf:"bytes,3,opt,name=status_time,json=statusTime,proto3,stdtime" json:"status_time,omitempty"`
}

func (m *SyncShardStatusTaskAttributes) Reset()      { *m = SyncShardStatusTaskAttributes{} }
func (*SyncShardStatusTaskAttributes) ProtoMessage() {}
func (*SyncShardStatusTaskAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_edd9fae2af6b0532, []int{8}
}
func (m *SyncShardStatusTaskAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncShardStatusTaskAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncShardStatusTaskAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncShardStatusTaskAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncShardStatusTaskAttributes.Merge(m, src)
}
func (m *SyncShardStatusTaskAttributes) XXX_Size() int {
	return m.Size()
}
func (m *SyncShardStatusTaskAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncShardStatusTaskAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_SyncShardStatusTaskAttributes proto.InternalMessageInfo

func (m *SyncShardStatusTaskAttributes) GetSourceCluster() string {
	if m != nil {
		return m.SourceCluster
	}
	return ""
}

func (m *SyncShardStatusTaskAttributes) GetShardId() int32 {
	if m != nil {
		return m.ShardId
	}
	return 0
}

func (m *SyncShardStatusTaskAttributes) GetStatusTime() *time.Time {
	if m != nil {
		return m.StatusTime
	}
	return nil
}

type SyncActivityTaskAttributes struct {
	NamespaceId        string                 `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	WorkflowId         string                 `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId              string                 `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Version            int64                  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	ScheduledEventId   int64                  `protobuf:"varint,5,opt,name=scheduled_event_id,json=scheduledEventId,proto3" json:"scheduled_event_id,omitempty"`
	ScheduledTime      *time.Time             `protobuf:"bytes,6,opt,name=scheduled_time,json=scheduledTime,proto3,stdtime" json:"scheduled_time,omitempty"`
	StartedEventId     int64                  `protobuf:"varint,7,opt,name=started_event_id,json=startedEventId,proto3" json:"started_event_id,omitempty"`
	StartedTime        *time.Time             `protobuf:"bytes,8,opt,name=started_time,json=startedTime,proto3,stdtime" json:"started_time,omitempty"`
	LastHeartbeatTime  *time.Time             `protobuf:"bytes,9,opt,name=last_heartbeat_time,json=lastHeartbeatTime,proto3,stdtime" json:"last_heartbeat_time,omitempty"`
	Details            *v13.Payloads          `protobuf:"bytes,10,opt,name=details,proto3" json:"details,omitempty"`
	Attempt            int32                  `protobuf:"varint,11,opt,name=attempt,proto3" json:"attempt,omitempty"`
	LastFailure        *v14.Failure           `protobuf:"bytes,12,opt,name=last_failure,json=lastFailure,proto3" json:"last_failure,omitempty"`
	LastWorkerIdentity string                 `protobuf:"bytes,13,opt,name=last_worker_identity,json=lastWorkerIdentity,proto3" json:"last_worker_identity,omitempty"`
	VersionHistory     *v15.VersionHistory    `protobuf:"bytes,14,opt,name=version_history,json=versionHistory,proto3" json:"version_history,omitempty"`
	BaseExecutionInfo  *v16.BaseExecutionInfo `protobuf:"bytes,15,opt,name=base_execution_info,json=baseExecutionInfo,proto3" json:"base_execution_info,omitempty"`
}

func (m *SyncActivityTaskAttributes) Reset()      { *m = SyncActivityTaskAttributes{} }
func (*SyncActivityTaskAttributes) ProtoMessage() {}
func (*SyncActivityTaskAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_edd9fae2af6b0532, []int{9}
}
func (m *SyncActivityTaskAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncActivityTaskAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncActivityTaskAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncActivityTaskAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncActivityTaskAttributes.Merge(m, src)
}
func (m *SyncActivityTaskAttributes) XXX_Size() int {
	return m.Size()
}
func (m *SyncActivityTaskAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncActivityTaskAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_SyncActivityTaskAttributes proto.InternalMessageInfo

func (m *SyncActivityTaskAttributes) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *SyncActivityTaskAttributes) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *SyncActivityTaskAttributes) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *SyncActivityTaskAttributes) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *SyncActivityTaskAttributes) GetScheduledEventId() int64 {
	if m != nil {
		return m.ScheduledEventId
	}
	return 0
}

func (m *SyncActivityTaskAttributes) GetScheduledTime() *time.Time {
	if m != nil {
		return m.ScheduledTime
	}
	return nil
}

func (m *SyncActivityTaskAttributes) GetStartedEventId() int64 {
	if m != nil {
		return m.StartedEventId
	}
	return 0
}

func (m *SyncActivityTaskAttributes) GetStartedTime() *time.Time {
	if m != nil {
		return m.StartedTime
	}
	return nil
}

func (m *SyncActivityTaskAttributes) GetLastHeartbeatTime() *time.Time {
	if m != nil {
		return m.LastHeartbeatTime
	}
	return nil
}

func (m *SyncActivityTaskAttributes) GetDetails() *v13.Payloads {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *SyncActivityTaskAttributes) GetAttempt() int32 {
	if m != nil {
		return m.Attempt
	}
	return 0
}

func (m *SyncActivityTaskAttributes) GetLastFailure() *v14.Failure {
	if m != nil {
		return m.LastFailure
	}
	return nil
}

func (m *SyncActivityTaskAttributes) GetLastWorkerIdentity() string {
	if m != nil {
		return m.LastWorkerIdentity
	}
	return ""
}

func (m *SyncActivityTaskAttributes) GetVersionHistory() *v15.VersionHistory {
	if m != nil {
		return m.VersionHistory
	}
	return nil
}

func (m *SyncActivityTaskAttributes) GetBaseExecutionInfo() *v16.BaseExecutionInfo {
	if m != nil {
		return m.BaseExecutionInfo
	}
	return nil
}

type HistoryTaskAttributes struct {
	NamespaceId         string                    `protobuf:"bytes,2,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	WorkflowId          string                    `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId               string                    `protobuf:"bytes,4,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	VersionHistoryItems []*v15.VersionHistoryItem `protobuf:"bytes,5,rep,name=version_history_items,json=versionHistoryItems,proto3" json:"version_history_items,omitempty"`
	Events              *v13.DataBlob             `protobuf:"bytes,6,opt,name=events,proto3" json:"events,omitempty"`
	// New run events does not need version history since there is no prior events.
	NewRunEvents      *v13.DataBlob          `protobuf:"bytes,7,opt,name=new_run_events,json=newRunEvents,proto3" json:"new_run_events,omitempty"`
	BaseExecutionInfo *v16.BaseExecutionInfo `protobuf:"bytes,8,opt,name=base_execution_info,json=baseExecutionInfo,proto3" json:"base_execution_info,omitempty"`
}

func (m *HistoryTaskAttributes) Reset()      { *m = HistoryTaskAttributes{} }
func (*HistoryTaskAttributes) ProtoMessage() {}
func (*HistoryTaskAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_edd9fae2af6b0532, []int{10}
}
func (m *HistoryTaskAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoryTaskAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoryTaskAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoryTaskAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryTaskAttributes.Merge(m, src)
}
func (m *HistoryTaskAttributes) XXX_Size() int {
	return m.Size()
}
func (m *HistoryTaskAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryTaskAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryTaskAttributes proto.InternalMessageInfo

func (m *HistoryTaskAttributes) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *HistoryTaskAttributes) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *HistoryTaskAttributes) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *HistoryTaskAttributes) GetVersionHistoryItems() []*v15.VersionHistoryItem {
	if m != nil {
		return m.VersionHistoryItems
	}
	return nil
}

func (m *HistoryTaskAttributes) GetEvents() *v13.DataBlob {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *HistoryTaskAttributes) GetNewRunEvents() *v13.DataBlob {
	if m != nil {
		return m.NewRunEvents
	}
	return nil
}

func (m *HistoryTaskAttributes) GetBaseExecutionInfo() *v16.BaseExecutionInfo {
	if m != nil {
		return m.BaseExecutionInfo
	}
	return nil
}

type SyncWorkflowStateTaskAttributes struct {
	WorkflowState *v17.WorkflowMutableState `protobuf:"bytes,1,opt,name=workflow_state,json=workflowState,proto3" json:"workflow_state,omitempty"`
}

func (m *SyncWorkflowStateTaskAttributes) Reset()      { *m = SyncWorkflowStateTaskAttributes{} }
func (*SyncWorkflowStateTaskAttributes) ProtoMessage() {}
func (*SyncWorkflowStateTaskAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_edd9fae2af6b0532, []int{11}
}
func (m *SyncWorkflowStateTaskAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncWorkflowStateTaskAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncWorkflowStateTaskAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncWorkflowStateTaskAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncWorkflowStateTaskAttributes.Merge(m, src)
}
func (m *SyncWorkflowStateTaskAttributes) XXX_Size() int {
	return m.Size()
}
func (m *SyncWorkflowStateTaskAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncWorkflowStateTaskAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_SyncWorkflowStateTaskAttributes proto.InternalMessageInfo

func (m *SyncWorkflowStateTaskAttributes) GetWorkflowState() *v17.WorkflowMutableState {
	if m != nil {
		return m.WorkflowState
	}
	return nil
}

type TaskQueueUserDataAttributes struct {
	NamespaceId   string                 `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	TaskQueueName string                 `protobuf:"bytes,2,opt,name=task_queue_name,json=taskQueueName,proto3" json:"task_queue_name,omitempty"`
	UserData      *v17.TaskQueueUserData `protobuf:"bytes,3,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
}

func (m *TaskQueueUserDataAttributes) Reset()      { *m = TaskQueueUserDataAttributes{} }
func (*TaskQueueUserDataAttributes) ProtoMessage() {}
func (*TaskQueueUserDataAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_edd9fae2af6b0532, []int{12}
}
func (m *TaskQueueUserDataAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskQueueUserDataAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskQueueUserDataAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskQueueUserDataAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskQueueUserDataAttributes.Merge(m, src)
}
func (m *TaskQueueUserDataAttributes) XXX_Size() int {
	return m.Size()
}
func (m *TaskQueueUserDataAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskQueueUserDataAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_TaskQueueUserDataAttributes proto.InternalMessageInfo

func (m *TaskQueueUserDataAttributes) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *TaskQueueUserDataAttributes) GetTaskQueueName() string {
	if m != nil {
		return m.TaskQueueName
	}
	return ""
}

func (m *TaskQueueUserDataAttributes) GetUserData() *v17.TaskQueueUserData {
	if m != nil {
		return m.UserData
	}
	return nil
}

type RawTaskAttributes struct {
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	WorkflowId  string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	RunId       string `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Data        []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RawTaskAttributes) Reset()      { *m = RawTaskAttributes{} }
func (*RawTaskAttributes) ProtoMessage() {}
func (*RawTaskAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_edd9fae2af6b0532, []int{13}
}
func (m *RawTaskAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RawTaskAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RawTaskAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RawTaskAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawTaskAttributes.Merge(m, src)
}
func (m *RawTaskAttributes) XXX_Size() int {
	return m.Size()
}
func (m *RawTaskAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_RawTaskAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_RawTaskAttributes proto.InternalMessageInfo

func (m *RawTaskAttributes) GetNamespaceId() string {
	if m != nil {
		return m.NamespaceId
	}
	return ""
}

func (m *RawTaskAttributes) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *RawTaskAttributes) GetRunId() string {
	if m != nil {
		return m.RunId
	}
	return ""
}

func (m *RawTaskAttributes) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ReplicationTask)(nil), "temporal.server.api.replication.v1.ReplicationTask")
	proto.RegisterType((*ReplicationToken)(nil), "temporal.server.api.replication.v1.ReplicationToken")
	proto.RegisterType((*SyncShardStatus)(nil), "temporal.server.api.replication.v1.SyncShardStatus")
	proto.RegisterType((*SyncReplicationState)(nil), "temporal.server.api.replication.v1.SyncReplicationState")
	proto.RegisterType((*ReplicationMessages)(nil), "temporal.server.api.replication.v1.ReplicationMessages")
	proto.RegisterType((*WorkflowReplicationMessages)(nil), "temporal.server.api.replication.v1.WorkflowReplicationMessages")
	proto.RegisterType((*ReplicationTaskInfo)(nil), "temporal.server.api.replication.v1.ReplicationTaskInfo")
	proto.RegisterType((*NamespaceTaskAttributes)(nil), "temporal.server.api.replication.v1.NamespaceTaskAttributes")
	proto.RegisterType((*SyncShardStatusTaskAttributes)(nil), "temporal.server.api.replication.v1.SyncShardStatusTaskAttributes")
	proto.RegisterType((*SyncActivityTaskAttributes)(nil), "temporal.server.api.replication.v1.SyncActivityTaskAttributes")
	proto.RegisterType((*HistoryTaskAttributes)(nil), "temporal.server.api.replication.v1.HistoryTaskAttributes")
	proto.RegisterType((*SyncWorkflowStateTaskAttributes)(nil), "temporal.server.api.replication.v1.SyncWorkflowStateTaskAttributes")
	proto.RegisterType((*TaskQueueUserDataAttributes)(nil), "temporal.server.api.replication.v1.TaskQueueUserDataAttributes")
	proto.RegisterType((*RawTaskAttributes)(nil), "temporal.server.api.replication.v1.RawTaskAttributes")
}

func init() {
	proto.RegisterFile("temporal/server/api/replication/v1/message.proto", fileDescriptor_edd9fae2af6b0532)
}

var fileDescriptor_edd9fae2af6b0532 = []byte{
	// 1805 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xcf, 0x6f, 0x23, 0x49,
	0x15, 0x4e, 0xdb, 0x4e, 0xe2, 0xbc, 0x24, 0x4e, 0x52, 0xd9, 0x10, 0x27, 0xc3, 0x38, 0x19, 0xb3,
	0xbb, 0x64, 0x61, 0x71, 0xe6, 0x07, 0x0b, 0xbb, 0x2c, 0x62, 0x35, 0x09, 0xb3, 0x8c, 0x47, 0xcc,
	0x32, 0xf4, 0x0c, 0x33, 0x12, 0x07, 0x9a, 0xb2, 0xbb, 0x6c, 0x97, 0x62, 0x77, 0x9b, 0xaa, 0x6a,
	0x7b, 0x7c, 0x43, 0x70, 0x40, 0x42, 0x42, 0x5a, 0x89, 0x3b, 0xe2, 0xc0, 0x81, 0x13, 0x12, 0x77,
	0xce, 0x88, 0xe3, 0x48, 0x5c, 0xf6, 0xc6, 0x4e, 0xe6, 0xc2, 0x71, 0xc5, 0x5f, 0x80, 0xaa, 0xba,
	0xaa, 0xdd, 0xed, 0x6e, 0x7b, 0x9a, 0x85, 0x11, 0x37, 0x77, 0xbd, 0xf7, 0xbe, 0xf7, 0xea, 0xd5,
	0xf7, 0x5e, 0xbd, 0x32, 0x5c, 0x17, 0x64, 0x30, 0xf4, 0x19, 0xee, 0x9f, 0x72, 0xc2, 0x46, 0x84,
	0x9d, 0xe2, 0x21, 0x3d, 0x65, 0x64, 0xd8, 0xa7, 0x6d, 0x2c, 0xa8, 0xef, 0x9d, 0x8e, 0x6e, 0x9c,
	0x0e, 0x08, 0xe7, 0xb8, 0x4b, 0x1a, 0x43, 0xe6, 0x0b, 0x1f, 0xd5, 0x8d, 0x45, 0x23, 0xb4, 0x68,
	0xe0, 0x21, 0x6d, 0xc4, 0x2c, 0x1a, 0xa3, 0x1b, 0x87, 0x47, 0x5d, 0xdf, 0xef, 0xf6, 0xc9, 0xa9,
	0xb2, 0x68, 0x05, 0x9d, 0x53, 0x41, 0x07, 0x84, 0x0b, 0x3c, 0x18, 0x86, 0x20, 0x87, 0xd7, 0x5c,
	0x32, 0x24, 0x9e, 0x4b, 0xbc, 0x36, 0x25, 0xfc, 0xb4, 0xeb, 0x77, 0x7d, 0xb5, 0xae, 0x7e, 0x69,
	0x95, 0x46, 0x56, 0x64, 0xc4, 0x0b, 0x06, 0x5c, 0xc6, 0x14, 0x77, 0x18, 0xea, 0x7f, 0x79, 0xa1,
	0xbe, 0xc0, 0xfc, 0x42, 0x2b, 0xbe, 0x9d, 0xa5, 0xd8, 0xa3, 0x5c, 0xf8, 0x6c, 0x92, 0xda, 0xee,
	0xe1, 0x07, 0x59, 0xda, 0x43, 0xc2, 0x38, 0xe5, 0x82, 0x78, 0x6d, 0x22, 0x2d, 0xc6, 0x3e, 0xbb,
	0xe8, 0xf4, 0xfd, 0xb1, 0x33, 0x08, 0x04, 0x6e, 0xf5, 0x89, 0xc3, 0x05, 0x16, 0x06, 0xe0, 0xeb,
	0x39, 0x00, 0x64, 0x74, 0xce, 0xcf, 0x02, 0x12, 0x10, 0xae, 0xad, 0x5e, 0x8f, 0xac, 0xa4, 0x7a,
	0xdb, 0x1f, 0x0c, 0x32, 0xce, 0x22, 0xb6, 0x67, 0xa9, 0xe5, 0xe1, 0x01, 0xe1, 0x43, 0x1c, 0x42,
	0x26, 0x15, 0xdf, 0x4a, 0x28, 0x2e, 0x3a, 0xdf, 0xc3, 0x37, 0x12, 0xaa, 0x1d, 0x4c, 0xfb, 0x01,
	0xcb, 0x40, 0xfc, 0x5a, 0xd6, 0xb6, 0x4c, 0x22, 0x52, 0xea, 0xf5, 0x7f, 0x95, 0x61, 0xcb, 0x9e,
	0xba, 0x7d, 0x84, 0xf9, 0x05, 0xfa, 0x08, 0xd6, 0xd4, 0xc6, 0xc5, 0x64, 0x48, 0xaa, 0xd6, 0xb1,
	0x75, 0x52, 0xb9, 0x79, 0xa3, 0x91, 0xc5, 0x2e, 0x75, 0x8a, 0x8d, 0xd1, 0x8d, 0xc6, 0x0c, 0xc2,
	0xa3, 0xc9, 0x90, 0xd8, 0x65, 0xa1, 0x7f, 0xa1, 0xd7, 0xa1, 0xc2, 0xfd, 0x80, 0xb5, 0x89, 0xa3,
	0x60, 0xa9, 0x5b, 0x2d, 0x1c, 0x5b, 0x27, 0x45, 0x7b, 0x23, 0x5c, 0x95, 0x16, 0x4d, 0x17, 0x4d,
	0xe0, 0x20, 0x4a, 0x54, 0xa8, 0x88, 0x85, 0x60, 0xb4, 0x15, 0x08, 0xc2, 0xab, 0xc5, 0x63, 0xeb,
	0x64, 0xfd, 0xe6, 0xfb, 0x8d, 0x97, 0x73, 0xbc, 0xf1, 0x91, 0x01, 0x91, 0xb8, 0xb7, 0x23, 0x88,
	0xbb, 0x4b, 0xf6, 0xbe, 0x97, 0x2d, 0x42, 0xbf, 0xb1, 0xe0, 0x1a, 0x9f, 0x78, 0x6d, 0x87, 0xf7,
	0x30, 0x73, 0x15, 0x4b, 0x02, 0x9e, 0x8a, 0x61, 0x59, 0xc5, 0x70, 0x3b, 0x4f, 0x0c, 0x0f, 0x27,
	0x5e, 0xfb, 0xa1, 0xc4, 0x7a, 0xa8, 0xa0, 0x52, 0x91, 0x5c, 0xe5, 0x8b, 0x14, 0xd0, 0x2f, 0x2d,
	0x50, 0x1a, 0x0e, 0x6e, 0x0b, 0x3a, 0xa2, 0x62, 0x92, 0x8a, 0x65, 0x45, 0xc5, 0xf2, 0x9d, 0xbc,
	0xb1, 0xdc, 0xd6, 0x38, 0xa9, 0x40, 0x0e, 0xf9, 0x5c, 0x29, 0xe2, 0xb0, 0xaf, 0xab, 0x2f, 0xe5,
	0xbe, 0xac, 0xdc, 0xbf, 0x97, 0xc7, 0xfd, 0xdd, 0x10, 0x22, 0xe5, 0x79, 0xaf, 0x97, 0x25, 0x40,
	0xbf, 0xb5, 0xe0, 0x4b, 0x6a, 0xeb, 0x51, 0xed, 0xaa, 0x9a, 0x4d, 0x45, 0x00, 0x2a, 0x82, 0xf3,
	0xbc, 0x09, 0x78, 0xa2, 0xd1, 0x64, 0xba, 0xd3, 0xc4, 0x38, 0xe2, 0x8b, 0x55, 0xd0, 0xaf, 0x2c,
	0x38, 0x9a, 0xf6, 0x02, 0x27, 0xe0, 0x84, 0x39, 0x2e, 0x16, 0x38, 0x1e, 0xd1, 0xba, 0x8a, 0xe8,
	0x83, 0x3c, 0x11, 0x49, 0xf4, 0x1f, 0x4a, 0xa4, 0x1f, 0x71, 0xc2, 0xbe, 0x8b, 0x05, 0x4e, 0x44,
	0x73, 0x45, 0xcc, 0x17, 0xa3, 0x9f, 0x40, 0x85, 0xe1, 0x71, 0xdc, 0xef, 0x86, 0xf2, 0xfb, 0x4e,
	0x1e, 0xbf, 0x36, 0x1e, 0xa7, 0xf6, 0xbe, 0xc9, 0xf0, 0x38, 0x86, 0xdf, 0x84, 0xad, 0x11, 0xe5,
	0xb4, 0x45, 0xfb, 0x8a, 0x76, 0x74, 0x40, 0xaa, 0x6b, 0xca, 0xc1, 0x61, 0x23, 0xbc, 0x3b, 0x1a,
	0xe6, 0xee, 0x68, 0x3c, 0x32, 0x77, 0xc7, 0x59, 0xe9, 0xe3, 0x7f, 0x1c, 0x59, 0x76, 0x65, 0x6a,
	0x28, 0x45, 0x67, 0x1b, 0x00, 0xd3, 0x30, 0xef, 0x95, 0xca, 0xa5, 0xed, 0xe5, 0x7b, 0xa5, 0xf2,
	0xea, 0x76, 0xb9, 0xfe, 0xeb, 0x02, 0x6c, 0xc7, 0x5b, 0x86, 0x7f, 0x41, 0x3c, 0x74, 0x00, 0xe5,
	0xb0, 0xfc, 0xa8, 0xab, 0x9a, 0xce, 0xb2, 0xbd, 0xaa, 0xbe, 0x9b, 0x2e, 0x7a, 0x0f, 0x0e, 0xfa,
	0x98, 0x0b, 0x87, 0x11, 0xc1, 0x28, 0x19, 0x11, 0xd7, 0xd1, 0x4d, 0x6c, 0xda, 0x4b, 0xbe, 0x20,
	0x15, 0x6c, 0x23, 0xbf, 0x1f, 0x8a, 0x63, 0xa6, 0x43, 0xe6, 0xb7, 0x09, 0xe7, 0x49, 0xd3, 0xe2,
	0xd4, 0xf4, 0x81, 0x91, 0x4f, 0x4d, 0x09, 0xd4, 0x66, 0x4c, 0x67, 0x33, 0x53, 0xca, 0x99, 0x99,
	0x2b, 0x09, 0x0f, 0x8f, 0x13, 0x69, 0xaa, 0x3f, 0x82, 0xad, 0x99, 0x76, 0x81, 0x6e, 0xc3, 0xba,
	0xe9, 0x41, 0xd2, 0x8d, 0x95, 0xd3, 0x0d, 0x84, 0x46, 0x0a, 0xf5, 0xcf, 0x16, 0xbc, 0x26, 0x61,
	0x63, 0x69, 0x56, 0xc4, 0x46, 0xdf, 0x80, 0x7d, 0xea, 0xb5, 0xfb, 0x01, 0xa7, 0x23, 0xe2, 0xc8,
	0xfa, 0x1a, 0x63, 0x41, 0xd8, 0x00, 0xb3, 0x0b, 0xe5, 0xa7, 0x68, 0xef, 0x45, 0xe2, 0xef, 0xfb,
	0xe3, 0x27, 0x46, 0x88, 0x30, 0x7c, 0x71, 0x8e, 0x5d, 0x18, 0x64, 0x21, 0x67, 0x90, 0x07, 0x99,
	0xf0, 0x2a, 0xe6, 0x3f, 0x15, 0x60, 0x37, 0x16, 0xaf, 0x3e, 0x09, 0x8e, 0x7e, 0x0a, 0x3b, 0x31,
	0x22, 0xab, 0x56, 0xc0, 0xab, 0xd6, 0x71, 0xf1, 0x64, 0xfd, 0xe6, 0xad, 0x5c, 0xb4, 0x4f, 0xde,
	0x4e, 0xf6, 0x36, 0x4b, 0x2e, 0xf0, 0xff, 0x86, 0x60, 0x07, 0x50, 0xee, 0x61, 0xee, 0x0c, 0x7c,
	0x46, 0x14, 0x9f, 0xca, 0xf6, 0x6a, 0x0f, 0xf3, 0xfb, 0x3e, 0x23, 0xc8, 0x81, 0x9d, 0xd4, 0xad,
	0xa2, 0x39, 0x73, 0xeb, 0x73, 0xdc, 0x22, 0xf6, 0xd6, 0xcc, 0xad, 0x51, 0xff, 0x5d, 0x01, 0xae,
	0x98, 0xb6, 0xf5, 0xff, 0x49, 0xdc, 0xbb, 0x50, 0x25, 0x4f, 0x0d, 0x2b, 0x7a, 0xb4, 0xdb, 0x8b,
	0xd1, 0x49, 0xe7, 0x2d, 0x92, 0xdf, 0xa5, 0xdd, 0xde, 0x94, 0x4f, 0x6d, 0xb8, 0x3a, 0xcf, 0x32,
	0x24, 0x54, 0x31, 0x27, 0xa1, 0x0e, 0xb3, 0x1d, 0x28, 0x46, 0x7d, 0x9a, 0x64, 0x94, 0x9a, 0x34,
	0xbc, 0x8e, 0x8f, 0xae, 0xc1, 0xc6, 0x74, 0xd6, 0xd0, 0xfd, 0x66, 0xcd, 0x5e, 0x8f, 0xd6, 0x9a,
	0x2e, 0x3a, 0x82, 0xf5, 0xe8, 0x0a, 0xd2, 0x24, 0x58, 0xb3, 0xc1, 0x2c, 0x35, 0x5d, 0xb4, 0x07,
	0x2b, 0x2c, 0xf0, 0x4c, 0x1b, 0x59, 0xb3, 0x97, 0x59, 0xe0, 0x35, 0x5d, 0x74, 0x1e, 0x1f, 0x9e,
	0x4a, 0x6a, 0x78, 0x7a, 0x73, 0xf1, 0xf0, 0x94, 0x31, 0x31, 0xed, 0xc3, 0xaa, 0x19, 0x95, 0x96,
	0x55, 0x16, 0x57, 0x44, 0x38, 0x24, 0x55, 0x61, 0x75, 0x24, 0x47, 0x54, 0xdf, 0x53, 0x23, 0x40,
	0xd1, 0x36, 0x9f, 0x72, 0xc8, 0xea, 0x50, 0xc6, 0x85, 0x43, 0x46, 0xc4, 0x13, 0xd2, 0x72, 0x35,
	0x1c, 0xb2, 0xd4, 0xea, 0x1d, 0xb9, 0xd8, 0x74, 0x51, 0x1d, 0x36, 0x3d, 0xf2, 0x34, 0xa6, 0x54,
	0x56, 0x4a, 0xeb, 0x72, 0xd1, 0xe8, 0xbc, 0x0d, 0x88, 0xb7, 0x7b, 0xc4, 0x0d, 0xfa, 0xc4, 0x9d,
	0x2a, 0xae, 0x29, 0xc5, 0xed, 0x48, 0xa2, 0xb5, 0xeb, 0xbf, 0x2f, 0xc1, 0xfe, 0x9c, 0x91, 0x0b,
	0x61, 0xd8, 0x9d, 0xa6, 0xd9, 0x1f, 0x12, 0xa6, 0x4e, 0x41, 0x8f, 0x94, 0xd7, 0x17, 0x67, 0x25,
	0xc2, 0xfc, 0x81, 0xb1, 0xb3, 0x91, 0x97, 0x5a, 0x43, 0x15, 0x28, 0x44, 0xa7, 0x53, 0xa0, 0x2e,
	0xfa, 0x36, 0x94, 0xa8, 0xd7, 0xf1, 0x35, 0x7b, 0x4e, 0xa6, 0x3e, 0x24, 0x78, 0x64, 0x9f, 0x70,
	0x20, 0x19, 0x61, 0x2b, 0x2b, 0x74, 0x06, 0x2b, 0x6d, 0xdf, 0xeb, 0xd0, 0xae, 0x2e, 0xd3, 0xaf,
	0xe4, 0xb1, 0x3f, 0x57, 0x16, 0xb6, 0xb6, 0x44, 0x1d, 0x40, 0xf1, 0xa2, 0xd3, 0x78, 0xe1, 0xf0,
	0xf8, 0xcd, 0x24, 0xde, 0xbc, 0xc9, 0x35, 0x46, 0x59, 0x0d, 0x1e, 0xaf, 0xe3, 0x70, 0x09, 0xbd,
	0x01, 0x95, 0x10, 0xdb, 0x49, 0x32, 0x62, 0x33, 0x5c, 0x7d, 0xac, 0x79, 0xf1, 0x16, 0x6c, 0xcb,
	0xb7, 0x82, 0x3f, 0x22, 0x2c, 0x52, 0x0c, 0x99, 0xb1, 0x65, 0xd6, 0x8d, 0xea, 0xe3, 0x98, 0xaa,
	0x9e, 0xce, 0xaa, 0x65, 0xd5, 0x2d, 0xbe, 0xba, 0x30, 0xee, 0x0f, 0xb5, 0x91, 0x69, 0x53, 0x06,
	0x44, 0x8f, 0x7e, 0xf5, 0x3f, 0x58, 0x70, 0x75, 0xe1, 0x44, 0x2c, 0xf7, 0xa2, 0x5f, 0x08, 0xb2,
	0x94, 0x05, 0x61, 0xba, 0x22, 0x37, 0xc3, 0xd5, 0xf3, 0x70, 0x31, 0x31, 0x22, 0x14, 0x92, 0x23,
	0xc2, 0xcc, 0x95, 0x59, 0xfc, 0x1c, 0x57, 0xe6, 0xdf, 0x57, 0xe0, 0x70, 0xfe, 0xb0, 0xfc, 0x2a,
	0x7b, 0x46, 0xac, 0xaa, 0x4b, 0xc9, 0xaa, 0xce, 0xae, 0xc5, 0xe5, 0xec, 0x5a, 0x44, 0xdf, 0x83,
	0xca, 0x54, 0x5b, 0xe5, 0x61, 0x25, 0x67, 0x1e, 0x36, 0x23, 0x3b, 0x29, 0x41, 0x27, 0xb0, 0xcd,
	0x05, 0x66, 0x22, 0xee, 0x34, 0x24, 0x4d, 0x45, 0xaf, 0x1b, 0x97, 0xe7, 0xb0, 0x61, 0x34, 0x95,
	0xc3, 0x72, 0x4e, 0x87, 0xeb, 0xda, 0x4a, 0xb9, 0x7b, 0x00, 0xbb, 0xea, 0xfa, 0xed, 0x11, 0xcc,
	0x44, 0x8b, 0x60, 0xf1, 0x9f, 0x0d, 0x9e, 0x3b, 0xd2, 0xf8, 0xae, 0xb1, 0x55, 0x88, 0xdf, 0x82,
	0x55, 0x97, 0x08, 0x4c, 0xfb, 0xe6, 0xa5, 0x70, 0x9c, 0x64, 0x70, 0xf8, 0x70, 0x97, 0xe4, 0x7d,
	0x80, 0x27, 0x7d, 0x1f, 0xbb, 0xdc, 0x36, 0x06, 0xf2, 0x34, 0xb0, 0x90, 0xda, 0x42, 0xcd, 0xf4,
	0xcb, 0xb6, 0xf9, 0x94, 0x9b, 0x55, 0x71, 0xea, 0xc7, 0xb7, 0x1e, 0xbd, 0x67, 0xa0, 0xb5, 0xd0,
	0x14, 0x46, 0xc0, 0x88, 0xbd, 0x2e, 0xad, 0xf4, 0x07, 0xba, 0x0e, 0xaf, 0x29, 0x10, 0x49, 0x0b,
	0xc2, 0x1c, 0xea, 0x12, 0x4f, 0x50, 0x31, 0xa9, 0x6e, 0x2a, 0x46, 0x20, 0x29, 0x7b, 0xa2, 0x44,
	0x4d, 0x2d, 0x41, 0x4f, 0x60, 0x4b, 0xf3, 0x21, 0x2a, 0xcb, 0x8a, 0xf2, 0xdc, 0xc8, 0x6c, 0xa1,
	0x5a, 0x47, 0x06, 0xa0, 0x2b, 0x5b, 0x17, 0xa2, 0x5d, 0x19, 0x25, 0xbe, 0x51, 0x0b, 0x76, 0x5b,
	0x98, 0x13, 0x87, 0x3c, 0x25, 0xed, 0x40, 0x75, 0x2b, 0xd5, 0x3b, 0xb7, 0x14, 0xf8, 0xcd, 0x4c,
	0x70, 0x43, 0x66, 0x89, 0x7e, 0x86, 0x39, 0xb9, 0x63, 0x4c, 0x55, 0x17, 0xdd, 0x69, 0xcd, 0x2e,
	0xd5, 0xff, 0x5a, 0x84, 0xbd, 0xcc, 0x37, 0x60, 0xaa, 0xa0, 0x0a, 0x2f, 0x2d, 0xa8, 0xe2, 0x82,
	0x82, 0x2a, 0xc5, 0x0b, 0xaa, 0x03, 0x7b, 0x33, 0x19, 0x73, 0xa8, 0x20, 0x03, 0xf9, 0x86, 0x2f,
	0xce, 0xdd, 0xda, 0xdc, 0xbc, 0x35, 0x05, 0x19, 0xd8, 0xbb, 0xa3, 0xd4, 0x9a, 0x1c, 0x7f, 0x56,
	0x54, 0x7d, 0x98, 0x07, 0xf9, 0x5c, 0x96, 0xc9, 0x57, 0xdc, 0x59, 0xdf, 0x6f, 0xd9, 0x5a, 0x1f,
	0x7d, 0x08, 0x15, 0x8f, 0x8c, 0x1d, 0x19, 0xbc, 0x46, 0x58, 0xcd, 0x89, 0xb0, 0xe1, 0x91, 0xb1,
	0x1d, 0x78, 0x77, 0x42, 0x9c, 0x39, 0x47, 0x58, 0xfe, 0x1f, 0x1e, 0xe1, 0xbd, 0x52, 0xd9, 0xda,
	0x2e, 0xd4, 0x7f, 0x61, 0xc1, 0xd1, 0x4b, 0x9e, 0xd2, 0xc8, 0x81, 0x4a, 0xf2, 0xdd, 0xae, 0xdf,
	0x2e, 0xef, 0x66, 0x06, 0x12, 0xfb, 0xb3, 0x4d, 0xc6, 0x62, 0x80, 0xef, 0x87, 0x7f, 0xd6, 0x29,
	0x7c, 0x7b, 0x73, 0x1c, 0x77, 0x57, 0xff, 0x8b, 0x05, 0x57, 0x16, 0xbc, 0x9e, 0xf3, 0x34, 0xe9,
	0x37, 0x61, 0x2b, 0xf6, 0x94, 0x97, 0x12, 0xcd, 0xbc, 0xcd, 0xe8, 0xdd, 0x2d, 0x2f, 0x62, 0x64,
	0xc3, 0x5a, 0xf4, 0xce, 0xd7, 0xf7, 0xc9, 0x3b, 0x79, 0xb6, 0x91, 0x0a, 0xcf, 0x2e, 0x07, 0xfa,
	0x97, 0xcc, 0xe1, 0x4e, 0xea, 0x11, 0xfe, 0x2a, 0x6f, 0x16, 0x04, 0x25, 0x15, 0xbf, 0xac, 0x8e,
	0x0d, 0x5b, 0xfd, 0x3e, 0xa3, 0xcf, 0x9e, 0xd7, 0x96, 0x3e, 0x79, 0x5e, 0x5b, 0xfa, 0xec, 0x79,
	0xcd, 0xfa, 0xf9, 0x65, 0xcd, 0xfa, 0xe3, 0x65, 0xcd, 0xfa, 0xdb, 0x65, 0xcd, 0x7a, 0x76, 0x59,
	0xb3, 0x3e, 0xbd, 0xac, 0x59, 0xff, 0xbc, 0xac, 0x2d, 0x7d, 0x76, 0x59, 0xb3, 0x3e, 0x7e, 0x51,
	0x5b, 0x7a, 0xf6, 0xa2, 0xb6, 0xf4, 0xc9, 0x8b, 0xda, 0xd2, 0x8f, 0x6f, 0x75, 0xfd, 0xe9, 0xee,
	0xa9, 0x3f, 0xff, 0x6f, 0xe9, 0xf7, 0x19, 0x19, 0xea, 0xaf, 0xd6, 0x8a, 0xea, 0xd9, 0xb7, 0xfe,
	0x1d, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x72, 0x94, 0x79, 0xce, 0x16, 0x00, 0x00,
}

func (this *ReplicationTask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationTask)
	if !ok {
		that2, ok := that.(ReplicationTask)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskType != that1.TaskType {
		return false
	}
	if this.SourceTaskId != that1.SourceTaskId {
		return false
	}
	if that1.Attributes == nil {
		if this.Attributes != nil {
			return false
		}
	} else if this.Attributes == nil {
		return false
	} else if !this.Attributes.Equal(that1.Attributes) {
		return false
	}
	if that1.VisibilityTime == nil {
		if this.VisibilityTime != nil {
			return false
		}
	} else if !this.VisibilityTime.Equal(*that1.VisibilityTime) {
		return false
	}
	return true
}
func (this *ReplicationTask_NamespaceTaskAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationTask_NamespaceTaskAttributes)
	if !ok {
		that2, ok := that.(ReplicationTask_NamespaceTaskAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NamespaceTaskAttributes.Equal(that1.NamespaceTaskAttributes) {
		return false
	}
	return true
}
func (this *ReplicationTask_SyncShardStatusTaskAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationTask_SyncShardStatusTaskAttributes)
	if !ok {
		that2, ok := that.(ReplicationTask_SyncShardStatusTaskAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SyncShardStatusTaskAttributes.Equal(that1.SyncShardStatusTaskAttributes) {
		return false
	}
	return true
}
func (this *ReplicationTask_SyncActivityTaskAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationTask_SyncActivityTaskAttributes)
	if !ok {
		that2, ok := that.(ReplicationTask_SyncActivityTaskAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SyncActivityTaskAttributes.Equal(that1.SyncActivityTaskAttributes) {
		return false
	}
	return true
}
func (this *ReplicationTask_HistoryTaskAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationTask_HistoryTaskAttributes)
	if !ok {
		that2, ok := that.(ReplicationTask_HistoryTaskAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HistoryTaskAttributes.Equal(that1.HistoryTaskAttributes) {
		return false
	}
	return true
}
func (this *ReplicationTask_SyncWorkflowStateTaskAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationTask_SyncWorkflowStateTaskAttributes)
	if !ok {
		that2, ok := that.(ReplicationTask_SyncWorkflowStateTaskAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SyncWorkflowStateTaskAttributes.Equal(that1.SyncWorkflowStateTaskAttributes) {
		return false
	}
	return true
}
func (this *ReplicationTask_TaskQueueUserDataAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationTask_TaskQueueUserDataAttributes)
	if !ok {
		that2, ok := that.(ReplicationTask_TaskQueueUserDataAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TaskQueueUserDataAttributes.Equal(that1.TaskQueueUserDataAttributes) {
		return false
	}
	return true
}
func (this *ReplicationTask_RawAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationTask_RawAttributes)
	if !ok {
		that2, ok := that.(ReplicationTask_RawAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RawAttributes.Equal(that1.RawAttributes) {
		return false
	}
	return true
}
func (this *ReplicationToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationToken)
	if !ok {
		that2, ok := that.(ReplicationToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ShardId != that1.ShardId {
		return false
	}
	if this.LastRetrievedMessageId != that1.LastRetrievedMessageId {
		return false
	}
	if this.LastProcessedMessageId != that1.LastProcessedMessageId {
		return false
	}
	if that1.LastProcessedVisibilityTime == nil {
		if this.LastProcessedVisibilityTime != nil {
			return false
		}
	} else if !this.LastProcessedVisibilityTime.Equal(*that1.LastProcessedVisibilityTime) {
		return false
	}
	return true
}
func (this *SyncShardStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncShardStatus)
	if !ok {
		that2, ok := that.(SyncShardStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.StatusTime == nil {
		if this.StatusTime != nil {
			return false
		}
	} else if !this.StatusTime.Equal(*that1.StatusTime) {
		return false
	}
	return true
}
func (this *SyncReplicationState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncReplicationState)
	if !ok {
		that2, ok := that.(SyncReplicationState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InclusiveLowWatermark != that1.InclusiveLowWatermark {
		return false
	}
	if that1.InclusiveLowWatermarkTime == nil {
		if this.InclusiveLowWatermarkTime != nil {
			return false
		}
	} else if !this.InclusiveLowWatermarkTime.Equal(*that1.InclusiveLowWatermarkTime) {
		return false
	}
	return true
}
func (this *ReplicationMessages) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationMessages)
	if !ok {
		that2, ok := that.(ReplicationMessages)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ReplicationTasks) != len(that1.ReplicationTasks) {
		return false
	}
	for i := range this.ReplicationTasks {
		if !this.ReplicationTasks[i].Equal(that1.ReplicationTasks[i]) {
			return false
		}
	}
	if this.LastRetrievedMessageId != that1.LastRetrievedMessageId {
		return false
	}
	if this.HasMore != that1.HasMore {
		return false
	}
	if !this.SyncShardStatus.Equal(that1.SyncShardStatus) {
		return false
	}
	return true
}
func (this *WorkflowReplicationMessages) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WorkflowReplicationMessages)
	if !ok {
		that2, ok := that.(WorkflowReplicationMessages)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ReplicationTasks) != len(that1.ReplicationTasks) {
		return false
	}
	for i := range this.ReplicationTasks {
		if !this.ReplicationTasks[i].Equal(that1.ReplicationTasks[i]) {
			return false
		}
	}
	if this.ExclusiveHighWatermark != that1.ExclusiveHighWatermark {
		return false
	}
	if that1.ExclusiveHighWatermarkTime == nil {
		if this.ExclusiveHighWatermarkTime != nil {
			return false
		}
	} else if !this.ExclusiveHighWatermarkTime.Equal(*that1.ExclusiveHighWatermarkTime) {
		return false
	}
	return true
}
func (this *ReplicationTaskInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReplicationTaskInfo)
	if !ok {
		that2, ok := that.(ReplicationTaskInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if this.TaskType != that1.TaskType {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.FirstEventId != that1.FirstEventId {
		return false
	}
	if this.NextEventId != that1.NextEventId {
		return false
	}
	if this.ScheduledEventId != that1.ScheduledEventId {
		return false
	}
	return true
}
func (this *NamespaceTaskAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NamespaceTaskAttributes)
	if !ok {
		that2, ok := that.(NamespaceTaskAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceOperation != that1.NamespaceOperation {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if !this.ReplicationConfig.Equal(that1.ReplicationConfig) {
		return false
	}
	if this.ConfigVersion != that1.ConfigVersion {
		return false
	}
	if this.FailoverVersion != that1.FailoverVersion {
		return false
	}
	if len(this.FailoverHistory) != len(that1.FailoverHistory) {
		return false
	}
	for i := range this.FailoverHistory {
		if !this.FailoverHistory[i].Equal(that1.FailoverHistory[i]) {
			return false
		}
	}
	return true
}
func (this *SyncShardStatusTaskAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncShardStatusTaskAttributes)
	if !ok {
		that2, ok := that.(SyncShardStatusTaskAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SourceCluster != that1.SourceCluster {
		return false
	}
	if this.ShardId != that1.ShardId {
		return false
	}
	if that1.StatusTime == nil {
		if this.StatusTime != nil {
			return false
		}
	} else if !this.StatusTime.Equal(*that1.StatusTime) {
		return false
	}
	return true
}
func (this *SyncActivityTaskAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncActivityTaskAttributes)
	if !ok {
		that2, ok := that.(SyncActivityTaskAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.ScheduledEventId != that1.ScheduledEventId {
		return false
	}
	if that1.ScheduledTime == nil {
		if this.ScheduledTime != nil {
			return false
		}
	} else if !this.ScheduledTime.Equal(*that1.ScheduledTime) {
		return false
	}
	if this.StartedEventId != that1.StartedEventId {
		return false
	}
	if that1.StartedTime == nil {
		if this.StartedTime != nil {
			return false
		}
	} else if !this.StartedTime.Equal(*that1.StartedTime) {
		return false
	}
	if that1.LastHeartbeatTime == nil {
		if this.LastHeartbeatTime != nil {
			return false
		}
	} else if !this.LastHeartbeatTime.Equal(*that1.LastHeartbeatTime) {
		return false
	}
	if !this.Details.Equal(that1.Details) {
		return false
	}
	if this.Attempt != that1.Attempt {
		return false
	}
	if !this.LastFailure.Equal(that1.LastFailure) {
		return false
	}
	if this.LastWorkerIdentity != that1.LastWorkerIdentity {
		return false
	}
	if !this.VersionHistory.Equal(that1.VersionHistory) {
		return false
	}
	if !this.BaseExecutionInfo.Equal(that1.BaseExecutionInfo) {
		return false
	}
	return true
}
func (this *HistoryTaskAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryTaskAttributes)
	if !ok {
		that2, ok := that.(HistoryTaskAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if len(this.VersionHistoryItems) != len(that1.VersionHistoryItems) {
		return false
	}
	for i := range this.VersionHistoryItems {
		if !this.VersionHistoryItems[i].Equal(that1.VersionHistoryItems[i]) {
			return false
		}
	}
	if !this.Events.Equal(that1.Events) {
		return false
	}
	if !this.NewRunEvents.Equal(that1.NewRunEvents) {
		return false
	}
	if !this.BaseExecutionInfo.Equal(that1.BaseExecutionInfo) {
		return false
	}
	return true
}
func (this *SyncWorkflowStateTaskAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SyncWorkflowStateTaskAttributes)
	if !ok {
		that2, ok := that.(SyncWorkflowStateTaskAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.WorkflowState.Equal(that1.WorkflowState) {
		return false
	}
	return true
}
func (this *TaskQueueUserDataAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskQueueUserDataAttributes)
	if !ok {
		that2, ok := that.(TaskQueueUserDataAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.TaskQueueName != that1.TaskQueueName {
		return false
	}
	if !this.UserData.Equal(that1.UserData) {
		return false
	}
	return true
}
func (this *RawTaskAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RawTaskAttributes)
	if !ok {
		that2, ok := that.(RawTaskAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NamespaceId != that1.NamespaceId {
		return false
	}
	if this.WorkflowId != that1.WorkflowId {
		return false
	}
	if this.RunId != that1.RunId {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *ReplicationTask) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&repication.ReplicationTask{")
	s = append(s, "TaskType: "+fmt.Sprintf("%#v", this.TaskType)+",\n")
	s = append(s, "SourceTaskId: "+fmt.Sprintf("%#v", this.SourceTaskId)+",\n")
	if this.Attributes != nil {
		s = append(s, "Attributes: "+fmt.Sprintf("%#v", this.Attributes)+",\n")
	}
	s = append(s, "VisibilityTime: "+fmt.Sprintf("%#v", this.VisibilityTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplicationTask_NamespaceTaskAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&repication.ReplicationTask_NamespaceTaskAttributes{` +
		`NamespaceTaskAttributes:` + fmt.Sprintf("%#v", this.NamespaceTaskAttributes) + `}`}, ", ")
	return s
}
func (this *ReplicationTask_SyncShardStatusTaskAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&repication.ReplicationTask_SyncShardStatusTaskAttributes{` +
		`SyncShardStatusTaskAttributes:` + fmt.Sprintf("%#v", this.SyncShardStatusTaskAttributes) + `}`}, ", ")
	return s
}
func (this *ReplicationTask_SyncActivityTaskAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&repication.ReplicationTask_SyncActivityTaskAttributes{` +
		`SyncActivityTaskAttributes:` + fmt.Sprintf("%#v", this.SyncActivityTaskAttributes) + `}`}, ", ")
	return s
}
func (this *ReplicationTask_HistoryTaskAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&repication.ReplicationTask_HistoryTaskAttributes{` +
		`HistoryTaskAttributes:` + fmt.Sprintf("%#v", this.HistoryTaskAttributes) + `}`}, ", ")
	return s
}
func (this *ReplicationTask_SyncWorkflowStateTaskAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&repication.ReplicationTask_SyncWorkflowStateTaskAttributes{` +
		`SyncWorkflowStateTaskAttributes:` + fmt.Sprintf("%#v", this.SyncWorkflowStateTaskAttributes) + `}`}, ", ")
	return s
}
func (this *ReplicationTask_TaskQueueUserDataAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&repication.ReplicationTask_TaskQueueUserDataAttributes{` +
		`TaskQueueUserDataAttributes:` + fmt.Sprintf("%#v", this.TaskQueueUserDataAttributes) + `}`}, ", ")
	return s
}
func (this *ReplicationTask_RawAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&repication.ReplicationTask_RawAttributes{` +
		`RawAttributes:` + fmt.Sprintf("%#v", this.RawAttributes) + `}`}, ", ")
	return s
}
func (this *ReplicationToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&repication.ReplicationToken{")
	s = append(s, "ShardId: "+fmt.Sprintf("%#v", this.ShardId)+",\n")
	s = append(s, "LastRetrievedMessageId: "+fmt.Sprintf("%#v", this.LastRetrievedMessageId)+",\n")
	s = append(s, "LastProcessedMessageId: "+fmt.Sprintf("%#v", this.LastProcessedMessageId)+",\n")
	s = append(s, "LastProcessedVisibilityTime: "+fmt.Sprintf("%#v", this.LastProcessedVisibilityTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SyncShardStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&repication.SyncShardStatus{")
	s = append(s, "StatusTime: "+fmt.Sprintf("%#v", this.StatusTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SyncReplicationState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&repication.SyncReplicationState{")
	s = append(s, "InclusiveLowWatermark: "+fmt.Sprintf("%#v", this.InclusiveLowWatermark)+",\n")
	s = append(s, "InclusiveLowWatermarkTime: "+fmt.Sprintf("%#v", this.InclusiveLowWatermarkTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplicationMessages) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&repication.ReplicationMessages{")
	if this.ReplicationTasks != nil {
		s = append(s, "ReplicationTasks: "+fmt.Sprintf("%#v", this.ReplicationTasks)+",\n")
	}
	s = append(s, "LastRetrievedMessageId: "+fmt.Sprintf("%#v", this.LastRetrievedMessageId)+",\n")
	s = append(s, "HasMore: "+fmt.Sprintf("%#v", this.HasMore)+",\n")
	if this.SyncShardStatus != nil {
		s = append(s, "SyncShardStatus: "+fmt.Sprintf("%#v", this.SyncShardStatus)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WorkflowReplicationMessages) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&repication.WorkflowReplicationMessages{")
	if this.ReplicationTasks != nil {
		s = append(s, "ReplicationTasks: "+fmt.Sprintf("%#v", this.ReplicationTasks)+",\n")
	}
	s = append(s, "ExclusiveHighWatermark: "+fmt.Sprintf("%#v", this.ExclusiveHighWatermark)+",\n")
	s = append(s, "ExclusiveHighWatermarkTime: "+fmt.Sprintf("%#v", this.ExclusiveHighWatermarkTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReplicationTaskInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&repication.ReplicationTaskInfo{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "TaskType: "+fmt.Sprintf("%#v", this.TaskType)+",\n")
	s = append(s, "TaskId: "+fmt.Sprintf("%#v", this.TaskId)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "FirstEventId: "+fmt.Sprintf("%#v", this.FirstEventId)+",\n")
	s = append(s, "NextEventId: "+fmt.Sprintf("%#v", this.NextEventId)+",\n")
	s = append(s, "ScheduledEventId: "+fmt.Sprintf("%#v", this.ScheduledEventId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NamespaceTaskAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&repication.NamespaceTaskAttributes{")
	s = append(s, "NamespaceOperation: "+fmt.Sprintf("%#v", this.NamespaceOperation)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Info != nil {
		s = append(s, "Info: "+fmt.Sprintf("%#v", this.Info)+",\n")
	}
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	if this.ReplicationConfig != nil {
		s = append(s, "ReplicationConfig: "+fmt.Sprintf("%#v", this.ReplicationConfig)+",\n")
	}
	s = append(s, "ConfigVersion: "+fmt.Sprintf("%#v", this.ConfigVersion)+",\n")
	s = append(s, "FailoverVersion: "+fmt.Sprintf("%#v", this.FailoverVersion)+",\n")
	if this.FailoverHistory != nil {
		s = append(s, "FailoverHistory: "+fmt.Sprintf("%#v", this.FailoverHistory)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SyncShardStatusTaskAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&repication.SyncShardStatusTaskAttributes{")
	s = append(s, "SourceCluster: "+fmt.Sprintf("%#v", this.SourceCluster)+",\n")
	s = append(s, "ShardId: "+fmt.Sprintf("%#v", this.ShardId)+",\n")
	s = append(s, "StatusTime: "+fmt.Sprintf("%#v", this.StatusTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SyncActivityTaskAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&repication.SyncActivityTaskAttributes{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "ScheduledEventId: "+fmt.Sprintf("%#v", this.ScheduledEventId)+",\n")
	s = append(s, "ScheduledTime: "+fmt.Sprintf("%#v", this.ScheduledTime)+",\n")
	s = append(s, "StartedEventId: "+fmt.Sprintf("%#v", this.StartedEventId)+",\n")
	s = append(s, "StartedTime: "+fmt.Sprintf("%#v", this.StartedTime)+",\n")
	s = append(s, "LastHeartbeatTime: "+fmt.Sprintf("%#v", this.LastHeartbeatTime)+",\n")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "Attempt: "+fmt.Sprintf("%#v", this.Attempt)+",\n")
	if this.LastFailure != nil {
		s = append(s, "LastFailure: "+fmt.Sprintf("%#v", this.LastFailure)+",\n")
	}
	s = append(s, "LastWorkerIdentity: "+fmt.Sprintf("%#v", this.LastWorkerIdentity)+",\n")
	if this.VersionHistory != nil {
		s = append(s, "VersionHistory: "+fmt.Sprintf("%#v", this.VersionHistory)+",\n")
	}
	if this.BaseExecutionInfo != nil {
		s = append(s, "BaseExecutionInfo: "+fmt.Sprintf("%#v", this.BaseExecutionInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HistoryTaskAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&repication.HistoryTaskAttributes{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	if this.VersionHistoryItems != nil {
		s = append(s, "VersionHistoryItems: "+fmt.Sprintf("%#v", this.VersionHistoryItems)+",\n")
	}
	if this.Events != nil {
		s = append(s, "Events: "+fmt.Sprintf("%#v", this.Events)+",\n")
	}
	if this.NewRunEvents != nil {
		s = append(s, "NewRunEvents: "+fmt.Sprintf("%#v", this.NewRunEvents)+",\n")
	}
	if this.BaseExecutionInfo != nil {
		s = append(s, "BaseExecutionInfo: "+fmt.Sprintf("%#v", this.BaseExecutionInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SyncWorkflowStateTaskAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&repication.SyncWorkflowStateTaskAttributes{")
	if this.WorkflowState != nil {
		s = append(s, "WorkflowState: "+fmt.Sprintf("%#v", this.WorkflowState)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskQueueUserDataAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&repication.TaskQueueUserDataAttributes{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "TaskQueueName: "+fmt.Sprintf("%#v", this.TaskQueueName)+",\n")
	if this.UserData != nil {
		s = append(s, "UserData: "+fmt.Sprintf("%#v", this.UserData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RawTaskAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&repication.RawTaskAttributes{")
	s = append(s, "NamespaceId: "+fmt.Sprintf("%#v", this.NamespaceId)+",\n")
	s = append(s, "WorkflowId: "+fmt.Sprintf("%#v", this.WorkflowId)+",\n")
	s = append(s, "RunId: "+fmt.Sprintf("%#v", this.RunId)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ReplicationTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attributes != nil {
		{
			size := m.Attributes.Size()
			i -= size
			if _, err := m.Attributes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.VisibilityTime != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.VisibilityTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.VisibilityTime):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintMessage(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x4a
	}
	if m.SourceTaskId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SourceTaskId))
		i--
		dAtA[i] = 0x10
	}
	if m.TaskType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TaskType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationTask_NamespaceTaskAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationTask_NamespaceTaskAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NamespaceTaskAttributes != nil {
		{
			size, err := m.NamespaceTaskAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ReplicationTask_SyncShardStatusTaskAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationTask_SyncShardStatusTaskAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SyncShardStatusTaskAttributes != nil {
		{
			size, err := m.SyncShardStatusTaskAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ReplicationTask_SyncActivityTaskAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationTask_SyncActivityTaskAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SyncActivityTaskAttributes != nil {
		{
			size, err := m.SyncActivityTaskAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ReplicationTask_HistoryTaskAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationTask_HistoryTaskAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HistoryTaskAttributes != nil {
		{
			size, err := m.HistoryTaskAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ReplicationTask_SyncWorkflowStateTaskAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationTask_SyncWorkflowStateTaskAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SyncWorkflowStateTaskAttributes != nil {
		{
			size, err := m.SyncWorkflowStateTaskAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ReplicationTask_TaskQueueUserDataAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationTask_TaskQueueUserDataAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TaskQueueUserDataAttributes != nil {
		{
			size, err := m.TaskQueueUserDataAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ReplicationTask_RawAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationTask_RawAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RawAttributes != nil {
		{
			size, err := m.RawAttributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *ReplicationToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastProcessedVisibilityTime != nil {
		n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastProcessedVisibilityTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastProcessedVisibilityTime):])
		if err9 != nil {
			return 0, err9
		}
		i -= n9
		i = encodeVarintMessage(dAtA, i, uint64(n9))
		i--
		dAtA[i] = 0x22
	}
	if m.LastProcessedMessageId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LastProcessedMessageId))
		i--
		dAtA[i] = 0x18
	}
	if m.LastRetrievedMessageId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LastRetrievedMessageId))
		i--
		dAtA[i] = 0x10
	}
	if m.ShardId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ShardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncShardStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncShardStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncShardStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StatusTime != nil {
		n10, err10 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StatusTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StatusTime):])
		if err10 != nil {
			return 0, err10
		}
		i -= n10
		i = encodeVarintMessage(dAtA, i, uint64(n10))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncReplicationState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncReplicationState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncReplicationState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InclusiveLowWatermarkTime != nil {
		n11, err11 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.InclusiveLowWatermarkTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.InclusiveLowWatermarkTime):])
		if err11 != nil {
			return 0, err11
		}
		i -= n11
		i = encodeVarintMessage(dAtA, i, uint64(n11))
		i--
		dAtA[i] = 0x12
	}
	if m.InclusiveLowWatermark != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.InclusiveLowWatermark))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SyncShardStatus != nil {
		{
			size, err := m.SyncShardStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.HasMore {
		i--
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.LastRetrievedMessageId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.LastRetrievedMessageId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ReplicationTasks) > 0 {
		for iNdEx := len(m.ReplicationTasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReplicationTasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WorkflowReplicationMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorkflowReplicationMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WorkflowReplicationMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExclusiveHighWatermarkTime != nil {
		n13, err13 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ExclusiveHighWatermarkTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExclusiveHighWatermarkTime):])
		if err13 != nil {
			return 0, err13
		}
		i -= n13
		i = encodeVarintMessage(dAtA, i, uint64(n13))
		i--
		dAtA[i] = 0x1a
	}
	if m.ExclusiveHighWatermark != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ExclusiveHighWatermark))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ReplicationTasks) > 0 {
		for iNdEx := len(m.ReplicationTasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReplicationTasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplicationTaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicationTaskInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicationTaskInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x48
	}
	if m.NextEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.NextEventId))
		i--
		dAtA[i] = 0x40
	}
	if m.FirstEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.FirstEventId))
		i--
		dAtA[i] = 0x38
	}
	if m.Version != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x30
	}
	if m.TaskId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x28
	}
	if m.TaskType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.TaskType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceTaskAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceTaskAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceTaskAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FailoverHistory) > 0 {
		for iNdEx := len(m.FailoverHistory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FailoverHistory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.FailoverVersion != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.FailoverVersion))
		i--
		dAtA[i] = 0x38
	}
	if m.ConfigVersion != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ConfigVersion))
		i--
		dAtA[i] = 0x30
	}
	if m.ReplicationConfig != nil {
		{
			size, err := m.ReplicationConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if m.NamespaceOperation != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.NamespaceOperation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncShardStatusTaskAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncShardStatusTaskAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncShardStatusTaskAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StatusTime != nil {
		n17, err17 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StatusTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StatusTime):])
		if err17 != nil {
			return 0, err17
		}
		i -= n17
		i = encodeVarintMessage(dAtA, i, uint64(n17))
		i--
		dAtA[i] = 0x1a
	}
	if m.ShardId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ShardId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SourceCluster) > 0 {
		i -= len(m.SourceCluster)
		copy(dAtA[i:], m.SourceCluster)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SourceCluster)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SyncActivityTaskAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncActivityTaskAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncActivityTaskAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseExecutionInfo != nil {
		{
			size, err := m.BaseExecutionInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.VersionHistory != nil {
		{
			size, err := m.VersionHistory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if len(m.LastWorkerIdentity) > 0 {
		i -= len(m.LastWorkerIdentity)
		copy(dAtA[i:], m.LastWorkerIdentity)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.LastWorkerIdentity)))
		i--
		dAtA[i] = 0x6a
	}
	if m.LastFailure != nil {
		{
			size, err := m.LastFailure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Attempt != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Attempt))
		i--
		dAtA[i] = 0x58
	}
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.LastHeartbeatTime != nil {
		n22, err22 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastHeartbeatTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastHeartbeatTime):])
		if err22 != nil {
			return 0, err22
		}
		i -= n22
		i = encodeVarintMessage(dAtA, i, uint64(n22))
		i--
		dAtA[i] = 0x4a
	}
	if m.StartedTime != nil {
		n23, err23 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartedTime):])
		if err23 != nil {
			return 0, err23
		}
		i -= n23
		i = encodeVarintMessage(dAtA, i, uint64(n23))
		i--
		dAtA[i] = 0x42
	}
	if m.StartedEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartedEventId))
		i--
		dAtA[i] = 0x38
	}
	if m.ScheduledTime != nil {
		n24, err24 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ScheduledTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ScheduledTime):])
		if err24 != nil {
			return 0, err24
		}
		i -= n24
		i = encodeVarintMessage(dAtA, i, uint64(n24))
		i--
		dAtA[i] = 0x32
	}
	if m.ScheduledEventId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.ScheduledEventId))
		i--
		dAtA[i] = 0x28
	}
	if m.Version != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HistoryTaskAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryTaskAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryTaskAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseExecutionInfo != nil {
		{
			size, err := m.BaseExecutionInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.NewRunEvents != nil {
		{
			size, err := m.NewRunEvents.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Events != nil {
		{
			size, err := m.Events.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.VersionHistoryItems) > 0 {
		for iNdEx := len(m.VersionHistoryItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VersionHistoryItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *SyncWorkflowStateTaskAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncWorkflowStateTaskAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncWorkflowStateTaskAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WorkflowState != nil {
		{
			size, err := m.WorkflowState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskQueueUserDataAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskQueueUserDataAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskQueueUserDataAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserData != nil {
		{
			size, err := m.UserData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TaskQueueName) > 0 {
		i -= len(m.TaskQueueName)
		copy(dAtA[i:], m.TaskQueueName)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.TaskQueueName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RawTaskAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RawTaskAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RawTaskAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RunId) > 0 {
		i -= len(m.RunId)
		copy(dAtA[i:], m.RunId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.RunId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WorkflowId) > 0 {
		i -= len(m.WorkflowId)
		copy(dAtA[i:], m.WorkflowId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.WorkflowId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NamespaceId) > 0 {
		i -= len(m.NamespaceId)
		copy(dAtA[i:], m.NamespaceId)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.NamespaceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReplicationTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskType != 0 {
		n += 1 + sovMessage(uint64(m.TaskType))
	}
	if m.SourceTaskId != 0 {
		n += 1 + sovMessage(uint64(m.SourceTaskId))
	}
	if m.Attributes != nil {
		n += m.Attributes.Size()
	}
	if m.VisibilityTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.VisibilityTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ReplicationTask_NamespaceTaskAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NamespaceTaskAttributes != nil {
		l = m.NamespaceTaskAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *ReplicationTask_SyncShardStatusTaskAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncShardStatusTaskAttributes != nil {
		l = m.SyncShardStatusTaskAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *ReplicationTask_SyncActivityTaskAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncActivityTaskAttributes != nil {
		l = m.SyncActivityTaskAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *ReplicationTask_HistoryTaskAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HistoryTaskAttributes != nil {
		l = m.HistoryTaskAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *ReplicationTask_SyncWorkflowStateTaskAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncWorkflowStateTaskAttributes != nil {
		l = m.SyncWorkflowStateTaskAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *ReplicationTask_TaskQueueUserDataAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskQueueUserDataAttributes != nil {
		l = m.TaskQueueUserDataAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *ReplicationTask_RawAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RawAttributes != nil {
		l = m.RawAttributes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}
func (m *ReplicationToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardId != 0 {
		n += 1 + sovMessage(uint64(m.ShardId))
	}
	if m.LastRetrievedMessageId != 0 {
		n += 1 + sovMessage(uint64(m.LastRetrievedMessageId))
	}
	if m.LastProcessedMessageId != 0 {
		n += 1 + sovMessage(uint64(m.LastProcessedMessageId))
	}
	if m.LastProcessedVisibilityTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastProcessedVisibilityTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *SyncShardStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatusTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StatusTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *SyncReplicationState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InclusiveLowWatermark != 0 {
		n += 1 + sovMessage(uint64(m.InclusiveLowWatermark))
	}
	if m.InclusiveLowWatermarkTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.InclusiveLowWatermarkTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ReplicationMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReplicationTasks) > 0 {
		for _, e := range m.ReplicationTasks {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.LastRetrievedMessageId != 0 {
		n += 1 + sovMessage(uint64(m.LastRetrievedMessageId))
	}
	if m.HasMore {
		n += 2
	}
	if m.SyncShardStatus != nil {
		l = m.SyncShardStatus.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *WorkflowReplicationMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReplicationTasks) > 0 {
		for _, e := range m.ReplicationTasks {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.ExclusiveHighWatermark != 0 {
		n += 1 + sovMessage(uint64(m.ExclusiveHighWatermark))
	}
	if m.ExclusiveHighWatermarkTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExclusiveHighWatermarkTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ReplicationTaskInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.TaskType != 0 {
		n += 1 + sovMessage(uint64(m.TaskType))
	}
	if m.TaskId != 0 {
		n += 1 + sovMessage(uint64(m.TaskId))
	}
	if m.Version != 0 {
		n += 1 + sovMessage(uint64(m.Version))
	}
	if m.FirstEventId != 0 {
		n += 1 + sovMessage(uint64(m.FirstEventId))
	}
	if m.NextEventId != 0 {
		n += 1 + sovMessage(uint64(m.NextEventId))
	}
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	return n
}

func (m *NamespaceTaskAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NamespaceOperation != 0 {
		n += 1 + sovMessage(uint64(m.NamespaceOperation))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ReplicationConfig != nil {
		l = m.ReplicationConfig.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ConfigVersion != 0 {
		n += 1 + sovMessage(uint64(m.ConfigVersion))
	}
	if m.FailoverVersion != 0 {
		n += 1 + sovMessage(uint64(m.FailoverVersion))
	}
	if len(m.FailoverHistory) > 0 {
		for _, e := range m.FailoverHistory {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *SyncShardStatusTaskAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceCluster)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.ShardId != 0 {
		n += 1 + sovMessage(uint64(m.ShardId))
	}
	if m.StatusTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StatusTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *SyncActivityTaskAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovMessage(uint64(m.Version))
	}
	if m.ScheduledEventId != 0 {
		n += 1 + sovMessage(uint64(m.ScheduledEventId))
	}
	if m.ScheduledTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ScheduledTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StartedEventId != 0 {
		n += 1 + sovMessage(uint64(m.StartedEventId))
	}
	if m.StartedTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartedTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.LastHeartbeatTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastHeartbeatTime)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Attempt != 0 {
		n += 1 + sovMessage(uint64(m.Attempt))
	}
	if m.LastFailure != nil {
		l = m.LastFailure.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.LastWorkerIdentity)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.VersionHistory != nil {
		l = m.VersionHistory.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.BaseExecutionInfo != nil {
		l = m.BaseExecutionInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *HistoryTaskAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if len(m.VersionHistoryItems) > 0 {
		for _, e := range m.VersionHistoryItems {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.Events != nil {
		l = m.Events.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.NewRunEvents != nil {
		l = m.NewRunEvents.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.BaseExecutionInfo != nil {
		l = m.BaseExecutionInfo.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *SyncWorkflowStateTaskAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WorkflowState != nil {
		l = m.WorkflowState.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *TaskQueueUserDataAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.TaskQueueName)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.UserData != nil {
		l = m.UserData.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *RawTaskAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NamespaceId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.WorkflowId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.RunId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ReplicationTask) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationTask{`,
		`TaskType:` + fmt.Sprintf("%v", this.TaskType) + `,`,
		`SourceTaskId:` + fmt.Sprintf("%v", this.SourceTaskId) + `,`,
		`Attributes:` + fmt.Sprintf("%v", this.Attributes) + `,`,
		`VisibilityTime:` + strings.Replace(fmt.Sprintf("%v", this.VisibilityTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationTask_NamespaceTaskAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationTask_NamespaceTaskAttributes{`,
		`NamespaceTaskAttributes:` + strings.Replace(fmt.Sprintf("%v", this.NamespaceTaskAttributes), "NamespaceTaskAttributes", "NamespaceTaskAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationTask_SyncShardStatusTaskAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationTask_SyncShardStatusTaskAttributes{`,
		`SyncShardStatusTaskAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SyncShardStatusTaskAttributes), "SyncShardStatusTaskAttributes", "SyncShardStatusTaskAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationTask_SyncActivityTaskAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationTask_SyncActivityTaskAttributes{`,
		`SyncActivityTaskAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SyncActivityTaskAttributes), "SyncActivityTaskAttributes", "SyncActivityTaskAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationTask_HistoryTaskAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationTask_HistoryTaskAttributes{`,
		`HistoryTaskAttributes:` + strings.Replace(fmt.Sprintf("%v", this.HistoryTaskAttributes), "HistoryTaskAttributes", "HistoryTaskAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationTask_SyncWorkflowStateTaskAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationTask_SyncWorkflowStateTaskAttributes{`,
		`SyncWorkflowStateTaskAttributes:` + strings.Replace(fmt.Sprintf("%v", this.SyncWorkflowStateTaskAttributes), "SyncWorkflowStateTaskAttributes", "SyncWorkflowStateTaskAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationTask_TaskQueueUserDataAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationTask_TaskQueueUserDataAttributes{`,
		`TaskQueueUserDataAttributes:` + strings.Replace(fmt.Sprintf("%v", this.TaskQueueUserDataAttributes), "TaskQueueUserDataAttributes", "TaskQueueUserDataAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationTask_RawAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationTask_RawAttributes{`,
		`RawAttributes:` + strings.Replace(fmt.Sprintf("%v", this.RawAttributes), "RawTaskAttributes", "RawTaskAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationToken{`,
		`ShardId:` + fmt.Sprintf("%v", this.ShardId) + `,`,
		`LastRetrievedMessageId:` + fmt.Sprintf("%v", this.LastRetrievedMessageId) + `,`,
		`LastProcessedMessageId:` + fmt.Sprintf("%v", this.LastProcessedMessageId) + `,`,
		`LastProcessedVisibilityTime:` + strings.Replace(fmt.Sprintf("%v", this.LastProcessedVisibilityTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SyncShardStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SyncShardStatus{`,
		`StatusTime:` + strings.Replace(fmt.Sprintf("%v", this.StatusTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SyncReplicationState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SyncReplicationState{`,
		`InclusiveLowWatermark:` + fmt.Sprintf("%v", this.InclusiveLowWatermark) + `,`,
		`InclusiveLowWatermarkTime:` + strings.Replace(fmt.Sprintf("%v", this.InclusiveLowWatermarkTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationMessages) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForReplicationTasks := "[]*ReplicationTask{"
	for _, f := range this.ReplicationTasks {
		repeatedStringForReplicationTasks += strings.Replace(f.String(), "ReplicationTask", "ReplicationTask", 1) + ","
	}
	repeatedStringForReplicationTasks += "}"
	s := strings.Join([]string{`&ReplicationMessages{`,
		`ReplicationTasks:` + repeatedStringForReplicationTasks + `,`,
		`LastRetrievedMessageId:` + fmt.Sprintf("%v", this.LastRetrievedMessageId) + `,`,
		`HasMore:` + fmt.Sprintf("%v", this.HasMore) + `,`,
		`SyncShardStatus:` + strings.Replace(this.SyncShardStatus.String(), "SyncShardStatus", "SyncShardStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WorkflowReplicationMessages) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForReplicationTasks := "[]*ReplicationTask{"
	for _, f := range this.ReplicationTasks {
		repeatedStringForReplicationTasks += strings.Replace(f.String(), "ReplicationTask", "ReplicationTask", 1) + ","
	}
	repeatedStringForReplicationTasks += "}"
	s := strings.Join([]string{`&WorkflowReplicationMessages{`,
		`ReplicationTasks:` + repeatedStringForReplicationTasks + `,`,
		`ExclusiveHighWatermark:` + fmt.Sprintf("%v", this.ExclusiveHighWatermark) + `,`,
		`ExclusiveHighWatermarkTime:` + strings.Replace(fmt.Sprintf("%v", this.ExclusiveHighWatermarkTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReplicationTaskInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReplicationTaskInfo{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`TaskType:` + fmt.Sprintf("%v", this.TaskType) + `,`,
		`TaskId:` + fmt.Sprintf("%v", this.TaskId) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`FirstEventId:` + fmt.Sprintf("%v", this.FirstEventId) + `,`,
		`NextEventId:` + fmt.Sprintf("%v", this.NextEventId) + `,`,
		`ScheduledEventId:` + fmt.Sprintf("%v", this.ScheduledEventId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamespaceTaskAttributes) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFailoverHistory := "[]*FailoverStatus{"
	for _, f := range this.FailoverHistory {
		repeatedStringForFailoverHistory += strings.Replace(fmt.Sprintf("%v", f), "FailoverStatus", "v12.FailoverStatus", 1) + ","
	}
	repeatedStringForFailoverHistory += "}"
	s := strings.Join([]string{`&NamespaceTaskAttributes{`,
		`NamespaceOperation:` + fmt.Sprintf("%v", this.NamespaceOperation) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Info:` + strings.Replace(fmt.Sprintf("%v", this.Info), "NamespaceInfo", "v11.NamespaceInfo", 1) + `,`,
		`Config:` + strings.Replace(fmt.Sprintf("%v", this.Config), "NamespaceConfig", "v11.NamespaceConfig", 1) + `,`,
		`ReplicationConfig:` + strings.Replace(fmt.Sprintf("%v", this.ReplicationConfig), "NamespaceReplicationConfig", "v12.NamespaceReplicationConfig", 1) + `,`,
		`ConfigVersion:` + fmt.Sprintf("%v", this.ConfigVersion) + `,`,
		`FailoverVersion:` + fmt.Sprintf("%v", this.FailoverVersion) + `,`,
		`FailoverHistory:` + repeatedStringForFailoverHistory + `,`,
		`}`,
	}, "")
	return s
}
func (this *SyncShardStatusTaskAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SyncShardStatusTaskAttributes{`,
		`SourceCluster:` + fmt.Sprintf("%v", this.SourceCluster) + `,`,
		`ShardId:` + fmt.Sprintf("%v", this.ShardId) + `,`,
		`StatusTime:` + strings.Replace(fmt.Sprintf("%v", this.StatusTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SyncActivityTaskAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SyncActivityTaskAttributes{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`ScheduledEventId:` + fmt.Sprintf("%v", this.ScheduledEventId) + `,`,
		`ScheduledTime:` + strings.Replace(fmt.Sprintf("%v", this.ScheduledTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`StartedEventId:` + fmt.Sprintf("%v", this.StartedEventId) + `,`,
		`StartedTime:` + strings.Replace(fmt.Sprintf("%v", this.StartedTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`LastHeartbeatTime:` + strings.Replace(fmt.Sprintf("%v", this.LastHeartbeatTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`Details:` + strings.Replace(fmt.Sprintf("%v", this.Details), "Payloads", "v13.Payloads", 1) + `,`,
		`Attempt:` + fmt.Sprintf("%v", this.Attempt) + `,`,
		`LastFailure:` + strings.Replace(fmt.Sprintf("%v", this.LastFailure), "Failure", "v14.Failure", 1) + `,`,
		`LastWorkerIdentity:` + fmt.Sprintf("%v", this.LastWorkerIdentity) + `,`,
		`VersionHistory:` + strings.Replace(fmt.Sprintf("%v", this.VersionHistory), "VersionHistory", "v15.VersionHistory", 1) + `,`,
		`BaseExecutionInfo:` + strings.Replace(fmt.Sprintf("%v", this.BaseExecutionInfo), "BaseExecutionInfo", "v16.BaseExecutionInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryTaskAttributes) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVersionHistoryItems := "[]*VersionHistoryItem{"
	for _, f := range this.VersionHistoryItems {
		repeatedStringForVersionHistoryItems += strings.Replace(fmt.Sprintf("%v", f), "VersionHistoryItem", "v15.VersionHistoryItem", 1) + ","
	}
	repeatedStringForVersionHistoryItems += "}"
	s := strings.Join([]string{`&HistoryTaskAttributes{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`VersionHistoryItems:` + repeatedStringForVersionHistoryItems + `,`,
		`Events:` + strings.Replace(fmt.Sprintf("%v", this.Events), "DataBlob", "v13.DataBlob", 1) + `,`,
		`NewRunEvents:` + strings.Replace(fmt.Sprintf("%v", this.NewRunEvents), "DataBlob", "v13.DataBlob", 1) + `,`,
		`BaseExecutionInfo:` + strings.Replace(fmt.Sprintf("%v", this.BaseExecutionInfo), "BaseExecutionInfo", "v16.BaseExecutionInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SyncWorkflowStateTaskAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SyncWorkflowStateTaskAttributes{`,
		`WorkflowState:` + strings.Replace(fmt.Sprintf("%v", this.WorkflowState), "WorkflowMutableState", "v17.WorkflowMutableState", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskQueueUserDataAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskQueueUserDataAttributes{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`TaskQueueName:` + fmt.Sprintf("%v", this.TaskQueueName) + `,`,
		`UserData:` + strings.Replace(fmt.Sprintf("%v", this.UserData), "TaskQueueUserData", "v17.TaskQueueUserData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RawTaskAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RawTaskAttributes{`,
		`NamespaceId:` + fmt.Sprintf("%v", this.NamespaceId) + `,`,
		`WorkflowId:` + fmt.Sprintf("%v", this.WorkflowId) + `,`,
		`RunId:` + fmt.Sprintf("%v", this.RunId) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ReplicationTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskType", wireType)
			}
			m.TaskType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskType |= v1.ReplicationTaskType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTaskId", wireType)
			}
			m.SourceTaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceTaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceTaskAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NamespaceTaskAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &ReplicationTask_NamespaceTaskAttributes{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncShardStatusTaskAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncShardStatusTaskAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &ReplicationTask_SyncShardStatusTaskAttributes{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncActivityTaskAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncActivityTaskAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &ReplicationTask_SyncActivityTaskAttributes{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryTaskAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HistoryTaskAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &ReplicationTask_HistoryTaskAttributes{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibilityTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VisibilityTime == nil {
				m.VisibilityTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.VisibilityTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncWorkflowStateTaskAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SyncWorkflowStateTaskAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &ReplicationTask_SyncWorkflowStateTaskAttributes{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueueUserDataAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TaskQueueUserDataAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &ReplicationTask_TaskQueueUserDataAttributes{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RawTaskAttributes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attributes = &ReplicationTask_RawAttributes{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardId", wireType)
			}
			m.ShardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRetrievedMessageId", wireType)
			}
			m.LastRetrievedMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRetrievedMessageId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastProcessedMessageId", wireType)
			}
			m.LastProcessedMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastProcessedMessageId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastProcessedVisibilityTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastProcessedVisibilityTime == nil {
				m.LastProcessedVisibilityTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastProcessedVisibilityTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncShardStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncShardStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncShardStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StatusTime == nil {
				m.StatusTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StatusTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncReplicationState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncReplicationState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncReplicationState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InclusiveLowWatermark", wireType)
			}
			m.InclusiveLowWatermark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InclusiveLowWatermark |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InclusiveLowWatermarkTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InclusiveLowWatermarkTime == nil {
				m.InclusiveLowWatermarkTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.InclusiveLowWatermarkTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationTasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplicationTasks = append(m.ReplicationTasks, &ReplicationTask{})
			if err := m.ReplicationTasks[len(m.ReplicationTasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRetrievedMessageId", wireType)
			}
			m.LastRetrievedMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRetrievedMessageId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncShardStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SyncShardStatus == nil {
				m.SyncShardStatus = &SyncShardStatus{}
			}
			if err := m.SyncShardStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorkflowReplicationMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorkflowReplicationMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorkflowReplicationMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationTasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplicationTasks = append(m.ReplicationTasks, &ReplicationTask{})
			if err := m.ReplicationTasks[len(m.ReplicationTasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExclusiveHighWatermark", wireType)
			}
			m.ExclusiveHighWatermark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExclusiveHighWatermark |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExclusiveHighWatermarkTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExclusiveHighWatermarkTime == nil {
				m.ExclusiveHighWatermarkTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ExclusiveHighWatermarkTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicationTaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicationTaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicationTaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskType", wireType)
			}
			m.TaskType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskType |= v1.TaskType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstEventId", wireType)
			}
			m.FirstEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEventId", wireType)
			}
			m.NextEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceTaskAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceTaskAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceTaskAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceOperation", wireType)
			}
			m.NamespaceOperation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NamespaceOperation |= v1.NamespaceOperation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &v11.NamespaceInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &v11.NamespaceConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplicationConfig == nil {
				m.ReplicationConfig = &v12.NamespaceReplicationConfig{}
			}
			if err := m.ReplicationConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigVersion", wireType)
			}
			m.ConfigVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverVersion", wireType)
			}
			m.FailoverVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailoverVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailoverHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailoverHistory = append(m.FailoverHistory, &v12.FailoverStatus{})
			if err := m.FailoverHistory[len(m.FailoverHistory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncShardStatusTaskAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncShardStatusTaskAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncShardStatusTaskAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardId", wireType)
			}
			m.ShardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StatusTime == nil {
				m.StatusTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StatusTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncActivityTaskAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncActivityTaskAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncActivityTaskAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledEventId", wireType)
			}
			m.ScheduledEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduledEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledTime == nil {
				m.ScheduledTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ScheduledTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedEventId", wireType)
			}
			m.StartedEventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartedEventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartedTime == nil {
				m.StartedTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastHeartbeatTime == nil {
				m.LastHeartbeatTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastHeartbeatTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &v13.Payloads{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attempt", wireType)
			}
			m.Attempt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attempt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFailure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastFailure == nil {
				m.LastFailure = &v14.Failure{}
			}
			if err := m.LastFailure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWorkerIdentity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastWorkerIdentity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VersionHistory == nil {
				m.VersionHistory = &v15.VersionHistory{}
			}
			if err := m.VersionHistory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseExecutionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseExecutionInfo == nil {
				m.BaseExecutionInfo = &v16.BaseExecutionInfo{}
			}
			if err := m.BaseExecutionInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryTaskAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryTaskAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryTaskAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionHistoryItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionHistoryItems = append(m.VersionHistoryItems, &v15.VersionHistoryItem{})
			if err := m.VersionHistoryItems[len(m.VersionHistoryItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Events == nil {
				m.Events = &v13.DataBlob{}
			}
			if err := m.Events.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRunEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewRunEvents == nil {
				m.NewRunEvents = &v13.DataBlob{}
			}
			if err := m.NewRunEvents.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseExecutionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseExecutionInfo == nil {
				m.BaseExecutionInfo = &v16.BaseExecutionInfo{}
			}
			if err := m.BaseExecutionInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncWorkflowStateTaskAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncWorkflowStateTaskAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncWorkflowStateTaskAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkflowState == nil {
				m.WorkflowState = &v17.WorkflowMutableState{}
			}
			if err := m.WorkflowState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskQueueUserDataAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskQueueUserDataAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskQueueUserDataAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskQueueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskQueueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserData == nil {
				m.UserData = &v17.TaskQueueUserData{}
			}
			if err := m.UserData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RawTaskAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RawTaskAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RawTaskAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkflowId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WorkflowId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
