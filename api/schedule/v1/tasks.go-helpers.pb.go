// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package schedule

import (
	"google.golang.org/protobuf/proto"
)

// Marshal an object of type GeneratorTask to the protobuf v3 wire format
func (val *GeneratorTask) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type GeneratorTask from the protobuf v3 wire format
func (val *GeneratorTask) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *GeneratorTask) Size() int {
	return proto.Size(val)
}

// Equal returns whether two GeneratorTask values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *GeneratorTask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *GeneratorTask
	switch t := that.(type) {
	case *GeneratorTask:
		that1 = t
	case GeneratorTask:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type InvokerProcessBufferTask to the protobuf v3 wire format
func (val *InvokerProcessBufferTask) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type InvokerProcessBufferTask from the protobuf v3 wire format
func (val *InvokerProcessBufferTask) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *InvokerProcessBufferTask) Size() int {
	return proto.Size(val)
}

// Equal returns whether two InvokerProcessBufferTask values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *InvokerProcessBufferTask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *InvokerProcessBufferTask
	switch t := that.(type) {
	case *InvokerProcessBufferTask:
		that1 = t
	case InvokerProcessBufferTask:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type InvokerExecuteTask to the protobuf v3 wire format
func (val *InvokerExecuteTask) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type InvokerExecuteTask from the protobuf v3 wire format
func (val *InvokerExecuteTask) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *InvokerExecuteTask) Size() int {
	return proto.Size(val)
}

// Equal returns whether two InvokerExecuteTask values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *InvokerExecuteTask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *InvokerExecuteTask
	switch t := that.(type) {
	case *InvokerExecuteTask:
		that1 = t
	case InvokerExecuteTask:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type BackfillerTask to the protobuf v3 wire format
func (val *BackfillerTask) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type BackfillerTask from the protobuf v3 wire format
func (val *BackfillerTask) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *BackfillerTask) Size() int {
	return proto.Size(val)
}

// Equal returns whether two BackfillerTask values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *BackfillerTask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *BackfillerTask
	switch t := that.(type) {
	case *BackfillerTask:
		that1 = t
	case BackfillerTask:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}
