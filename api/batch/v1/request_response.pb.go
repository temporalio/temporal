// Code generated by protoc-gen-go. DO NOT EDIT.
// plugins:
// 	protoc-gen-go
// 	protoc
// source: temporal/server/api/batch/v1/request_response.proto

package batch

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	v11 "go.temporal.io/api/batch/v1"
	v1 "go.temporal.io/api/common/v1"
	v13 "go.temporal.io/api/enums/v1"
	v14 "go.temporal.io/api/failure/v1"
	v15 "go.temporal.io/api/sdk/v1"
	v12 "go.temporal.io/api/taskqueue/v1"
	v16 "go.temporal.io/api/workflow/v1"
	v18 "go.temporal.io/api/workflowservice/v1"
	v17 "go.temporal.io/server/api/clock/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchOperation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The namespace of the batch operation.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The query to perform.
	Query              string                  `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	WorkflowExecutions []*v1.WorkflowExecution `protobuf:"bytes,3,rep,name=workflow_executions,json=workflowExecutions,proto3" json:"workflow_executions,omitempty"`
	Reason             string                  `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	// Types that are valid to be assigned to Operation:
	//
	//	*BatchOperation_TerminationOperation
	//	*BatchOperation_CancellationOperation
	//	*BatchOperation_SignalOperation
	//	*BatchOperation_DeletionOperation
	//	*BatchOperation_ResetOperation
	//	*BatchOperation_UpdateWorkflowExecutionOptionsOperation
	//	*BatchOperation_UnpauseActivitiesOperation
	//	*BatchOperation_UpdateActivityOptionsOperation
	//	*BatchOperation_ResetActivitiesOperation
	Operation                isBatchOperation_Operation `protobuf_oneof:"operation"`
	Rps                      float64                    `protobuf:"fixed64,14,opt,name=rps,proto3" json:"rps,omitempty"`
	Concurrency              int64                      `protobuf:"varint,15,opt,name=concurrency,proto3" json:"concurrency,omitempty"`
	AttemptsOnRetryableError int64                      `protobuf:"varint,16,opt,name=attempts_on_retryable_error,json=attemptsOnRetryableError,proto3" json:"attempts_on_retryable_error,omitempty"`
	ActivityHeartbeatTimeout *durationpb.Duration       `protobuf:"bytes,17,opt,name=activity_heartbeat_timeout,json=activityHeartbeatTimeout,proto3" json:"activity_heartbeat_timeout,omitempty"`
	NonRetryableErrors       []string                   `protobuf:"bytes,18,rep,name=non_retryable_errors,json=nonRetryableErrors,proto3" json:"non_retryable_errors,omitempty"`
	BatchType                string                     `protobuf:"bytes,19,opt,name=batch_type,json=batchType,proto3" json:"batch_type,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *BatchOperation) Reset() {
	*x = BatchOperation{}
	mi := &file_temporal_server_api_batch_v1_request_response_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperation) ProtoMessage() {}

func (x *BatchOperation) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_api_batch_v1_request_response_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperation.ProtoReflect.Descriptor instead.
func (*BatchOperation) Descriptor() ([]byte, []int) {
	return file_temporal_server_api_batch_v1_request_response_proto_rawDescGZIP(), []int{0}
}

func (x *BatchOperation) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *BatchOperation) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *BatchOperation) GetWorkflowExecutions() []*v1.WorkflowExecution {
	if x != nil {
		return x.WorkflowExecutions
	}
	return nil
}

func (x *BatchOperation) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *BatchOperation) GetOperation() isBatchOperation_Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *BatchOperation) GetTerminationOperation() *v11.BatchOperationTermination {
	if x != nil {
		if x, ok := x.Operation.(*BatchOperation_TerminationOperation); ok {
			return x.TerminationOperation
		}
	}
	return nil
}

func (x *BatchOperation) GetCancellationOperation() *v11.BatchOperationCancellation {
	if x != nil {
		if x, ok := x.Operation.(*BatchOperation_CancellationOperation); ok {
			return x.CancellationOperation
		}
	}
	return nil
}

func (x *BatchOperation) GetSignalOperation() *v11.BatchOperationSignal {
	if x != nil {
		if x, ok := x.Operation.(*BatchOperation_SignalOperation); ok {
			return x.SignalOperation
		}
	}
	return nil
}

func (x *BatchOperation) GetDeletionOperation() *v11.BatchOperationDeletion {
	if x != nil {
		if x, ok := x.Operation.(*BatchOperation_DeletionOperation); ok {
			return x.DeletionOperation
		}
	}
	return nil
}

func (x *BatchOperation) GetResetOperation() *v11.BatchOperationReset {
	if x != nil {
		if x, ok := x.Operation.(*BatchOperation_ResetOperation); ok {
			return x.ResetOperation
		}
	}
	return nil
}

func (x *BatchOperation) GetUpdateWorkflowExecutionOptionsOperation() *v11.BatchOperationUpdateWorkflowExecutionOptions {
	if x != nil {
		if x, ok := x.Operation.(*BatchOperation_UpdateWorkflowExecutionOptionsOperation); ok {
			return x.UpdateWorkflowExecutionOptionsOperation
		}
	}
	return nil
}

func (x *BatchOperation) GetUnpauseActivitiesOperation() *v11.BatchOperationUnpauseActivities {
	if x != nil {
		if x, ok := x.Operation.(*BatchOperation_UnpauseActivitiesOperation); ok {
			return x.UnpauseActivitiesOperation
		}
	}
	return nil
}

func (x *BatchOperation) GetUpdateActivityOptionsOperation() *v11.BatchOperationUpdateActivityOptions {
	if x != nil {
		if x, ok := x.Operation.(*BatchOperation_UpdateActivityOptionsOperation); ok {
			return x.UpdateActivityOptionsOperation
		}
	}
	return nil
}

func (x *BatchOperation) GetResetActivitiesOperation() *v11.BatchOperationResetActivities {
	if x != nil {
		if x, ok := x.Operation.(*BatchOperation_ResetActivitiesOperation); ok {
			return x.ResetActivitiesOperation
		}
	}
	return nil
}

func (x *BatchOperation) GetRps() float64 {
	if x != nil {
		return x.Rps
	}
	return 0
}

func (x *BatchOperation) GetConcurrency() int64 {
	if x != nil {
		return x.Concurrency
	}
	return 0
}

func (x *BatchOperation) GetAttemptsOnRetryableError() int64 {
	if x != nil {
		return x.AttemptsOnRetryableError
	}
	return 0
}

func (x *BatchOperation) GetActivityHeartbeatTimeout() *durationpb.Duration {
	if x != nil {
		return x.ActivityHeartbeatTimeout
	}
	return nil
}

func (x *BatchOperation) GetNonRetryableErrors() []string {
	if x != nil {
		return x.NonRetryableErrors
	}
	return nil
}

func (x *BatchOperation) GetBatchType() string {
	if x != nil {
		return x.BatchType
	}
	return ""
}

type isBatchOperation_Operation interface {
	isBatchOperation_Operation()
}

type BatchOperation_TerminationOperation struct {
	TerminationOperation *v11.BatchOperationTermination `protobuf:"bytes,5,opt,name=termination_operation,json=terminationOperation,proto3,oneof"`
}

type BatchOperation_CancellationOperation struct {
	CancellationOperation *v11.BatchOperationCancellation `protobuf:"bytes,6,opt,name=cancellation_operation,json=cancellationOperation,proto3,oneof"`
}

type BatchOperation_SignalOperation struct {
	SignalOperation *v11.BatchOperationSignal `protobuf:"bytes,7,opt,name=signal_operation,json=signalOperation,proto3,oneof"`
}

type BatchOperation_DeletionOperation struct {
	DeletionOperation *v11.BatchOperationDeletion `protobuf:"bytes,8,opt,name=deletion_operation,json=deletionOperation,proto3,oneof"`
}

type BatchOperation_ResetOperation struct {
	ResetOperation *v11.BatchOperationReset `protobuf:"bytes,9,opt,name=reset_operation,json=resetOperation,proto3,oneof"`
}

type BatchOperation_UpdateWorkflowExecutionOptionsOperation struct {
	UpdateWorkflowExecutionOptionsOperation *v11.BatchOperationUpdateWorkflowExecutionOptions `protobuf:"bytes,10,opt,name=update_workflow_execution_options_operation,json=updateWorkflowExecutionOptionsOperation,proto3,oneof"`
}

type BatchOperation_UnpauseActivitiesOperation struct {
	UnpauseActivitiesOperation *v11.BatchOperationUnpauseActivities `protobuf:"bytes,11,opt,name=unpause_activities_operation,json=unpauseActivitiesOperation,proto3,oneof"`
}

type BatchOperation_UpdateActivityOptionsOperation struct {
	UpdateActivityOptionsOperation *v11.BatchOperationUpdateActivityOptions `protobuf:"bytes,12,opt,name=update_activity_options_operation,json=updateActivityOptionsOperation,proto3,oneof"`
}

type BatchOperation_ResetActivitiesOperation struct {
	ResetActivitiesOperation *v11.BatchOperationResetActivities `protobuf:"bytes,13,opt,name=reset_activities_operation,json=resetActivitiesOperation,proto3,oneof"`
}

func (*BatchOperation_TerminationOperation) isBatchOperation_Operation() {}

func (*BatchOperation_CancellationOperation) isBatchOperation_Operation() {}

func (*BatchOperation_SignalOperation) isBatchOperation_Operation() {}

func (*BatchOperation_DeletionOperation) isBatchOperation_Operation() {}

func (*BatchOperation_ResetOperation) isBatchOperation_Operation() {}

func (*BatchOperation_UpdateWorkflowExecutionOptionsOperation) isBatchOperation_Operation() {}

func (*BatchOperation_UnpauseActivitiesOperation) isBatchOperation_Operation() {}

func (*BatchOperation_UpdateActivityOptionsOperation) isBatchOperation_Operation() {}

func (*BatchOperation_ResetActivitiesOperation) isBatchOperation_Operation() {}

type StartBatchWorkflowExecutionRequest struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Namespace    string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	WorkflowId   string                 `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	WorkflowType *v1.WorkflowType       `protobuf:"bytes,3,opt,name=workflow_type,json=workflowType,proto3" json:"workflow_type,omitempty"`
	TaskQueue    *v12.TaskQueue         `protobuf:"bytes,4,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// Serialized arguments to the workflow. These are passed as arguments to the workflow function.
	Input *BatchOperation `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	// Total workflow execution timeout including retries and continue as new.
	WorkflowExecutionTimeout *durationpb.Duration `protobuf:"bytes,6,opt,name=workflow_execution_timeout,json=workflowExecutionTimeout,proto3" json:"workflow_execution_timeout,omitempty"`
	// Timeout of a single workflow run.
	WorkflowRunTimeout *durationpb.Duration `protobuf:"bytes,7,opt,name=workflow_run_timeout,json=workflowRunTimeout,proto3" json:"workflow_run_timeout,omitempty"`
	// Timeout of a single workflow task.
	WorkflowTaskTimeout *durationpb.Duration `protobuf:"bytes,8,opt,name=workflow_task_timeout,json=workflowTaskTimeout,proto3" json:"workflow_task_timeout,omitempty"`
	// The identity of the client who initiated this request
	Identity string `protobuf:"bytes,9,opt,name=identity,proto3" json:"identity,omitempty"`
	// A unique identifier for this start request. Typically UUIDv4.
	RequestId string `protobuf:"bytes,10,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Defines whether to allow re-using the workflow id from a previously *closed* workflow.
	// The default policy is WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE.
	//
	// See `workflow_id_conflict_policy` for handling a workflow id duplication with a *running* workflow.
	WorkflowIdReusePolicy v13.WorkflowIdReusePolicy `protobuf:"varint,11,opt,name=workflow_id_reuse_policy,json=workflowIdReusePolicy,proto3,enum=temporal.api.enums.v1.WorkflowIdReusePolicy" json:"workflow_id_reuse_policy,omitempty"`
	// Defines how to resolve a workflow id conflict with a *running* workflow.
	// The default policy is WORKFLOW_ID_CONFLICT_POLICY_FAIL.
	//
	// See `workflow_id_reuse_policy` for handling a workflow id duplication with a *closed* workflow.
	WorkflowIdConflictPolicy v13.WorkflowIdConflictPolicy `protobuf:"varint,22,opt,name=workflow_id_conflict_policy,json=workflowIdConflictPolicy,proto3,enum=temporal.api.enums.v1.WorkflowIdConflictPolicy" json:"workflow_id_conflict_policy,omitempty"`
	// The retry policy for the workflow. Will never exceed `workflow_execution_timeout`.
	RetryPolicy *v1.RetryPolicy `protobuf:"bytes,12,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// See https://docs.temporal.io/docs/content/what-is-a-temporal-cron-job/
	CronSchedule     string               `protobuf:"bytes,13,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
	Memo             *v1.Memo             `protobuf:"bytes,14,opt,name=memo,proto3" json:"memo,omitempty"`
	SearchAttributes *v1.SearchAttributes `protobuf:"bytes,15,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
	Header           *v1.Header           `protobuf:"bytes,16,opt,name=header,proto3" json:"header,omitempty"`
	// Request to get the first workflow task inline in the response bypassing matching service and worker polling.
	// If set to `true` the caller is expected to have a worker available and capable of processing the task.
	// The returned task will be marked as started and is expected to be completed by the specified
	// `workflow_task_timeout`.
	RequestEagerExecution bool `protobuf:"varint,17,opt,name=request_eager_execution,json=requestEagerExecution,proto3" json:"request_eager_execution,omitempty"`
	// These values will be available as ContinuedFailure and LastCompletionResult in the
	// WorkflowExecutionStarted event and through SDKs. The are currently only used by the
	// server itself (for the schedules feature) and are not intended to be exposed in
	// StartWorkflowExecution.
	ContinuedFailure     *v14.Failure `protobuf:"bytes,18,opt,name=continued_failure,json=continuedFailure,proto3" json:"continued_failure,omitempty"`
	LastCompletionResult *v1.Payloads `protobuf:"bytes,19,opt,name=last_completion_result,json=lastCompletionResult,proto3" json:"last_completion_result,omitempty"`
	// Time to wait before dispatching the first workflow task. Cannot be used with `cron_schedule`.
	// If the workflow gets a signal before the delay, a workflow task will be dispatched and the rest
	// of the delay will be ignored.
	WorkflowStartDelay *durationpb.Duration `protobuf:"bytes,20,opt,name=workflow_start_delay,json=workflowStartDelay,proto3" json:"workflow_start_delay,omitempty"`
	// Callbacks to be called by the server when this workflow reaches a terminal state.
	// If the workflow continues-as-new, these callbacks will be carried over to the new execution.
	// Callback addresses must be whitelisted in the server's dynamic configuration.
	CompletionCallbacks []*v1.Callback `protobuf:"bytes,21,rep,name=completion_callbacks,json=completionCallbacks,proto3" json:"completion_callbacks,omitempty"`
	// Metadata on the workflow if it is started. This is carried over to the WorkflowExecutionInfo
	// for use by user interfaces to display the fixed as-of-start summary and details of the
	// workflow.
	UserMetadata *v15.UserMetadata `protobuf:"bytes,23,opt,name=user_metadata,json=userMetadata,proto3" json:"user_metadata,omitempty"`
	// Links to be associated with the workflow.
	Links []*v1.Link `protobuf:"bytes,24,rep,name=links,proto3" json:"links,omitempty"`
	// If set, takes precedence over the Versioning Behavior sent by the SDK on Workflow Task completion.
	// To unset the override after the workflow is running, use UpdateWorkflowExecutionOptions.
	VersioningOverride *v16.VersioningOverride `protobuf:"bytes,25,opt,name=versioning_override,json=versioningOverride,proto3" json:"versioning_override,omitempty"`
	// Defines actions to be done to the existing running workflow when the conflict policy
	// WORKFLOW_ID_CONFLICT_POLICY_USE_EXISTING is used. If not set (ie., nil value) or set to a
	// empty object (ie., all options with default value), it won't do anything to the existing
	// running workflow. If set, it will add a history event to the running workflow.
	OnConflictOptions *v16.OnConflictOptions `protobuf:"bytes,26,opt,name=on_conflict_options,json=onConflictOptions,proto3" json:"on_conflict_options,omitempty"`
	// Priority metadata
	Priority      *v1.Priority `protobuf:"bytes,27,opt,name=priority,proto3" json:"priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartBatchWorkflowExecutionRequest) Reset() {
	*x = StartBatchWorkflowExecutionRequest{}
	mi := &file_temporal_server_api_batch_v1_request_response_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartBatchWorkflowExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBatchWorkflowExecutionRequest) ProtoMessage() {}

func (x *StartBatchWorkflowExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_api_batch_v1_request_response_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBatchWorkflowExecutionRequest.ProtoReflect.Descriptor instead.
func (*StartBatchWorkflowExecutionRequest) Descriptor() ([]byte, []int) {
	return file_temporal_server_api_batch_v1_request_response_proto_rawDescGZIP(), []int{1}
}

func (x *StartBatchWorkflowExecutionRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *StartBatchWorkflowExecutionRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *StartBatchWorkflowExecutionRequest) GetWorkflowType() *v1.WorkflowType {
	if x != nil {
		return x.WorkflowType
	}
	return nil
}

func (x *StartBatchWorkflowExecutionRequest) GetTaskQueue() *v12.TaskQueue {
	if x != nil {
		return x.TaskQueue
	}
	return nil
}

func (x *StartBatchWorkflowExecutionRequest) GetInput() *BatchOperation {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *StartBatchWorkflowExecutionRequest) GetWorkflowExecutionTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowExecutionTimeout
	}
	return nil
}

func (x *StartBatchWorkflowExecutionRequest) GetWorkflowRunTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowRunTimeout
	}
	return nil
}

func (x *StartBatchWorkflowExecutionRequest) GetWorkflowTaskTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowTaskTimeout
	}
	return nil
}

func (x *StartBatchWorkflowExecutionRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *StartBatchWorkflowExecutionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *StartBatchWorkflowExecutionRequest) GetWorkflowIdReusePolicy() v13.WorkflowIdReusePolicy {
	if x != nil {
		return x.WorkflowIdReusePolicy
	}
	return v13.WorkflowIdReusePolicy(0)
}

func (x *StartBatchWorkflowExecutionRequest) GetWorkflowIdConflictPolicy() v13.WorkflowIdConflictPolicy {
	if x != nil {
		return x.WorkflowIdConflictPolicy
	}
	return v13.WorkflowIdConflictPolicy(0)
}

func (x *StartBatchWorkflowExecutionRequest) GetRetryPolicy() *v1.RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *StartBatchWorkflowExecutionRequest) GetCronSchedule() string {
	if x != nil {
		return x.CronSchedule
	}
	return ""
}

func (x *StartBatchWorkflowExecutionRequest) GetMemo() *v1.Memo {
	if x != nil {
		return x.Memo
	}
	return nil
}

func (x *StartBatchWorkflowExecutionRequest) GetSearchAttributes() *v1.SearchAttributes {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

func (x *StartBatchWorkflowExecutionRequest) GetHeader() *v1.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StartBatchWorkflowExecutionRequest) GetRequestEagerExecution() bool {
	if x != nil {
		return x.RequestEagerExecution
	}
	return false
}

func (x *StartBatchWorkflowExecutionRequest) GetContinuedFailure() *v14.Failure {
	if x != nil {
		return x.ContinuedFailure
	}
	return nil
}

func (x *StartBatchWorkflowExecutionRequest) GetLastCompletionResult() *v1.Payloads {
	if x != nil {
		return x.LastCompletionResult
	}
	return nil
}

func (x *StartBatchWorkflowExecutionRequest) GetWorkflowStartDelay() *durationpb.Duration {
	if x != nil {
		return x.WorkflowStartDelay
	}
	return nil
}

func (x *StartBatchWorkflowExecutionRequest) GetCompletionCallbacks() []*v1.Callback {
	if x != nil {
		return x.CompletionCallbacks
	}
	return nil
}

func (x *StartBatchWorkflowExecutionRequest) GetUserMetadata() *v15.UserMetadata {
	if x != nil {
		return x.UserMetadata
	}
	return nil
}

func (x *StartBatchWorkflowExecutionRequest) GetLinks() []*v1.Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *StartBatchWorkflowExecutionRequest) GetVersioningOverride() *v16.VersioningOverride {
	if x != nil {
		return x.VersioningOverride
	}
	return nil
}

func (x *StartBatchWorkflowExecutionRequest) GetOnConflictOptions() *v16.OnConflictOptions {
	if x != nil {
		return x.OnConflictOptions
	}
	return nil
}

func (x *StartBatchWorkflowExecutionRequest) GetPriority() *v1.Priority {
	if x != nil {
		return x.Priority
	}
	return nil
}

type StartBatchWorkflowExecutionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	RunId string                 `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Clock *v17.VectorClock       `protobuf:"bytes,2,opt,name=clock,proto3" json:"clock,omitempty"`
	// Set if request_eager_execution is set on the start request
	EagerWorkflowTask *v18.PollWorkflowTaskQueueResponse `protobuf:"bytes,3,opt,name=eager_workflow_task,json=eagerWorkflowTask,proto3" json:"eager_workflow_task,omitempty"`
	Started           bool                               `protobuf:"varint,4,opt,name=started,proto3" json:"started,omitempty"`
	Status            v13.WorkflowExecutionStatus        `protobuf:"varint,5,opt,name=status,proto3,enum=temporal.api.enums.v1.WorkflowExecutionStatus" json:"status,omitempty"`
	Link              *v1.Link                           `protobuf:"bytes,6,opt,name=link,proto3" json:"link,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StartBatchWorkflowExecutionResponse) Reset() {
	*x = StartBatchWorkflowExecutionResponse{}
	mi := &file_temporal_server_api_batch_v1_request_response_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartBatchWorkflowExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartBatchWorkflowExecutionResponse) ProtoMessage() {}

func (x *StartBatchWorkflowExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_api_batch_v1_request_response_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartBatchWorkflowExecutionResponse.ProtoReflect.Descriptor instead.
func (*StartBatchWorkflowExecutionResponse) Descriptor() ([]byte, []int) {
	return file_temporal_server_api_batch_v1_request_response_proto_rawDescGZIP(), []int{2}
}

func (x *StartBatchWorkflowExecutionResponse) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *StartBatchWorkflowExecutionResponse) GetClock() *v17.VectorClock {
	if x != nil {
		return x.Clock
	}
	return nil
}

func (x *StartBatchWorkflowExecutionResponse) GetEagerWorkflowTask() *v18.PollWorkflowTaskQueueResponse {
	if x != nil {
		return x.EagerWorkflowTask
	}
	return nil
}

func (x *StartBatchWorkflowExecutionResponse) GetStarted() bool {
	if x != nil {
		return x.Started
	}
	return false
}

func (x *StartBatchWorkflowExecutionResponse) GetStatus() v13.WorkflowExecutionStatus {
	if x != nil {
		return x.Status
	}
	return v13.WorkflowExecutionStatus(0)
}

func (x *StartBatchWorkflowExecutionResponse) GetLink() *v1.Link {
	if x != nil {
		return x.Link
	}
	return nil
}

var File_temporal_server_api_batch_v1_request_response_proto protoreflect.FileDescriptor

const file_temporal_server_api_batch_v1_request_response_proto_rawDesc = "" +
	"\n" +
	"3temporal/server/api/batch/v1/request_response.proto\x12\x1ctemporal.server.api.batch.v1\x1a\x1egoogle/protobuf/duration.proto\x1a#temporal/api/batch/v1/message.proto\x1a$temporal/api/common/v1/message.proto\x1a&temporal/api/workflow/v1/message.proto\x1a$temporal/api/enums/v1/workflow.proto\x1a%temporal/api/failure/v1/message.proto\x1a'temporal/api/sdk/v1/user_metadata.proto\x1a'temporal/api/taskqueue/v1/message.proto\x1a6temporal/api/workflowservice/v1/request_response.proto\x1a*temporal/server/api/clock/v1/message.proto\"\xea\v\n" +
	"\x0eBatchOperation\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x14\n" +
	"\x05query\x18\x02 \x01(\tR\x05query\x12Z\n" +
	"\x13workflow_executions\x18\x03 \x03(\v2).temporal.api.common.v1.WorkflowExecutionR\x12workflowExecutions\x12\x16\n" +
	"\x06reason\x18\x04 \x01(\tR\x06reason\x12g\n" +
	"\x15termination_operation\x18\x05 \x01(\v20.temporal.api.batch.v1.BatchOperationTerminationH\x00R\x14terminationOperation\x12j\n" +
	"\x16cancellation_operation\x18\x06 \x01(\v21.temporal.api.batch.v1.BatchOperationCancellationH\x00R\x15cancellationOperation\x12X\n" +
	"\x10signal_operation\x18\a \x01(\v2+.temporal.api.batch.v1.BatchOperationSignalH\x00R\x0fsignalOperation\x12^\n" +
	"\x12deletion_operation\x18\b \x01(\v2-.temporal.api.batch.v1.BatchOperationDeletionH\x00R\x11deletionOperation\x12U\n" +
	"\x0freset_operation\x18\t \x01(\v2*.temporal.api.batch.v1.BatchOperationResetH\x00R\x0eresetOperation\x12\xa3\x01\n" +
	"+update_workflow_execution_options_operation\x18\n" +
	" \x01(\v2C.temporal.api.batch.v1.BatchOperationUpdateWorkflowExecutionOptionsH\x00R'updateWorkflowExecutionOptionsOperation\x12z\n" +
	"\x1cunpause_activities_operation\x18\v \x01(\v26.temporal.api.batch.v1.BatchOperationUnpauseActivitiesH\x00R\x1aunpauseActivitiesOperation\x12\x87\x01\n" +
	"!update_activity_options_operation\x18\f \x01(\v2:.temporal.api.batch.v1.BatchOperationUpdateActivityOptionsH\x00R\x1eupdateActivityOptionsOperation\x12t\n" +
	"\x1areset_activities_operation\x18\r \x01(\v24.temporal.api.batch.v1.BatchOperationResetActivitiesH\x00R\x18resetActivitiesOperation\x12\x10\n" +
	"\x03rps\x18\x0e \x01(\x01R\x03rps\x12 \n" +
	"\vconcurrency\x18\x0f \x01(\x03R\vconcurrency\x12=\n" +
	"\x1battempts_on_retryable_error\x18\x10 \x01(\x03R\x18attemptsOnRetryableError\x12W\n" +
	"\x1aactivity_heartbeat_timeout\x18\x11 \x01(\v2\x19.google.protobuf.DurationR\x18activityHeartbeatTimeout\x120\n" +
	"\x14non_retryable_errors\x18\x12 \x03(\tR\x12nonRetryableErrors\x12\x1d\n" +
	"\n" +
	"batch_type\x18\x13 \x01(\tR\tbatchTypeB\v\n" +
	"\toperation\"\xe3\x0e\n" +
	"\"StartBatchWorkflowExecutionRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x1f\n" +
	"\vworkflow_id\x18\x02 \x01(\tR\n" +
	"workflowId\x12I\n" +
	"\rworkflow_type\x18\x03 \x01(\v2$.temporal.api.common.v1.WorkflowTypeR\fworkflowType\x12C\n" +
	"\n" +
	"task_queue\x18\x04 \x01(\v2$.temporal.api.taskqueue.v1.TaskQueueR\ttaskQueue\x12B\n" +
	"\x05input\x18\x05 \x01(\v2,.temporal.server.api.batch.v1.BatchOperationR\x05input\x12W\n" +
	"\x1aworkflow_execution_timeout\x18\x06 \x01(\v2\x19.google.protobuf.DurationR\x18workflowExecutionTimeout\x12K\n" +
	"\x14workflow_run_timeout\x18\a \x01(\v2\x19.google.protobuf.DurationR\x12workflowRunTimeout\x12M\n" +
	"\x15workflow_task_timeout\x18\b \x01(\v2\x19.google.protobuf.DurationR\x13workflowTaskTimeout\x12\x1a\n" +
	"\bidentity\x18\t \x01(\tR\bidentity\x12\x1d\n" +
	"\n" +
	"request_id\x18\n" +
	" \x01(\tR\trequestId\x12e\n" +
	"\x18workflow_id_reuse_policy\x18\v \x01(\x0e2,.temporal.api.enums.v1.WorkflowIdReusePolicyR\x15workflowIdReusePolicy\x12n\n" +
	"\x1bworkflow_id_conflict_policy\x18\x16 \x01(\x0e2/.temporal.api.enums.v1.WorkflowIdConflictPolicyR\x18workflowIdConflictPolicy\x12F\n" +
	"\fretry_policy\x18\f \x01(\v2#.temporal.api.common.v1.RetryPolicyR\vretryPolicy\x12#\n" +
	"\rcron_schedule\x18\r \x01(\tR\fcronSchedule\x120\n" +
	"\x04memo\x18\x0e \x01(\v2\x1c.temporal.api.common.v1.MemoR\x04memo\x12U\n" +
	"\x11search_attributes\x18\x0f \x01(\v2(.temporal.api.common.v1.SearchAttributesR\x10searchAttributes\x126\n" +
	"\x06header\x18\x10 \x01(\v2\x1e.temporal.api.common.v1.HeaderR\x06header\x126\n" +
	"\x17request_eager_execution\x18\x11 \x01(\bR\x15requestEagerExecution\x12M\n" +
	"\x11continued_failure\x18\x12 \x01(\v2 .temporal.api.failure.v1.FailureR\x10continuedFailure\x12V\n" +
	"\x16last_completion_result\x18\x13 \x01(\v2 .temporal.api.common.v1.PayloadsR\x14lastCompletionResult\x12K\n" +
	"\x14workflow_start_delay\x18\x14 \x01(\v2\x19.google.protobuf.DurationR\x12workflowStartDelay\x12S\n" +
	"\x14completion_callbacks\x18\x15 \x03(\v2 .temporal.api.common.v1.CallbackR\x13completionCallbacks\x12F\n" +
	"\ruser_metadata\x18\x17 \x01(\v2!.temporal.api.sdk.v1.UserMetadataR\fuserMetadata\x122\n" +
	"\x05links\x18\x18 \x03(\v2\x1c.temporal.api.common.v1.LinkR\x05links\x12]\n" +
	"\x13versioning_override\x18\x19 \x01(\v2,.temporal.api.workflow.v1.VersioningOverrideR\x12versioningOverride\x12[\n" +
	"\x13on_conflict_options\x18\x1a \x01(\v2+.temporal.api.workflow.v1.OnConflictOptionsR\x11onConflictOptions\x12<\n" +
	"\bpriority\x18\x1b \x01(\v2 .temporal.api.common.v1.PriorityR\bpriority\"\x81\x03\n" +
	"#StartBatchWorkflowExecutionResponse\x12\x15\n" +
	"\x06run_id\x18\x01 \x01(\tR\x05runId\x12?\n" +
	"\x05clock\x18\x02 \x01(\v2).temporal.server.api.clock.v1.VectorClockR\x05clock\x12n\n" +
	"\x13eager_workflow_task\x18\x03 \x01(\v2>.temporal.api.workflowservice.v1.PollWorkflowTaskQueueResponseR\x11eagerWorkflowTask\x12\x18\n" +
	"\astarted\x18\x04 \x01(\bR\astarted\x12F\n" +
	"\x06status\x18\x05 \x01(\x0e2..temporal.api.enums.v1.WorkflowExecutionStatusR\x06status\x120\n" +
	"\x04link\x18\x06 \x01(\v2\x1c.temporal.api.common.v1.LinkR\x04linkB*Z(go.temporal.io/server/api/batch/v1;batchb\x06proto3"

var (
	file_temporal_server_api_batch_v1_request_response_proto_rawDescOnce sync.Once
	file_temporal_server_api_batch_v1_request_response_proto_rawDescData []byte
)

func file_temporal_server_api_batch_v1_request_response_proto_rawDescGZIP() []byte {
	file_temporal_server_api_batch_v1_request_response_proto_rawDescOnce.Do(func() {
		file_temporal_server_api_batch_v1_request_response_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_temporal_server_api_batch_v1_request_response_proto_rawDesc), len(file_temporal_server_api_batch_v1_request_response_proto_rawDesc)))
	})
	return file_temporal_server_api_batch_v1_request_response_proto_rawDescData
}

var file_temporal_server_api_batch_v1_request_response_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_temporal_server_api_batch_v1_request_response_proto_goTypes = []any{
	(*BatchOperation)(nil),                                   // 0: temporal.server.api.batch.v1.BatchOperation
	(*StartBatchWorkflowExecutionRequest)(nil),               // 1: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest
	(*StartBatchWorkflowExecutionResponse)(nil),              // 2: temporal.server.api.batch.v1.StartBatchWorkflowExecutionResponse
	(*v1.WorkflowExecution)(nil),                             // 3: temporal.api.common.v1.WorkflowExecution
	(*v11.BatchOperationTermination)(nil),                    // 4: temporal.api.batch.v1.BatchOperationTermination
	(*v11.BatchOperationCancellation)(nil),                   // 5: temporal.api.batch.v1.BatchOperationCancellation
	(*v11.BatchOperationSignal)(nil),                         // 6: temporal.api.batch.v1.BatchOperationSignal
	(*v11.BatchOperationDeletion)(nil),                       // 7: temporal.api.batch.v1.BatchOperationDeletion
	(*v11.BatchOperationReset)(nil),                          // 8: temporal.api.batch.v1.BatchOperationReset
	(*v11.BatchOperationUpdateWorkflowExecutionOptions)(nil), // 9: temporal.api.batch.v1.BatchOperationUpdateWorkflowExecutionOptions
	(*v11.BatchOperationUnpauseActivities)(nil),              // 10: temporal.api.batch.v1.BatchOperationUnpauseActivities
	(*v11.BatchOperationUpdateActivityOptions)(nil),          // 11: temporal.api.batch.v1.BatchOperationUpdateActivityOptions
	(*v11.BatchOperationResetActivities)(nil),                // 12: temporal.api.batch.v1.BatchOperationResetActivities
	(*durationpb.Duration)(nil),                              // 13: google.protobuf.Duration
	(*v1.WorkflowType)(nil),                                  // 14: temporal.api.common.v1.WorkflowType
	(*v12.TaskQueue)(nil),                                    // 15: temporal.api.taskqueue.v1.TaskQueue
	(v13.WorkflowIdReusePolicy)(0),                           // 16: temporal.api.enums.v1.WorkflowIdReusePolicy
	(v13.WorkflowIdConflictPolicy)(0),                        // 17: temporal.api.enums.v1.WorkflowIdConflictPolicy
	(*v1.RetryPolicy)(nil),                                   // 18: temporal.api.common.v1.RetryPolicy
	(*v1.Memo)(nil),                                          // 19: temporal.api.common.v1.Memo
	(*v1.SearchAttributes)(nil),                              // 20: temporal.api.common.v1.SearchAttributes
	(*v1.Header)(nil),                                        // 21: temporal.api.common.v1.Header
	(*v14.Failure)(nil),                                      // 22: temporal.api.failure.v1.Failure
	(*v1.Payloads)(nil),                                      // 23: temporal.api.common.v1.Payloads
	(*v1.Callback)(nil),                                      // 24: temporal.api.common.v1.Callback
	(*v15.UserMetadata)(nil),                                 // 25: temporal.api.sdk.v1.UserMetadata
	(*v1.Link)(nil),                                          // 26: temporal.api.common.v1.Link
	(*v16.VersioningOverride)(nil),                           // 27: temporal.api.workflow.v1.VersioningOverride
	(*v16.OnConflictOptions)(nil),                            // 28: temporal.api.workflow.v1.OnConflictOptions
	(*v1.Priority)(nil),                                      // 29: temporal.api.common.v1.Priority
	(*v17.VectorClock)(nil),                                  // 30: temporal.server.api.clock.v1.VectorClock
	(*v18.PollWorkflowTaskQueueResponse)(nil),                // 31: temporal.api.workflowservice.v1.PollWorkflowTaskQueueResponse
	(v13.WorkflowExecutionStatus)(0),                         // 32: temporal.api.enums.v1.WorkflowExecutionStatus
}
var file_temporal_server_api_batch_v1_request_response_proto_depIdxs = []int32{
	3,  // 0: temporal.server.api.batch.v1.BatchOperation.workflow_executions:type_name -> temporal.api.common.v1.WorkflowExecution
	4,  // 1: temporal.server.api.batch.v1.BatchOperation.termination_operation:type_name -> temporal.api.batch.v1.BatchOperationTermination
	5,  // 2: temporal.server.api.batch.v1.BatchOperation.cancellation_operation:type_name -> temporal.api.batch.v1.BatchOperationCancellation
	6,  // 3: temporal.server.api.batch.v1.BatchOperation.signal_operation:type_name -> temporal.api.batch.v1.BatchOperationSignal
	7,  // 4: temporal.server.api.batch.v1.BatchOperation.deletion_operation:type_name -> temporal.api.batch.v1.BatchOperationDeletion
	8,  // 5: temporal.server.api.batch.v1.BatchOperation.reset_operation:type_name -> temporal.api.batch.v1.BatchOperationReset
	9,  // 6: temporal.server.api.batch.v1.BatchOperation.update_workflow_execution_options_operation:type_name -> temporal.api.batch.v1.BatchOperationUpdateWorkflowExecutionOptions
	10, // 7: temporal.server.api.batch.v1.BatchOperation.unpause_activities_operation:type_name -> temporal.api.batch.v1.BatchOperationUnpauseActivities
	11, // 8: temporal.server.api.batch.v1.BatchOperation.update_activity_options_operation:type_name -> temporal.api.batch.v1.BatchOperationUpdateActivityOptions
	12, // 9: temporal.server.api.batch.v1.BatchOperation.reset_activities_operation:type_name -> temporal.api.batch.v1.BatchOperationResetActivities
	13, // 10: temporal.server.api.batch.v1.BatchOperation.activity_heartbeat_timeout:type_name -> google.protobuf.Duration
	14, // 11: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest.workflow_type:type_name -> temporal.api.common.v1.WorkflowType
	15, // 12: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest.task_queue:type_name -> temporal.api.taskqueue.v1.TaskQueue
	0,  // 13: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest.input:type_name -> temporal.server.api.batch.v1.BatchOperation
	13, // 14: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest.workflow_execution_timeout:type_name -> google.protobuf.Duration
	13, // 15: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest.workflow_run_timeout:type_name -> google.protobuf.Duration
	13, // 16: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest.workflow_task_timeout:type_name -> google.protobuf.Duration
	16, // 17: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest.workflow_id_reuse_policy:type_name -> temporal.api.enums.v1.WorkflowIdReusePolicy
	17, // 18: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest.workflow_id_conflict_policy:type_name -> temporal.api.enums.v1.WorkflowIdConflictPolicy
	18, // 19: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest.retry_policy:type_name -> temporal.api.common.v1.RetryPolicy
	19, // 20: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest.memo:type_name -> temporal.api.common.v1.Memo
	20, // 21: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest.search_attributes:type_name -> temporal.api.common.v1.SearchAttributes
	21, // 22: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest.header:type_name -> temporal.api.common.v1.Header
	22, // 23: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest.continued_failure:type_name -> temporal.api.failure.v1.Failure
	23, // 24: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest.last_completion_result:type_name -> temporal.api.common.v1.Payloads
	13, // 25: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest.workflow_start_delay:type_name -> google.protobuf.Duration
	24, // 26: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest.completion_callbacks:type_name -> temporal.api.common.v1.Callback
	25, // 27: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest.user_metadata:type_name -> temporal.api.sdk.v1.UserMetadata
	26, // 28: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest.links:type_name -> temporal.api.common.v1.Link
	27, // 29: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest.versioning_override:type_name -> temporal.api.workflow.v1.VersioningOverride
	28, // 30: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest.on_conflict_options:type_name -> temporal.api.workflow.v1.OnConflictOptions
	29, // 31: temporal.server.api.batch.v1.StartBatchWorkflowExecutionRequest.priority:type_name -> temporal.api.common.v1.Priority
	30, // 32: temporal.server.api.batch.v1.StartBatchWorkflowExecutionResponse.clock:type_name -> temporal.server.api.clock.v1.VectorClock
	31, // 33: temporal.server.api.batch.v1.StartBatchWorkflowExecutionResponse.eager_workflow_task:type_name -> temporal.api.workflowservice.v1.PollWorkflowTaskQueueResponse
	32, // 34: temporal.server.api.batch.v1.StartBatchWorkflowExecutionResponse.status:type_name -> temporal.api.enums.v1.WorkflowExecutionStatus
	26, // 35: temporal.server.api.batch.v1.StartBatchWorkflowExecutionResponse.link:type_name -> temporal.api.common.v1.Link
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_temporal_server_api_batch_v1_request_response_proto_init() }
func file_temporal_server_api_batch_v1_request_response_proto_init() {
	if File_temporal_server_api_batch_v1_request_response_proto != nil {
		return
	}
	file_temporal_server_api_batch_v1_request_response_proto_msgTypes[0].OneofWrappers = []any{
		(*BatchOperation_TerminationOperation)(nil),
		(*BatchOperation_CancellationOperation)(nil),
		(*BatchOperation_SignalOperation)(nil),
		(*BatchOperation_DeletionOperation)(nil),
		(*BatchOperation_ResetOperation)(nil),
		(*BatchOperation_UpdateWorkflowExecutionOptionsOperation)(nil),
		(*BatchOperation_UnpauseActivitiesOperation)(nil),
		(*BatchOperation_UpdateActivityOptionsOperation)(nil),
		(*BatchOperation_ResetActivitiesOperation)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_temporal_server_api_batch_v1_request_response_proto_rawDesc), len(file_temporal_server_api_batch_v1_request_response_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_server_api_batch_v1_request_response_proto_goTypes,
		DependencyIndexes: file_temporal_server_api_batch_v1_request_response_proto_depIdxs,
		MessageInfos:      file_temporal_server_api_batch_v1_request_response_proto_msgTypes,
	}.Build()
	File_temporal_server_api_batch_v1_request_response_proto = out.File
	file_temporal_server_api_batch_v1_request_response_proto_goTypes = nil
	file_temporal_server_api_batch_v1_request_response_proto_depIdxs = nil
}
