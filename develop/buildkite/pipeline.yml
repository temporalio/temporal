steps:
  - label: ":golang: build"
    agents:
      queue: "default"
      docker: "*"
    plugins:
      - ecr#v2.7.0: {login: true}
      - docker-compose#v4.14.0:
          build: build
          build-alias:
            # All services in the docker-compose file that run the server or tests (besides 'build') should be listed here.
            # This will make buildkite use this built image for those services, even though the service name doesn't match.
            # Run ./develop/buildkite/generate-build-alias-list.sh to regenerate.
            # <<< build-alias list
            - ci-build-misc
            - db-integration-test
            - integration-test-cassandra
            - integration-test-cassandra-es8
            - integration-test-cassandra-opensearch
            - integration-test-mysql8
            - integration-test-postgresql12
            - integration-test-postgresql12-pgx
            - integration-test-sqlite
            - integration-test-xdc-cassandra
            - integration-test-xdc-mysql
            - integration-test-xdc-mysql8
            - integration-test-xdc-postgresql
            - integration-test-xdc-postgresql-pgx
            - integration-test-xdc-postgresql12
            - integration-test-xdc-postgresql12-pgx
            - coverage-report
            # >>> build-alias list
          config: ./develop/buildkite/docker-compose.yml
          image-repository: "283266070392.dkr.ecr.us-west-2.amazonaws.com/buildkite"
          cache-from: "build:283266070392.dkr.ecr.us-west-2.amazonaws.com/buildkite:server-prebuild-cache"
          propagate-environment: true
      - artifacts#v1.9.0:
          upload: "develop/buildkite/*"
          upload: "develop/buildkite/**/*"

  - wait

  - label: ":golang: misc checks"
    agents:
      queue: "default"
      docker: "*"
    command: "make ci-build-misc"
    plugins:
      - artifacts#v1.9.0:
          download: "develop/buildkite/*"
      - ecr#v2.7.0: {login: true}
      - docker-compose#v4.14.0:
          run: ci-build-misc
          config: ./develop/buildkite/docker-compose.yml
          skip-checkout: false  # do full checkout to get .git on this one
          mount-buildkite-agent: true
          propagate-environment: true

  - label: ":golang: unit test"
    agents:
      queue: "default"
      docker: "*"
    command: "make unit-test-coverage"
    artifact_paths:
      - ".testoutput/*"
    plugins:
      - artifacts#v1.9.0:
          download: "develop/buildkite/*"
      - ecr#v2.7.0: {login: true}
      - docker-compose#v4.14.0:
          run: build
          config: ./develop/buildkite/docker-compose.yml
          skip-checkout: true
          mount-buildkite-agent: true
          propagate-environment: true

  - label: ":golang: integration test"
    agents:
      queue: "default"
      docker: "*"
    command: "make integration-test-coverage"
    artifact_paths:
      - ".testoutput/*"
    plugins:
      - artifacts#v1.9.0:
          download: "develop/buildkite/*"
      - ecr#v2.7.0: {login: true}
      - docker-compose#v4.14.0:
          run: db-integration-test
          config: ./develop/buildkite/docker-compose.yml
          skip-checkout: true
          mount-buildkite-agent: true
          propagate-environment: true

  - label: ":golang: functional test with cassandra"
    agents:
      queue: "default"
      docker: "*"
    command: "make functional-test-coverage"
    parallelism: 3
    artifact_paths:
      - ".testoutput/*"
    retry:
      automatic:
        limit: 1
    plugins:
      - artifacts#v1.9.0:
          download: "develop/buildkite/*"
      - ecr#v2.7.0: {login: true}
      - docker-compose#v4.14.0:
          run: integration-test-cassandra
          config: ./develop/buildkite/docker-compose.yml
          skip-checkout: true
          mount-buildkite-agent: true
          propagate-environment: true

  - label: ":golang: functional test with cassandra (ES8)"
    agents:
      queue: "default"
      docker: "*"
    command: "make functional-test-coverage"
    parallelism: 3
    artifact_paths:
      - ".testoutput/*"
    retry:
      automatic:
        limit: 1
    plugins:
      - artifacts#v1.9.0:
          download: "develop/buildkite/*"
      - ecr#v2.7.0: {login: true}
      - docker-compose#v4.14.0:
          run: integration-test-cassandra-es8
          config: ./develop/buildkite/docker-compose.yml
          skip-checkout: true
          mount-buildkite-agent: true
          propagate-environment: true

  # TODO(rodrigozhou): olivere client is incompatible with OpenSearch PIT
  # - label: ":golang: functional test with cassandra (OpenSearch 2)"
  #   agents:
  #     queue: "default"
  #     docker: "*"
  #   command: "make functional-test-coverage"
  #   parallelism: 3
  #   artifact_paths:
  #     - ".testoutput/*"
  #   retry:
  #     automatic:
  #       limit: 1
  #   plugins:
  #     - artifacts#v1.9.0:
  #         download: "develop/buildkite/*"
  #     - ecr#v2.7.0: {login: true}
  #     - docker-compose#v4.14.0:
  #         run: integration-test-cassandra-opensearch
  #         config: ./develop/buildkite/docker-compose.yml
  #         skip-checkout: true
  #         mount-buildkite-agent: true
  #         propagate-environment: true

  - label: ":golang: functional xdc test with cassandra"
    agents:
      queue: "default"
      docker: "*"
    command: "make functional-test-xdc-coverage"
    artifact_paths:
      - ".testoutput/*"
    retry:
      automatic:
        limit: 1
    plugins:
      - artifacts#v1.9.0:
          download: "develop/buildkite/*"
      - ecr#v2.7.0: {login: true}
      - docker-compose#v4.14.0:
          run: integration-test-xdc-cassandra
          config: ./develop/buildkite/docker-compose.yml
          skip-checkout: true
          mount-buildkite-agent: true
          propagate-environment: true

  - label: ":golang: functional ndc test with cassandra"
    agents:
      queue: "default"
      docker: "*"
    command: "make functional-test-ndc-coverage"
    artifact_paths:
      - ".testoutput/*"
    retry:
      automatic:
        limit: 1
    plugins:
      - artifacts#v1.9.0:
          download: "develop/buildkite/*"
      - ecr#v2.7.0: {login: true}
      - docker-compose#v4.14.0:
          run: integration-test-xdc-cassandra
          config: ./develop/buildkite/docker-compose.yml
          skip-checkout: true
          mount-buildkite-agent: true
          propagate-environment: true

  - label: ":golang: functional test with mysql 8"
    agents:
      queue: "default"
      docker: "*"
    command: "make functional-test-coverage"
    parallelism: 3
    artifact_paths:
      - ".testoutput/*"
    retry:
      automatic:
        limit: 1
    plugins:
      - artifacts#v1.9.0:
          download: "develop/buildkite/*"
      - ecr#v2.7.0: {login: true}
      - docker-compose#v4.14.0:
          run: integration-test-mysql8
          config: ./develop/buildkite/docker-compose.yml
          skip-checkout: true
          mount-buildkite-agent: true
          propagate-environment: true

  - label: ":golang: functional xdc test with mysql 8"
    agents:
      queue: "default"
      docker: "*"
    command: "make functional-test-xdc-coverage"
    artifact_paths:
      - ".testoutput/*"
    retry:
      automatic:
        limit: 1
    plugins:
      - artifacts#v1.9.0:
          download: "develop/buildkite/*"
      - ecr#v2.7.0: {login: true}
      - docker-compose#v4.14.0:
          run: integration-test-xdc-mysql8
          config: ./develop/buildkite/docker-compose.yml
          skip-checkout: true
          mount-buildkite-agent: true
          propagate-environment: true

  - label: ":golang: functional ndc test with mysql 8"
    agents:
      queue: "default"
      docker: "*"
    command: "make functional-test-ndc-coverage"
    artifact_paths:
      - ".testoutput/*"
    retry:
      automatic:
        limit: 1
    plugins:
      - artifacts#v1.9.0:
          download: "develop/buildkite/*"
      - ecr#v2.7.0: {login: true}
      - docker-compose#v4.14.0:
          run: integration-test-xdc-mysql8
          config: ./develop/buildkite/docker-compose.yml
          skip-checkout: true
          mount-buildkite-agent: true
          propagate-environment: true

  - label: ":golang: functional test with postgresql 12"
    agents:
      queue: "default"
      docker: "*"
    command: "make functional-test-coverage"
    parallelism: 3
    artifact_paths:
      - ".testoutput/*"
    retry:
      automatic:
        limit: 1
    plugins:
      - artifacts#v1.9.0:
          download: "develop/buildkite/*"
      - ecr#v2.7.0: {login: true}
      - docker-compose#v4.14.0:
          run: integration-test-postgresql12
          config: ./develop/buildkite/docker-compose.yml
          skip-checkout: true
          mount-buildkite-agent: true
          propagate-environment: true

  - label: ":golang: functional xdc test with postgresql 12"
    agents:
      queue: "default"
      docker: "*"
    command: "make functional-test-xdc-coverage"
    artifact_paths:
      - ".testoutput/*"
    retry:
      automatic:
        limit: 1
    plugins:
      - artifacts#v1.9.0:
          download: "develop/buildkite/*"
      - ecr#v2.7.0: {login: true}
      - docker-compose#v4.14.0:
          run: integration-test-xdc-postgresql12
          config: ./develop/buildkite/docker-compose.yml
          skip-checkout: true
          mount-buildkite-agent: true
          propagate-environment: true

  - label: ":golang: functional ndc test with postgresql 12"
    agents:
      queue: "default"
      docker: "*"
    command: "make functional-test-ndc-coverage"
    artifact_paths:
      - ".testoutput/*"
    retry:
      automatic:
        limit: 1
    plugins:
      - artifacts#v1.9.0:
          download: "develop/buildkite/*"
      - ecr#v2.7.0: {login: true}
      - docker-compose#v4.14.0:
          run: integration-test-xdc-postgresql12
          config: ./develop/buildkite/docker-compose.yml
          skip-checkout: true
          mount-buildkite-agent: true
          propagate-environment: true

  - label: ":golang: functional test with postgresql 12 pgx"
    agents:
      queue: "default"
      docker: "*"
    command: "make functional-test-coverage"
    parallelism: 3
    artifact_paths:
      - ".testoutput/*"
    retry:
      automatic:
        limit: 1
    plugins:
      - artifacts#v1.9.0:
          download: "develop/buildkite/*"
      - ecr#v2.7.0: {login: true}
      - docker-compose#v4.14.0:
          run: integration-test-postgresql12-pgx
          config: ./develop/buildkite/docker-compose.yml
          skip-checkout: true
          mount-buildkite-agent: true
          propagate-environment: true

  - label: ":golang: functional xdc test with postgresql 12 pgx"
    agents:
      queue: "default"
      docker: "*"
    command: "make functional-test-xdc-coverage"
    artifact_paths:
      - ".testoutput/*"
    retry:
      automatic:
        limit: 1
    plugins:
      - artifacts#v1.9.0:
          download: "develop/buildkite/*"
      - ecr#v2.7.0: {login: true}
      - docker-compose#v4.14.0:
          run: integration-test-xdc-postgresql12-pgx
          config: ./develop/buildkite/docker-compose.yml
          skip-checkout: true
          mount-buildkite-agent: true
          propagate-environment: true

  - label: ":golang: functional ndc test with postgresql 12 pgx"
    agents:
      queue: "default"
      docker: "*"
    command: "make functional-test-ndc-coverage"
    artifact_paths:
      - ".testoutput/*"
    retry:
      automatic:
        limit: 1
    plugins:
      - artifacts#v1.9.0:
          download: "develop/buildkite/*"
      - ecr#v2.7.0: {login: true}
      - docker-compose#v4.14.0:
          run: integration-test-xdc-postgresql12-pgx
          config: ./develop/buildkite/docker-compose.yml
          skip-checkout: true
          mount-buildkite-agent: true
          propagate-environment: true

  - label: ":golang: functional test with sqlite"
    agents:
      queue: "default"
      docker: "*"
    command: "make functional-test-coverage"
    parallelism: 3
    artifact_paths:
      - ".testoutput/*"
    retry:
      automatic:
        limit: 1
    plugins:
      - artifacts#v1.9.0:
          download: "develop/buildkite/*"
      - ecr#v2.7.0: {login: true}
      - docker-compose#v4.14.0:
          run: integration-test-sqlite
          config: ./develop/buildkite/docker-compose.yml
          skip-checkout: true
          mount-buildkite-agent: true
          propagate-environment: true

  - wait: ~
    continue_on_failure: true  # required for test reports of failed build to be picked up

  - label: ":mag: test-report"
    agents:
      queue: "default"
      docker: "*"
    command: "buildkite-agent artifact download '.testoutput/*.junit.xml' ."
    retry:
      automatic:
        limit: 2
    plugins:
      - test-collector#v1.10.0:
          files: ".testoutput/*.junit.xml"
          format: junit

  - label: ":coverage: coverage-report"
    agents:
      queue: "default"
      docker: "*"
    command: "make ci-coverage-report"
    artifact_paths:
      - ".testoutput/summary.cover.out"
      - ".testoutput/summary.cover.out.html"
    retry:
      automatic:
        limit: 2
    plugins:
      - artifacts#v1.9.0:
          download:
            - "develop/buildkite/*"
            - ".testoutput/*.cover.out"
      - ecr#v2.7.0: {login: true}
      - docker-compose#v4.14.0:
          run: coverage-report
          config: ./develop/buildkite/docker-compose.yml
          skip-checkout: true
          mount-buildkite-agent: true
          propagate-environment: true
