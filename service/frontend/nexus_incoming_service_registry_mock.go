// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: nexus_incoming_service_registry.go

// Package frontend is a generated GoMock package.
package frontend

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	operatorservice "go.temporal.io/api/operatorservice/v1"
)

// MockNexusIncomingServiceRegistry is a mock of NexusIncomingServiceRegistry interface.
type MockNexusIncomingServiceRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockNexusIncomingServiceRegistryMockRecorder
}

// MockNexusIncomingServiceRegistryMockRecorder is the mock recorder for MockNexusIncomingServiceRegistry.
type MockNexusIncomingServiceRegistryMockRecorder struct {
	mock *MockNexusIncomingServiceRegistry
}

// NewMockNexusIncomingServiceRegistry creates a new mock instance.
func NewMockNexusIncomingServiceRegistry(ctrl *gomock.Controller) *MockNexusIncomingServiceRegistry {
	mock := &MockNexusIncomingServiceRegistry{ctrl: ctrl}
	mock.recorder = &MockNexusIncomingServiceRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNexusIncomingServiceRegistry) EXPECT() *MockNexusIncomingServiceRegistryMockRecorder {
	return m.recorder
}

// CreateOrUpdateNexusIncomingService mocks base method.
func (m *MockNexusIncomingServiceRegistry) CreateOrUpdateNexusIncomingService(arg0 context.Context, arg1 *operatorservice.CreateOrUpdateNexusIncomingServiceRequest) (*operatorservice.CreateOrUpdateNexusIncomingServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateNexusIncomingService", arg0, arg1)
	ret0, _ := ret[0].(*operatorservice.CreateOrUpdateNexusIncomingServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateNexusIncomingService indicates an expected call of CreateOrUpdateNexusIncomingService.
func (mr *MockNexusIncomingServiceRegistryMockRecorder) CreateOrUpdateNexusIncomingService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateNexusIncomingService", reflect.TypeOf((*MockNexusIncomingServiceRegistry)(nil).CreateOrUpdateNexusIncomingService), arg0, arg1)
}

// DeleteNexusIncomingService mocks base method.
func (m *MockNexusIncomingServiceRegistry) DeleteNexusIncomingService(arg0 context.Context, arg1 *operatorservice.DeleteNexusIncomingServiceRequest) (*operatorservice.DeleteNexusIncomingServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNexusIncomingService", arg0, arg1)
	ret0, _ := ret[0].(*operatorservice.DeleteNexusIncomingServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNexusIncomingService indicates an expected call of DeleteNexusIncomingService.
func (mr *MockNexusIncomingServiceRegistryMockRecorder) DeleteNexusIncomingService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNexusIncomingService", reflect.TypeOf((*MockNexusIncomingServiceRegistry)(nil).DeleteNexusIncomingService), arg0, arg1)
}

// GetNexusIncomingService mocks base method.
func (m *MockNexusIncomingServiceRegistry) GetNexusIncomingService(arg0 context.Context, arg1 *operatorservice.GetNexusIncomingServiceRequest) (*operatorservice.GetNexusIncomingServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNexusIncomingService", arg0, arg1)
	ret0, _ := ret[0].(*operatorservice.GetNexusIncomingServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNexusIncomingService indicates an expected call of GetNexusIncomingService.
func (mr *MockNexusIncomingServiceRegistryMockRecorder) GetNexusIncomingService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNexusIncomingService", reflect.TypeOf((*MockNexusIncomingServiceRegistry)(nil).GetNexusIncomingService), arg0, arg1)
}

// ListNexusIncomingServices mocks base method.
func (m *MockNexusIncomingServiceRegistry) ListNexusIncomingServices(arg0 context.Context, arg1 *operatorservice.ListNexusIncomingServicesRequest) (*operatorservice.ListNexusIncomingServicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNexusIncomingServices", arg0, arg1)
	ret0, _ := ret[0].(*operatorservice.ListNexusIncomingServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNexusIncomingServices indicates an expected call of ListNexusIncomingServices.
func (mr *MockNexusIncomingServiceRegistryMockRecorder) ListNexusIncomingServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNexusIncomingServices", reflect.TypeOf((*MockNexusIncomingServiceRegistry)(nil).ListNexusIncomingServices), arg0, arg1)
}

// Start mocks base method.
func (m *MockNexusIncomingServiceRegistry) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockNexusIncomingServiceRegistryMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNexusIncomingServiceRegistry)(nil).Start))
}

// Stop mocks base method.
func (m *MockNexusIncomingServiceRegistry) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockNexusIncomingServiceRegistryMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNexusIncomingServiceRegistry)(nil).Stop))
}
