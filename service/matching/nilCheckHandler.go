// Copyright (c) 2019 Temporal Technologies, Inc.

package matching

import (
	"context"

	"github.com/temporalio/temporal/.gen/proto/matchingservice"
)

// Disable lint due to missing comments.
// Code generated by generate-adapter. DO NOT EDIT.

var _ matchingservice.MatchingServiceServer = (*NilCheckHandler)(nil)

type (
	// NilCheckHandler - gRPC handler interface for matchingservice
	NilCheckHandler struct {
		parentHandler matchingservice.MatchingServiceServer
	}
)

// NewNilCheckHandler creates a gRPC handler for the temporal matchingservice
func NewNilCheckHandler(
	parentHandler matchingservice.MatchingServiceServer,
) *NilCheckHandler {
	handler := &NilCheckHandler{
		parentHandler: parentHandler,
	}

	return handler
}

func (h *NilCheckHandler) PollForDecisionTask(ctx context.Context, request *matchingservice.PollForDecisionTaskRequest) (*matchingservice.PollForDecisionTaskResponse, error) {
	resp, err := h.parentHandler.PollForDecisionTask(ctx, request)
	if resp == nil && err == nil {
		resp = &matchingservice.PollForDecisionTaskResponse{}
	}
	return resp, err
}

func (h *NilCheckHandler) PollForActivityTask(ctx context.Context, request *matchingservice.PollForActivityTaskRequest) (*matchingservice.PollForActivityTaskResponse, error) {
	resp, err := h.parentHandler.PollForActivityTask(ctx, request)
	if resp == nil && err == nil {
		resp = &matchingservice.PollForActivityTaskResponse{}
	}
	return resp, err
}

func (h *NilCheckHandler) AddDecisionTask(ctx context.Context, request *matchingservice.AddDecisionTaskRequest) (*matchingservice.AddDecisionTaskResponse, error) {
	resp, err := h.parentHandler.AddDecisionTask(ctx, request)
	if resp == nil && err == nil {
		resp = &matchingservice.AddDecisionTaskResponse{}
	}
	return resp, err
}

func (h *NilCheckHandler) AddActivityTask(ctx context.Context, request *matchingservice.AddActivityTaskRequest) (*matchingservice.AddActivityTaskResponse, error) {
	resp, err := h.parentHandler.AddActivityTask(ctx, request)
	if resp == nil && err == nil {
		resp = &matchingservice.AddActivityTaskResponse{}
	}
	return resp, err
}

func (h *NilCheckHandler) QueryWorkflow(ctx context.Context, request *matchingservice.QueryWorkflowRequest) (*matchingservice.QueryWorkflowResponse, error) {
	resp, err := h.parentHandler.QueryWorkflow(ctx, request)
	if resp == nil && err == nil {
		resp = &matchingservice.QueryWorkflowResponse{}
	}
	return resp, err
}

func (h *NilCheckHandler) RespondQueryTaskCompleted(ctx context.Context, request *matchingservice.RespondQueryTaskCompletedRequest) (*matchingservice.RespondQueryTaskCompletedResponse, error) {
	resp, err := h.parentHandler.RespondQueryTaskCompleted(ctx, request)
	if resp == nil && err == nil {
		resp = &matchingservice.RespondQueryTaskCompletedResponse{}
	}
	return resp, err
}

func (h *NilCheckHandler) CancelOutstandingPoll(ctx context.Context, request *matchingservice.CancelOutstandingPollRequest) (*matchingservice.CancelOutstandingPollResponse, error) {
	resp, err := h.parentHandler.CancelOutstandingPoll(ctx, request)
	if resp == nil && err == nil {
		resp = &matchingservice.CancelOutstandingPollResponse{}
	}
	return resp, err
}

func (h *NilCheckHandler) DescribeTaskList(ctx context.Context, request *matchingservice.DescribeTaskListRequest) (*matchingservice.DescribeTaskListResponse, error) {
	resp, err := h.parentHandler.DescribeTaskList(ctx, request)
	if resp == nil && err == nil {
		resp = &matchingservice.DescribeTaskListResponse{}
	}
	return resp, err
}

func (h *NilCheckHandler) ListTaskListPartitions(ctx context.Context, request *matchingservice.ListTaskListPartitionsRequest) (*matchingservice.ListTaskListPartitionsResponse, error) {
	resp, err := h.parentHandler.ListTaskListPartitions(ctx, request)
	if resp == nil && err == nil {
		resp = &matchingservice.ListTaskListPartitionsResponse{}
	}
	return resp, err
}
