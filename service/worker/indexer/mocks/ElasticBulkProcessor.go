package mocks

import (
	context "context"

	elastic "github.com/olivere/elastic"
	mock "github.com/stretchr/testify/mock"
)

// ElasticBulkProcessor is an autogenerated mock type for the ElasticBulkProcessor type
type ElasticBulkProcessor struct {
	mock.Mock
}

// Add provides a mock function with given fields: request
func (_m *ElasticBulkProcessor) Add(request elastic.BulkableRequest) {
	_m.Called(request)
}

// Close provides a mock function with given fields:
func (_m *ElasticBulkProcessor) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Flush provides a mock function with given fields:
func (_m *ElasticBulkProcessor) Flush() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: ctx
func (_m *ElasticBulkProcessor) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stats provides a mock function with given fields:
func (_m *ElasticBulkProcessor) Stats() elastic.BulkProcessorStats {
	ret := _m.Called()

	var r0 elastic.BulkProcessorStats
	if rf, ok := ret.Get(0).(func() elastic.BulkProcessorStats); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(elastic.BulkProcessorStats)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *ElasticBulkProcessor) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
