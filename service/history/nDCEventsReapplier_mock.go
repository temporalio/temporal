// Code generated by MockGen. DO NOT EDIT.
// Source: nDCEventsReapplier.go

// Package history is a generated GoMock package.
package history

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	event "go.temporal.io/temporal-proto/event"
)

// MocknDCEventsReapplier is a mock of nDCEventsReapplier interface.
type MocknDCEventsReapplier struct {
	ctrl     *gomock.Controller
	recorder *MocknDCEventsReapplierMockRecorder
}

// MocknDCEventsReapplierMockRecorder is the mock recorder for MocknDCEventsReapplier.
type MocknDCEventsReapplierMockRecorder struct {
	mock *MocknDCEventsReapplier
}

// NewMocknDCEventsReapplier creates a new mock instance.
func NewMocknDCEventsReapplier(ctrl *gomock.Controller) *MocknDCEventsReapplier {
	mock := &MocknDCEventsReapplier{ctrl: ctrl}
	mock.recorder = &MocknDCEventsReapplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknDCEventsReapplier) EXPECT() *MocknDCEventsReapplierMockRecorder {
	return m.recorder
}

// reapplyEvents mocks base method.
func (m *MocknDCEventsReapplier) reapplyEvents(ctx context.Context, msBuilder mutableState, historyEvents []*event.HistoryEvent, runID string) ([]*event.HistoryEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "reapplyEvents", ctx, msBuilder, historyEvents, runID)
	ret0, _ := ret[0].([]*event.HistoryEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// reapplyEvents indicates an expected call of reapplyEvents.
func (mr *MocknDCEventsReapplierMockRecorder) reapplyEvents(ctx, msBuilder, historyEvents, runID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "reapplyEvents", reflect.TypeOf((*MocknDCEventsReapplier)(nil).reapplyEvents), ctx, msBuilder, historyEvents, runID)
}
