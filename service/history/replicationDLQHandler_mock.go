// Code generated by MockGen. DO NOT EDIT.
// Source: replicationDLQHandler.go

// Package history is a generated GoMock package.
package history

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	replication "github.com/temporalio/temporal/.gen/proto/replication"
)

// MockreplicationDLQHandler is a mock of replicationDLQHandler interface.
type MockreplicationDLQHandler struct {
	ctrl     *gomock.Controller
	recorder *MockreplicationDLQHandlerMockRecorder
}

// MockreplicationDLQHandlerMockRecorder is the mock recorder for MockreplicationDLQHandler.
type MockreplicationDLQHandlerMockRecorder struct {
	mock *MockreplicationDLQHandler
}

// NewMockreplicationDLQHandler creates a new mock instance.
func NewMockreplicationDLQHandler(ctrl *gomock.Controller) *MockreplicationDLQHandler {
	mock := &MockreplicationDLQHandler{ctrl: ctrl}
	mock.recorder = &MockreplicationDLQHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockreplicationDLQHandler) EXPECT() *MockreplicationDLQHandlerMockRecorder {
	return m.recorder
}

// readMessages mocks base method.
func (m *MockreplicationDLQHandler) readMessages(ctx context.Context, sourceCluster string, lastMessageID int64, pageSize int, pageToken []byte) ([]*replication.ReplicationTask, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "readMessages", ctx, sourceCluster, lastMessageID, pageSize, pageToken)
	ret0, _ := ret[0].([]*replication.ReplicationTask)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// readMessages indicates an expected call of readMessages.
func (mr *MockreplicationDLQHandlerMockRecorder) readMessages(ctx, sourceCluster, lastMessageID, pageSize, pageToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "readMessages", reflect.TypeOf((*MockreplicationDLQHandler)(nil).readMessages), ctx, sourceCluster, lastMessageID, pageSize, pageToken)
}

// purgeMessages mocks base method.
func (m *MockreplicationDLQHandler) purgeMessages(sourceCluster string, lastMessageID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "purgeMessages", sourceCluster, lastMessageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// purgeMessages indicates an expected call of purgeMessages.
func (mr *MockreplicationDLQHandlerMockRecorder) purgeMessages(sourceCluster, lastMessageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "purgeMessages", reflect.TypeOf((*MockreplicationDLQHandler)(nil).purgeMessages), sourceCluster, lastMessageID)
}

// mergeMessages mocks base method.
func (m *MockreplicationDLQHandler) mergeMessages(ctx context.Context, sourceCluster string, lastMessageID int64, pageSize int, pageToken []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "mergeMessages", ctx, sourceCluster, lastMessageID, pageSize, pageToken)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// mergeMessages indicates an expected call of mergeMessages.
func (mr *MockreplicationDLQHandlerMockRecorder) mergeMessages(ctx, sourceCluster, lastMessageID, pageSize, pageToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mergeMessages", reflect.TypeOf((*MockreplicationDLQHandler)(nil).mergeMessages), ctx, sourceCluster, lastMessageID, pageSize, pageToken)
}
