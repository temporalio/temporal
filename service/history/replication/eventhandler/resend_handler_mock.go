// Code generated by MockGen. DO NOT EDIT.
// Source: resend_handler.go
//
// Generated by this command:
//
//	mockgen -package eventhandler -source resend_handler.go -destination resend_handler_mock.go
//

// Package eventhandler is a generated GoMock package.
package eventhandler

import (
	context "context"
	reflect "reflect"

	namespace "go.temporal.io/server/common/namespace"
	gomock "go.uber.org/mock/gomock"
)

// MockResendHandler is a mock of ResendHandler interface.
type MockResendHandler struct {
	ctrl     *gomock.Controller
	recorder *MockResendHandlerMockRecorder
	isgomock struct{}
}

// MockResendHandlerMockRecorder is the mock recorder for MockResendHandler.
type MockResendHandlerMockRecorder struct {
	mock *MockResendHandler
}

// NewMockResendHandler creates a new mock instance.
func NewMockResendHandler(ctrl *gomock.Controller) *MockResendHandler {
	mock := &MockResendHandler{ctrl: ctrl}
	mock.recorder = &MockResendHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResendHandler) EXPECT() *MockResendHandlerMockRecorder {
	return m.recorder
}

// ResendHistoryEvents mocks base method.
func (m *MockResendHandler) ResendHistoryEvents(ctx context.Context, remoteClusterName string, namespaceID namespace.ID, workflowID, runID string, startEventID, startEventVersion, endEventID, endEventVersion int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendHistoryEvents", ctx, remoteClusterName, namespaceID, workflowID, runID, startEventID, startEventVersion, endEventID, endEventVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResendHistoryEvents indicates an expected call of ResendHistoryEvents.
func (mr *MockResendHandlerMockRecorder) ResendHistoryEvents(ctx, remoteClusterName, namespaceID, workflowID, runID, startEventID, startEventVersion, endEventID, endEventVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendHistoryEvents", reflect.TypeOf((*MockResendHandler)(nil).ResendHistoryEvents), ctx, remoteClusterName, namespaceID, workflowID, runID, startEventID, startEventVersion, endEventID, endEventVersion)
}
