// Code generated by MockGen. DO NOT EDIT.
// Source: event_importer.go
//
// Generated by this command:
//
//	mockgen -package eventhandler -source event_importer.go -destination event_importer_mock.go
//

// Package eventhandler is a generated GoMock package.
package eventhandler

import (
	context "context"
	reflect "reflect"

	definition "go.temporal.io/server/common/definition"
	gomock "go.uber.org/mock/gomock"
)

// MockEventImporter is a mock of EventImporter interface.
type MockEventImporter struct {
	ctrl     *gomock.Controller
	recorder *MockEventImporterMockRecorder
	isgomock struct{}
}

// MockEventImporterMockRecorder is the mock recorder for MockEventImporter.
type MockEventImporterMockRecorder struct {
	mock *MockEventImporter
}

// NewMockEventImporter creates a new mock instance.
func NewMockEventImporter(ctrl *gomock.Controller) *MockEventImporter {
	mock := &MockEventImporter{ctrl: ctrl}
	mock.recorder = &MockEventImporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventImporter) EXPECT() *MockEventImporterMockRecorder {
	return m.recorder
}

// ImportHistoryEventsFromBeginning mocks base method.
func (m *MockEventImporter) ImportHistoryEventsFromBeginning(ctx context.Context, remoteCluster string, workflowKey definition.WorkflowKey, endEventId, endEventVersion int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportHistoryEventsFromBeginning", ctx, remoteCluster, workflowKey, endEventId, endEventVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportHistoryEventsFromBeginning indicates an expected call of ImportHistoryEventsFromBeginning.
func (mr *MockEventImporterMockRecorder) ImportHistoryEventsFromBeginning(ctx, remoteCluster, workflowKey, endEventId, endEventVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportHistoryEventsFromBeginning", reflect.TypeOf((*MockEventImporter)(nil).ImportHistoryEventsFromBeginning), ctx, remoteCluster, workflowKey, endEventId, endEventVersion)
}
