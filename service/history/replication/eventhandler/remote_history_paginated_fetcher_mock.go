// Code generated by MockGen. DO NOT EDIT.
// Source: remote_history_paginated_fetcher.go
//
// Generated by this command:
//
//	mockgen -package eventhandler -source remote_history_paginated_fetcher.go -destination remote_history_paginated_fetcher_mock.go
//

// Package eventhandler is a generated GoMock package.
package eventhandler

import (
	context "context"
	reflect "reflect"

	collection "go.temporal.io/server/common/collection"
	namespace "go.temporal.io/server/common/namespace"
	gomock "go.uber.org/mock/gomock"
)

// MockHistoryPaginatedFetcher is a mock of HistoryPaginatedFetcher interface.
type MockHistoryPaginatedFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryPaginatedFetcherMockRecorder
	isgomock struct{}
}

// MockHistoryPaginatedFetcherMockRecorder is the mock recorder for MockHistoryPaginatedFetcher.
type MockHistoryPaginatedFetcherMockRecorder struct {
	mock *MockHistoryPaginatedFetcher
}

// NewMockHistoryPaginatedFetcher creates a new mock instance.
func NewMockHistoryPaginatedFetcher(ctrl *gomock.Controller) *MockHistoryPaginatedFetcher {
	mock := &MockHistoryPaginatedFetcher{ctrl: ctrl}
	mock.recorder = &MockHistoryPaginatedFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryPaginatedFetcher) EXPECT() *MockHistoryPaginatedFetcherMockRecorder {
	return m.recorder
}

// GetSingleWorkflowHistoryPaginatedIteratorExclusive mocks base method.
func (m *MockHistoryPaginatedFetcher) GetSingleWorkflowHistoryPaginatedIteratorExclusive(ctx context.Context, remoteClusterName string, namespaceID namespace.ID, workflowID, runID string, startEventID, startEventVersion, endEventID, endEventVersion int64) collection.Iterator[*HistoryBatch] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleWorkflowHistoryPaginatedIteratorExclusive", ctx, remoteClusterName, namespaceID, workflowID, runID, startEventID, startEventVersion, endEventID, endEventVersion)
	ret0, _ := ret[0].(collection.Iterator[*HistoryBatch])
	return ret0
}

// GetSingleWorkflowHistoryPaginatedIteratorExclusive indicates an expected call of GetSingleWorkflowHistoryPaginatedIteratorExclusive.
func (mr *MockHistoryPaginatedFetcherMockRecorder) GetSingleWorkflowHistoryPaginatedIteratorExclusive(ctx, remoteClusterName, namespaceID, workflowID, runID, startEventID, startEventVersion, endEventID, endEventVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleWorkflowHistoryPaginatedIteratorExclusive", reflect.TypeOf((*MockHistoryPaginatedFetcher)(nil).GetSingleWorkflowHistoryPaginatedIteratorExclusive), ctx, remoteClusterName, namespaceID, workflowID, runID, startEventID, startEventVersion, endEventID, endEventVersion)
}

// GetSingleWorkflowHistoryPaginatedIteratorInclusive mocks base method.
func (m *MockHistoryPaginatedFetcher) GetSingleWorkflowHistoryPaginatedIteratorInclusive(ctx context.Context, remoteClusterName string, namespaceID namespace.ID, workflowID, runID string, startEventID, startEventVersion, endEventID, endEventVersion int64) collection.Iterator[*HistoryBatch] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleWorkflowHistoryPaginatedIteratorInclusive", ctx, remoteClusterName, namespaceID, workflowID, runID, startEventID, startEventVersion, endEventID, endEventVersion)
	ret0, _ := ret[0].(collection.Iterator[*HistoryBatch])
	return ret0
}

// GetSingleWorkflowHistoryPaginatedIteratorInclusive indicates an expected call of GetSingleWorkflowHistoryPaginatedIteratorInclusive.
func (mr *MockHistoryPaginatedFetcherMockRecorder) GetSingleWorkflowHistoryPaginatedIteratorInclusive(ctx, remoteClusterName, namespaceID, workflowID, runID, startEventID, startEventVersion, endEventID, endEventVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleWorkflowHistoryPaginatedIteratorInclusive", reflect.TypeOf((*MockHistoryPaginatedFetcher)(nil).GetSingleWorkflowHistoryPaginatedIteratorInclusive), ctx, remoteClusterName, namespaceID, workflowID, runID, startEventID, startEventVersion, endEventID, endEventVersion)
}
