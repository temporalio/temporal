// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: future_events_handler.go

// Package eventhandler is a generated GoMock package.
package eventhandler

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	history "go.temporal.io/api/history/v1"
	history0 "go.temporal.io/server/api/history/v1"
	workflow "go.temporal.io/server/api/workflow/v1"
	definition "go.temporal.io/server/common/definition"
)

// MockFutureEventsHandler is a mock of FutureEventsHandler interface.
type MockFutureEventsHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFutureEventsHandlerMockRecorder
}

// MockFutureEventsHandlerMockRecorder is the mock recorder for MockFutureEventsHandler.
type MockFutureEventsHandlerMockRecorder struct {
	mock *MockFutureEventsHandler
}

// NewMockFutureEventsHandler creates a new mock instance.
func NewMockFutureEventsHandler(ctrl *gomock.Controller) *MockFutureEventsHandler {
	mock := &MockFutureEventsHandler{ctrl: ctrl}
	mock.recorder = &MockFutureEventsHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFutureEventsHandler) EXPECT() *MockFutureEventsHandlerMockRecorder {
	return m.recorder
}

// HandleFutureEvents mocks base method.
func (m *MockFutureEventsHandler) HandleFutureEvents(ctx context.Context, workflowKey definition.WorkflowKey, baseExecutionInfo *workflow.BaseExecutionInfo, versionHistoryItems []*history0.VersionHistoryItem, historyEvents [][]*history.HistoryEvent, newEvents []*history.HistoryEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleFutureEvents", ctx, workflowKey, baseExecutionInfo, versionHistoryItems, historyEvents, newEvents)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleFutureEvents indicates an expected call of HandleFutureEvents.
func (mr *MockFutureEventsHandlerMockRecorder) HandleFutureEvents(ctx, workflowKey, baseExecutionInfo, versionHistoryItems, historyEvents, newEvents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleFutureEvents", reflect.TypeOf((*MockFutureEventsHandler)(nil).HandleFutureEvents), ctx, workflowKey, baseExecutionInfo, versionHistoryItems, historyEvents, newEvents)
}
