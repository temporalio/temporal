// Code generated by MockGen. DO NOT EDIT.
// Source: stream_receiver.go
//
// Generated by this command:
//
//	mockgen -package replication -source stream_receiver.go -destination stream_receiver_mock.go
//

// Package replication is a generated GoMock package.
package replication

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStreamReceiver is a mock of StreamReceiver interface.
type MockStreamReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockStreamReceiverMockRecorder
	isgomock struct{}
}

// MockStreamReceiverMockRecorder is the mock recorder for MockStreamReceiver.
type MockStreamReceiverMockRecorder struct {
	mock *MockStreamReceiver
}

// NewMockStreamReceiver creates a new mock instance.
func NewMockStreamReceiver(ctrl *gomock.Controller) *MockStreamReceiver {
	mock := &MockStreamReceiver{ctrl: ctrl}
	mock.recorder = &MockStreamReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamReceiver) EXPECT() *MockStreamReceiverMockRecorder {
	return m.recorder
}

// IsValid mocks base method.
func (m *MockStreamReceiver) IsValid() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValid")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValid indicates an expected call of IsValid.
func (mr *MockStreamReceiverMockRecorder) IsValid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValid", reflect.TypeOf((*MockStreamReceiver)(nil).IsValid))
}

// Key mocks base method.
func (m *MockStreamReceiver) Key() ClusterShardKeyPair {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(ClusterShardKeyPair)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockStreamReceiverMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockStreamReceiver)(nil).Key))
}

// Stop mocks base method.
func (m *MockStreamReceiver) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockStreamReceiverMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStreamReceiver)(nil).Stop))
}
