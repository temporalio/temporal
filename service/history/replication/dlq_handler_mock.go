// Code generated by MockGen. DO NOT EDIT.
// Source: dlq_handler.go
//
// Generated by this command:
//
//	mockgen -package replication -source dlq_handler.go -destination dlq_handler_mock.go
//

// Package replication is a generated GoMock package.
package replication

import (
	context "context"
	reflect "reflect"

	repication "go.temporal.io/server/api/replication/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockDLQHandler is a mock of DLQHandler interface.
type MockDLQHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDLQHandlerMockRecorder
	isgomock struct{}
}

// MockDLQHandlerMockRecorder is the mock recorder for MockDLQHandler.
type MockDLQHandlerMockRecorder struct {
	mock *MockDLQHandler
}

// NewMockDLQHandler creates a new mock instance.
func NewMockDLQHandler(ctrl *gomock.Controller) *MockDLQHandler {
	mock := &MockDLQHandler{ctrl: ctrl}
	mock.recorder = &MockDLQHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDLQHandler) EXPECT() *MockDLQHandlerMockRecorder {
	return m.recorder
}

// GetMessages mocks base method.
func (m *MockDLQHandler) GetMessages(ctx context.Context, sourceCluster string, lastMessageID int64, pageSize int, pageToken []byte) ([]*repication.ReplicationTask, []*repication.ReplicationTaskInfo, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", ctx, sourceCluster, lastMessageID, pageSize, pageToken)
	ret0, _ := ret[0].([]*repication.ReplicationTask)
	ret1, _ := ret[1].([]*repication.ReplicationTaskInfo)
	ret2, _ := ret[2].([]byte)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockDLQHandlerMockRecorder) GetMessages(ctx, sourceCluster, lastMessageID, pageSize, pageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockDLQHandler)(nil).GetMessages), ctx, sourceCluster, lastMessageID, pageSize, pageToken)
}

// MergeMessages mocks base method.
func (m *MockDLQHandler) MergeMessages(ctx context.Context, sourceCluster string, lastMessageID int64, pageSize int, pageToken []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeMessages", ctx, sourceCluster, lastMessageID, pageSize, pageToken)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeMessages indicates an expected call of MergeMessages.
func (mr *MockDLQHandlerMockRecorder) MergeMessages(ctx, sourceCluster, lastMessageID, pageSize, pageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeMessages", reflect.TypeOf((*MockDLQHandler)(nil).MergeMessages), ctx, sourceCluster, lastMessageID, pageSize, pageToken)
}

// PurgeMessages mocks base method.
func (m *MockDLQHandler) PurgeMessages(ctx context.Context, sourceCluster string, lastMessageID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeMessages", ctx, sourceCluster, lastMessageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeMessages indicates an expected call of PurgeMessages.
func (mr *MockDLQHandlerMockRecorder) PurgeMessages(ctx, sourceCluster, lastMessageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeMessages", reflect.TypeOf((*MockDLQHandler)(nil).PurgeMessages), ctx, sourceCluster, lastMessageID)
}
