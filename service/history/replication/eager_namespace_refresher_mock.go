// Code generated by MockGen. DO NOT EDIT.
// Source: eager_namespace_refresher.go
//
// Generated by this command:
//
//	mockgen -package replication -source eager_namespace_refresher.go -destination eager_namespace_refresher_mock.go
//

// Package replication is a generated GoMock package.
package replication

import (
	context "context"
	reflect "reflect"

	namespace "go.temporal.io/server/common/namespace"
	gomock "go.uber.org/mock/gomock"
)

// MockEagerNamespaceRefresher is a mock of EagerNamespaceRefresher interface.
type MockEagerNamespaceRefresher struct {
	ctrl     *gomock.Controller
	recorder *MockEagerNamespaceRefresherMockRecorder
	isgomock struct{}
}

// MockEagerNamespaceRefresherMockRecorder is the mock recorder for MockEagerNamespaceRefresher.
type MockEagerNamespaceRefresherMockRecorder struct {
	mock *MockEagerNamespaceRefresher
}

// NewMockEagerNamespaceRefresher creates a new mock instance.
func NewMockEagerNamespaceRefresher(ctrl *gomock.Controller) *MockEagerNamespaceRefresher {
	mock := &MockEagerNamespaceRefresher{ctrl: ctrl}
	mock.recorder = &MockEagerNamespaceRefresherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEagerNamespaceRefresher) EXPECT() *MockEagerNamespaceRefresherMockRecorder {
	return m.recorder
}

// SyncNamespaceFromSourceCluster mocks base method.
func (m *MockEagerNamespaceRefresher) SyncNamespaceFromSourceCluster(ctx context.Context, namespaceId namespace.ID, sourceCluster string) (*namespace.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncNamespaceFromSourceCluster", ctx, namespaceId, sourceCluster)
	ret0, _ := ret[0].(*namespace.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncNamespaceFromSourceCluster indicates an expected call of SyncNamespaceFromSourceCluster.
func (mr *MockEagerNamespaceRefresherMockRecorder) SyncNamespaceFromSourceCluster(ctx, namespaceId, sourceCluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncNamespaceFromSourceCluster", reflect.TypeOf((*MockEagerNamespaceRefresher)(nil).SyncNamespaceFromSourceCluster), ctx, namespaceId, sourceCluster)
}
