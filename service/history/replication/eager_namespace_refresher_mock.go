// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: eager_namespace_refresher.go
//
// Generated by this command:
//
//	mockgen -copyright_file ../../../LICENSE -package replication -source eager_namespace_refresher.go -destination eager_namespace_refresher_mock.go
//

// Package replication is a generated GoMock package.
package replication

import (
	context "context"
	reflect "reflect"

	namespace "go.temporal.io/server/common/namespace"
	gomock "go.uber.org/mock/gomock"
)

// MockEagerNamespaceRefresher is a mock of EagerNamespaceRefresher interface.
type MockEagerNamespaceRefresher struct {
	ctrl     *gomock.Controller
	recorder *MockEagerNamespaceRefresherMockRecorder
}

// MockEagerNamespaceRefresherMockRecorder is the mock recorder for MockEagerNamespaceRefresher.
type MockEagerNamespaceRefresherMockRecorder struct {
	mock *MockEagerNamespaceRefresher
}

// NewMockEagerNamespaceRefresher creates a new mock instance.
func NewMockEagerNamespaceRefresher(ctrl *gomock.Controller) *MockEagerNamespaceRefresher {
	mock := &MockEagerNamespaceRefresher{ctrl: ctrl}
	mock.recorder = &MockEagerNamespaceRefresherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEagerNamespaceRefresher) EXPECT() *MockEagerNamespaceRefresherMockRecorder {
	return m.recorder
}

// SyncNamespaceFromSourceCluster mocks base method.
func (m *MockEagerNamespaceRefresher) SyncNamespaceFromSourceCluster(ctx context.Context, namespaceId namespace.ID, sourceCluster string) (*namespace.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncNamespaceFromSourceCluster", ctx, namespaceId, sourceCluster)
	ret0, _ := ret[0].(*namespace.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncNamespaceFromSourceCluster indicates an expected call of SyncNamespaceFromSourceCluster.
func (mr *MockEagerNamespaceRefresherMockRecorder) SyncNamespaceFromSourceCluster(ctx, namespaceId, sourceCluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncNamespaceFromSourceCluster", reflect.TypeOf((*MockEagerNamespaceRefresher)(nil).SyncNamespaceFromSourceCluster), ctx, namespaceId, sourceCluster)
}

// UpdateNamespaceFailoverVersion mocks base method.
func (m *MockEagerNamespaceRefresher) UpdateNamespaceFailoverVersion(namespaceId namespace.ID, targetFailoverVersion int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNamespaceFailoverVersion", namespaceId, targetFailoverVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNamespaceFailoverVersion indicates an expected call of UpdateNamespaceFailoverVersion.
func (mr *MockEagerNamespaceRefresherMockRecorder) UpdateNamespaceFailoverVersion(namespaceId, targetFailoverVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNamespaceFailoverVersion", reflect.TypeOf((*MockEagerNamespaceRefresher)(nil).UpdateNamespaceFailoverVersion), namespaceId, targetFailoverVersion)
}
