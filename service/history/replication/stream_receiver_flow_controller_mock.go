// Code generated by MockGen. DO NOT EDIT.
// Source: stream_receiver_flow_controller.go
//
// Generated by this command:
//
//	mockgen -package replication -source stream_receiver_flow_controller.go -destination stream_receiver_flow_controller_mock.go
//

// Package replication is a generated GoMock package.
package replication

import (
	reflect "reflect"

	enums "go.temporal.io/server/api/enums/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockReceiverFlowController is a mock of ReceiverFlowController interface.
type MockReceiverFlowController struct {
	ctrl     *gomock.Controller
	recorder *MockReceiverFlowControllerMockRecorder
	isgomock struct{}
}

// MockReceiverFlowControllerMockRecorder is the mock recorder for MockReceiverFlowController.
type MockReceiverFlowControllerMockRecorder struct {
	mock *MockReceiverFlowController
}

// NewMockReceiverFlowController creates a new mock instance.
func NewMockReceiverFlowController(ctrl *gomock.Controller) *MockReceiverFlowController {
	mock := &MockReceiverFlowController{ctrl: ctrl}
	mock.recorder = &MockReceiverFlowControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiverFlowController) EXPECT() *MockReceiverFlowControllerMockRecorder {
	return m.recorder
}

// GetFlowControlInfo mocks base method.
func (m *MockReceiverFlowController) GetFlowControlInfo(priority enums.TaskPriority) enums.ReplicationFlowControlCommand {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlowControlInfo", priority)
	ret0, _ := ret[0].(enums.ReplicationFlowControlCommand)
	return ret0
}

// GetFlowControlInfo indicates an expected call of GetFlowControlInfo.
func (mr *MockReceiverFlowControllerMockRecorder) GetFlowControlInfo(priority any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlowControlInfo", reflect.TypeOf((*MockReceiverFlowController)(nil).GetFlowControlInfo), priority)
}
