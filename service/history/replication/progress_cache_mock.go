// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: progress_cache.go
//
// Generated by this command:
//
//	mockgen -copyright_file ../../../LICENSE -package replication -source progress_cache.go -destination progress_cache_mock.go
//

// Package replication is a generated GoMock package.
package replication

import (
	reflect "reflect"

	history "go.temporal.io/server/api/history/v1"
	persistence "go.temporal.io/server/api/persistence/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockProgressCache is a mock of ProgressCache interface.
type MockProgressCache struct {
	ctrl     *gomock.Controller
	recorder *MockProgressCacheMockRecorder
}

// MockProgressCacheMockRecorder is the mock recorder for MockProgressCache.
type MockProgressCacheMockRecorder struct {
	mock *MockProgressCache
}

// NewMockProgressCache creates a new mock instance.
func NewMockProgressCache(ctrl *gomock.Controller) *MockProgressCache {
	mock := &MockProgressCache{ctrl: ctrl}
	mock.recorder = &MockProgressCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgressCache) EXPECT() *MockProgressCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockProgressCache) Get(runID string, targetClusterID int32) *ReplicationProgress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", runID, targetClusterID)
	ret0, _ := ret[0].(*ReplicationProgress)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockProgressCacheMockRecorder) Get(runID, targetClusterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProgressCache)(nil).Get), runID, targetClusterID)
}

// Update mocks base method.
func (m *MockProgressCache) Update(runID string, targetClusterID int32, versionedTransitions []*persistence.VersionedTransition, eventVersionHistoryItems []*history.VersionHistoryItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", runID, targetClusterID, versionedTransitions, eventVersionHistoryItems)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockProgressCacheMockRecorder) Update(runID, targetClusterID, versionedTransitions, eventVersionHistoryItems any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProgressCache)(nil).Update), runID, targetClusterID, versionedTransitions, eventVersionHistoryItems)
}
