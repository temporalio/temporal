// Code generated by MockGen. DO NOT EDIT.
// Source: stream_sender_flow_controller.go
//
// Generated by this command:
//
//	mockgen -package replication -source stream_sender_flow_controller.go -destination stream_sender_flow_controller_mock.go
//

// Package replication is a generated GoMock package.
package replication

import (
	context "context"
	reflect "reflect"

	enums "go.temporal.io/server/api/enums/v1"
	repication "go.temporal.io/server/api/replication/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockSenderFlowController is a mock of SenderFlowController interface.
type MockSenderFlowController struct {
	ctrl     *gomock.Controller
	recorder *MockSenderFlowControllerMockRecorder
	isgomock struct{}
}

// MockSenderFlowControllerMockRecorder is the mock recorder for MockSenderFlowController.
type MockSenderFlowControllerMockRecorder struct {
	mock *MockSenderFlowController
}

// NewMockSenderFlowController creates a new mock instance.
func NewMockSenderFlowController(ctrl *gomock.Controller) *MockSenderFlowController {
	mock := &MockSenderFlowController{ctrl: ctrl}
	mock.recorder = &MockSenderFlowControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSenderFlowController) EXPECT() *MockSenderFlowControllerMockRecorder {
	return m.recorder
}

// RefreshReceiverFlowControlInfo mocks base method.
func (m *MockSenderFlowController) RefreshReceiverFlowControlInfo(syncState *repication.SyncReplicationState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshReceiverFlowControlInfo", syncState)
}

// RefreshReceiverFlowControlInfo indicates an expected call of RefreshReceiverFlowControlInfo.
func (mr *MockSenderFlowControllerMockRecorder) RefreshReceiverFlowControlInfo(syncState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshReceiverFlowControlInfo", reflect.TypeOf((*MockSenderFlowController)(nil).RefreshReceiverFlowControlInfo), syncState)
}

// Wait mocks base method.
func (m *MockSenderFlowController) Wait(ctx context.Context, priority enums.TaskPriority) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", ctx, priority)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockSenderFlowControllerMockRecorder) Wait(ctx, priority any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockSenderFlowController)(nil).Wait), ctx, priority)
}
