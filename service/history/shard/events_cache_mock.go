// Code generated by MockGen. DO NOT EDIT.
// Source: service/history/shard/cache.go

// Package shard is a generated GoMock package.
package shard

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "go.temporal.io/api/history/v1"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// DeleteEvent mocks base method.
func (m *MockCache) DeleteEvent(shardContext Context, key EventKey) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteEvent", shardContext, key)
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockCacheMockRecorder) DeleteEvent(shardContext, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockCache)(nil).DeleteEvent), shardContext, key)
}

// GetEvent mocks base method.
func (m *MockCache) GetEvent(ctx context.Context, shardContext Context, key EventKey, firstEventID int64, branchToken []byte) (*v1.HistoryEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", ctx, shardContext, key, firstEventID, branchToken)
	ret0, _ := ret[0].(*v1.HistoryEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockCacheMockRecorder) GetEvent(ctx, shardContext, key, firstEventID, branchToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockCache)(nil).GetEvent), ctx, shardContext, key, firstEventID, branchToken)
}

// PutEvent mocks base method.
func (m *MockCache) PutEvent(shardContext Context, key EventKey, event *v1.HistoryEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutEvent", shardContext, key, event)
}

// PutEvent indicates an expected call of PutEvent.
func (mr *MockCacheMockRecorder) PutEvent(shardContext, key, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutEvent", reflect.TypeOf((*MockCache)(nil).PutEvent), shardContext, key, event)
}
