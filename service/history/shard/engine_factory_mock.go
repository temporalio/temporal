// Code generated by MockGen. DO NOT EDIT.
// Source: engine_factory.go
//
// Generated by this command:
//
//	mockgen -package shard -source engine_factory.go -destination engine_factory_mock.go
//

// Package shard is a generated GoMock package.
package shard

import (
	reflect "reflect"

	interfaces "go.temporal.io/server/service/history/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockEngineFactory is a mock of EngineFactory interface.
type MockEngineFactory struct {
	ctrl     *gomock.Controller
	recorder *MockEngineFactoryMockRecorder
	isgomock struct{}
}

// MockEngineFactoryMockRecorder is the mock recorder for MockEngineFactory.
type MockEngineFactoryMockRecorder struct {
	mock *MockEngineFactory
}

// NewMockEngineFactory creates a new mock instance.
func NewMockEngineFactory(ctrl *gomock.Controller) *MockEngineFactory {
	mock := &MockEngineFactory{ctrl: ctrl}
	mock.recorder = &MockEngineFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngineFactory) EXPECT() *MockEngineFactoryMockRecorder {
	return m.recorder
}

// CreateEngine mocks base method.
func (m *MockEngineFactory) CreateEngine(context interfaces.ShardContext) interfaces.Engine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEngine", context)
	ret0, _ := ret[0].(interfaces.Engine)
	return ret0
}

// CreateEngine indicates an expected call of CreateEngine.
func (mr *MockEngineFactoryMockRecorder) CreateEngine(context any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEngine", reflect.TypeOf((*MockEngineFactory)(nil).CreateEngine), context)
}
