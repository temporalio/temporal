// Code generated by MockGen. DO NOT EDIT.
// Source: delete_manager.go
//
// Generated by this command:
//
//	mockgen -package deletemanager -source delete_manager.go -destination delete_manager_mock.go
//

// Package deletemanager is a generated GoMock package.
package deletemanager

import (
	context "context"
	reflect "reflect"

	common "go.temporal.io/api/common/v1"
	namespace "go.temporal.io/server/common/namespace"
	interfaces "go.temporal.io/server/service/history/interfaces"
	tasks "go.temporal.io/server/service/history/tasks"
	gomock "go.uber.org/mock/gomock"
)

// MockDeleteManager is a mock of DeleteManager interface.
type MockDeleteManager struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteManagerMockRecorder
	isgomock struct{}
}

// MockDeleteManagerMockRecorder is the mock recorder for MockDeleteManager.
type MockDeleteManagerMockRecorder struct {
	mock *MockDeleteManager
}

// NewMockDeleteManager creates a new mock instance.
func NewMockDeleteManager(ctrl *gomock.Controller) *MockDeleteManager {
	mock := &MockDeleteManager{ctrl: ctrl}
	mock.recorder = &MockDeleteManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteManager) EXPECT() *MockDeleteManagerMockRecorder {
	return m.recorder
}

// AddDeleteWorkflowExecutionTask mocks base method.
func (m *MockDeleteManager) AddDeleteWorkflowExecutionTask(ctx context.Context, nsID namespace.ID, we *common.WorkflowExecution, ms interfaces.MutableState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDeleteWorkflowExecutionTask", ctx, nsID, we, ms)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDeleteWorkflowExecutionTask indicates an expected call of AddDeleteWorkflowExecutionTask.
func (mr *MockDeleteManagerMockRecorder) AddDeleteWorkflowExecutionTask(ctx, nsID, we, ms any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDeleteWorkflowExecutionTask", reflect.TypeOf((*MockDeleteManager)(nil).AddDeleteWorkflowExecutionTask), ctx, nsID, we, ms)
}

// DeleteWorkflowExecution mocks base method.
func (m *MockDeleteManager) DeleteWorkflowExecution(ctx context.Context, nsID namespace.ID, we *common.WorkflowExecution, weCtx interfaces.WorkflowContext, ms interfaces.MutableState, stage *tasks.DeleteWorkflowExecutionStage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflowExecution", ctx, nsID, we, weCtx, ms, stage)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkflowExecution indicates an expected call of DeleteWorkflowExecution.
func (mr *MockDeleteManagerMockRecorder) DeleteWorkflowExecution(ctx, nsID, we, weCtx, ms, stage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowExecution", reflect.TypeOf((*MockDeleteManager)(nil).DeleteWorkflowExecution), ctx, nsID, we, weCtx, ms, stage)
}

// DeleteWorkflowExecutionByRetention mocks base method.
func (m *MockDeleteManager) DeleteWorkflowExecutionByRetention(ctx context.Context, nsID namespace.ID, we *common.WorkflowExecution, weCtx interfaces.WorkflowContext, ms interfaces.MutableState, stage *tasks.DeleteWorkflowExecutionStage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflowExecutionByRetention", ctx, nsID, we, weCtx, ms, stage)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkflowExecutionByRetention indicates an expected call of DeleteWorkflowExecutionByRetention.
func (mr *MockDeleteManagerMockRecorder) DeleteWorkflowExecutionByRetention(ctx, nsID, we, weCtx, ms, stage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowExecutionByRetention", reflect.TypeOf((*MockDeleteManager)(nil).DeleteWorkflowExecutionByRetention), ctx, nsID, we, weCtx, ms, stage)
}
