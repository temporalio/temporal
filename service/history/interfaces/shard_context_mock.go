// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: shard_context.go
//
// Generated by this command:
//
//	mockgen -copyright_file ../../../LICENSE -package interfaces -source shard_context.go -destination shard_context_mock.go
//

// Package interfaces is a generated GoMock package.
package interfaces

import (
	context "context"
	reflect "reflect"
	time "time"

	common "go.temporal.io/api/common/v1"
	adminservice "go.temporal.io/server/api/adminservice/v1"
	clock "go.temporal.io/server/api/clock/v1"
	historyservice "go.temporal.io/server/api/historyservice/v1"
	persistence "go.temporal.io/server/api/persistence/v1"
	chasm "go.temporal.io/server/chasm"
	archiver "go.temporal.io/server/common/archiver"
	clock0 "go.temporal.io/server/common/clock"
	cluster "go.temporal.io/server/common/cluster"
	definition "go.temporal.io/server/common/definition"
	finalizer "go.temporal.io/server/common/finalizer"
	locks "go.temporal.io/server/common/locks"
	log "go.temporal.io/server/common/log"
	metrics "go.temporal.io/server/common/metrics"
	namespace "go.temporal.io/server/common/namespace"
	persistence0 "go.temporal.io/server/common/persistence"
	serialization "go.temporal.io/server/common/persistence/serialization"
	pingable "go.temporal.io/server/common/pingable"
	searchattribute "go.temporal.io/server/common/searchattribute"
	configs "go.temporal.io/server/service/history/configs"
	events "go.temporal.io/server/service/history/events"
	hsm "go.temporal.io/server/service/history/hsm"
	tasks "go.temporal.io/server/service/history/tasks"
	gomock "go.uber.org/mock/gomock"
)

// MockShardContext is a mock of ShardContext interface.
type MockShardContext struct {
	ctrl     *gomock.Controller
	recorder *MockShardContextMockRecorder
	isgomock struct{}
}

// MockShardContextMockRecorder is the mock recorder for MockShardContext.
type MockShardContextMockRecorder struct {
	mock *MockShardContext
}

// NewMockShardContext creates a new mock instance.
func NewMockShardContext(ctrl *gomock.Controller) *MockShardContext {
	mock := &MockShardContext{ctrl: ctrl}
	mock.recorder = &MockShardContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardContext) EXPECT() *MockShardContextMockRecorder {
	return m.recorder
}

// AddSpeculativeWorkflowTaskTimeoutTask mocks base method.
func (m *MockShardContext) AddSpeculativeWorkflowTaskTimeoutTask(task *tasks.WorkflowTaskTimeoutTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpeculativeWorkflowTaskTimeoutTask", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSpeculativeWorkflowTaskTimeoutTask indicates an expected call of AddSpeculativeWorkflowTaskTimeoutTask.
func (mr *MockShardContextMockRecorder) AddSpeculativeWorkflowTaskTimeoutTask(task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpeculativeWorkflowTaskTimeoutTask", reflect.TypeOf((*MockShardContext)(nil).AddSpeculativeWorkflowTaskTimeoutTask), task)
}

// AddTasks mocks base method.
func (m *MockShardContext) AddTasks(ctx context.Context, request *persistence0.AddHistoryTasksRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTasks", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTasks indicates an expected call of AddTasks.
func (mr *MockShardContextMockRecorder) AddTasks(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTasks", reflect.TypeOf((*MockShardContext)(nil).AddTasks), ctx, request)
}

// AppendHistoryEvents mocks base method.
func (m *MockShardContext) AppendHistoryEvents(ctx context.Context, request *persistence0.AppendHistoryNodesRequest, namespaceID namespace.ID, execution *common.WorkflowExecution) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendHistoryEvents", ctx, request, namespaceID, execution)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendHistoryEvents indicates an expected call of AppendHistoryEvents.
func (mr *MockShardContextMockRecorder) AppendHistoryEvents(ctx, request, namespaceID, execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendHistoryEvents", reflect.TypeOf((*MockShardContext)(nil).AppendHistoryEvents), ctx, request, namespaceID, execution)
}

// AssertOwnership mocks base method.
func (m *MockShardContext) AssertOwnership(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssertOwnership", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssertOwnership indicates an expected call of AssertOwnership.
func (mr *MockShardContextMockRecorder) AssertOwnership(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssertOwnership", reflect.TypeOf((*MockShardContext)(nil).AssertOwnership), ctx)
}

// ChasmRegistry mocks base method.
func (m *MockShardContext) ChasmRegistry() *chasm.Registry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChasmRegistry")
	ret0, _ := ret[0].(*chasm.Registry)
	return ret0
}

// ChasmRegistry indicates an expected call of ChasmRegistry.
func (mr *MockShardContextMockRecorder) ChasmRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChasmRegistry", reflect.TypeOf((*MockShardContext)(nil).ChasmRegistry))
}

// ConflictResolveWorkflowExecution mocks base method.
func (m *MockShardContext) ConflictResolveWorkflowExecution(ctx context.Context, request *persistence0.ConflictResolveWorkflowExecutionRequest) (*persistence0.ConflictResolveWorkflowExecutionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConflictResolveWorkflowExecution", ctx, request)
	ret0, _ := ret[0].(*persistence0.ConflictResolveWorkflowExecutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConflictResolveWorkflowExecution indicates an expected call of ConflictResolveWorkflowExecution.
func (mr *MockShardContextMockRecorder) ConflictResolveWorkflowExecution(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConflictResolveWorkflowExecution", reflect.TypeOf((*MockShardContext)(nil).ConflictResolveWorkflowExecution), ctx, request)
}

// CreateWorkflowExecution mocks base method.
func (m *MockShardContext) CreateWorkflowExecution(ctx context.Context, request *persistence0.CreateWorkflowExecutionRequest) (*persistence0.CreateWorkflowExecutionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowExecution", ctx, request)
	ret0, _ := ret[0].(*persistence0.CreateWorkflowExecutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowExecution indicates an expected call of CreateWorkflowExecution.
func (mr *MockShardContextMockRecorder) CreateWorkflowExecution(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowExecution", reflect.TypeOf((*MockShardContext)(nil).CreateWorkflowExecution), ctx, request)
}

// CurrentVectorClock mocks base method.
func (m *MockShardContext) CurrentVectorClock() *clock.VectorClock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentVectorClock")
	ret0, _ := ret[0].(*clock.VectorClock)
	return ret0
}

// CurrentVectorClock indicates an expected call of CurrentVectorClock.
func (mr *MockShardContextMockRecorder) CurrentVectorClock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentVectorClock", reflect.TypeOf((*MockShardContext)(nil).CurrentVectorClock))
}

// DeleteWorkflowExecution mocks base method.
func (m *MockShardContext) DeleteWorkflowExecution(ctx context.Context, workflowKey definition.WorkflowKey, branchToken []byte, closeExecutionVisibilityTaskID int64, workflowCloseTime time.Time, stage *tasks.DeleteWorkflowExecutionStage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflowExecution", ctx, workflowKey, branchToken, closeExecutionVisibilityTaskID, workflowCloseTime, stage)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkflowExecution indicates an expected call of DeleteWorkflowExecution.
func (mr *MockShardContextMockRecorder) DeleteWorkflowExecution(ctx, workflowKey, branchToken, closeExecutionVisibilityTaskID, workflowCloseTime, stage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowExecution", reflect.TypeOf((*MockShardContext)(nil).DeleteWorkflowExecution), ctx, workflowKey, branchToken, closeExecutionVisibilityTaskID, workflowCloseTime, stage)
}

// GenerateTaskID mocks base method.
func (m *MockShardContext) GenerateTaskID() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTaskID")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTaskID indicates an expected call of GenerateTaskID.
func (mr *MockShardContextMockRecorder) GenerateTaskID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTaskID", reflect.TypeOf((*MockShardContext)(nil).GenerateTaskID))
}

// GenerateTaskIDs mocks base method.
func (m *MockShardContext) GenerateTaskIDs(number int) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTaskIDs", number)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTaskIDs indicates an expected call of GenerateTaskIDs.
func (mr *MockShardContextMockRecorder) GenerateTaskIDs(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTaskIDs", reflect.TypeOf((*MockShardContext)(nil).GenerateTaskIDs), number)
}

// GetArchivalMetadata mocks base method.
func (m *MockShardContext) GetArchivalMetadata() archiver.ArchivalMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchivalMetadata")
	ret0, _ := ret[0].(archiver.ArchivalMetadata)
	return ret0
}

// GetArchivalMetadata indicates an expected call of GetArchivalMetadata.
func (mr *MockShardContextMockRecorder) GetArchivalMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchivalMetadata", reflect.TypeOf((*MockShardContext)(nil).GetArchivalMetadata))
}

// GetCachedWorkflowContext mocks base method.
func (m *MockShardContext) GetCachedWorkflowContext(ctx context.Context, namespaceID namespace.ID, execution *common.WorkflowExecution, lockPriority locks.Priority) (WorkflowContext, ReleaseWorkflowContextFunc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedWorkflowContext", ctx, namespaceID, execution, lockPriority)
	ret0, _ := ret[0].(WorkflowContext)
	ret1, _ := ret[1].(ReleaseWorkflowContextFunc)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCachedWorkflowContext indicates an expected call of GetCachedWorkflowContext.
func (mr *MockShardContextMockRecorder) GetCachedWorkflowContext(ctx, namespaceID, execution, lockPriority any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedWorkflowContext", reflect.TypeOf((*MockShardContext)(nil).GetCachedWorkflowContext), ctx, namespaceID, execution, lockPriority)
}

// GetClusterMetadata mocks base method.
func (m *MockShardContext) GetClusterMetadata() cluster.Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMetadata")
	ret0, _ := ret[0].(cluster.Metadata)
	return ret0
}

// GetClusterMetadata indicates an expected call of GetClusterMetadata.
func (mr *MockShardContextMockRecorder) GetClusterMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMetadata", reflect.TypeOf((*MockShardContext)(nil).GetClusterMetadata))
}

// GetConfig mocks base method.
func (m *MockShardContext) GetConfig() *configs.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(*configs.Config)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockShardContextMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockShardContext)(nil).GetConfig))
}

// GetCurrentCachedWorkflowContext mocks base method.
func (m *MockShardContext) GetCurrentCachedWorkflowContext(ctx context.Context, namespaceID namespace.ID, workflowID string, lockPriority locks.Priority) (ReleaseWorkflowContextFunc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentCachedWorkflowContext", ctx, namespaceID, workflowID, lockPriority)
	ret0, _ := ret[0].(ReleaseWorkflowContextFunc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentCachedWorkflowContext indicates an expected call of GetCurrentCachedWorkflowContext.
func (mr *MockShardContextMockRecorder) GetCurrentCachedWorkflowContext(ctx, namespaceID, workflowID, lockPriority any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentCachedWorkflowContext", reflect.TypeOf((*MockShardContext)(nil).GetCurrentCachedWorkflowContext), ctx, namespaceID, workflowID, lockPriority)
}

// GetCurrentExecution mocks base method.
func (m *MockShardContext) GetCurrentExecution(ctx context.Context, request *persistence0.GetCurrentExecutionRequest) (*persistence0.GetCurrentExecutionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentExecution", ctx, request)
	ret0, _ := ret[0].(*persistence0.GetCurrentExecutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentExecution indicates an expected call of GetCurrentExecution.
func (mr *MockShardContextMockRecorder) GetCurrentExecution(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentExecution", reflect.TypeOf((*MockShardContext)(nil).GetCurrentExecution), ctx, request)
}

// GetCurrentTime mocks base method.
func (m *MockShardContext) GetCurrentTime(cluster string) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentTime", cluster)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetCurrentTime indicates an expected call of GetCurrentTime.
func (mr *MockShardContextMockRecorder) GetCurrentTime(cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentTime", reflect.TypeOf((*MockShardContext)(nil).GetCurrentTime), cluster)
}

// GetEngine mocks base method.
func (m *MockShardContext) GetEngine(ctx context.Context) (Engine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEngine", ctx)
	ret0, _ := ret[0].(Engine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEngine indicates an expected call of GetEngine.
func (mr *MockShardContextMockRecorder) GetEngine(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEngine", reflect.TypeOf((*MockShardContext)(nil).GetEngine), ctx)
}

// GetEventsCache mocks base method.
func (m *MockShardContext) GetEventsCache() events.Cache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsCache")
	ret0, _ := ret[0].(events.Cache)
	return ret0
}

// GetEventsCache indicates an expected call of GetEventsCache.
func (mr *MockShardContextMockRecorder) GetEventsCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsCache", reflect.TypeOf((*MockShardContext)(nil).GetEventsCache))
}

// GetExecutionManager mocks base method.
func (m *MockShardContext) GetExecutionManager() persistence0.ExecutionManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionManager")
	ret0, _ := ret[0].(persistence0.ExecutionManager)
	return ret0
}

// GetExecutionManager indicates an expected call of GetExecutionManager.
func (mr *MockShardContextMockRecorder) GetExecutionManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionManager", reflect.TypeOf((*MockShardContext)(nil).GetExecutionManager))
}

// GetFinalizer mocks base method.
func (m *MockShardContext) GetFinalizer() *finalizer.Finalizer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinalizer")
	ret0, _ := ret[0].(*finalizer.Finalizer)
	return ret0
}

// GetFinalizer indicates an expected call of GetFinalizer.
func (mr *MockShardContextMockRecorder) GetFinalizer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinalizer", reflect.TypeOf((*MockShardContext)(nil).GetFinalizer))
}

// GetHistoryClient mocks base method.
func (m *MockShardContext) GetHistoryClient() historyservice.HistoryServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryClient")
	ret0, _ := ret[0].(historyservice.HistoryServiceClient)
	return ret0
}

// GetHistoryClient indicates an expected call of GetHistoryClient.
func (mr *MockShardContextMockRecorder) GetHistoryClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryClient", reflect.TypeOf((*MockShardContext)(nil).GetHistoryClient))
}

// GetHistoryTasks mocks base method.
func (m *MockShardContext) GetHistoryTasks(ctx context.Context, request *persistence0.GetHistoryTasksRequest) (*persistence0.GetHistoryTasksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryTasks", ctx, request)
	ret0, _ := ret[0].(*persistence0.GetHistoryTasksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryTasks indicates an expected call of GetHistoryTasks.
func (mr *MockShardContextMockRecorder) GetHistoryTasks(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryTasks", reflect.TypeOf((*MockShardContext)(nil).GetHistoryTasks), ctx, request)
}

// GetLogger mocks base method.
func (m *MockShardContext) GetLogger() log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockShardContextMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockShardContext)(nil).GetLogger))
}

// GetMetricsHandler mocks base method.
func (m *MockShardContext) GetMetricsHandler() metrics.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsHandler")
	ret0, _ := ret[0].(metrics.Handler)
	return ret0
}

// GetMetricsHandler indicates an expected call of GetMetricsHandler.
func (mr *MockShardContextMockRecorder) GetMetricsHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsHandler", reflect.TypeOf((*MockShardContext)(nil).GetMetricsHandler))
}

// GetNamespaceRegistry mocks base method.
func (m *MockShardContext) GetNamespaceRegistry() namespace.Registry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceRegistry")
	ret0, _ := ret[0].(namespace.Registry)
	return ret0
}

// GetNamespaceRegistry indicates an expected call of GetNamespaceRegistry.
func (mr *MockShardContextMockRecorder) GetNamespaceRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceRegistry", reflect.TypeOf((*MockShardContext)(nil).GetNamespaceRegistry))
}

// GetOwner mocks base method.
func (m *MockShardContext) GetOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOwner indicates an expected call of GetOwner.
func (mr *MockShardContextMockRecorder) GetOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwner", reflect.TypeOf((*MockShardContext)(nil).GetOwner))
}

// GetPayloadSerializer mocks base method.
func (m *MockShardContext) GetPayloadSerializer() serialization.Serializer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayloadSerializer")
	ret0, _ := ret[0].(serialization.Serializer)
	return ret0
}

// GetPayloadSerializer indicates an expected call of GetPayloadSerializer.
func (mr *MockShardContextMockRecorder) GetPayloadSerializer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayloadSerializer", reflect.TypeOf((*MockShardContext)(nil).GetPayloadSerializer))
}

// GetQueueExclusiveHighReadWatermark mocks base method.
func (m *MockShardContext) GetQueueExclusiveHighReadWatermark(category tasks.Category) tasks.Key {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueExclusiveHighReadWatermark", category)
	ret0, _ := ret[0].(tasks.Key)
	return ret0
}

// GetQueueExclusiveHighReadWatermark indicates an expected call of GetQueueExclusiveHighReadWatermark.
func (mr *MockShardContextMockRecorder) GetQueueExclusiveHighReadWatermark(category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueExclusiveHighReadWatermark", reflect.TypeOf((*MockShardContext)(nil).GetQueueExclusiveHighReadWatermark), category)
}

// GetQueueState mocks base method.
func (m *MockShardContext) GetQueueState(category tasks.Category) (*persistence.QueueState, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueState", category)
	ret0, _ := ret[0].(*persistence.QueueState)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetQueueState indicates an expected call of GetQueueState.
func (mr *MockShardContextMockRecorder) GetQueueState(category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueState", reflect.TypeOf((*MockShardContext)(nil).GetQueueState), category)
}

// GetRangeID mocks base method.
func (m *MockShardContext) GetRangeID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRangeID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetRangeID indicates an expected call of GetRangeID.
func (mr *MockShardContextMockRecorder) GetRangeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRangeID", reflect.TypeOf((*MockShardContext)(nil).GetRangeID))
}

// GetRemoteAdminClient mocks base method.
func (m *MockShardContext) GetRemoteAdminClient(arg0 string) (adminservice.AdminServiceClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteAdminClient", arg0)
	ret0, _ := ret[0].(adminservice.AdminServiceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteAdminClient indicates an expected call of GetRemoteAdminClient.
func (mr *MockShardContextMockRecorder) GetRemoteAdminClient(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteAdminClient", reflect.TypeOf((*MockShardContext)(nil).GetRemoteAdminClient), arg0)
}

// GetReplicationStatus mocks base method.
func (m *MockShardContext) GetReplicationStatus(cluster []string) (map[string]*historyservice.ShardReplicationStatusPerCluster, map[string]*historyservice.HandoverNamespaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationStatus", cluster)
	ret0, _ := ret[0].(map[string]*historyservice.ShardReplicationStatusPerCluster)
	ret1, _ := ret[1].(map[string]*historyservice.HandoverNamespaceInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReplicationStatus indicates an expected call of GetReplicationStatus.
func (mr *MockShardContextMockRecorder) GetReplicationStatus(cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationStatus", reflect.TypeOf((*MockShardContext)(nil).GetReplicationStatus), cluster)
}

// GetReplicatorDLQAckLevel mocks base method.
func (m *MockShardContext) GetReplicatorDLQAckLevel(sourceCluster string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicatorDLQAckLevel", sourceCluster)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetReplicatorDLQAckLevel indicates an expected call of GetReplicatorDLQAckLevel.
func (mr *MockShardContextMockRecorder) GetReplicatorDLQAckLevel(sourceCluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicatorDLQAckLevel", reflect.TypeOf((*MockShardContext)(nil).GetReplicatorDLQAckLevel), sourceCluster)
}

// GetSearchAttributesMapperProvider mocks base method.
func (m *MockShardContext) GetSearchAttributesMapperProvider() searchattribute.MapperProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchAttributesMapperProvider")
	ret0, _ := ret[0].(searchattribute.MapperProvider)
	return ret0
}

// GetSearchAttributesMapperProvider indicates an expected call of GetSearchAttributesMapperProvider.
func (mr *MockShardContextMockRecorder) GetSearchAttributesMapperProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchAttributesMapperProvider", reflect.TypeOf((*MockShardContext)(nil).GetSearchAttributesMapperProvider))
}

// GetSearchAttributesProvider mocks base method.
func (m *MockShardContext) GetSearchAttributesProvider() searchattribute.Provider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchAttributesProvider")
	ret0, _ := ret[0].(searchattribute.Provider)
	return ret0
}

// GetSearchAttributesProvider indicates an expected call of GetSearchAttributesProvider.
func (mr *MockShardContextMockRecorder) GetSearchAttributesProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchAttributesProvider", reflect.TypeOf((*MockShardContext)(nil).GetSearchAttributesProvider))
}

// GetShardID mocks base method.
func (m *MockShardContext) GetShardID() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShardID")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetShardID indicates an expected call of GetShardID.
func (mr *MockShardContextMockRecorder) GetShardID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShardID", reflect.TypeOf((*MockShardContext)(nil).GetShardID))
}

// GetThrottledLogger mocks base method.
func (m *MockShardContext) GetThrottledLogger() log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThrottledLogger")
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// GetThrottledLogger indicates an expected call of GetThrottledLogger.
func (mr *MockShardContextMockRecorder) GetThrottledLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThrottledLogger", reflect.TypeOf((*MockShardContext)(nil).GetThrottledLogger))
}

// GetTimeSource mocks base method.
func (m *MockShardContext) GetTimeSource() clock0.TimeSource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeSource")
	ret0, _ := ret[0].(clock0.TimeSource)
	return ret0
}

// GetTimeSource indicates an expected call of GetTimeSource.
func (mr *MockShardContextMockRecorder) GetTimeSource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeSource", reflect.TypeOf((*MockShardContext)(nil).GetTimeSource))
}

// GetWorkflowExecution mocks base method.
func (m *MockShardContext) GetWorkflowExecution(ctx context.Context, request *persistence0.GetWorkflowExecutionRequest) (*persistence0.GetWorkflowExecutionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowExecution", ctx, request)
	ret0, _ := ret[0].(*persistence0.GetWorkflowExecutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowExecution indicates an expected call of GetWorkflowExecution.
func (mr *MockShardContextMockRecorder) GetWorkflowExecution(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowExecution", reflect.TypeOf((*MockShardContext)(nil).GetWorkflowExecution), ctx, request)
}

// NewVectorClock mocks base method.
func (m *MockShardContext) NewVectorClock() (*clock.VectorClock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewVectorClock")
	ret0, _ := ret[0].(*clock.VectorClock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewVectorClock indicates an expected call of NewVectorClock.
func (mr *MockShardContextMockRecorder) NewVectorClock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewVectorClock", reflect.TypeOf((*MockShardContext)(nil).NewVectorClock))
}

// SetCurrentTime mocks base method.
func (m *MockShardContext) SetCurrentTime(cluster string, currentTime time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrentTime", cluster, currentTime)
}

// SetCurrentTime indicates an expected call of SetCurrentTime.
func (mr *MockShardContextMockRecorder) SetCurrentTime(cluster, currentTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentTime", reflect.TypeOf((*MockShardContext)(nil).SetCurrentTime), cluster, currentTime)
}

// SetQueueState mocks base method.
func (m *MockShardContext) SetQueueState(category tasks.Category, tasksCompleted int, state *persistence.QueueState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetQueueState", category, tasksCompleted, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetQueueState indicates an expected call of SetQueueState.
func (mr *MockShardContextMockRecorder) SetQueueState(category, tasksCompleted, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQueueState", reflect.TypeOf((*MockShardContext)(nil).SetQueueState), category, tasksCompleted, state)
}

// SetWorkflowExecution mocks base method.
func (m *MockShardContext) SetWorkflowExecution(ctx context.Context, request *persistence0.SetWorkflowExecutionRequest) (*persistence0.SetWorkflowExecutionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWorkflowExecution", ctx, request)
	ret0, _ := ret[0].(*persistence0.SetWorkflowExecutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetWorkflowExecution indicates an expected call of SetWorkflowExecution.
func (mr *MockShardContextMockRecorder) SetWorkflowExecution(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWorkflowExecution", reflect.TypeOf((*MockShardContext)(nil).SetWorkflowExecution), ctx, request)
}

// StateMachineRegistry mocks base method.
func (m *MockShardContext) StateMachineRegistry() *hsm.Registry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateMachineRegistry")
	ret0, _ := ret[0].(*hsm.Registry)
	return ret0
}

// StateMachineRegistry indicates an expected call of StateMachineRegistry.
func (mr *MockShardContextMockRecorder) StateMachineRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateMachineRegistry", reflect.TypeOf((*MockShardContext)(nil).StateMachineRegistry))
}

// UnloadForOwnershipLost mocks base method.
func (m *MockShardContext) UnloadForOwnershipLost() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnloadForOwnershipLost")
}

// UnloadForOwnershipLost indicates an expected call of UnloadForOwnershipLost.
func (mr *MockShardContextMockRecorder) UnloadForOwnershipLost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnloadForOwnershipLost", reflect.TypeOf((*MockShardContext)(nil).UnloadForOwnershipLost))
}

// UpdateHandoverNamespace mocks base method.
func (m *MockShardContext) UpdateHandoverNamespace(ns *namespace.Namespace, deletedFromDb bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateHandoverNamespace", ns, deletedFromDb)
}

// UpdateHandoverNamespace indicates an expected call of UpdateHandoverNamespace.
func (mr *MockShardContextMockRecorder) UpdateHandoverNamespace(ns, deletedFromDb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHandoverNamespace", reflect.TypeOf((*MockShardContext)(nil).UpdateHandoverNamespace), ns, deletedFromDb)
}

// UpdateRemoteClusterInfo mocks base method.
func (m *MockShardContext) UpdateRemoteClusterInfo(cluster string, ackTaskID int64, ackTimestamp time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateRemoteClusterInfo", cluster, ackTaskID, ackTimestamp)
}

// UpdateRemoteClusterInfo indicates an expected call of UpdateRemoteClusterInfo.
func (mr *MockShardContextMockRecorder) UpdateRemoteClusterInfo(cluster, ackTaskID, ackTimestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemoteClusterInfo", reflect.TypeOf((*MockShardContext)(nil).UpdateRemoteClusterInfo), cluster, ackTaskID, ackTimestamp)
}

// UpdateRemoteReaderInfo mocks base method.
func (m *MockShardContext) UpdateRemoteReaderInfo(readerID, ackTaskID int64, ackTimestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRemoteReaderInfo", readerID, ackTaskID, ackTimestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRemoteReaderInfo indicates an expected call of UpdateRemoteReaderInfo.
func (mr *MockShardContextMockRecorder) UpdateRemoteReaderInfo(readerID, ackTaskID, ackTimestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemoteReaderInfo", reflect.TypeOf((*MockShardContext)(nil).UpdateRemoteReaderInfo), readerID, ackTaskID, ackTimestamp)
}

// UpdateReplicationQueueReaderState mocks base method.
func (m *MockShardContext) UpdateReplicationQueueReaderState(readerID int64, readerState *persistence.QueueReaderState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationQueueReaderState", readerID, readerState)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReplicationQueueReaderState indicates an expected call of UpdateReplicationQueueReaderState.
func (mr *MockShardContextMockRecorder) UpdateReplicationQueueReaderState(readerID, readerState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationQueueReaderState", reflect.TypeOf((*MockShardContext)(nil).UpdateReplicationQueueReaderState), readerID, readerState)
}

// UpdateReplicatorDLQAckLevel mocks base method.
func (m *MockShardContext) UpdateReplicatorDLQAckLevel(sourCluster string, ackLevel int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicatorDLQAckLevel", sourCluster, ackLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReplicatorDLQAckLevel indicates an expected call of UpdateReplicatorDLQAckLevel.
func (mr *MockShardContextMockRecorder) UpdateReplicatorDLQAckLevel(sourCluster, ackLevel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicatorDLQAckLevel", reflect.TypeOf((*MockShardContext)(nil).UpdateReplicatorDLQAckLevel), sourCluster, ackLevel)
}

// UpdateWorkflowExecution mocks base method.
func (m *MockShardContext) UpdateWorkflowExecution(ctx context.Context, request *persistence0.UpdateWorkflowExecutionRequest) (*persistence0.UpdateWorkflowExecutionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowExecution", ctx, request)
	ret0, _ := ret[0].(*persistence0.UpdateWorkflowExecutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkflowExecution indicates an expected call of UpdateWorkflowExecution.
func (mr *MockShardContextMockRecorder) UpdateWorkflowExecution(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowExecution", reflect.TypeOf((*MockShardContext)(nil).UpdateWorkflowExecution), ctx, request)
}

// MockControllableContext is a mock of ControllableContext interface.
type MockControllableContext struct {
	ctrl     *gomock.Controller
	recorder *MockControllableContextMockRecorder
	isgomock struct{}
}

// MockControllableContextMockRecorder is the mock recorder for MockControllableContext.
type MockControllableContextMockRecorder struct {
	mock *MockControllableContext
}

// NewMockControllableContext creates a new mock instance.
func NewMockControllableContext(ctrl *gomock.Controller) *MockControllableContext {
	mock := &MockControllableContext{ctrl: ctrl}
	mock.recorder = &MockControllableContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllableContext) EXPECT() *MockControllableContextMockRecorder {
	return m.recorder
}

// AddSpeculativeWorkflowTaskTimeoutTask mocks base method.
func (m *MockControllableContext) AddSpeculativeWorkflowTaskTimeoutTask(task *tasks.WorkflowTaskTimeoutTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpeculativeWorkflowTaskTimeoutTask", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSpeculativeWorkflowTaskTimeoutTask indicates an expected call of AddSpeculativeWorkflowTaskTimeoutTask.
func (mr *MockControllableContextMockRecorder) AddSpeculativeWorkflowTaskTimeoutTask(task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpeculativeWorkflowTaskTimeoutTask", reflect.TypeOf((*MockControllableContext)(nil).AddSpeculativeWorkflowTaskTimeoutTask), task)
}

// AddTasks mocks base method.
func (m *MockControllableContext) AddTasks(ctx context.Context, request *persistence0.AddHistoryTasksRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTasks", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTasks indicates an expected call of AddTasks.
func (mr *MockControllableContextMockRecorder) AddTasks(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTasks", reflect.TypeOf((*MockControllableContext)(nil).AddTasks), ctx, request)
}

// AppendHistoryEvents mocks base method.
func (m *MockControllableContext) AppendHistoryEvents(ctx context.Context, request *persistence0.AppendHistoryNodesRequest, namespaceID namespace.ID, execution *common.WorkflowExecution) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendHistoryEvents", ctx, request, namespaceID, execution)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendHistoryEvents indicates an expected call of AppendHistoryEvents.
func (mr *MockControllableContextMockRecorder) AppendHistoryEvents(ctx, request, namespaceID, execution any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendHistoryEvents", reflect.TypeOf((*MockControllableContext)(nil).AppendHistoryEvents), ctx, request, namespaceID, execution)
}

// AssertOwnership mocks base method.
func (m *MockControllableContext) AssertOwnership(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssertOwnership", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssertOwnership indicates an expected call of AssertOwnership.
func (mr *MockControllableContextMockRecorder) AssertOwnership(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssertOwnership", reflect.TypeOf((*MockControllableContext)(nil).AssertOwnership), ctx)
}

// ChasmRegistry mocks base method.
func (m *MockControllableContext) ChasmRegistry() *chasm.Registry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChasmRegistry")
	ret0, _ := ret[0].(*chasm.Registry)
	return ret0
}

// ChasmRegistry indicates an expected call of ChasmRegistry.
func (mr *MockControllableContextMockRecorder) ChasmRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChasmRegistry", reflect.TypeOf((*MockControllableContext)(nil).ChasmRegistry))
}

// ConflictResolveWorkflowExecution mocks base method.
func (m *MockControllableContext) ConflictResolveWorkflowExecution(ctx context.Context, request *persistence0.ConflictResolveWorkflowExecutionRequest) (*persistence0.ConflictResolveWorkflowExecutionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConflictResolveWorkflowExecution", ctx, request)
	ret0, _ := ret[0].(*persistence0.ConflictResolveWorkflowExecutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConflictResolveWorkflowExecution indicates an expected call of ConflictResolveWorkflowExecution.
func (mr *MockControllableContextMockRecorder) ConflictResolveWorkflowExecution(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConflictResolveWorkflowExecution", reflect.TypeOf((*MockControllableContext)(nil).ConflictResolveWorkflowExecution), ctx, request)
}

// CreateWorkflowExecution mocks base method.
func (m *MockControllableContext) CreateWorkflowExecution(ctx context.Context, request *persistence0.CreateWorkflowExecutionRequest) (*persistence0.CreateWorkflowExecutionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowExecution", ctx, request)
	ret0, _ := ret[0].(*persistence0.CreateWorkflowExecutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkflowExecution indicates an expected call of CreateWorkflowExecution.
func (mr *MockControllableContextMockRecorder) CreateWorkflowExecution(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowExecution", reflect.TypeOf((*MockControllableContext)(nil).CreateWorkflowExecution), ctx, request)
}

// CurrentVectorClock mocks base method.
func (m *MockControllableContext) CurrentVectorClock() *clock.VectorClock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentVectorClock")
	ret0, _ := ret[0].(*clock.VectorClock)
	return ret0
}

// CurrentVectorClock indicates an expected call of CurrentVectorClock.
func (mr *MockControllableContextMockRecorder) CurrentVectorClock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentVectorClock", reflect.TypeOf((*MockControllableContext)(nil).CurrentVectorClock))
}

// DeleteWorkflowExecution mocks base method.
func (m *MockControllableContext) DeleteWorkflowExecution(ctx context.Context, workflowKey definition.WorkflowKey, branchToken []byte, closeExecutionVisibilityTaskID int64, workflowCloseTime time.Time, stage *tasks.DeleteWorkflowExecutionStage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkflowExecution", ctx, workflowKey, branchToken, closeExecutionVisibilityTaskID, workflowCloseTime, stage)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkflowExecution indicates an expected call of DeleteWorkflowExecution.
func (mr *MockControllableContextMockRecorder) DeleteWorkflowExecution(ctx, workflowKey, branchToken, closeExecutionVisibilityTaskID, workflowCloseTime, stage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkflowExecution", reflect.TypeOf((*MockControllableContext)(nil).DeleteWorkflowExecution), ctx, workflowKey, branchToken, closeExecutionVisibilityTaskID, workflowCloseTime, stage)
}

// FinishStop mocks base method.
func (m *MockControllableContext) FinishStop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FinishStop")
}

// FinishStop indicates an expected call of FinishStop.
func (mr *MockControllableContextMockRecorder) FinishStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishStop", reflect.TypeOf((*MockControllableContext)(nil).FinishStop))
}

// GenerateTaskID mocks base method.
func (m *MockControllableContext) GenerateTaskID() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTaskID")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTaskID indicates an expected call of GenerateTaskID.
func (mr *MockControllableContextMockRecorder) GenerateTaskID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTaskID", reflect.TypeOf((*MockControllableContext)(nil).GenerateTaskID))
}

// GenerateTaskIDs mocks base method.
func (m *MockControllableContext) GenerateTaskIDs(number int) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTaskIDs", number)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTaskIDs indicates an expected call of GenerateTaskIDs.
func (mr *MockControllableContextMockRecorder) GenerateTaskIDs(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTaskIDs", reflect.TypeOf((*MockControllableContext)(nil).GenerateTaskIDs), number)
}

// GetArchivalMetadata mocks base method.
func (m *MockControllableContext) GetArchivalMetadata() archiver.ArchivalMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchivalMetadata")
	ret0, _ := ret[0].(archiver.ArchivalMetadata)
	return ret0
}

// GetArchivalMetadata indicates an expected call of GetArchivalMetadata.
func (mr *MockControllableContextMockRecorder) GetArchivalMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchivalMetadata", reflect.TypeOf((*MockControllableContext)(nil).GetArchivalMetadata))
}

// GetCachedWorkflowContext mocks base method.
func (m *MockControllableContext) GetCachedWorkflowContext(ctx context.Context, namespaceID namespace.ID, execution *common.WorkflowExecution, lockPriority locks.Priority) (WorkflowContext, ReleaseWorkflowContextFunc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedWorkflowContext", ctx, namespaceID, execution, lockPriority)
	ret0, _ := ret[0].(WorkflowContext)
	ret1, _ := ret[1].(ReleaseWorkflowContextFunc)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCachedWorkflowContext indicates an expected call of GetCachedWorkflowContext.
func (mr *MockControllableContextMockRecorder) GetCachedWorkflowContext(ctx, namespaceID, execution, lockPriority any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedWorkflowContext", reflect.TypeOf((*MockControllableContext)(nil).GetCachedWorkflowContext), ctx, namespaceID, execution, lockPriority)
}

// GetClusterMetadata mocks base method.
func (m *MockControllableContext) GetClusterMetadata() cluster.Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMetadata")
	ret0, _ := ret[0].(cluster.Metadata)
	return ret0
}

// GetClusterMetadata indicates an expected call of GetClusterMetadata.
func (mr *MockControllableContextMockRecorder) GetClusterMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMetadata", reflect.TypeOf((*MockControllableContext)(nil).GetClusterMetadata))
}

// GetConfig mocks base method.
func (m *MockControllableContext) GetConfig() *configs.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(*configs.Config)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockControllableContextMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockControllableContext)(nil).GetConfig))
}

// GetCurrentCachedWorkflowContext mocks base method.
func (m *MockControllableContext) GetCurrentCachedWorkflowContext(ctx context.Context, namespaceID namespace.ID, workflowID string, lockPriority locks.Priority) (ReleaseWorkflowContextFunc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentCachedWorkflowContext", ctx, namespaceID, workflowID, lockPriority)
	ret0, _ := ret[0].(ReleaseWorkflowContextFunc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentCachedWorkflowContext indicates an expected call of GetCurrentCachedWorkflowContext.
func (mr *MockControllableContextMockRecorder) GetCurrentCachedWorkflowContext(ctx, namespaceID, workflowID, lockPriority any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentCachedWorkflowContext", reflect.TypeOf((*MockControllableContext)(nil).GetCurrentCachedWorkflowContext), ctx, namespaceID, workflowID, lockPriority)
}

// GetCurrentExecution mocks base method.
func (m *MockControllableContext) GetCurrentExecution(ctx context.Context, request *persistence0.GetCurrentExecutionRequest) (*persistence0.GetCurrentExecutionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentExecution", ctx, request)
	ret0, _ := ret[0].(*persistence0.GetCurrentExecutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentExecution indicates an expected call of GetCurrentExecution.
func (mr *MockControllableContextMockRecorder) GetCurrentExecution(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentExecution", reflect.TypeOf((*MockControllableContext)(nil).GetCurrentExecution), ctx, request)
}

// GetCurrentTime mocks base method.
func (m *MockControllableContext) GetCurrentTime(cluster string) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentTime", cluster)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetCurrentTime indicates an expected call of GetCurrentTime.
func (mr *MockControllableContextMockRecorder) GetCurrentTime(cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentTime", reflect.TypeOf((*MockControllableContext)(nil).GetCurrentTime), cluster)
}

// GetEngine mocks base method.
func (m *MockControllableContext) GetEngine(ctx context.Context) (Engine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEngine", ctx)
	ret0, _ := ret[0].(Engine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEngine indicates an expected call of GetEngine.
func (mr *MockControllableContextMockRecorder) GetEngine(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEngine", reflect.TypeOf((*MockControllableContext)(nil).GetEngine), ctx)
}

// GetEventsCache mocks base method.
func (m *MockControllableContext) GetEventsCache() events.Cache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsCache")
	ret0, _ := ret[0].(events.Cache)
	return ret0
}

// GetEventsCache indicates an expected call of GetEventsCache.
func (mr *MockControllableContextMockRecorder) GetEventsCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsCache", reflect.TypeOf((*MockControllableContext)(nil).GetEventsCache))
}

// GetExecutionManager mocks base method.
func (m *MockControllableContext) GetExecutionManager() persistence0.ExecutionManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionManager")
	ret0, _ := ret[0].(persistence0.ExecutionManager)
	return ret0
}

// GetExecutionManager indicates an expected call of GetExecutionManager.
func (mr *MockControllableContextMockRecorder) GetExecutionManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionManager", reflect.TypeOf((*MockControllableContext)(nil).GetExecutionManager))
}

// GetFinalizer mocks base method.
func (m *MockControllableContext) GetFinalizer() *finalizer.Finalizer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinalizer")
	ret0, _ := ret[0].(*finalizer.Finalizer)
	return ret0
}

// GetFinalizer indicates an expected call of GetFinalizer.
func (mr *MockControllableContextMockRecorder) GetFinalizer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinalizer", reflect.TypeOf((*MockControllableContext)(nil).GetFinalizer))
}

// GetHistoryClient mocks base method.
func (m *MockControllableContext) GetHistoryClient() historyservice.HistoryServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryClient")
	ret0, _ := ret[0].(historyservice.HistoryServiceClient)
	return ret0
}

// GetHistoryClient indicates an expected call of GetHistoryClient.
func (mr *MockControllableContextMockRecorder) GetHistoryClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryClient", reflect.TypeOf((*MockControllableContext)(nil).GetHistoryClient))
}

// GetHistoryTasks mocks base method.
func (m *MockControllableContext) GetHistoryTasks(ctx context.Context, request *persistence0.GetHistoryTasksRequest) (*persistence0.GetHistoryTasksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryTasks", ctx, request)
	ret0, _ := ret[0].(*persistence0.GetHistoryTasksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryTasks indicates an expected call of GetHistoryTasks.
func (mr *MockControllableContextMockRecorder) GetHistoryTasks(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryTasks", reflect.TypeOf((*MockControllableContext)(nil).GetHistoryTasks), ctx, request)
}

// GetLogger mocks base method.
func (m *MockControllableContext) GetLogger() log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockControllableContextMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockControllableContext)(nil).GetLogger))
}

// GetMetricsHandler mocks base method.
func (m *MockControllableContext) GetMetricsHandler() metrics.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsHandler")
	ret0, _ := ret[0].(metrics.Handler)
	return ret0
}

// GetMetricsHandler indicates an expected call of GetMetricsHandler.
func (mr *MockControllableContextMockRecorder) GetMetricsHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsHandler", reflect.TypeOf((*MockControllableContext)(nil).GetMetricsHandler))
}

// GetNamespaceRegistry mocks base method.
func (m *MockControllableContext) GetNamespaceRegistry() namespace.Registry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceRegistry")
	ret0, _ := ret[0].(namespace.Registry)
	return ret0
}

// GetNamespaceRegistry indicates an expected call of GetNamespaceRegistry.
func (mr *MockControllableContextMockRecorder) GetNamespaceRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceRegistry", reflect.TypeOf((*MockControllableContext)(nil).GetNamespaceRegistry))
}

// GetOwner mocks base method.
func (m *MockControllableContext) GetOwner() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwner")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetOwner indicates an expected call of GetOwner.
func (mr *MockControllableContextMockRecorder) GetOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwner", reflect.TypeOf((*MockControllableContext)(nil).GetOwner))
}

// GetPayloadSerializer mocks base method.
func (m *MockControllableContext) GetPayloadSerializer() serialization.Serializer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayloadSerializer")
	ret0, _ := ret[0].(serialization.Serializer)
	return ret0
}

// GetPayloadSerializer indicates an expected call of GetPayloadSerializer.
func (mr *MockControllableContextMockRecorder) GetPayloadSerializer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayloadSerializer", reflect.TypeOf((*MockControllableContext)(nil).GetPayloadSerializer))
}

// GetPingChecks mocks base method.
func (m *MockControllableContext) GetPingChecks() []pingable.Check {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPingChecks")
	ret0, _ := ret[0].([]pingable.Check)
	return ret0
}

// GetPingChecks indicates an expected call of GetPingChecks.
func (mr *MockControllableContextMockRecorder) GetPingChecks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPingChecks", reflect.TypeOf((*MockControllableContext)(nil).GetPingChecks))
}

// GetQueueExclusiveHighReadWatermark mocks base method.
func (m *MockControllableContext) GetQueueExclusiveHighReadWatermark(category tasks.Category) tasks.Key {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueExclusiveHighReadWatermark", category)
	ret0, _ := ret[0].(tasks.Key)
	return ret0
}

// GetQueueExclusiveHighReadWatermark indicates an expected call of GetQueueExclusiveHighReadWatermark.
func (mr *MockControllableContextMockRecorder) GetQueueExclusiveHighReadWatermark(category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueExclusiveHighReadWatermark", reflect.TypeOf((*MockControllableContext)(nil).GetQueueExclusiveHighReadWatermark), category)
}

// GetQueueState mocks base method.
func (m *MockControllableContext) GetQueueState(category tasks.Category) (*persistence.QueueState, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueState", category)
	ret0, _ := ret[0].(*persistence.QueueState)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetQueueState indicates an expected call of GetQueueState.
func (mr *MockControllableContextMockRecorder) GetQueueState(category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueState", reflect.TypeOf((*MockControllableContext)(nil).GetQueueState), category)
}

// GetRangeID mocks base method.
func (m *MockControllableContext) GetRangeID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRangeID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetRangeID indicates an expected call of GetRangeID.
func (mr *MockControllableContextMockRecorder) GetRangeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRangeID", reflect.TypeOf((*MockControllableContext)(nil).GetRangeID))
}

// GetRemoteAdminClient mocks base method.
func (m *MockControllableContext) GetRemoteAdminClient(arg0 string) (adminservice.AdminServiceClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteAdminClient", arg0)
	ret0, _ := ret[0].(adminservice.AdminServiceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteAdminClient indicates an expected call of GetRemoteAdminClient.
func (mr *MockControllableContextMockRecorder) GetRemoteAdminClient(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteAdminClient", reflect.TypeOf((*MockControllableContext)(nil).GetRemoteAdminClient), arg0)
}

// GetReplicationStatus mocks base method.
func (m *MockControllableContext) GetReplicationStatus(cluster []string) (map[string]*historyservice.ShardReplicationStatusPerCluster, map[string]*historyservice.HandoverNamespaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicationStatus", cluster)
	ret0, _ := ret[0].(map[string]*historyservice.ShardReplicationStatusPerCluster)
	ret1, _ := ret[1].(map[string]*historyservice.HandoverNamespaceInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReplicationStatus indicates an expected call of GetReplicationStatus.
func (mr *MockControllableContextMockRecorder) GetReplicationStatus(cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicationStatus", reflect.TypeOf((*MockControllableContext)(nil).GetReplicationStatus), cluster)
}

// GetReplicatorDLQAckLevel mocks base method.
func (m *MockControllableContext) GetReplicatorDLQAckLevel(sourceCluster string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicatorDLQAckLevel", sourceCluster)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetReplicatorDLQAckLevel indicates an expected call of GetReplicatorDLQAckLevel.
func (mr *MockControllableContextMockRecorder) GetReplicatorDLQAckLevel(sourceCluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicatorDLQAckLevel", reflect.TypeOf((*MockControllableContext)(nil).GetReplicatorDLQAckLevel), sourceCluster)
}

// GetSearchAttributesMapperProvider mocks base method.
func (m *MockControllableContext) GetSearchAttributesMapperProvider() searchattribute.MapperProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchAttributesMapperProvider")
	ret0, _ := ret[0].(searchattribute.MapperProvider)
	return ret0
}

// GetSearchAttributesMapperProvider indicates an expected call of GetSearchAttributesMapperProvider.
func (mr *MockControllableContextMockRecorder) GetSearchAttributesMapperProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchAttributesMapperProvider", reflect.TypeOf((*MockControllableContext)(nil).GetSearchAttributesMapperProvider))
}

// GetSearchAttributesProvider mocks base method.
func (m *MockControllableContext) GetSearchAttributesProvider() searchattribute.Provider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchAttributesProvider")
	ret0, _ := ret[0].(searchattribute.Provider)
	return ret0
}

// GetSearchAttributesProvider indicates an expected call of GetSearchAttributesProvider.
func (mr *MockControllableContextMockRecorder) GetSearchAttributesProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchAttributesProvider", reflect.TypeOf((*MockControllableContext)(nil).GetSearchAttributesProvider))
}

// GetShardID mocks base method.
func (m *MockControllableContext) GetShardID() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShardID")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetShardID indicates an expected call of GetShardID.
func (mr *MockControllableContextMockRecorder) GetShardID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShardID", reflect.TypeOf((*MockControllableContext)(nil).GetShardID))
}

// GetThrottledLogger mocks base method.
func (m *MockControllableContext) GetThrottledLogger() log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThrottledLogger")
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// GetThrottledLogger indicates an expected call of GetThrottledLogger.
func (mr *MockControllableContextMockRecorder) GetThrottledLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThrottledLogger", reflect.TypeOf((*MockControllableContext)(nil).GetThrottledLogger))
}

// GetTimeSource mocks base method.
func (m *MockControllableContext) GetTimeSource() clock0.TimeSource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeSource")
	ret0, _ := ret[0].(clock0.TimeSource)
	return ret0
}

// GetTimeSource indicates an expected call of GetTimeSource.
func (mr *MockControllableContextMockRecorder) GetTimeSource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeSource", reflect.TypeOf((*MockControllableContext)(nil).GetTimeSource))
}

// GetWorkflowExecution mocks base method.
func (m *MockControllableContext) GetWorkflowExecution(ctx context.Context, request *persistence0.GetWorkflowExecutionRequest) (*persistence0.GetWorkflowExecutionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowExecution", ctx, request)
	ret0, _ := ret[0].(*persistence0.GetWorkflowExecutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowExecution indicates an expected call of GetWorkflowExecution.
func (mr *MockControllableContextMockRecorder) GetWorkflowExecution(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowExecution", reflect.TypeOf((*MockControllableContext)(nil).GetWorkflowExecution), ctx, request)
}

// IsValid mocks base method.
func (m *MockControllableContext) IsValid() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValid")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValid indicates an expected call of IsValid.
func (mr *MockControllableContextMockRecorder) IsValid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValid", reflect.TypeOf((*MockControllableContext)(nil).IsValid))
}

// NewVectorClock mocks base method.
func (m *MockControllableContext) NewVectorClock() (*clock.VectorClock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewVectorClock")
	ret0, _ := ret[0].(*clock.VectorClock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewVectorClock indicates an expected call of NewVectorClock.
func (mr *MockControllableContextMockRecorder) NewVectorClock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewVectorClock", reflect.TypeOf((*MockControllableContext)(nil).NewVectorClock))
}

// SetCurrentTime mocks base method.
func (m *MockControllableContext) SetCurrentTime(cluster string, currentTime time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrentTime", cluster, currentTime)
}

// SetCurrentTime indicates an expected call of SetCurrentTime.
func (mr *MockControllableContextMockRecorder) SetCurrentTime(cluster, currentTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentTime", reflect.TypeOf((*MockControllableContext)(nil).SetCurrentTime), cluster, currentTime)
}

// SetQueueState mocks base method.
func (m *MockControllableContext) SetQueueState(category tasks.Category, tasksCompleted int, state *persistence.QueueState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetQueueState", category, tasksCompleted, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetQueueState indicates an expected call of SetQueueState.
func (mr *MockControllableContextMockRecorder) SetQueueState(category, tasksCompleted, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQueueState", reflect.TypeOf((*MockControllableContext)(nil).SetQueueState), category, tasksCompleted, state)
}

// SetWorkflowExecution mocks base method.
func (m *MockControllableContext) SetWorkflowExecution(ctx context.Context, request *persistence0.SetWorkflowExecutionRequest) (*persistence0.SetWorkflowExecutionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWorkflowExecution", ctx, request)
	ret0, _ := ret[0].(*persistence0.SetWorkflowExecutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetWorkflowExecution indicates an expected call of SetWorkflowExecution.
func (mr *MockControllableContextMockRecorder) SetWorkflowExecution(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWorkflowExecution", reflect.TypeOf((*MockControllableContext)(nil).SetWorkflowExecution), ctx, request)
}

// StateMachineRegistry mocks base method.
func (m *MockControllableContext) StateMachineRegistry() *hsm.Registry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateMachineRegistry")
	ret0, _ := ret[0].(*hsm.Registry)
	return ret0
}

// StateMachineRegistry indicates an expected call of StateMachineRegistry.
func (mr *MockControllableContextMockRecorder) StateMachineRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateMachineRegistry", reflect.TypeOf((*MockControllableContext)(nil).StateMachineRegistry))
}

// UnloadForOwnershipLost mocks base method.
func (m *MockControllableContext) UnloadForOwnershipLost() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnloadForOwnershipLost")
}

// UnloadForOwnershipLost indicates an expected call of UnloadForOwnershipLost.
func (mr *MockControllableContextMockRecorder) UnloadForOwnershipLost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnloadForOwnershipLost", reflect.TypeOf((*MockControllableContext)(nil).UnloadForOwnershipLost))
}

// UpdateHandoverNamespace mocks base method.
func (m *MockControllableContext) UpdateHandoverNamespace(ns *namespace.Namespace, deletedFromDb bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateHandoverNamespace", ns, deletedFromDb)
}

// UpdateHandoverNamespace indicates an expected call of UpdateHandoverNamespace.
func (mr *MockControllableContextMockRecorder) UpdateHandoverNamespace(ns, deletedFromDb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHandoverNamespace", reflect.TypeOf((*MockControllableContext)(nil).UpdateHandoverNamespace), ns, deletedFromDb)
}

// UpdateRemoteClusterInfo mocks base method.
func (m *MockControllableContext) UpdateRemoteClusterInfo(cluster string, ackTaskID int64, ackTimestamp time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateRemoteClusterInfo", cluster, ackTaskID, ackTimestamp)
}

// UpdateRemoteClusterInfo indicates an expected call of UpdateRemoteClusterInfo.
func (mr *MockControllableContextMockRecorder) UpdateRemoteClusterInfo(cluster, ackTaskID, ackTimestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemoteClusterInfo", reflect.TypeOf((*MockControllableContext)(nil).UpdateRemoteClusterInfo), cluster, ackTaskID, ackTimestamp)
}

// UpdateRemoteReaderInfo mocks base method.
func (m *MockControllableContext) UpdateRemoteReaderInfo(readerID, ackTaskID int64, ackTimestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRemoteReaderInfo", readerID, ackTaskID, ackTimestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRemoteReaderInfo indicates an expected call of UpdateRemoteReaderInfo.
func (mr *MockControllableContextMockRecorder) UpdateRemoteReaderInfo(readerID, ackTaskID, ackTimestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemoteReaderInfo", reflect.TypeOf((*MockControllableContext)(nil).UpdateRemoteReaderInfo), readerID, ackTaskID, ackTimestamp)
}

// UpdateReplicationQueueReaderState mocks base method.
func (m *MockControllableContext) UpdateReplicationQueueReaderState(readerID int64, readerState *persistence.QueueReaderState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicationQueueReaderState", readerID, readerState)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReplicationQueueReaderState indicates an expected call of UpdateReplicationQueueReaderState.
func (mr *MockControllableContextMockRecorder) UpdateReplicationQueueReaderState(readerID, readerState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicationQueueReaderState", reflect.TypeOf((*MockControllableContext)(nil).UpdateReplicationQueueReaderState), readerID, readerState)
}

// UpdateReplicatorDLQAckLevel mocks base method.
func (m *MockControllableContext) UpdateReplicatorDLQAckLevel(sourCluster string, ackLevel int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReplicatorDLQAckLevel", sourCluster, ackLevel)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReplicatorDLQAckLevel indicates an expected call of UpdateReplicatorDLQAckLevel.
func (mr *MockControllableContextMockRecorder) UpdateReplicatorDLQAckLevel(sourCluster, ackLevel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReplicatorDLQAckLevel", reflect.TypeOf((*MockControllableContext)(nil).UpdateReplicatorDLQAckLevel), sourCluster, ackLevel)
}

// UpdateWorkflowExecution mocks base method.
func (m *MockControllableContext) UpdateWorkflowExecution(ctx context.Context, request *persistence0.UpdateWorkflowExecutionRequest) (*persistence0.UpdateWorkflowExecutionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowExecution", ctx, request)
	ret0, _ := ret[0].(*persistence0.UpdateWorkflowExecutionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkflowExecution indicates an expected call of UpdateWorkflowExecution.
func (mr *MockControllableContextMockRecorder) UpdateWorkflowExecution(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowExecution", reflect.TypeOf((*MockControllableContext)(nil).UpdateWorkflowExecution), ctx, request)
}
