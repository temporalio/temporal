// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: chasm_tree.go
//
// Generated by this command:
//
//	mockgen -copyright_file ../../../LICENSE -package interfaces -source chasm_tree.go -destination chasm_tree_mock.go
//

// Package interfaces is a generated GoMock package.
package interfaces

import (
	reflect "reflect"

	persistence "go.temporal.io/server/api/persistence/v1"
	chasm "go.temporal.io/server/chasm"
	gomock "go.uber.org/mock/gomock"
)

// MockChasmTree is a mock of ChasmTree interface.
type MockChasmTree struct {
	ctrl     *gomock.Controller
	recorder *MockChasmTreeMockRecorder
	isgomock struct{}
}

// MockChasmTreeMockRecorder is the mock recorder for MockChasmTree.
type MockChasmTreeMockRecorder struct {
	mock *MockChasmTree
}

// NewMockChasmTree creates a new mock instance.
func NewMockChasmTree(ctrl *gomock.Controller) *MockChasmTree {
	mock := &MockChasmTree{ctrl: ctrl}
	mock.recorder = &MockChasmTreeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChasmTree) EXPECT() *MockChasmTreeMockRecorder {
	return m.recorder
}

// ApplyMutation mocks base method.
func (m *MockChasmTree) ApplyMutation(arg0 chasm.NodesMutation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyMutation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyMutation indicates an expected call of ApplyMutation.
func (mr *MockChasmTreeMockRecorder) ApplyMutation(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyMutation", reflect.TypeOf((*MockChasmTree)(nil).ApplyMutation), arg0)
}

// ApplySnapshot mocks base method.
func (m *MockChasmTree) ApplySnapshot(arg0 chasm.NodesSnapshot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplySnapshot", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplySnapshot indicates an expected call of ApplySnapshot.
func (mr *MockChasmTreeMockRecorder) ApplySnapshot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplySnapshot", reflect.TypeOf((*MockChasmTree)(nil).ApplySnapshot), arg0)
}

// CloseTransaction mocks base method.
func (m *MockChasmTree) CloseTransaction() (chasm.NodesMutation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseTransaction")
	ret0, _ := ret[0].(chasm.NodesMutation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseTransaction indicates an expected call of CloseTransaction.
func (mr *MockChasmTreeMockRecorder) CloseTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseTransaction", reflect.TypeOf((*MockChasmTree)(nil).CloseTransaction))
}

// IsDirty mocks base method.
func (m *MockChasmTree) IsDirty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDirty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDirty indicates an expected call of IsDirty.
func (mr *MockChasmTreeMockRecorder) IsDirty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDirty", reflect.TypeOf((*MockChasmTree)(nil).IsDirty))
}

// Snapshot mocks base method.
func (m *MockChasmTree) Snapshot(arg0 *persistence.VersionedTransition) chasm.NodesSnapshot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot", arg0)
	ret0, _ := ret[0].(chasm.NodesSnapshot)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockChasmTreeMockRecorder) Snapshot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockChasmTree)(nil).Snapshot), arg0)
}
