// Code generated by MockGen. DO NOT EDIT.
// Source: task_refresher.go
//
// Generated by this command:
//
//	mockgen -package workflow -source task_refresher.go -destination task_refresher_mock.go
//

// Package workflow is a generated GoMock package.
package workflow

import (
	context "context"
	reflect "reflect"

	persistence "go.temporal.io/server/api/persistence/v1"
	interfaces "go.temporal.io/server/service/history/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskRefresher is a mock of TaskRefresher interface.
type MockTaskRefresher struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRefresherMockRecorder
	isgomock struct{}
}

// MockTaskRefresherMockRecorder is the mock recorder for MockTaskRefresher.
type MockTaskRefresherMockRecorder struct {
	mock *MockTaskRefresher
}

// NewMockTaskRefresher creates a new mock instance.
func NewMockTaskRefresher(ctrl *gomock.Controller) *MockTaskRefresher {
	mock := &MockTaskRefresher{ctrl: ctrl}
	mock.recorder = &MockTaskRefresherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRefresher) EXPECT() *MockTaskRefresherMockRecorder {
	return m.recorder
}

// PartialRefresh mocks base method.
func (m *MockTaskRefresher) PartialRefresh(ctx context.Context, mutableState interfaces.MutableState, minVersionedTransition *persistence.VersionedTransition, previousPendingChildIds map[int64]struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartialRefresh", ctx, mutableState, minVersionedTransition, previousPendingChildIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// PartialRefresh indicates an expected call of PartialRefresh.
func (mr *MockTaskRefresherMockRecorder) PartialRefresh(ctx, mutableState, minVersionedTransition, previousPendingChildIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartialRefresh", reflect.TypeOf((*MockTaskRefresher)(nil).PartialRefresh), ctx, mutableState, minVersionedTransition, previousPendingChildIds)
}

// Refresh mocks base method.
func (m *MockTaskRefresher) Refresh(ctx context.Context, mutableState interfaces.MutableState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", ctx, mutableState)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockTaskRefresherMockRecorder) Refresh(ctx, mutableState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockTaskRefresher)(nil).Refresh), ctx, mutableState)
}
