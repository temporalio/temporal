// Code generated by MockGen. DO NOT EDIT.
// Source: mutable_state_rebuilder.go
//
// Generated by this command:
//
//	mockgen -package workflow -source mutable_state_rebuilder.go -destination mutable_state_rebuilder_mock.go
//

// Package workflow is a generated GoMock package.
package workflow

import (
	context "context"
	reflect "reflect"

	common "go.temporal.io/api/common/v1"
	history "go.temporal.io/api/history/v1"
	namespace "go.temporal.io/server/common/namespace"
	interfaces "go.temporal.io/server/service/history/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockMutableStateRebuilder is a mock of MutableStateRebuilder interface.
type MockMutableStateRebuilder struct {
	ctrl     *gomock.Controller
	recorder *MockMutableStateRebuilderMockRecorder
	isgomock struct{}
}

// MockMutableStateRebuilderMockRecorder is the mock recorder for MockMutableStateRebuilder.
type MockMutableStateRebuilderMockRecorder struct {
	mock *MockMutableStateRebuilder
}

// NewMockMutableStateRebuilder creates a new mock instance.
func NewMockMutableStateRebuilder(ctrl *gomock.Controller) *MockMutableStateRebuilder {
	mock := &MockMutableStateRebuilder{ctrl: ctrl}
	mock.recorder = &MockMutableStateRebuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutableStateRebuilder) EXPECT() *MockMutableStateRebuilderMockRecorder {
	return m.recorder
}

// ApplyEvents mocks base method.
func (m *MockMutableStateRebuilder) ApplyEvents(ctx context.Context, namespaceID namespace.ID, requestID string, execution *common.WorkflowExecution, history [][]*history.HistoryEvent, newRunHistory []*history.HistoryEvent, newRunID string) (interfaces.MutableState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyEvents", ctx, namespaceID, requestID, execution, history, newRunHistory, newRunID)
	ret0, _ := ret[0].(interfaces.MutableState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyEvents indicates an expected call of ApplyEvents.
func (mr *MockMutableStateRebuilderMockRecorder) ApplyEvents(ctx, namespaceID, requestID, execution, history, newRunHistory, newRunID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyEvents", reflect.TypeOf((*MockMutableStateRebuilder)(nil).ApplyEvents), ctx, namespaceID, requestID, execution, history, newRunHistory, newRunID)
}
