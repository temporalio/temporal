// Code generated by MockGen. DO NOT EDIT.
// Source: nDCBranchMgr.go

// Package history is a generated GoMock package.
package history

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	persistence "github.com/temporalio/temporal/common/persistence"
)

// MocknDCBranchMgr is a mock of nDCBranchMgr interface.
type MocknDCBranchMgr struct {
	ctrl     *gomock.Controller
	recorder *MocknDCBranchMgrMockRecorder
}

// MocknDCBranchMgrMockRecorder is the mock recorder for MocknDCBranchMgr.
type MocknDCBranchMgrMockRecorder struct {
	mock *MocknDCBranchMgr
}

// NewMocknDCBranchMgr creates a new mock instance.
func NewMocknDCBranchMgr(ctrl *gomock.Controller) *MocknDCBranchMgr {
	mock := &MocknDCBranchMgr{ctrl: ctrl}
	mock.recorder = &MocknDCBranchMgrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknDCBranchMgr) EXPECT() *MocknDCBranchMgrMockRecorder {
	return m.recorder
}

// prepareVersionHistory mocks base method.
func (m *MocknDCBranchMgr) prepareVersionHistory(ctx context.Context, incomingVersionHistory *persistence.VersionHistory, incomingFirstEventID, incomingFirstEventVersion int64) (bool, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "prepareVersionHistory", ctx, incomingVersionHistory, incomingFirstEventID, incomingFirstEventVersion)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// prepareVersionHistory indicates an expected call of prepareVersionHistory.
func (mr *MocknDCBranchMgrMockRecorder) prepareVersionHistory(ctx, incomingVersionHistory, incomingFirstEventID, incomingFirstEventVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "prepareVersionHistory", reflect.TypeOf((*MocknDCBranchMgr)(nil).prepareVersionHistory), ctx, incomingVersionHistory, incomingFirstEventID, incomingFirstEventVersion)
}
