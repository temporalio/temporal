// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: event_notifier.go

// Package definition is a generated GoMock package.
package definition

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	definition "go.temporal.io/server/common/definition"
)

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// NotifyNewHistoryEvent mocks base method.
func (m *MockNotifier) NotifyNewHistoryEvent(event *Notification) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyNewHistoryEvent", event)
}

// NotifyNewHistoryEvent indicates an expected call of NotifyNewHistoryEvent.
func (mr *MockNotifierMockRecorder) NotifyNewHistoryEvent(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyNewHistoryEvent", reflect.TypeOf((*MockNotifier)(nil).NotifyNewHistoryEvent), event)
}

// Start mocks base method.
func (m *MockNotifier) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockNotifierMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNotifier)(nil).Start))
}

// Stop mocks base method.
func (m *MockNotifier) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockNotifierMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNotifier)(nil).Stop))
}

// UnwatchHistoryEvent mocks base method.
func (m *MockNotifier) UnwatchHistoryEvent(identifier definition.WorkflowKey, subscriberID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnwatchHistoryEvent", identifier, subscriberID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnwatchHistoryEvent indicates an expected call of UnwatchHistoryEvent.
func (mr *MockNotifierMockRecorder) UnwatchHistoryEvent(identifier, subscriberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnwatchHistoryEvent", reflect.TypeOf((*MockNotifier)(nil).UnwatchHistoryEvent), identifier, subscriberID)
}

// WatchHistoryEvent mocks base method.
func (m *MockNotifier) WatchHistoryEvent(identifier definition.WorkflowKey) (string, chan *Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchHistoryEvent", identifier)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(chan *Notification)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WatchHistoryEvent indicates an expected call of WatchHistoryEvent.
func (mr *MockNotifierMockRecorder) WatchHistoryEvent(identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchHistoryEvent", reflect.TypeOf((*MockNotifier)(nil).WatchHistoryEvent), identifier)
}
