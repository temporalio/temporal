// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: shard_controller.go

// Package definition is a generated GoMock package.
package definition

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	namespace "go.temporal.io/server/common/namespace"
)

// MockShardController is a mock of ShardController interface.
type MockShardController struct {
	ctrl     *gomock.Controller
	recorder *MockShardControllerMockRecorder
}

// MockShardControllerMockRecorder is the mock recorder for MockShardController.
type MockShardControllerMockRecorder struct {
	mock *MockShardController
}

// NewMockShardController creates a new mock instance.
func NewMockShardController(ctrl *gomock.Controller) *MockShardController {
	mock := &MockShardController{ctrl: ctrl}
	mock.recorder = &MockShardControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardController) EXPECT() *MockShardControllerMockRecorder {
	return m.recorder
}

// CloseShardByID mocks base method.
func (m *MockShardController) CloseShardByID(shardID int32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseShardByID", shardID)
}

// CloseShardByID indicates an expected call of CloseShardByID.
func (mr *MockShardControllerMockRecorder) CloseShardByID(shardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseShardByID", reflect.TypeOf((*MockShardController)(nil).CloseShardByID), shardID)
}

// GetShardByID mocks base method.
func (m *MockShardController) GetShardByID(shardID int32) (ShardContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShardByID", shardID)
	ret0, _ := ret[0].(ShardContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShardByID indicates an expected call of GetShardByID.
func (mr *MockShardControllerMockRecorder) GetShardByID(shardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShardByID", reflect.TypeOf((*MockShardController)(nil).GetShardByID), shardID)
}

// GetShardByNamespaceWorkflow mocks base method.
func (m *MockShardController) GetShardByNamespaceWorkflow(namespaceID namespace.ID, workflowID string) (ShardContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShardByNamespaceWorkflow", namespaceID, workflowID)
	ret0, _ := ret[0].(ShardContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShardByNamespaceWorkflow indicates an expected call of GetShardByNamespaceWorkflow.
func (mr *MockShardControllerMockRecorder) GetShardByNamespaceWorkflow(namespaceID, workflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShardByNamespaceWorkflow", reflect.TypeOf((*MockShardController)(nil).GetShardByNamespaceWorkflow), namespaceID, workflowID)
}

// ShardIDs mocks base method.
func (m *MockShardController) ShardIDs() []int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShardIDs")
	ret0, _ := ret[0].([]int32)
	return ret0
}

// ShardIDs indicates an expected call of ShardIDs.
func (mr *MockShardControllerMockRecorder) ShardIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShardIDs", reflect.TypeOf((*MockShardController)(nil).ShardIDs))
}

// Start mocks base method.
func (m *MockShardController) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockShardControllerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockShardController)(nil).Start))
}

// Stop mocks base method.
func (m *MockShardController) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockShardControllerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockShardController)(nil).Stop))
}
