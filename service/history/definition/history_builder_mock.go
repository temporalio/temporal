// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: history_builder.go

// Package definition is a generated GoMock package.
package definition

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	v1 "go.temporal.io/api/command/v1"
	v10 "go.temporal.io/api/common/v1"
	v11 "go.temporal.io/api/enums/v1"
	v12 "go.temporal.io/api/failure/v1"
	v13 "go.temporal.io/api/history/v1"
	v14 "go.temporal.io/api/taskqueue/v1"
	v15 "go.temporal.io/api/workflow/v1"
	v16 "go.temporal.io/server/api/historyservice/v1"
	namespace "go.temporal.io/server/common/namespace"
)

// MockHistoryBuilder is a mock of HistoryBuilder interface.
type MockHistoryBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryBuilderMockRecorder
}

// MockHistoryBuilderMockRecorder is the mock recorder for MockHistoryBuilder.
type MockHistoryBuilderMockRecorder struct {
	mock *MockHistoryBuilder
}

// NewMockHistoryBuilder creates a new mock instance.
func NewMockHistoryBuilder(ctrl *gomock.Controller) *MockHistoryBuilder {
	mock := &MockHistoryBuilder{ctrl: ctrl}
	mock.recorder = &MockHistoryBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryBuilder) EXPECT() *MockHistoryBuilderMockRecorder {
	return m.recorder
}

// AddActivityTaskCancelRequestedEvent mocks base method.
func (m *MockHistoryBuilder) AddActivityTaskCancelRequestedEvent(workflowTaskCompletedEventID, scheduledEventID int64) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActivityTaskCancelRequestedEvent", workflowTaskCompletedEventID, scheduledEventID)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddActivityTaskCancelRequestedEvent indicates an expected call of AddActivityTaskCancelRequestedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddActivityTaskCancelRequestedEvent(workflowTaskCompletedEventID, scheduledEventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActivityTaskCancelRequestedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddActivityTaskCancelRequestedEvent), workflowTaskCompletedEventID, scheduledEventID)
}

// AddActivityTaskCanceledEvent mocks base method.
func (m *MockHistoryBuilder) AddActivityTaskCanceledEvent(scheduledEventID, startedEventID, latestCancelRequestedEventID int64, details *v10.Payloads, identity string) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActivityTaskCanceledEvent", scheduledEventID, startedEventID, latestCancelRequestedEventID, details, identity)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddActivityTaskCanceledEvent indicates an expected call of AddActivityTaskCanceledEvent.
func (mr *MockHistoryBuilderMockRecorder) AddActivityTaskCanceledEvent(scheduledEventID, startedEventID, latestCancelRequestedEventID, details, identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActivityTaskCanceledEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddActivityTaskCanceledEvent), scheduledEventID, startedEventID, latestCancelRequestedEventID, details, identity)
}

// AddActivityTaskCompletedEvent mocks base method.
func (m *MockHistoryBuilder) AddActivityTaskCompletedEvent(scheduledEventID, startedEventID int64, identity string, result *v10.Payloads) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActivityTaskCompletedEvent", scheduledEventID, startedEventID, identity, result)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddActivityTaskCompletedEvent indicates an expected call of AddActivityTaskCompletedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddActivityTaskCompletedEvent(scheduledEventID, startedEventID, identity, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActivityTaskCompletedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddActivityTaskCompletedEvent), scheduledEventID, startedEventID, identity, result)
}

// AddActivityTaskFailedEvent mocks base method.
func (m *MockHistoryBuilder) AddActivityTaskFailedEvent(scheduledEventID, startedEventID int64, failure *v12.Failure, retryState v11.RetryState, identity string) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActivityTaskFailedEvent", scheduledEventID, startedEventID, failure, retryState, identity)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddActivityTaskFailedEvent indicates an expected call of AddActivityTaskFailedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddActivityTaskFailedEvent(scheduledEventID, startedEventID, failure, retryState, identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActivityTaskFailedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddActivityTaskFailedEvent), scheduledEventID, startedEventID, failure, retryState, identity)
}

// AddActivityTaskScheduledEvent mocks base method.
func (m *MockHistoryBuilder) AddActivityTaskScheduledEvent(workflowTaskCompletedEventID int64, command *v1.ScheduleActivityTaskCommandAttributes) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActivityTaskScheduledEvent", workflowTaskCompletedEventID, command)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddActivityTaskScheduledEvent indicates an expected call of AddActivityTaskScheduledEvent.
func (mr *MockHistoryBuilderMockRecorder) AddActivityTaskScheduledEvent(workflowTaskCompletedEventID, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActivityTaskScheduledEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddActivityTaskScheduledEvent), workflowTaskCompletedEventID, command)
}

// AddActivityTaskStartedEvent mocks base method.
func (m *MockHistoryBuilder) AddActivityTaskStartedEvent(scheduledEventID int64, attempt int32, requestID, identity string, lastFailure *v12.Failure) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActivityTaskStartedEvent", scheduledEventID, attempt, requestID, identity, lastFailure)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddActivityTaskStartedEvent indicates an expected call of AddActivityTaskStartedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddActivityTaskStartedEvent(scheduledEventID, attempt, requestID, identity, lastFailure interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActivityTaskStartedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddActivityTaskStartedEvent), scheduledEventID, attempt, requestID, identity, lastFailure)
}

// AddActivityTaskTimedOutEvent mocks base method.
func (m *MockHistoryBuilder) AddActivityTaskTimedOutEvent(scheduledEventID, startedEventID int64, timeoutFailure *v12.Failure, retryState v11.RetryState) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActivityTaskTimedOutEvent", scheduledEventID, startedEventID, timeoutFailure, retryState)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddActivityTaskTimedOutEvent indicates an expected call of AddActivityTaskTimedOutEvent.
func (mr *MockHistoryBuilderMockRecorder) AddActivityTaskTimedOutEvent(scheduledEventID, startedEventID, timeoutFailure, retryState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActivityTaskTimedOutEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddActivityTaskTimedOutEvent), scheduledEventID, startedEventID, timeoutFailure, retryState)
}

// AddChildWorkflowExecutionCanceledEvent mocks base method.
func (m *MockHistoryBuilder) AddChildWorkflowExecutionCanceledEvent(initiatedID, startedEventID int64, targetNamespace namespace.Name, targetNamespaceID namespace.ID, execution *v10.WorkflowExecution, workflowType *v10.WorkflowType, details *v10.Payloads) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChildWorkflowExecutionCanceledEvent", initiatedID, startedEventID, targetNamespace, targetNamespaceID, execution, workflowType, details)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddChildWorkflowExecutionCanceledEvent indicates an expected call of AddChildWorkflowExecutionCanceledEvent.
func (mr *MockHistoryBuilderMockRecorder) AddChildWorkflowExecutionCanceledEvent(initiatedID, startedEventID, targetNamespace, targetNamespaceID, execution, workflowType, details interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChildWorkflowExecutionCanceledEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddChildWorkflowExecutionCanceledEvent), initiatedID, startedEventID, targetNamespace, targetNamespaceID, execution, workflowType, details)
}

// AddChildWorkflowExecutionCompletedEvent mocks base method.
func (m *MockHistoryBuilder) AddChildWorkflowExecutionCompletedEvent(initiatedID, startedEventID int64, targetNamespace namespace.Name, targetNamespaceID namespace.ID, execution *v10.WorkflowExecution, workflowType *v10.WorkflowType, result *v10.Payloads) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChildWorkflowExecutionCompletedEvent", initiatedID, startedEventID, targetNamespace, targetNamespaceID, execution, workflowType, result)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddChildWorkflowExecutionCompletedEvent indicates an expected call of AddChildWorkflowExecutionCompletedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddChildWorkflowExecutionCompletedEvent(initiatedID, startedEventID, targetNamespace, targetNamespaceID, execution, workflowType, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChildWorkflowExecutionCompletedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddChildWorkflowExecutionCompletedEvent), initiatedID, startedEventID, targetNamespace, targetNamespaceID, execution, workflowType, result)
}

// AddChildWorkflowExecutionFailedEvent mocks base method.
func (m *MockHistoryBuilder) AddChildWorkflowExecutionFailedEvent(initiatedID, startedEventID int64, targetNamespace namespace.Name, targetNamespaceID namespace.ID, execution *v10.WorkflowExecution, workflowType *v10.WorkflowType, failure *v12.Failure, retryState v11.RetryState) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChildWorkflowExecutionFailedEvent", initiatedID, startedEventID, targetNamespace, targetNamespaceID, execution, workflowType, failure, retryState)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddChildWorkflowExecutionFailedEvent indicates an expected call of AddChildWorkflowExecutionFailedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddChildWorkflowExecutionFailedEvent(initiatedID, startedEventID, targetNamespace, targetNamespaceID, execution, workflowType, failure, retryState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChildWorkflowExecutionFailedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddChildWorkflowExecutionFailedEvent), initiatedID, startedEventID, targetNamespace, targetNamespaceID, execution, workflowType, failure, retryState)
}

// AddChildWorkflowExecutionStartedEvent mocks base method.
func (m *MockHistoryBuilder) AddChildWorkflowExecutionStartedEvent(initiatedID int64, targetNamespace namespace.Name, targetNamespaceID namespace.ID, execution *v10.WorkflowExecution, workflowType *v10.WorkflowType, header *v10.Header) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChildWorkflowExecutionStartedEvent", initiatedID, targetNamespace, targetNamespaceID, execution, workflowType, header)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddChildWorkflowExecutionStartedEvent indicates an expected call of AddChildWorkflowExecutionStartedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddChildWorkflowExecutionStartedEvent(initiatedID, targetNamespace, targetNamespaceID, execution, workflowType, header interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChildWorkflowExecutionStartedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddChildWorkflowExecutionStartedEvent), initiatedID, targetNamespace, targetNamespaceID, execution, workflowType, header)
}

// AddChildWorkflowExecutionTerminatedEvent mocks base method.
func (m *MockHistoryBuilder) AddChildWorkflowExecutionTerminatedEvent(initiatedID, startedEventID int64, targetNamespace namespace.Name, targetNamespaceID namespace.ID, execution *v10.WorkflowExecution, workflowType *v10.WorkflowType) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChildWorkflowExecutionTerminatedEvent", initiatedID, startedEventID, targetNamespace, targetNamespaceID, execution, workflowType)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddChildWorkflowExecutionTerminatedEvent indicates an expected call of AddChildWorkflowExecutionTerminatedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddChildWorkflowExecutionTerminatedEvent(initiatedID, startedEventID, targetNamespace, targetNamespaceID, execution, workflowType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChildWorkflowExecutionTerminatedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddChildWorkflowExecutionTerminatedEvent), initiatedID, startedEventID, targetNamespace, targetNamespaceID, execution, workflowType)
}

// AddChildWorkflowExecutionTimedOutEvent mocks base method.
func (m *MockHistoryBuilder) AddChildWorkflowExecutionTimedOutEvent(initiatedID, startedEventID int64, targetNamespace namespace.Name, targetNamespaceID namespace.ID, execution *v10.WorkflowExecution, workflowType *v10.WorkflowType, retryState v11.RetryState) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChildWorkflowExecutionTimedOutEvent", initiatedID, startedEventID, targetNamespace, targetNamespaceID, execution, workflowType, retryState)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddChildWorkflowExecutionTimedOutEvent indicates an expected call of AddChildWorkflowExecutionTimedOutEvent.
func (mr *MockHistoryBuilderMockRecorder) AddChildWorkflowExecutionTimedOutEvent(initiatedID, startedEventID, targetNamespace, targetNamespaceID, execution, workflowType, retryState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChildWorkflowExecutionTimedOutEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddChildWorkflowExecutionTimedOutEvent), initiatedID, startedEventID, targetNamespace, targetNamespaceID, execution, workflowType, retryState)
}

// AddCompletedWorkflowEvent mocks base method.
func (m *MockHistoryBuilder) AddCompletedWorkflowEvent(workflowTaskCompletedEventID int64, command *v1.CompleteWorkflowExecutionCommandAttributes, newExecutionRunID string) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCompletedWorkflowEvent", workflowTaskCompletedEventID, command, newExecutionRunID)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddCompletedWorkflowEvent indicates an expected call of AddCompletedWorkflowEvent.
func (mr *MockHistoryBuilderMockRecorder) AddCompletedWorkflowEvent(workflowTaskCompletedEventID, command, newExecutionRunID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCompletedWorkflowEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddCompletedWorkflowEvent), workflowTaskCompletedEventID, command, newExecutionRunID)
}

// AddContinuedAsNewEvent mocks base method.
func (m *MockHistoryBuilder) AddContinuedAsNewEvent(workflowTaskCompletedEventID int64, newRunID string, command *v1.ContinueAsNewWorkflowExecutionCommandAttributes) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContinuedAsNewEvent", workflowTaskCompletedEventID, newRunID, command)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddContinuedAsNewEvent indicates an expected call of AddContinuedAsNewEvent.
func (mr *MockHistoryBuilderMockRecorder) AddContinuedAsNewEvent(workflowTaskCompletedEventID, newRunID, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContinuedAsNewEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddContinuedAsNewEvent), workflowTaskCompletedEventID, newRunID, command)
}

// AddExternalWorkflowExecutionCancelRequested mocks base method.
func (m *MockHistoryBuilder) AddExternalWorkflowExecutionCancelRequested(initiatedEventID int64, targetNamespace namespace.Name, targetNamespaceID namespace.ID, workflowID, runID string) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExternalWorkflowExecutionCancelRequested", initiatedEventID, targetNamespace, targetNamespaceID, workflowID, runID)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddExternalWorkflowExecutionCancelRequested indicates an expected call of AddExternalWorkflowExecutionCancelRequested.
func (mr *MockHistoryBuilderMockRecorder) AddExternalWorkflowExecutionCancelRequested(initiatedEventID, targetNamespace, targetNamespaceID, workflowID, runID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExternalWorkflowExecutionCancelRequested", reflect.TypeOf((*MockHistoryBuilder)(nil).AddExternalWorkflowExecutionCancelRequested), initiatedEventID, targetNamespace, targetNamespaceID, workflowID, runID)
}

// AddExternalWorkflowExecutionSignaled mocks base method.
func (m *MockHistoryBuilder) AddExternalWorkflowExecutionSignaled(initiatedEventID int64, targetNamespace namespace.Name, targetNamespaceID namespace.ID, workflowID, runID, control string) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExternalWorkflowExecutionSignaled", initiatedEventID, targetNamespace, targetNamespaceID, workflowID, runID, control)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddExternalWorkflowExecutionSignaled indicates an expected call of AddExternalWorkflowExecutionSignaled.
func (mr *MockHistoryBuilderMockRecorder) AddExternalWorkflowExecutionSignaled(initiatedEventID, targetNamespace, targetNamespaceID, workflowID, runID, control interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExternalWorkflowExecutionSignaled", reflect.TypeOf((*MockHistoryBuilder)(nil).AddExternalWorkflowExecutionSignaled), initiatedEventID, targetNamespace, targetNamespaceID, workflowID, runID, control)
}

// AddFailWorkflowEvent mocks base method.
func (m *MockHistoryBuilder) AddFailWorkflowEvent(workflowTaskCompletedEventID int64, retryState v11.RetryState, command *v1.FailWorkflowExecutionCommandAttributes, newExecutionRunID string) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFailWorkflowEvent", workflowTaskCompletedEventID, retryState, command, newExecutionRunID)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddFailWorkflowEvent indicates an expected call of AddFailWorkflowEvent.
func (mr *MockHistoryBuilderMockRecorder) AddFailWorkflowEvent(workflowTaskCompletedEventID, retryState, command, newExecutionRunID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFailWorkflowEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddFailWorkflowEvent), workflowTaskCompletedEventID, retryState, command, newExecutionRunID)
}

// AddMarkerRecordedEvent mocks base method.
func (m *MockHistoryBuilder) AddMarkerRecordedEvent(workflowTaskCompletedEventID int64, command *v1.RecordMarkerCommandAttributes) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMarkerRecordedEvent", workflowTaskCompletedEventID, command)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddMarkerRecordedEvent indicates an expected call of AddMarkerRecordedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddMarkerRecordedEvent(workflowTaskCompletedEventID, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMarkerRecordedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddMarkerRecordedEvent), workflowTaskCompletedEventID, command)
}

// AddRequestCancelExternalWorkflowExecutionFailedEvent mocks base method.
func (m *MockHistoryBuilder) AddRequestCancelExternalWorkflowExecutionFailedEvent(workflowTaskCompletedEventID, initiatedEventID int64, targetNamespace namespace.Name, targetNamespaceID namespace.ID, workflowID, runID string, cause v11.CancelExternalWorkflowExecutionFailedCause) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRequestCancelExternalWorkflowExecutionFailedEvent", workflowTaskCompletedEventID, initiatedEventID, targetNamespace, targetNamespaceID, workflowID, runID, cause)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddRequestCancelExternalWorkflowExecutionFailedEvent indicates an expected call of AddRequestCancelExternalWorkflowExecutionFailedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddRequestCancelExternalWorkflowExecutionFailedEvent(workflowTaskCompletedEventID, initiatedEventID, targetNamespace, targetNamespaceID, workflowID, runID, cause interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRequestCancelExternalWorkflowExecutionFailedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddRequestCancelExternalWorkflowExecutionFailedEvent), workflowTaskCompletedEventID, initiatedEventID, targetNamespace, targetNamespaceID, workflowID, runID, cause)
}

// AddRequestCancelExternalWorkflowExecutionInitiatedEvent mocks base method.
func (m *MockHistoryBuilder) AddRequestCancelExternalWorkflowExecutionInitiatedEvent(workflowTaskCompletedEventID int64, command *v1.RequestCancelExternalWorkflowExecutionCommandAttributes, targetNamespaceID namespace.ID) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRequestCancelExternalWorkflowExecutionInitiatedEvent", workflowTaskCompletedEventID, command, targetNamespaceID)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddRequestCancelExternalWorkflowExecutionInitiatedEvent indicates an expected call of AddRequestCancelExternalWorkflowExecutionInitiatedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddRequestCancelExternalWorkflowExecutionInitiatedEvent(workflowTaskCompletedEventID, command, targetNamespaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRequestCancelExternalWorkflowExecutionInitiatedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddRequestCancelExternalWorkflowExecutionInitiatedEvent), workflowTaskCompletedEventID, command, targetNamespaceID)
}

// AddSignalExternalWorkflowExecutionFailedEvent mocks base method.
func (m *MockHistoryBuilder) AddSignalExternalWorkflowExecutionFailedEvent(workflowTaskCompletedEventID, initiatedEventID int64, targetNamespace namespace.Name, targetNamespaceID namespace.ID, workflowID, runID, control string, cause v11.SignalExternalWorkflowExecutionFailedCause) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSignalExternalWorkflowExecutionFailedEvent", workflowTaskCompletedEventID, initiatedEventID, targetNamespace, targetNamespaceID, workflowID, runID, control, cause)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddSignalExternalWorkflowExecutionFailedEvent indicates an expected call of AddSignalExternalWorkflowExecutionFailedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddSignalExternalWorkflowExecutionFailedEvent(workflowTaskCompletedEventID, initiatedEventID, targetNamespace, targetNamespaceID, workflowID, runID, control, cause interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSignalExternalWorkflowExecutionFailedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddSignalExternalWorkflowExecutionFailedEvent), workflowTaskCompletedEventID, initiatedEventID, targetNamespace, targetNamespaceID, workflowID, runID, control, cause)
}

// AddSignalExternalWorkflowExecutionInitiatedEvent mocks base method.
func (m *MockHistoryBuilder) AddSignalExternalWorkflowExecutionInitiatedEvent(workflowTaskCompletedEventID int64, command *v1.SignalExternalWorkflowExecutionCommandAttributes, targetNamespaceID namespace.ID) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSignalExternalWorkflowExecutionInitiatedEvent", workflowTaskCompletedEventID, command, targetNamespaceID)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddSignalExternalWorkflowExecutionInitiatedEvent indicates an expected call of AddSignalExternalWorkflowExecutionInitiatedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddSignalExternalWorkflowExecutionInitiatedEvent(workflowTaskCompletedEventID, command, targetNamespaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSignalExternalWorkflowExecutionInitiatedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddSignalExternalWorkflowExecutionInitiatedEvent), workflowTaskCompletedEventID, command, targetNamespaceID)
}

// AddStartChildWorkflowExecutionFailedEvent mocks base method.
func (m *MockHistoryBuilder) AddStartChildWorkflowExecutionFailedEvent(workflowTaskCompletedEventID, initiatedID int64, cause v11.StartChildWorkflowExecutionFailedCause, targetNamespace namespace.Name, targetNamespaceID namespace.ID, workflowID string, workflowType *v10.WorkflowType, control string) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStartChildWorkflowExecutionFailedEvent", workflowTaskCompletedEventID, initiatedID, cause, targetNamespace, targetNamespaceID, workflowID, workflowType, control)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddStartChildWorkflowExecutionFailedEvent indicates an expected call of AddStartChildWorkflowExecutionFailedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddStartChildWorkflowExecutionFailedEvent(workflowTaskCompletedEventID, initiatedID, cause, targetNamespace, targetNamespaceID, workflowID, workflowType, control interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStartChildWorkflowExecutionFailedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddStartChildWorkflowExecutionFailedEvent), workflowTaskCompletedEventID, initiatedID, cause, targetNamespace, targetNamespaceID, workflowID, workflowType, control)
}

// AddStartChildWorkflowExecutionInitiatedEvent mocks base method.
func (m *MockHistoryBuilder) AddStartChildWorkflowExecutionInitiatedEvent(workflowTaskCompletedEventID int64, command *v1.StartChildWorkflowExecutionCommandAttributes, targetNamespaceID namespace.ID) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStartChildWorkflowExecutionInitiatedEvent", workflowTaskCompletedEventID, command, targetNamespaceID)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddStartChildWorkflowExecutionInitiatedEvent indicates an expected call of AddStartChildWorkflowExecutionInitiatedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddStartChildWorkflowExecutionInitiatedEvent(workflowTaskCompletedEventID, command, targetNamespaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStartChildWorkflowExecutionInitiatedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddStartChildWorkflowExecutionInitiatedEvent), workflowTaskCompletedEventID, command, targetNamespaceID)
}

// AddTimeoutWorkflowEvent mocks base method.
func (m *MockHistoryBuilder) AddTimeoutWorkflowEvent(retryState v11.RetryState, newExecutionRunID string) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTimeoutWorkflowEvent", retryState, newExecutionRunID)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddTimeoutWorkflowEvent indicates an expected call of AddTimeoutWorkflowEvent.
func (mr *MockHistoryBuilderMockRecorder) AddTimeoutWorkflowEvent(retryState, newExecutionRunID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTimeoutWorkflowEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddTimeoutWorkflowEvent), retryState, newExecutionRunID)
}

// AddTimerCanceledEvent mocks base method.
func (m *MockHistoryBuilder) AddTimerCanceledEvent(workflowTaskCompletedEventID, startedEventID int64, timerID, identity string) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTimerCanceledEvent", workflowTaskCompletedEventID, startedEventID, timerID, identity)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddTimerCanceledEvent indicates an expected call of AddTimerCanceledEvent.
func (mr *MockHistoryBuilderMockRecorder) AddTimerCanceledEvent(workflowTaskCompletedEventID, startedEventID, timerID, identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTimerCanceledEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddTimerCanceledEvent), workflowTaskCompletedEventID, startedEventID, timerID, identity)
}

// AddTimerFiredEvent mocks base method.
func (m *MockHistoryBuilder) AddTimerFiredEvent(startedEventID int64, timerID string) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTimerFiredEvent", startedEventID, timerID)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddTimerFiredEvent indicates an expected call of AddTimerFiredEvent.
func (mr *MockHistoryBuilderMockRecorder) AddTimerFiredEvent(startedEventID, timerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTimerFiredEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddTimerFiredEvent), startedEventID, timerID)
}

// AddTimerStartedEvent mocks base method.
func (m *MockHistoryBuilder) AddTimerStartedEvent(workflowTaskCompletedEventID int64, command *v1.StartTimerCommandAttributes) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTimerStartedEvent", workflowTaskCompletedEventID, command)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddTimerStartedEvent indicates an expected call of AddTimerStartedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddTimerStartedEvent(workflowTaskCompletedEventID, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTimerStartedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddTimerStartedEvent), workflowTaskCompletedEventID, command)
}

// AddUpsertWorkflowSearchAttributesEvent mocks base method.
func (m *MockHistoryBuilder) AddUpsertWorkflowSearchAttributesEvent(workflowTaskCompletedEventID int64, command *v1.UpsertWorkflowSearchAttributesCommandAttributes) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUpsertWorkflowSearchAttributesEvent", workflowTaskCompletedEventID, command)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddUpsertWorkflowSearchAttributesEvent indicates an expected call of AddUpsertWorkflowSearchAttributesEvent.
func (mr *MockHistoryBuilderMockRecorder) AddUpsertWorkflowSearchAttributesEvent(workflowTaskCompletedEventID, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUpsertWorkflowSearchAttributesEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddUpsertWorkflowSearchAttributesEvent), workflowTaskCompletedEventID, command)
}

// AddWorkflowExecutionCancelRequestedEvent mocks base method.
func (m *MockHistoryBuilder) AddWorkflowExecutionCancelRequestedEvent(request *v16.RequestCancelWorkflowExecutionRequest) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorkflowExecutionCancelRequestedEvent", request)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddWorkflowExecutionCancelRequestedEvent indicates an expected call of AddWorkflowExecutionCancelRequestedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddWorkflowExecutionCancelRequestedEvent(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkflowExecutionCancelRequestedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddWorkflowExecutionCancelRequestedEvent), request)
}

// AddWorkflowExecutionCanceledEvent mocks base method.
func (m *MockHistoryBuilder) AddWorkflowExecutionCanceledEvent(workflowTaskCompletedEventID int64, command *v1.CancelWorkflowExecutionCommandAttributes) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorkflowExecutionCanceledEvent", workflowTaskCompletedEventID, command)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddWorkflowExecutionCanceledEvent indicates an expected call of AddWorkflowExecutionCanceledEvent.
func (mr *MockHistoryBuilderMockRecorder) AddWorkflowExecutionCanceledEvent(workflowTaskCompletedEventID, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkflowExecutionCanceledEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddWorkflowExecutionCanceledEvent), workflowTaskCompletedEventID, command)
}

// AddWorkflowExecutionSignaledEvent mocks base method.
func (m *MockHistoryBuilder) AddWorkflowExecutionSignaledEvent(signalName string, input *v10.Payloads, identity string, header *v10.Header) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorkflowExecutionSignaledEvent", signalName, input, identity, header)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddWorkflowExecutionSignaledEvent indicates an expected call of AddWorkflowExecutionSignaledEvent.
func (mr *MockHistoryBuilderMockRecorder) AddWorkflowExecutionSignaledEvent(signalName, input, identity, header interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkflowExecutionSignaledEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddWorkflowExecutionSignaledEvent), signalName, input, identity, header)
}

// AddWorkflowExecutionStartedEvent mocks base method.
func (m *MockHistoryBuilder) AddWorkflowExecutionStartedEvent(startTime time.Time, request *v16.StartWorkflowExecutionRequest, resetPoints *v15.ResetPoints, prevRunID, firstRunID, originalRunID string) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorkflowExecutionStartedEvent", startTime, request, resetPoints, prevRunID, firstRunID, originalRunID)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddWorkflowExecutionStartedEvent indicates an expected call of AddWorkflowExecutionStartedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddWorkflowExecutionStartedEvent(startTime, request, resetPoints, prevRunID, firstRunID, originalRunID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkflowExecutionStartedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddWorkflowExecutionStartedEvent), startTime, request, resetPoints, prevRunID, firstRunID, originalRunID)
}

// AddWorkflowExecutionTerminatedEvent mocks base method.
func (m *MockHistoryBuilder) AddWorkflowExecutionTerminatedEvent(reason string, details *v10.Payloads, identity string) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorkflowExecutionTerminatedEvent", reason, details, identity)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddWorkflowExecutionTerminatedEvent indicates an expected call of AddWorkflowExecutionTerminatedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddWorkflowExecutionTerminatedEvent(reason, details, identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkflowExecutionTerminatedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddWorkflowExecutionTerminatedEvent), reason, details, identity)
}

// AddWorkflowPropertiesModifiedEvent mocks base method.
func (m *MockHistoryBuilder) AddWorkflowPropertiesModifiedEvent(workflowTaskCompletedEventID int64, command *v1.ModifyWorkflowPropertiesCommandAttributes) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorkflowPropertiesModifiedEvent", workflowTaskCompletedEventID, command)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddWorkflowPropertiesModifiedEvent indicates an expected call of AddWorkflowPropertiesModifiedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddWorkflowPropertiesModifiedEvent(workflowTaskCompletedEventID, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkflowPropertiesModifiedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddWorkflowPropertiesModifiedEvent), workflowTaskCompletedEventID, command)
}

// AddWorkflowTaskCompletedEvent mocks base method.
func (m *MockHistoryBuilder) AddWorkflowTaskCompletedEvent(scheduledEventID, startedEventID int64, identity, checksum string) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorkflowTaskCompletedEvent", scheduledEventID, startedEventID, identity, checksum)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddWorkflowTaskCompletedEvent indicates an expected call of AddWorkflowTaskCompletedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddWorkflowTaskCompletedEvent(scheduledEventID, startedEventID, identity, checksum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkflowTaskCompletedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddWorkflowTaskCompletedEvent), scheduledEventID, startedEventID, identity, checksum)
}

// AddWorkflowTaskFailedEvent mocks base method.
func (m *MockHistoryBuilder) AddWorkflowTaskFailedEvent(scheduledEventID, startedEventID int64, cause v11.WorkflowTaskFailedCause, failure *v12.Failure, identity, baseRunID, newRunID string, forkEventVersion int64, checksum string) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorkflowTaskFailedEvent", scheduledEventID, startedEventID, cause, failure, identity, baseRunID, newRunID, forkEventVersion, checksum)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddWorkflowTaskFailedEvent indicates an expected call of AddWorkflowTaskFailedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddWorkflowTaskFailedEvent(scheduledEventID, startedEventID, cause, failure, identity, baseRunID, newRunID, forkEventVersion, checksum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkflowTaskFailedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddWorkflowTaskFailedEvent), scheduledEventID, startedEventID, cause, failure, identity, baseRunID, newRunID, forkEventVersion, checksum)
}

// AddWorkflowTaskScheduledEvent mocks base method.
func (m *MockHistoryBuilder) AddWorkflowTaskScheduledEvent(taskQueue *v14.TaskQueue, startToCloseTimeout *time.Duration, attempt int32, now time.Time) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorkflowTaskScheduledEvent", taskQueue, startToCloseTimeout, attempt, now)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddWorkflowTaskScheduledEvent indicates an expected call of AddWorkflowTaskScheduledEvent.
func (mr *MockHistoryBuilderMockRecorder) AddWorkflowTaskScheduledEvent(taskQueue, startToCloseTimeout, attempt, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkflowTaskScheduledEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddWorkflowTaskScheduledEvent), taskQueue, startToCloseTimeout, attempt, now)
}

// AddWorkflowTaskStartedEvent mocks base method.
func (m *MockHistoryBuilder) AddWorkflowTaskStartedEvent(scheduledEventID int64, requestID, identity string, now time.Time) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorkflowTaskStartedEvent", scheduledEventID, requestID, identity, now)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddWorkflowTaskStartedEvent indicates an expected call of AddWorkflowTaskStartedEvent.
func (mr *MockHistoryBuilderMockRecorder) AddWorkflowTaskStartedEvent(scheduledEventID, requestID, identity, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkflowTaskStartedEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddWorkflowTaskStartedEvent), scheduledEventID, requestID, identity, now)
}

// AddWorkflowTaskTimedOutEvent mocks base method.
func (m *MockHistoryBuilder) AddWorkflowTaskTimedOutEvent(scheduledEventID, startedEventID int64, timeoutType v11.TimeoutType) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorkflowTaskTimedOutEvent", scheduledEventID, startedEventID, timeoutType)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// AddWorkflowTaskTimedOutEvent indicates an expected call of AddWorkflowTaskTimedOutEvent.
func (mr *MockHistoryBuilderMockRecorder) AddWorkflowTaskTimedOutEvent(scheduledEventID, startedEventID, timeoutType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkflowTaskTimedOutEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).AddWorkflowTaskTimedOutEvent), scheduledEventID, startedEventID, timeoutType)
}

// BufferEventSize mocks base method.
func (m *MockHistoryBuilder) BufferEventSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BufferEventSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// BufferEventSize indicates an expected call of BufferEventSize.
func (mr *MockHistoryBuilderMockRecorder) BufferEventSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BufferEventSize", reflect.TypeOf((*MockHistoryBuilder)(nil).BufferEventSize))
}

// Finish mocks base method.
func (m *MockHistoryBuilder) Finish(flushBufferEvent bool) (*HistoryMutation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finish", flushBufferEvent)
	ret0, _ := ret[0].(*HistoryMutation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Finish indicates an expected call of Finish.
func (mr *MockHistoryBuilderMockRecorder) Finish(flushBufferEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockHistoryBuilder)(nil).Finish), flushBufferEvent)
}

// FlushAndCreateNewBatch mocks base method.
func (m *MockHistoryBuilder) FlushAndCreateNewBatch() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FlushAndCreateNewBatch")
}

// FlushAndCreateNewBatch indicates an expected call of FlushAndCreateNewBatch.
func (mr *MockHistoryBuilderMockRecorder) FlushAndCreateNewBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAndCreateNewBatch", reflect.TypeOf((*MockHistoryBuilder)(nil).FlushAndCreateNewBatch))
}

// FlushBufferToCurrentBatch mocks base method.
func (m *MockHistoryBuilder) FlushBufferToCurrentBatch() map[int64]int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushBufferToCurrentBatch")
	ret0, _ := ret[0].(map[int64]int64)
	return ret0
}

// FlushBufferToCurrentBatch indicates an expected call of FlushBufferToCurrentBatch.
func (mr *MockHistoryBuilderMockRecorder) FlushBufferToCurrentBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushBufferToCurrentBatch", reflect.TypeOf((*MockHistoryBuilder)(nil).FlushBufferToCurrentBatch))
}

// GetAndRemoveTimerFireEvent mocks base method.
func (m *MockHistoryBuilder) GetAndRemoveTimerFireEvent(timerID string) *v13.HistoryEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAndRemoveTimerFireEvent", timerID)
	ret0, _ := ret[0].(*v13.HistoryEvent)
	return ret0
}

// GetAndRemoveTimerFireEvent indicates an expected call of GetAndRemoveTimerFireEvent.
func (mr *MockHistoryBuilderMockRecorder) GetAndRemoveTimerFireEvent(timerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAndRemoveTimerFireEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).GetAndRemoveTimerFireEvent), timerID)
}

// HasActivityFinishEvent mocks base method.
func (m *MockHistoryBuilder) HasActivityFinishEvent(scheduledEventID int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasActivityFinishEvent", scheduledEventID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasActivityFinishEvent indicates an expected call of HasActivityFinishEvent.
func (mr *MockHistoryBuilderMockRecorder) HasActivityFinishEvent(scheduledEventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasActivityFinishEvent", reflect.TypeOf((*MockHistoryBuilder)(nil).HasActivityFinishEvent), scheduledEventID)
}

// HasBufferEvents mocks base method.
func (m *MockHistoryBuilder) HasBufferEvents() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasBufferEvents")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasBufferEvents indicates an expected call of HasBufferEvents.
func (mr *MockHistoryBuilderMockRecorder) HasBufferEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasBufferEvents", reflect.TypeOf((*MockHistoryBuilder)(nil).HasBufferEvents))
}

// NextEventID mocks base method.
func (m *MockHistoryBuilder) NextEventID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextEventID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// NextEventID indicates an expected call of NextEventID.
func (mr *MockHistoryBuilderMockRecorder) NextEventID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextEventID", reflect.TypeOf((*MockHistoryBuilder)(nil).NextEventID))
}
