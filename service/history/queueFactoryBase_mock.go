// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: queueFactoryBase.go

// Package history is a generated GoMock package.
package history

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	queues "go.temporal.io/server/service/history/queues"
	shard "go.temporal.io/server/service/history/shard"
	workflow "go.temporal.io/server/service/history/workflow"
)

// MockQueueFactory is a mock of QueueFactory interface.
type MockQueueFactory struct {
	ctrl     *gomock.Controller
	recorder *MockQueueFactoryMockRecorder
}

// MockQueueFactoryMockRecorder is the mock recorder for MockQueueFactory.
type MockQueueFactoryMockRecorder struct {
	mock *MockQueueFactory
}

// NewMockQueueFactory creates a new mock instance.
func NewMockQueueFactory(ctrl *gomock.Controller) *MockQueueFactory {
	mock := &MockQueueFactory{ctrl: ctrl}
	mock.recorder = &MockQueueFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueFactory) EXPECT() *MockQueueFactoryMockRecorder {
	return m.recorder
}

// CreateQueue mocks base method.
func (m *MockQueueFactory) CreateQueue(shard shard.Context, cache workflow.Cache) queues.Queue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQueue", shard, cache)
	ret0, _ := ret[0].(queues.Queue)
	return ret0
}

// CreateQueue indicates an expected call of CreateQueue.
func (mr *MockQueueFactoryMockRecorder) CreateQueue(shard, cache interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueue", reflect.TypeOf((*MockQueueFactory)(nil).CreateQueue), shard, cache)
}

// Enabled mocks base method.
func (m *MockQueueFactory) Enabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Enabled indicates an expected call of Enabled.
func (mr *MockQueueFactoryMockRecorder) Enabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enabled", reflect.TypeOf((*MockQueueFactory)(nil).Enabled))
}

// Start mocks base method.
func (m *MockQueueFactory) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockQueueFactoryMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockQueueFactory)(nil).Start))
}

// Stop mocks base method.
func (m *MockQueueFactory) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockQueueFactoryMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockQueueFactory)(nil).Stop))
}
