// Code generated by MockGen. DO NOT EDIT.
// Source: conflictResolver.go

// Package history is a generated GoMock package.
package history

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	persistence "github.com/temporalio/temporal/common/persistence"
)

// MockconflictResolver is a mock of conflictResolver interface.
type MockconflictResolver struct {
	ctrl     *gomock.Controller
	recorder *MockconflictResolverMockRecorder
}

// MockconflictResolverMockRecorder is the mock recorder for MockconflictResolver.
type MockconflictResolverMockRecorder struct {
	mock *MockconflictResolver
}

// NewMockconflictResolver creates a new mock instance.
func NewMockconflictResolver(ctrl *gomock.Controller) *MockconflictResolver {
	mock := &MockconflictResolver{ctrl: ctrl}
	mock.recorder = &MockconflictResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconflictResolver) EXPECT() *MockconflictResolverMockRecorder {
	return m.recorder
}

// reset mocks base method.
func (m *MockconflictResolver) reset(prevRunID string, prevLastWriteVersion int64, prevState int, requestID string, replayEventID int64, info *persistence.WorkflowExecutionInfo, updateCondition int64) (mutableState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "reset", prevRunID, prevLastWriteVersion, prevState, requestID, replayEventID, info, updateCondition)
	ret0, _ := ret[0].(mutableState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// reset indicates an expected call of reset.
func (mr *MockconflictResolverMockRecorder) reset(prevRunID, prevLastWriteVersion, prevState, requestID, replayEventID, info, updateCondition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "reset", reflect.TypeOf((*MockconflictResolver)(nil).reset), prevRunID, prevLastWriteVersion, prevState, requestID, replayEventID, info, updateCondition)
}
