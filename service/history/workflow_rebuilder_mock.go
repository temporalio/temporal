// Code generated by MockGen. DO NOT EDIT.
// Source: workflow_rebuilder.go
//
// Generated by this command:
//
//	mockgen -package history -source workflow_rebuilder.go -destination workflow_rebuilder_mock.go
//

// Package history is a generated GoMock package.
package history

import (
	context "context"
	reflect "reflect"

	definition "go.temporal.io/server/common/definition"
	gomock "go.uber.org/mock/gomock"
)

// MockworkflowRebuilder is a mock of workflowRebuilder interface.
type MockworkflowRebuilder struct {
	ctrl     *gomock.Controller
	recorder *MockworkflowRebuilderMockRecorder
	isgomock struct{}
}

// MockworkflowRebuilderMockRecorder is the mock recorder for MockworkflowRebuilder.
type MockworkflowRebuilderMockRecorder struct {
	mock *MockworkflowRebuilder
}

// NewMockworkflowRebuilder creates a new mock instance.
func NewMockworkflowRebuilder(ctrl *gomock.Controller) *MockworkflowRebuilder {
	mock := &MockworkflowRebuilder{ctrl: ctrl}
	mock.recorder = &MockworkflowRebuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockworkflowRebuilder) EXPECT() *MockworkflowRebuilderMockRecorder {
	return m.recorder
}

// rebuild mocks base method.
func (m *MockworkflowRebuilder) rebuild(ctx context.Context, workflowKey definition.WorkflowKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "rebuild", ctx, workflowKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// rebuild indicates an expected call of rebuild.
func (mr *MockworkflowRebuilderMockRecorder) rebuild(ctx, workflowKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "rebuild", reflect.TypeOf((*MockworkflowRebuilder)(nil).rebuild), ctx, workflowKey)
}
