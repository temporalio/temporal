// Code generated by MockGen. DO NOT EDIT.
// Source: rescheduler.go
//
// Generated by this command:
//
//	mockgen -package queues -source rescheduler.go -destination rescheduler_mock.go
//

// Package queues is a generated GoMock package.
package queues

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockRescheduler is a mock of Rescheduler interface.
type MockRescheduler struct {
	ctrl     *gomock.Controller
	recorder *MockReschedulerMockRecorder
	isgomock struct{}
}

// MockReschedulerMockRecorder is the mock recorder for MockRescheduler.
type MockReschedulerMockRecorder struct {
	mock *MockRescheduler
}

// NewMockRescheduler creates a new mock instance.
func NewMockRescheduler(ctrl *gomock.Controller) *MockRescheduler {
	mock := &MockRescheduler{ctrl: ctrl}
	mock.recorder = &MockReschedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRescheduler) EXPECT() *MockReschedulerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRescheduler) Add(task Executable, rescheduleTime time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", task, rescheduleTime)
}

// Add indicates an expected call of Add.
func (mr *MockReschedulerMockRecorder) Add(task, rescheduleTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRescheduler)(nil).Add), task, rescheduleTime)
}

// Len mocks base method.
func (m *MockRescheduler) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockReschedulerMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockRescheduler)(nil).Len))
}

// Reschedule mocks base method.
func (m *MockRescheduler) Reschedule(namespaceID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reschedule", namespaceID)
}

// Reschedule indicates an expected call of Reschedule.
func (mr *MockReschedulerMockRecorder) Reschedule(namespaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reschedule", reflect.TypeOf((*MockRescheduler)(nil).Reschedule), namespaceID)
}

// Start mocks base method.
func (m *MockRescheduler) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockReschedulerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRescheduler)(nil).Start))
}

// Stop mocks base method.
func (m *MockRescheduler) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockReschedulerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockRescheduler)(nil).Stop))
}
