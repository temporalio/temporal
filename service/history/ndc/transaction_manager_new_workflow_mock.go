// Code generated by MockGen. DO NOT EDIT.
// Source: transaction_manager_new_workflow.go
//
// Generated by this command:
//
//	mockgen -package ndc -source transaction_manager_new_workflow.go -destination transaction_manager_new_workflow_mock.go
//

// Package ndc is a generated GoMock package.
package ndc

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MocktransactionMgrForNewWorkflow is a mock of transactionMgrForNewWorkflow interface.
type MocktransactionMgrForNewWorkflow struct {
	ctrl     *gomock.Controller
	recorder *MocktransactionMgrForNewWorkflowMockRecorder
	isgomock struct{}
}

// MocktransactionMgrForNewWorkflowMockRecorder is the mock recorder for MocktransactionMgrForNewWorkflow.
type MocktransactionMgrForNewWorkflowMockRecorder struct {
	mock *MocktransactionMgrForNewWorkflow
}

// NewMocktransactionMgrForNewWorkflow creates a new mock instance.
func NewMocktransactionMgrForNewWorkflow(ctrl *gomock.Controller) *MocktransactionMgrForNewWorkflow {
	mock := &MocktransactionMgrForNewWorkflow{ctrl: ctrl}
	mock.recorder = &MocktransactionMgrForNewWorkflowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransactionMgrForNewWorkflow) EXPECT() *MocktransactionMgrForNewWorkflowMockRecorder {
	return m.recorder
}

// dispatchForNewWorkflow mocks base method.
func (m *MocktransactionMgrForNewWorkflow) dispatchForNewWorkflow(ctx context.Context, targetWorkflow Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "dispatchForNewWorkflow", ctx, targetWorkflow)
	ret0, _ := ret[0].(error)
	return ret0
}

// dispatchForNewWorkflow indicates an expected call of dispatchForNewWorkflow.
func (mr *MocktransactionMgrForNewWorkflowMockRecorder) dispatchForNewWorkflow(ctx, targetWorkflow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "dispatchForNewWorkflow", reflect.TypeOf((*MocktransactionMgrForNewWorkflow)(nil).dispatchForNewWorkflow), ctx, targetWorkflow)
}
