// Code generated by MockGen. DO NOT EDIT.
// Source: activity_state_replicator.go
//
// Generated by this command:
//
//	mockgen -package ndc -source activity_state_replicator.go -destination activity_state_replicator_mock.go
//

// Package ndc is a generated GoMock package.
package ndc

import (
	context "context"
	reflect "reflect"

	historyservice "go.temporal.io/server/api/historyservice/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockActivityStateReplicator is a mock of ActivityStateReplicator interface.
type MockActivityStateReplicator struct {
	ctrl     *gomock.Controller
	recorder *MockActivityStateReplicatorMockRecorder
	isgomock struct{}
}

// MockActivityStateReplicatorMockRecorder is the mock recorder for MockActivityStateReplicator.
type MockActivityStateReplicatorMockRecorder struct {
	mock *MockActivityStateReplicator
}

// NewMockActivityStateReplicator creates a new mock instance.
func NewMockActivityStateReplicator(ctrl *gomock.Controller) *MockActivityStateReplicator {
	mock := &MockActivityStateReplicator{ctrl: ctrl}
	mock.recorder = &MockActivityStateReplicatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivityStateReplicator) EXPECT() *MockActivityStateReplicatorMockRecorder {
	return m.recorder
}

// SyncActivitiesState mocks base method.
func (m *MockActivityStateReplicator) SyncActivitiesState(ctx context.Context, request *historyservice.SyncActivitiesRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncActivitiesState", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncActivitiesState indicates an expected call of SyncActivitiesState.
func (mr *MockActivityStateReplicatorMockRecorder) SyncActivitiesState(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncActivitiesState", reflect.TypeOf((*MockActivityStateReplicator)(nil).SyncActivitiesState), ctx, request)
}

// SyncActivityState mocks base method.
func (m *MockActivityStateReplicator) SyncActivityState(ctx context.Context, request *historyservice.SyncActivityRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncActivityState", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncActivityState indicates an expected call of SyncActivityState.
func (mr *MockActivityStateReplicatorMockRecorder) SyncActivityState(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncActivityState", reflect.TypeOf((*MockActivityStateReplicator)(nil).SyncActivityState), ctx, request)
}
