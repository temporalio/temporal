// Code generated by MockGen. DO NOT EDIT.
// Source: hsm_state_replicator.go
//
// Generated by this command:
//
//	mockgen -package ndc -source hsm_state_replicator.go -destination hsm_state_replicator_mock.go
//

// Package ndc is a generated GoMock package.
package ndc

import (
	context "context"
	reflect "reflect"

	interfaces "go.temporal.io/server/service/history/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockHSMStateReplicator is a mock of HSMStateReplicator interface.
type MockHSMStateReplicator struct {
	ctrl     *gomock.Controller
	recorder *MockHSMStateReplicatorMockRecorder
	isgomock struct{}
}

// MockHSMStateReplicatorMockRecorder is the mock recorder for MockHSMStateReplicator.
type MockHSMStateReplicatorMockRecorder struct {
	mock *MockHSMStateReplicator
}

// NewMockHSMStateReplicator creates a new mock instance.
func NewMockHSMStateReplicator(ctrl *gomock.Controller) *MockHSMStateReplicator {
	mock := &MockHSMStateReplicator{ctrl: ctrl}
	mock.recorder = &MockHSMStateReplicatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHSMStateReplicator) EXPECT() *MockHSMStateReplicatorMockRecorder {
	return m.recorder
}

// SyncHSMState mocks base method.
func (m *MockHSMStateReplicator) SyncHSMState(ctx context.Context, request *interfaces.SyncHSMRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncHSMState", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncHSMState indicates an expected call of SyncHSMState.
func (mr *MockHSMStateReplicatorMockRecorder) SyncHSMState(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncHSMState", reflect.TypeOf((*MockHSMStateReplicator)(nil).SyncHSMState), ctx, request)
}
