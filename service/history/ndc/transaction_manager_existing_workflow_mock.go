// Code generated by MockGen. DO NOT EDIT.
// Source: transaction_manager_existing_workflow.go
//
// Generated by this command:
//
//	mockgen -package ndc -source transaction_manager_existing_workflow.go -destination transaction_manager_existing_workflow_mock.go
//

// Package ndc is a generated GoMock package.
package ndc

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MocktransactionMgrForExistingWorkflow is a mock of transactionMgrForExistingWorkflow interface.
type MocktransactionMgrForExistingWorkflow struct {
	ctrl     *gomock.Controller
	recorder *MocktransactionMgrForExistingWorkflowMockRecorder
	isgomock struct{}
}

// MocktransactionMgrForExistingWorkflowMockRecorder is the mock recorder for MocktransactionMgrForExistingWorkflow.
type MocktransactionMgrForExistingWorkflowMockRecorder struct {
	mock *MocktransactionMgrForExistingWorkflow
}

// NewMocktransactionMgrForExistingWorkflow creates a new mock instance.
func NewMocktransactionMgrForExistingWorkflow(ctrl *gomock.Controller) *MocktransactionMgrForExistingWorkflow {
	mock := &MocktransactionMgrForExistingWorkflow{ctrl: ctrl}
	mock.recorder = &MocktransactionMgrForExistingWorkflowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransactionMgrForExistingWorkflow) EXPECT() *MocktransactionMgrForExistingWorkflowMockRecorder {
	return m.recorder
}

// dispatchForExistingWorkflow mocks base method.
func (m *MocktransactionMgrForExistingWorkflow) dispatchForExistingWorkflow(ctx context.Context, isWorkflowRebuilt bool, targetWorkflow, newWorkflow Workflow) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "dispatchForExistingWorkflow", ctx, isWorkflowRebuilt, targetWorkflow, newWorkflow)
	ret0, _ := ret[0].(error)
	return ret0
}

// dispatchForExistingWorkflow indicates an expected call of dispatchForExistingWorkflow.
func (mr *MocktransactionMgrForExistingWorkflowMockRecorder) dispatchForExistingWorkflow(ctx, isWorkflowRebuilt, targetWorkflow, newWorkflow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "dispatchForExistingWorkflow", reflect.TypeOf((*MocktransactionMgrForExistingWorkflow)(nil).dispatchForExistingWorkflow), ctx, isWorkflowRebuilt, targetWorkflow, newWorkflow)
}
