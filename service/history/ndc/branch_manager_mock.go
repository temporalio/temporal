// Code generated by MockGen. DO NOT EDIT.
// Source: branch_manager.go
//
// Generated by this command:
//
//	mockgen -package ndc -source branch_manager.go -destination branch_manager_mock.go
//

// Package ndc is a generated GoMock package.
package ndc

import (
	context "context"
	reflect "reflect"

	history "go.temporal.io/server/api/history/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockBranchMgr is a mock of BranchMgr interface.
type MockBranchMgr struct {
	ctrl     *gomock.Controller
	recorder *MockBranchMgrMockRecorder
	isgomock struct{}
}

// MockBranchMgrMockRecorder is the mock recorder for MockBranchMgr.
type MockBranchMgrMockRecorder struct {
	mock *MockBranchMgr
}

// NewMockBranchMgr creates a new mock instance.
func NewMockBranchMgr(ctrl *gomock.Controller) *MockBranchMgr {
	mock := &MockBranchMgr{ctrl: ctrl}
	mock.recorder = &MockBranchMgrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBranchMgr) EXPECT() *MockBranchMgrMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBranchMgr) Create(ctx context.Context, incomingVersionHistory *history.VersionHistory, incomingFirstEventID, incomingFirstEventVersion int64) (bool, int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, incomingVersionHistory, incomingFirstEventID, incomingFirstEventVersion)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockBranchMgrMockRecorder) Create(ctx, incomingVersionHistory, incomingFirstEventID, incomingFirstEventVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBranchMgr)(nil).Create), ctx, incomingVersionHistory, incomingFirstEventID, incomingFirstEventVersion)
}

// GetOrCreate mocks base method.
func (m *MockBranchMgr) GetOrCreate(ctx context.Context, incomingVersionHistory *history.VersionHistory, incomingFirstEventID, incomingFirstEventVersion int64) (bool, int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreate", ctx, incomingVersionHistory, incomingFirstEventID, incomingFirstEventVersion)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrCreate indicates an expected call of GetOrCreate.
func (mr *MockBranchMgrMockRecorder) GetOrCreate(ctx, incomingVersionHistory, incomingFirstEventID, incomingFirstEventVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreate", reflect.TypeOf((*MockBranchMgr)(nil).GetOrCreate), ctx, incomingVersionHistory, incomingFirstEventID, incomingFirstEventVersion)
}
