// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: branch_manager.go

// Package ndc is a generated GoMock package.
package ndc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	history "go.temporal.io/server/api/history/v1"
)

// MockBranchMgr is a mock of BranchMgr interface.
type MockBranchMgr struct {
	ctrl     *gomock.Controller
	recorder *MockBranchMgrMockRecorder
}

// MockBranchMgrMockRecorder is the mock recorder for MockBranchMgr.
type MockBranchMgrMockRecorder struct {
	mock *MockBranchMgr
}

// NewMockBranchMgr creates a new mock instance.
func NewMockBranchMgr(ctrl *gomock.Controller) *MockBranchMgr {
	mock := &MockBranchMgr{ctrl: ctrl}
	mock.recorder = &MockBranchMgrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBranchMgr) EXPECT() *MockBranchMgrMockRecorder {
	return m.recorder
}

// create mocks base method.
func (m *MockBranchMgr) create(ctx context.Context, incomingVersionHistory *history.VersionHistory, incomingFirstEventID, incomingFirstEventVersion int64) (bool, int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "create", ctx, incomingVersionHistory, incomingFirstEventID, incomingFirstEventVersion)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// create indicates an expected call of create.
func (mr *MockBranchMgrMockRecorder) create(ctx, incomingVersionHistory, incomingFirstEventID, incomingFirstEventVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "create", reflect.TypeOf((*MockBranchMgr)(nil).create), ctx, incomingVersionHistory, incomingFirstEventID, incomingFirstEventVersion)
}

// getOrCreate mocks base method.
func (m *MockBranchMgr) getOrCreate(ctx context.Context, incomingVersionHistory *history.VersionHistory, incomingFirstEventID, incomingFirstEventVersion int64) (bool, int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getOrCreate", ctx, incomingVersionHistory, incomingFirstEventID, incomingFirstEventVersion)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// getOrCreate indicates an expected call of getOrCreate.
func (mr *MockBranchMgrMockRecorder) getOrCreate(ctx, incomingVersionHistory, incomingFirstEventID, incomingFirstEventVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getOrCreate", reflect.TypeOf((*MockBranchMgr)(nil).getOrCreate), ctx, incomingVersionHistory, incomingFirstEventID, incomingFirstEventVersion)
}
