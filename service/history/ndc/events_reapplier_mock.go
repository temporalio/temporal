// Code generated by MockGen. DO NOT EDIT.
// Source: events_reapplier.go
//
// Generated by this command:
//
//	mockgen -package ndc -source events_reapplier.go -destination events_reapplier_mock.go
//

// Package ndc is a generated GoMock package.
package ndc

import (
	context "context"
	reflect "reflect"

	history "go.temporal.io/api/history/v1"
	interfaces "go.temporal.io/server/service/history/interfaces"
	update "go.temporal.io/server/service/history/workflow/update"
	gomock "go.uber.org/mock/gomock"
)

// MockEventsReapplier is a mock of EventsReapplier interface.
type MockEventsReapplier struct {
	ctrl     *gomock.Controller
	recorder *MockEventsReapplierMockRecorder
	isgomock struct{}
}

// MockEventsReapplierMockRecorder is the mock recorder for MockEventsReapplier.
type MockEventsReapplierMockRecorder struct {
	mock *MockEventsReapplier
}

// NewMockEventsReapplier creates a new mock instance.
func NewMockEventsReapplier(ctrl *gomock.Controller) *MockEventsReapplier {
	mock := &MockEventsReapplier{ctrl: ctrl}
	mock.recorder = &MockEventsReapplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventsReapplier) EXPECT() *MockEventsReapplierMockRecorder {
	return m.recorder
}

// ReapplyEvents mocks base method.
func (m *MockEventsReapplier) ReapplyEvents(ctx context.Context, ms interfaces.MutableState, updateRegistry update.Registry, historyEvents []*history.HistoryEvent, runID string) ([]*history.HistoryEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReapplyEvents", ctx, ms, updateRegistry, historyEvents, runID)
	ret0, _ := ret[0].([]*history.HistoryEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReapplyEvents indicates an expected call of ReapplyEvents.
func (mr *MockEventsReapplierMockRecorder) ReapplyEvents(ctx, ms, updateRegistry, historyEvents, runID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReapplyEvents", reflect.TypeOf((*MockEventsReapplier)(nil).ReapplyEvents), ctx, ms, updateRegistry, historyEvents, runID)
}
