// Code generated by MockGen. DO NOT EDIT.
// Source: nDCWorkflowResetter.go

// Package history is a generated GoMock package.
package history

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MocknDCWorkflowResetter is a mock of nDCWorkflowResetter interface.
type MocknDCWorkflowResetter struct {
	ctrl     *gomock.Controller
	recorder *MocknDCWorkflowResetterMockRecorder
}

// MocknDCWorkflowResetterMockRecorder is the mock recorder for MocknDCWorkflowResetter.
type MocknDCWorkflowResetterMockRecorder struct {
	mock *MocknDCWorkflowResetter
}

// NewMocknDCWorkflowResetter creates a new mock instance.
func NewMocknDCWorkflowResetter(ctrl *gomock.Controller) *MocknDCWorkflowResetter {
	mock := &MocknDCWorkflowResetter{ctrl: ctrl}
	mock.recorder = &MocknDCWorkflowResetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknDCWorkflowResetter) EXPECT() *MocknDCWorkflowResetterMockRecorder {
	return m.recorder
}

// resetWorkflow mocks base method.
func (m *MocknDCWorkflowResetter) resetWorkflow(ctx context.Context, now time.Time, baseLastEventID, baseLastEventVersion, incomingFirstEventID, incomingFirstEventVersion int64) (mutableState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "resetWorkflow", ctx, now, baseLastEventID, baseLastEventVersion, incomingFirstEventID, incomingFirstEventVersion)
	ret0, _ := ret[0].(mutableState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// resetWorkflow indicates an expected call of resetWorkflow.
func (mr *MocknDCWorkflowResetterMockRecorder) resetWorkflow(ctx, now, baseLastEventID, baseLastEventVersion, incomingFirstEventID, incomingFirstEventVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "resetWorkflow", reflect.TypeOf((*MocknDCWorkflowResetter)(nil).resetWorkflow), ctx, now, baseLastEventID, baseLastEventVersion, incomingFirstEventID, incomingFirstEventVersion)
}
