package main

import (
	"flag"
	"fmt"
	"io"
	"log"
	"os"
	"path"
	"reflect"
	"regexp"
	"text/template"

	historypb "go.temporal.io/api/history/v1"
)

type (
	eventData struct {
		AttributesTypeName string
	}

	searchAttributesHelpersData struct {
		Events []eventData
	}
)

var (
	// Is used to find attribute getters and extract the event type (match[1]).
	attributesGetterRegex = regexp.MustCompile("^Get(.+EventAttributes)$")
)

func main() {
	outPathFlag := flag.String("out", ".", "path to write generated files")
	flag.Parse()

	eventHelpersFile := path.Join(*outPathFlag, "event_gen.go")
	callWithFile(generateSearchAttributesEventHelpers, eventHelpersFile)
}

func generateSearchAttributesEventHelpers(w io.Writer) {

	writeSearchAttributesEventHelpers(w, `
package searchattribute

import (
	commonpb "go.temporal.io/api/common/v1"
	historypb "go.temporal.io/api/history/v1"
)

func SetToEvent(event *historypb.HistoryEvent, sas *commonpb.SearchAttributes) bool {
	switch e := event.GetAttributes().(type) {
	{{- range .Events}}
	case *historypb.HistoryEvent_{{.AttributesTypeName}}:
		e.{{.AttributesTypeName}}.SearchAttributes = sas
		return true
	{{- end}}
	default:
		return false
	}
}

func GetFromEvent(event *historypb.HistoryEvent) (*commonpb.SearchAttributes, bool) {
	switch e := event.GetAttributes().(type) {
	{{- range .Events}}
	case *historypb.HistoryEvent_{{.AttributesTypeName}}:
		return e.{{.AttributesTypeName}}.GetSearchAttributes(), true
	{{- end}}
	default:
		return nil, false
	}
}
`)
}

func writeSearchAttributesEventHelpers(w io.Writer, tmpl string) {
	sahd := searchAttributesHelpersData{}

	historyEventT := reflect.TypeOf((*historypb.HistoryEvent)(nil))

	for i := 0; i < historyEventT.NumMethod(); i++ {
		attributesGetter := historyEventT.Method(i)
		matches := attributesGetterRegex.FindStringSubmatch(attributesGetter.Name)
		if len(matches) < 2 {
			continue
		}
		if attributesGetter.Type.NumOut() != 1 {
			continue
		}
		if _, found := attributesGetter.Type.Out(0).MethodByName("GetSearchAttributes"); !found {
			continue
		}

		ed := eventData{
			AttributesTypeName: matches[1],
		}
		sahd.Events = append(sahd.Events, ed)
	}

	fatalIfErr(template.Must(template.New("code").Parse(tmpl)).Execute(w, sahd))
}

func callWithFile(generator func(io.Writer), outFile string) {
	w, err := os.Create(outFile)
	fatalIfErr(err)
	defer func() {
		fatalIfErr(w.Close())
	}()
	_, err = fmt.Fprint(w, "\n// Code generated by cmd/tools/gensearchattributehelpers. DO NOT EDIT.\n")
	fatalIfErr(err)
	generator(w)
}

func fatalIfErr(err error) {
	if err != nil {
		//nolint:revive // calls to log.Fatal only in main() or init() functions (revive)
		log.Fatal(err)
	}
}
