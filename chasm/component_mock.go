// Code generated by MockGen. DO NOT EDIT.
// Source: component.go
//
// Generated by this command:
//
//	mockgen -package chasm -source component.go -destination component_mock.go
//

// Package chasm is a generated GoMock package.
package chasm

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockComponent is a mock of Component interface.
type MockComponent struct {
	ctrl     *gomock.Controller
	recorder *MockComponentMockRecorder
	isgomock struct{}
}

// MockComponentMockRecorder is the mock recorder for MockComponent.
type MockComponentMockRecorder struct {
	mock *MockComponent
}

// NewMockComponent creates a new mock instance.
func NewMockComponent(ctrl *gomock.Controller) *MockComponent {
	mock := &MockComponent{ctrl: ctrl}
	mock.recorder = &MockComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComponent) EXPECT() *MockComponentMockRecorder {
	return m.recorder
}

// LifecycleState mocks base method.
func (m *MockComponent) LifecycleState() LifecycleState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifecycleState")
	ret0, _ := ret[0].(LifecycleState)
	return ret0
}

// LifecycleState indicates an expected call of LifecycleState.
func (mr *MockComponentMockRecorder) LifecycleState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifecycleState", reflect.TypeOf((*MockComponent)(nil).LifecycleState))
}

// mustEmbedUnimplementedComponent mocks base method.
func (m *MockComponent) mustEmbedUnimplementedComponent() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedComponent")
}

// mustEmbedUnimplementedComponent indicates an expected call of mustEmbedUnimplementedComponent.
func (mr *MockComponentMockRecorder) mustEmbedUnimplementedComponent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedComponent", reflect.TypeOf((*MockComponent)(nil).mustEmbedUnimplementedComponent))
}
