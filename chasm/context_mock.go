// Code generated by MockGen. DO NOT EDIT.
// Source: context.go
//
// Generated by this command:
//
//	mockgen -package chasm -source context.go -destination context_mock.go
//

// Package chasm is a generated GoMock package.
package chasm

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
	proto "google.golang.org/protobuf/proto"
)

// MockContext is a mock of Context interface.
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
	isgomock struct{}
}

// MockContextMockRecorder is the mock recorder for MockContext.
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance.
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockContext) Now(arg0 Component) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now", arg0)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockContextMockRecorder) Now(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockContext)(nil).Now), arg0)
}

// Ref mocks base method.
func (m *MockContext) Ref(arg0 Component) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ref", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ref indicates an expected call of Ref.
func (mr *MockContextMockRecorder) Ref(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ref", reflect.TypeOf((*MockContext)(nil).Ref), arg0)
}

// componentNodePath mocks base method.
func (m *MockContext) componentNodePath(arg0 Component) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "componentNodePath", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// componentNodePath indicates an expected call of componentNodePath.
func (mr *MockContextMockRecorder) componentNodePath(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "componentNodePath", reflect.TypeOf((*MockContext)(nil).componentNodePath), arg0)
}

// dataNodePath mocks base method.
func (m *MockContext) dataNodePath(arg0 proto.Message) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "dataNodePath", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// dataNodePath indicates an expected call of dataNodePath.
func (mr *MockContextMockRecorder) dataNodePath(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "dataNodePath", reflect.TypeOf((*MockContext)(nil).dataNodePath), arg0)
}

// getContext mocks base method.
func (m *MockContext) getContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// getContext indicates an expected call of getContext.
func (mr *MockContextMockRecorder) getContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getContext", reflect.TypeOf((*MockContext)(nil).getContext))
}

// MockMutableContext is a mock of MutableContext interface.
type MockMutableContext struct {
	ctrl     *gomock.Controller
	recorder *MockMutableContextMockRecorder
	isgomock struct{}
}

// MockMutableContextMockRecorder is the mock recorder for MockMutableContext.
type MockMutableContextMockRecorder struct {
	mock *MockMutableContext
}

// NewMockMutableContext creates a new mock instance.
func NewMockMutableContext(ctrl *gomock.Controller) *MockMutableContext {
	mock := &MockMutableContext{ctrl: ctrl}
	mock.recorder = &MockMutableContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutableContext) EXPECT() *MockMutableContextMockRecorder {
	return m.recorder
}

// AddTask mocks base method.
func (m *MockMutableContext) AddTask(arg0 Component, arg1 TaskAttributes, arg2 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTask", arg0, arg1, arg2)
}

// AddTask indicates an expected call of AddTask.
func (mr *MockMutableContextMockRecorder) AddTask(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockMutableContext)(nil).AddTask), arg0, arg1, arg2)
}

// Now mocks base method.
func (m *MockMutableContext) Now(arg0 Component) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now", arg0)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockMutableContextMockRecorder) Now(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockMutableContext)(nil).Now), arg0)
}

// Ref mocks base method.
func (m *MockMutableContext) Ref(arg0 Component) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ref", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ref indicates an expected call of Ref.
func (mr *MockMutableContextMockRecorder) Ref(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ref", reflect.TypeOf((*MockMutableContext)(nil).Ref), arg0)
}

// componentNodePath mocks base method.
func (m *MockMutableContext) componentNodePath(arg0 Component) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "componentNodePath", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// componentNodePath indicates an expected call of componentNodePath.
func (mr *MockMutableContextMockRecorder) componentNodePath(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "componentNodePath", reflect.TypeOf((*MockMutableContext)(nil).componentNodePath), arg0)
}

// dataNodePath mocks base method.
func (m *MockMutableContext) dataNodePath(arg0 proto.Message) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "dataNodePath", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// dataNodePath indicates an expected call of dataNodePath.
func (mr *MockMutableContextMockRecorder) dataNodePath(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "dataNodePath", reflect.TypeOf((*MockMutableContext)(nil).dataNodePath), arg0)
}

// getContext mocks base method.
func (m *MockMutableContext) getContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// getContext indicates an expected call of getContext.
func (mr *MockMutableContextMockRecorder) getContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getContext", reflect.TypeOf((*MockMutableContext)(nil).getContext))
}
