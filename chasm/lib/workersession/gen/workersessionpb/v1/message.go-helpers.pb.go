// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package workersessionpb

import (
	"fmt"

	"google.golang.org/protobuf/proto"
)

// Marshal an object of type WorkerSessionState to the protobuf v3 wire format
func (val *WorkerSessionState) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type WorkerSessionState from the protobuf v3 wire format
func (val *WorkerSessionState) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *WorkerSessionState) Size() int {
	return proto.Size(val)
}

// Equal returns whether two WorkerSessionState values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *WorkerSessionState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *WorkerSessionState
	switch t := that.(type) {
	case *WorkerSessionState:
		that1 = t
	case WorkerSessionState:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

var (
	WorkerSessionStatus_shorthandValue = map[string]int32{
		"Unspecified": 0,
		"Active":      1,
		"Expired":     2,
		"Terminated":  3,
	}
)

// WorkerSessionStatusFromString parses a WorkerSessionStatus value from  either the protojson
// canonical SCREAMING_CASE enum or the traditional temporal PascalCase enum to WorkerSessionStatus
func WorkerSessionStatusFromString(s string) (WorkerSessionStatus, error) {
	if v, ok := WorkerSessionStatus_value[s]; ok {
		return WorkerSessionStatus(v), nil
	} else if v, ok := WorkerSessionStatus_shorthandValue[s]; ok {
		return WorkerSessionStatus(v), nil
	}
	return WorkerSessionStatus(0), fmt.Errorf("%s is not a valid WorkerSessionStatus", s)
}
