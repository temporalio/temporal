// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package workersessionpb

import (
	"google.golang.org/protobuf/proto"
)

// Marshal an object of type HeartbeatTimeoutTask to the protobuf v3 wire format
func (val *HeartbeatTimeoutTask) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type HeartbeatTimeoutTask from the protobuf v3 wire format
func (val *HeartbeatTimeoutTask) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *HeartbeatTimeoutTask) Size() int {
	return proto.Size(val)
}

// Equal returns whether two HeartbeatTimeoutTask values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *HeartbeatTimeoutTask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *HeartbeatTimeoutTask
	switch t := that.(type) {
	case *HeartbeatTimeoutTask:
		that1 = t
	case HeartbeatTimeoutTask:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type SessionCleanupTask to the protobuf v3 wire format
func (val *SessionCleanupTask) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type SessionCleanupTask from the protobuf v3 wire format
func (val *SessionCleanupTask) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *SessionCleanupTask) Size() int {
	return proto.Size(val)
}

// Equal returns whether two SessionCleanupTask values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *SessionCleanupTask) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *SessionCleanupTask
	switch t := that.(type) {
	case *SessionCleanupTask:
		that1 = t
	case SessionCleanupTask:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}
