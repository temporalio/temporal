// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package workerpb

import (
	"fmt"

	"google.golang.org/protobuf/proto"
)

// Marshal an object of type WorkerState to the protobuf v3 wire format
func (val *WorkerState) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type WorkerState from the protobuf v3 wire format
func (val *WorkerState) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *WorkerState) Size() int {
	return proto.Size(val)
}

// Equal returns whether two WorkerState values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *WorkerState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *WorkerState
	switch t := that.(type) {
	case *WorkerState:
		that1 = t
	case WorkerState:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

var (
	WorkerStatus_shorthandValue = map[string]int32{
		"Unspecified": 0,
		"Active":      1,
		"Inactive":    2,
		"CleanedUp":   3,
	}
)

// WorkerStatusFromString parses a WorkerStatus value from  either the protojson
// canonical SCREAMING_CASE enum or the traditional temporal PascalCase enum to WorkerStatus
func WorkerStatusFromString(s string) (WorkerStatus, error) {
	if v, ok := WorkerStatus_value[s]; ok {
		return WorkerStatus(v), nil
	} else if v, ok := WorkerStatus_shorthandValue[s]; ok {
		return WorkerStatus(v), nil
	}
	return WorkerStatus(0), fmt.Errorf("%s is not a valid WorkerStatus", s)
}
