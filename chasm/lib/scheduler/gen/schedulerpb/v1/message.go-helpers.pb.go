// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package schedulerpb

import (
	"google.golang.org/protobuf/proto"
)

// Marshal an object of type SchedulerState to the protobuf v3 wire format
func (val *SchedulerState) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type SchedulerState from the protobuf v3 wire format
func (val *SchedulerState) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *SchedulerState) Size() int {
	return proto.Size(val)
}

// Equal returns whether two SchedulerState values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *SchedulerState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *SchedulerState
	switch t := that.(type) {
	case *SchedulerState:
		that1 = t
	case SchedulerState:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type GeneratorState to the protobuf v3 wire format
func (val *GeneratorState) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type GeneratorState from the protobuf v3 wire format
func (val *GeneratorState) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *GeneratorState) Size() int {
	return proto.Size(val)
}

// Equal returns whether two GeneratorState values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *GeneratorState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *GeneratorState
	switch t := that.(type) {
	case *GeneratorState:
		that1 = t
	case GeneratorState:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type InvokerState to the protobuf v3 wire format
func (val *InvokerState) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type InvokerState from the protobuf v3 wire format
func (val *InvokerState) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *InvokerState) Size() int {
	return proto.Size(val)
}

// Equal returns whether two InvokerState values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *InvokerState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *InvokerState
	switch t := that.(type) {
	case *InvokerState:
		that1 = t
	case InvokerState:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type BackfillerState to the protobuf v3 wire format
func (val *BackfillerState) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type BackfillerState from the protobuf v3 wire format
func (val *BackfillerState) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *BackfillerState) Size() int {
	return proto.Size(val)
}

// Equal returns whether two BackfillerState values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *BackfillerState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *BackfillerState
	switch t := that.(type) {
	case *BackfillerState:
		that1 = t
	case BackfillerState:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}
