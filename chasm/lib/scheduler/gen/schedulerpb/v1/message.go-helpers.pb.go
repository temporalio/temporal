// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package schedulerpb

import (
	"google.golang.org/protobuf/proto"
)

// Marshal an object of type SchedulerInternal to the protobuf v3 wire format
func (val *SchedulerInternal) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type SchedulerInternal from the protobuf v3 wire format
func (val *SchedulerInternal) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *SchedulerInternal) Size() int {
	return proto.Size(val)
}

// Equal returns whether two SchedulerInternal values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *SchedulerInternal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *SchedulerInternal
	switch t := that.(type) {
	case *SchedulerInternal:
		that1 = t
	case SchedulerInternal:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type GeneratorInternal to the protobuf v3 wire format
func (val *GeneratorInternal) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type GeneratorInternal from the protobuf v3 wire format
func (val *GeneratorInternal) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *GeneratorInternal) Size() int {
	return proto.Size(val)
}

// Equal returns whether two GeneratorInternal values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *GeneratorInternal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *GeneratorInternal
	switch t := that.(type) {
	case *GeneratorInternal:
		that1 = t
	case GeneratorInternal:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type InvokerInternal to the protobuf v3 wire format
func (val *InvokerInternal) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type InvokerInternal from the protobuf v3 wire format
func (val *InvokerInternal) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *InvokerInternal) Size() int {
	return proto.Size(val)
}

// Equal returns whether two InvokerInternal values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *InvokerInternal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *InvokerInternal
	switch t := that.(type) {
	case *InvokerInternal:
		that1 = t
	case InvokerInternal:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type BackfillerInternal to the protobuf v3 wire format
func (val *BackfillerInternal) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type BackfillerInternal from the protobuf v3 wire format
func (val *BackfillerInternal) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *BackfillerInternal) Size() int {
	return proto.Size(val)
}

// Equal returns whether two BackfillerInternal values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *BackfillerInternal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *BackfillerInternal
	switch t := that.(type) {
	case *BackfillerInternal:
		that1 = t
	case BackfillerInternal:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}
