// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package activitypb

import (
	"fmt"

	"google.golang.org/protobuf/proto"
)

// Marshal an object of type ActivityState to the protobuf v3 wire format
func (val *ActivityState) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type ActivityState from the protobuf v3 wire format
func (val *ActivityState) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *ActivityState) Size() int {
	return proto.Size(val)
}

// Equal returns whether two ActivityState values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *ActivityState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *ActivityState
	switch t := that.(type) {
	case *ActivityState:
		that1 = t
	case ActivityState:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type ActivityCancelState to the protobuf v3 wire format
func (val *ActivityCancelState) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type ActivityCancelState from the protobuf v3 wire format
func (val *ActivityCancelState) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *ActivityCancelState) Size() int {
	return proto.Size(val)
}

// Equal returns whether two ActivityCancelState values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *ActivityCancelState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *ActivityCancelState
	switch t := that.(type) {
	case *ActivityCancelState:
		that1 = t
	case ActivityCancelState:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type ActivityAttemptState to the protobuf v3 wire format
func (val *ActivityAttemptState) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type ActivityAttemptState from the protobuf v3 wire format
func (val *ActivityAttemptState) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *ActivityAttemptState) Size() int {
	return proto.Size(val)
}

// Equal returns whether two ActivityAttemptState values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *ActivityAttemptState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *ActivityAttemptState
	switch t := that.(type) {
	case *ActivityAttemptState:
		that1 = t
	case ActivityAttemptState:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type ActivityHeartbeatState to the protobuf v3 wire format
func (val *ActivityHeartbeatState) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type ActivityHeartbeatState from the protobuf v3 wire format
func (val *ActivityHeartbeatState) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *ActivityHeartbeatState) Size() int {
	return proto.Size(val)
}

// Equal returns whether two ActivityHeartbeatState values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *ActivityHeartbeatState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *ActivityHeartbeatState
	switch t := that.(type) {
	case *ActivityHeartbeatState:
		that1 = t
	case ActivityHeartbeatState:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type ActivityRequestData to the protobuf v3 wire format
func (val *ActivityRequestData) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type ActivityRequestData from the protobuf v3 wire format
func (val *ActivityRequestData) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *ActivityRequestData) Size() int {
	return proto.Size(val)
}

// Equal returns whether two ActivityRequestData values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *ActivityRequestData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *ActivityRequestData
	switch t := that.(type) {
	case *ActivityRequestData:
		that1 = t
	case ActivityRequestData:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type ActivityOutcome to the protobuf v3 wire format
func (val *ActivityOutcome) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type ActivityOutcome from the protobuf v3 wire format
func (val *ActivityOutcome) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *ActivityOutcome) Size() int {
	return proto.Size(val)
}

// Equal returns whether two ActivityOutcome values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *ActivityOutcome) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *ActivityOutcome
	switch t := that.(type) {
	case *ActivityOutcome:
		that1 = t
	case ActivityOutcome:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

var (
	ActivityExecutionStatus_shorthandValue = map[string]int32{
		"Unspecified":     0,
		"Scheduled":       1,
		"Started":         2,
		"CancelRequested": 3,
		"Completed":       4,
		"Failed":          5,
		"Canceled":        6,
		"Terminated":      7,
		"TimedOut":        8,
	}
)

// ActivityExecutionStatusFromString parses a ActivityExecutionStatus value from  either the protojson
// canonical SCREAMING_CASE enum or the traditional temporal PascalCase enum to ActivityExecutionStatus
func ActivityExecutionStatusFromString(s string) (ActivityExecutionStatus, error) {
	if v, ok := ActivityExecutionStatus_value[s]; ok {
		return ActivityExecutionStatus(v), nil
	} else if v, ok := ActivityExecutionStatus_shorthandValue[s]; ok {
		return ActivityExecutionStatus(v), nil
	}
	return ActivityExecutionStatus(0), fmt.Errorf("%s is not a valid ActivityExecutionStatus", s)
}
