// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package activitypb

import (
	"google.golang.org/protobuf/proto"
)

// Marshal an object of type Identifier to the protobuf v3 wire format
func (val *Identifier) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type Identifier from the protobuf v3 wire format
func (val *Identifier) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *Identifier) Size() int {
	return proto.Size(val)
}

// Equal returns whether two Identifier values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *Identifier) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *Identifier
	switch t := that.(type) {
	case *Identifier:
		that1 = t
	case Identifier:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type Heartbeat to the protobuf v3 wire format
func (val *Heartbeat) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type Heartbeat from the protobuf v3 wire format
func (val *Heartbeat) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *Heartbeat) Size() int {
	return proto.Size(val)
}

// Equal returns whether two Heartbeat values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *Heartbeat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *Heartbeat
	switch t := that.(type) {
	case *Heartbeat:
		that1 = t
	case Heartbeat:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type Outcome to the protobuf v3 wire format
func (val *Outcome) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type Outcome from the protobuf v3 wire format
func (val *Outcome) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *Outcome) Size() int {
	return proto.Size(val)
}

// Equal returns whether two Outcome values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *Outcome) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *Outcome
	switch t := that.(type) {
	case *Outcome:
		that1 = t
	case Outcome:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type Config to the protobuf v3 wire format
func (val *Config) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type Config from the protobuf v3 wire format
func (val *Config) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *Config) Size() int {
	return proto.Size(val)
}

// Equal returns whether two Config values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *Config) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *Config
	switch t := that.(type) {
	case *Config:
		that1 = t
	case Config:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type Input to the protobuf v3 wire format
func (val *Input) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type Input from the protobuf v3 wire format
func (val *Input) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *Input) Size() int {
	return proto.Size(val)
}

// Equal returns whether two Input values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *Input) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *Input
	switch t := that.(type) {
	case *Input:
		that1 = t
	case Input:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type ExecutionInfo to the protobuf v3 wire format
func (val *ExecutionInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type ExecutionInfo from the protobuf v3 wire format
func (val *ExecutionInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *ExecutionInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two ExecutionInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *ExecutionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *ExecutionInfo
	switch t := that.(type) {
	case *ExecutionInfo:
		that1 = t
	case ExecutionInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type ExecutionDetails to the protobuf v3 wire format
func (val *ExecutionDetails) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type ExecutionDetails from the protobuf v3 wire format
func (val *ExecutionDetails) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *ExecutionDetails) Size() int {
	return proto.Size(val)
}

// Equal returns whether two ExecutionDetails values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *ExecutionDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *ExecutionDetails
	switch t := that.(type) {
	case *ExecutionDetails:
		that1 = t
	case ExecutionDetails:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}
