// Code generated by protoc-gen-go. DO NOT EDIT.
// plugins:
// 	protoc-gen-go
// 	protoc
// source: temporal/server/chasm/lib/activity/proto/v1/activity_state.proto

package activitypb

import (
	reflect "reflect"
	"strconv"
	sync "sync"
	unsafe "unsafe"

	v11 "go.temporal.io/api/activity/v1"
	v1 "go.temporal.io/api/common/v1"
	v13 "go.temporal.io/api/deployment/v1"
	v12 "go.temporal.io/api/failure/v1"
	v14 "go.temporal.io/api/sdk/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActivityExecutionStatus int32

const (
	ACTIVITY_EXECUTION_STATUS_UNSPECIFIED ActivityExecutionStatus = 0
	// The activity is not in a terminal status. This does not necessarily mean that there is a currently running
	// attempt. The activity may be backing off between attempts or waiting for a worker to pick it up.
	ACTIVITY_EXECUTION_STATUS_SCHEDULED        ActivityExecutionStatus = 1
	ACTIVITY_EXECUTION_STATUS_STARTED          ActivityExecutionStatus = 2
	ACTIVITY_EXECUTION_STATUS_CANCEL_REQUESTED ActivityExecutionStatus = 3
	// Left as placeholders for when we add pause.
	// // PAUSED means activity is paused on the server, and is not running in the worker
	// ACTIVITY_EXECUTION_STATUS_PAUSED = 4;
	// // PAUSE_REQUESTED means activity is currently running on the worker, but paused on the server
	// ACTIVITY_EXECUTION_STATUS_PAUSE_REQUESTED = 5;
	// The activity completed successfully.
	ACTIVITY_EXECUTION_STATUS_COMPLETED ActivityExecutionStatus = 4
	// The activity completed with failure.
	ACTIVITY_EXECUTION_STATUS_FAILED ActivityExecutionStatus = 5
	// The activity completed as canceled.
	// Requesting to cancel an activity does not automatically transition the activity to canceled status. If the
	// activity has a currently running attempt, the activity will only transition to canceled status if the current
	// attempt is unsuccessful.
	// TODO: Clarify what happens if there are no more allowed retries after the current attempt.
	ACTIVITY_EXECUTION_STATUS_CANCELED ActivityExecutionStatus = 6
	// The activity was terminated. Termination does not reach the worker and the activity code cannot react to it.
	// A terminated activity may have a running attempt and will be requested to be canceled by the server when it
	// heartbeats.
	ACTIVITY_EXECUTION_STATUS_TERMINATED ActivityExecutionStatus = 7
	// The activity has timed out by reaching the specified shedule-to-start or schedule-to-close timeouts.
	// TODO: Clarify if there are other conditions where the activity can end up in timed out status.
	ACTIVITY_EXECUTION_STATUS_TIMED_OUT ActivityExecutionStatus = 8
)

// Enum value maps for ActivityExecutionStatus.
var (
	ActivityExecutionStatus_name = map[int32]string{
		0: "ACTIVITY_EXECUTION_STATUS_UNSPECIFIED",
		1: "ACTIVITY_EXECUTION_STATUS_SCHEDULED",
		2: "ACTIVITY_EXECUTION_STATUS_STARTED",
		3: "ACTIVITY_EXECUTION_STATUS_CANCEL_REQUESTED",
		4: "ACTIVITY_EXECUTION_STATUS_COMPLETED",
		5: "ACTIVITY_EXECUTION_STATUS_FAILED",
		6: "ACTIVITY_EXECUTION_STATUS_CANCELED",
		7: "ACTIVITY_EXECUTION_STATUS_TERMINATED",
		8: "ACTIVITY_EXECUTION_STATUS_TIMED_OUT",
	}
	ActivityExecutionStatus_value = map[string]int32{
		"ACTIVITY_EXECUTION_STATUS_UNSPECIFIED":      0,
		"ACTIVITY_EXECUTION_STATUS_SCHEDULED":        1,
		"ACTIVITY_EXECUTION_STATUS_STARTED":          2,
		"ACTIVITY_EXECUTION_STATUS_CANCEL_REQUESTED": 3,
		"ACTIVITY_EXECUTION_STATUS_COMPLETED":        4,
		"ACTIVITY_EXECUTION_STATUS_FAILED":           5,
		"ACTIVITY_EXECUTION_STATUS_CANCELED":         6,
		"ACTIVITY_EXECUTION_STATUS_TERMINATED":       7,
		"ACTIVITY_EXECUTION_STATUS_TIMED_OUT":        8,
	}
)

func (x ActivityExecutionStatus) Enum() *ActivityExecutionStatus {
	p := new(ActivityExecutionStatus)
	*p = x
	return p
}

func (x ActivityExecutionStatus) String() string {
	switch x {
	case ACTIVITY_EXECUTION_STATUS_UNSPECIFIED:
		return "Unspecified"
	case ACTIVITY_EXECUTION_STATUS_SCHEDULED:
		return "Scheduled"
	case ACTIVITY_EXECUTION_STATUS_STARTED:
		return "Started"
	case ACTIVITY_EXECUTION_STATUS_CANCEL_REQUESTED:
		return "CancelRequested"
	case ACTIVITY_EXECUTION_STATUS_COMPLETED:
		return "Completed"
	case ACTIVITY_EXECUTION_STATUS_FAILED:
		return "Failed"
	case ACTIVITY_EXECUTION_STATUS_CANCELED:
		return "Canceled"
	case ACTIVITY_EXECUTION_STATUS_TERMINATED:
		return "Terminated"
	case ACTIVITY_EXECUTION_STATUS_TIMED_OUT:
		return "TimedOut"

		// Deprecated: Use ActivityExecutionStatus.Descriptor instead.
	default:
		return strconv.Itoa(int(x))
	}

}

func (ActivityExecutionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_enumTypes[0].Descriptor()
}

func (ActivityExecutionStatus) Type() protoreflect.EnumType {
	return &file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_enumTypes[0]
}

func (x ActivityExecutionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

func (ActivityExecutionStatus) EnumDescriptor() ([]byte, []int) {
	return file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_rawDescGZIP(), []int{0}
}

type ActivityState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of the activity, a string that maps to a registered activity on a worker.
	ActivityType *v1.ActivityType `protobuf:"bytes,1,opt,name=activity_type,json=activityType,proto3" json:"activity_type,omitempty"`
	// Current activity options. May be different from the one used to start the activity.
	ActivityOptions *v11.ActivityOptions `protobuf:"bytes,2,opt,name=activity_options,json=activityOptions,proto3" json:"activity_options,omitempty"`
	// All of the possible activity statuses (covers both the public ActivityExecutionStatus and PendingActivityState).
	// TODO: consider moving this into ActivityAttemptState and renaming that message. This could save mutating two
	// components on each attempt transition.
	Status ActivityExecutionStatus `protobuf:"varint,3,opt,name=status,proto3,enum=temporal.server.chasm.lib.activity.proto.v1.ActivityExecutionStatus" json:"status,omitempty"`
	// Time the activity was originally scheduled via a StartActivityExecution request.
	ScheduledTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=scheduled_time,json=scheduledTime,proto3" json:"scheduled_time,omitempty"`
	// Priority metadata. (TODO: why isn't this part of ActivityOptions?)
	Priority *v1.Priority `protobuf:"bytes,5,opt,name=priority,proto3" json:"priority,omitempty"`
	// Set if activity cancelation was requested.
	CancelState *ActivityCancelState `protobuf:"bytes,6,opt,name=cancel_state,json=cancelState,proto3" json:"cancel_state,omitempty"`
	// Set if activity cancelation was requested.
	Attempt       *ActivityAttemptState `protobuf:"bytes,7,opt,name=attempt,proto3" json:"attempt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivityState) Reset() {
	*x = ActivityState{}
	mi := &file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityState) ProtoMessage() {}

func (x *ActivityState) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityState.ProtoReflect.Descriptor instead.
func (*ActivityState) Descriptor() ([]byte, []int) {
	return file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_rawDescGZIP(), []int{0}
}

func (x *ActivityState) GetActivityType() *v1.ActivityType {
	if x != nil {
		return x.ActivityType
	}
	return nil
}

func (x *ActivityState) GetActivityOptions() *v11.ActivityOptions {
	if x != nil {
		return x.ActivityOptions
	}
	return nil
}

func (x *ActivityState) GetStatus() ActivityExecutionStatus {
	if x != nil {
		return x.Status
	}
	return ACTIVITY_EXECUTION_STATUS_UNSPECIFIED
}

func (x *ActivityState) GetScheduledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledTime
	}
	return nil
}

func (x *ActivityState) GetPriority() *v1.Priority {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *ActivityState) GetCancelState() *ActivityCancelState {
	if x != nil {
		return x.CancelState
	}
	return nil
}

func (x *ActivityState) GetAttempt() *ActivityAttemptState {
	if x != nil {
		return x.Attempt
	}
	return nil
}

type ActivityCancelState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     string                 `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	RequestTime   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=request_time,json=requestTime,proto3" json:"request_time,omitempty"`
	Identity      string                 `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	Reason        string                 `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivityCancelState) Reset() {
	*x = ActivityCancelState{}
	mi := &file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityCancelState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityCancelState) ProtoMessage() {}

func (x *ActivityCancelState) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityCancelState.ProtoReflect.Descriptor instead.
func (*ActivityCancelState) Descriptor() ([]byte, []int) {
	return file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_rawDescGZIP(), []int{1}
}

func (x *ActivityCancelState) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ActivityCancelState) GetRequestTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestTime
	}
	return nil
}

func (x *ActivityCancelState) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *ActivityCancelState) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ActivityAttemptState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The attempt this activity is currently on.
	// Incremented each time a new attempt is started.
	// TODO: Confirm if this is on scheduled or started.
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// Time from the last attempt failure to the next activity retry.
	// If the activity is currently running, this represents the next retry interval in case the attempt fails.
	// If activity is currently backing off between attempt, this represents the current retry interval.
	// If there is no next retry allowed, this field will be null.
	// This interval is typically calculated from the specified retry policy, but may be modified if an activity fails
	// with a retryable application failure specifying a retry delay.
	CurrentRetryInterval *durationpb.Duration `protobuf:"bytes,2,opt,name=current_retry_interval,json=currentRetryInterval,proto3" json:"current_retry_interval,omitempty"`
	// Time the last attempt was started.
	LastStartedTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_started_time,json=lastStartedTime,proto3" json:"last_started_time,omitempty"`
	// The time when the last activity attempt completed. If activity has not been completed yet, it will be null.
	LastAttemptCompleteTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_attempt_complete_time,json=lastAttemptCompleteTime,proto3" json:"last_attempt_complete_time,omitempty"`
	// Failure details from the last failed attempt.
	LastFailure        *v12.Failure `protobuf:"bytes,5,opt,name=last_failure,json=lastFailure,proto3" json:"last_failure,omitempty"`
	LastWorkerIdentity string       `protobuf:"bytes,6,opt,name=last_worker_identity,json=lastWorkerIdentity,proto3" json:"last_worker_identity,omitempty"`
	// The Worker Deployment Version this activity was dispatched to most recently.
	// If nil, the activity has not yet been dispatched or was last dispatched to an unversioned worker.
	LastDeploymentVersion *v13.WorkerDeploymentVersion `protobuf:"bytes,7,opt,name=last_deployment_version,json=lastDeploymentVersion,proto3" json:"last_deployment_version,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ActivityAttemptState) Reset() {
	*x = ActivityAttemptState{}
	mi := &file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityAttemptState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityAttemptState) ProtoMessage() {}

func (x *ActivityAttemptState) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityAttemptState.ProtoReflect.Descriptor instead.
func (*ActivityAttemptState) Descriptor() ([]byte, []int) {
	return file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_rawDescGZIP(), []int{2}
}

func (x *ActivityAttemptState) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ActivityAttemptState) GetCurrentRetryInterval() *durationpb.Duration {
	if x != nil {
		return x.CurrentRetryInterval
	}
	return nil
}

func (x *ActivityAttemptState) GetLastStartedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastStartedTime
	}
	return nil
}

func (x *ActivityAttemptState) GetLastAttemptCompleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAttemptCompleteTime
	}
	return nil
}

func (x *ActivityAttemptState) GetLastFailure() *v12.Failure {
	if x != nil {
		return x.LastFailure
	}
	return nil
}

func (x *ActivityAttemptState) GetLastWorkerIdentity() string {
	if x != nil {
		return x.LastWorkerIdentity
	}
	return ""
}

func (x *ActivityAttemptState) GetLastDeploymentVersion() *v13.WorkerDeploymentVersion {
	if x != nil {
		return x.LastDeploymentVersion
	}
	return nil
}

type ActivityHeartbeatState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Details provided in the last recorded activity heartbeat.
	Details *v1.Payloads `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	// Time the last heartbeat was recorded.
	RecordedTime  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=recorded_time,json=recordedTime,proto3" json:"recorded_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivityHeartbeatState) Reset() {
	*x = ActivityHeartbeatState{}
	mi := &file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityHeartbeatState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityHeartbeatState) ProtoMessage() {}

func (x *ActivityHeartbeatState) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityHeartbeatState.ProtoReflect.Descriptor instead.
func (*ActivityHeartbeatState) Descriptor() ([]byte, []int) {
	return file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_rawDescGZIP(), []int{3}
}

func (x *ActivityHeartbeatState) GetDetails() *v1.Payloads {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ActivityHeartbeatState) GetRecordedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RecordedTime
	}
	return nil
}

type ActivityRequestData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Serialized activity input, passed as arguments to the activity function.
	Input  *v1.Payloads `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Header *v1.Header   `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// Metadata for use by user interfaces to display the fixed as-of-start summary and details of the activity.
	UserMetadata  *v14.UserMetadata `protobuf:"bytes,3,opt,name=user_metadata,json=userMetadata,proto3" json:"user_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivityRequestData) Reset() {
	*x = ActivityRequestData{}
	mi := &file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityRequestData) ProtoMessage() {}

func (x *ActivityRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityRequestData.ProtoReflect.Descriptor instead.
func (*ActivityRequestData) Descriptor() ([]byte, []int) {
	return file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_rawDescGZIP(), []int{4}
}

func (x *ActivityRequestData) GetInput() *v1.Payloads {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ActivityRequestData) GetHeader() *v1.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ActivityRequestData) GetUserMetadata() *v14.UserMetadata {
	if x != nil {
		return x.UserMetadata
	}
	return nil
}

type ActivityOutcome struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Variant:
	//
	//	*ActivityOutcome_Successful_
	//	*ActivityOutcome_Failed_
	Variant       isActivityOutcome_Variant `protobuf_oneof:"variant"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivityOutcome) Reset() {
	*x = ActivityOutcome{}
	mi := &file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityOutcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityOutcome) ProtoMessage() {}

func (x *ActivityOutcome) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityOutcome.ProtoReflect.Descriptor instead.
func (*ActivityOutcome) Descriptor() ([]byte, []int) {
	return file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_rawDescGZIP(), []int{5}
}

func (x *ActivityOutcome) GetVariant() isActivityOutcome_Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *ActivityOutcome) GetSuccessful() *ActivityOutcome_Successful {
	if x != nil {
		if x, ok := x.Variant.(*ActivityOutcome_Successful_); ok {
			return x.Successful
		}
	}
	return nil
}

func (x *ActivityOutcome) GetFailed() *ActivityOutcome_Failed {
	if x != nil {
		if x, ok := x.Variant.(*ActivityOutcome_Failed_); ok {
			return x.Failed
		}
	}
	return nil
}

type isActivityOutcome_Variant interface {
	isActivityOutcome_Variant()
}

type ActivityOutcome_Successful_ struct {
	Successful *ActivityOutcome_Successful `protobuf:"bytes,1,opt,name=successful,proto3,oneof"`
}

type ActivityOutcome_Failed_ struct {
	Failed *ActivityOutcome_Failed `protobuf:"bytes,2,opt,name=failed,proto3,oneof"`
}

func (*ActivityOutcome_Successful_) isActivityOutcome_Variant() {}

func (*ActivityOutcome_Failed_) isActivityOutcome_Variant() {}

type ActivityOutcome_Successful struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Output        *v1.Payloads           `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivityOutcome_Successful) Reset() {
	*x = ActivityOutcome_Successful{}
	mi := &file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityOutcome_Successful) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityOutcome_Successful) ProtoMessage() {}

func (x *ActivityOutcome_Successful) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityOutcome_Successful.ProtoReflect.Descriptor instead.
func (*ActivityOutcome_Successful) Descriptor() ([]byte, []int) {
	return file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ActivityOutcome_Successful) GetOutput() *v1.Payloads {
	if x != nil {
		return x.Output
	}
	return nil
}

type ActivityOutcome_Failed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Failure       *v12.Failure           `protobuf:"bytes,1,opt,name=failure,proto3" json:"failure,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivityOutcome_Failed) Reset() {
	*x = ActivityOutcome_Failed{}
	mi := &file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityOutcome_Failed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityOutcome_Failed) ProtoMessage() {}

func (x *ActivityOutcome_Failed) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityOutcome_Failed.ProtoReflect.Descriptor instead.
func (*ActivityOutcome_Failed) Descriptor() ([]byte, []int) {
	return file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_rawDescGZIP(), []int{5, 1}
}

func (x *ActivityOutcome_Failed) GetFailure() *v12.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

var File_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto protoreflect.FileDescriptor

const file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_rawDesc = "" +
	"\n" +
	"@temporal/server/chasm/lib/activity/proto/v1/activity_state.proto\x12+temporal.server.chasm.lib.activity.proto.v1\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a&temporal/api/activity/v1/message.proto\x1a$temporal/api/common/v1/message.proto\x1a(temporal/api/deployment/v1/message.proto\x1a%temporal/api/failure/v1/message.proto\x1a'temporal/api/sdk/v1/user_metadata.proto\"\xd1\x04\n" +
	"\rActivityState\x12I\n" +
	"\ractivity_type\x18\x01 \x01(\v2$.temporal.api.common.v1.ActivityTypeR\factivityType\x12T\n" +
	"\x10activity_options\x18\x02 \x01(\v2).temporal.api.activity.v1.ActivityOptionsR\x0factivityOptions\x12\\\n" +
	"\x06status\x18\x03 \x01(\x0e2D.temporal.server.chasm.lib.activity.proto.v1.ActivityExecutionStatusR\x06status\x12A\n" +
	"\x0escheduled_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\rscheduledTime\x12<\n" +
	"\bpriority\x18\x05 \x01(\v2 .temporal.api.common.v1.PriorityR\bpriority\x12c\n" +
	"\fcancel_state\x18\x06 \x01(\v2@.temporal.server.chasm.lib.activity.proto.v1.ActivityCancelStateR\vcancelState\x12[\n" +
	"\aattempt\x18\a \x01(\v2A.temporal.server.chasm.lib.activity.proto.v1.ActivityAttemptStateR\aattempt\"\xa7\x01\n" +
	"\x13ActivityCancelState\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12=\n" +
	"\frequest_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\vrequestTime\x12\x1a\n" +
	"\bidentity\x18\x03 \x01(\tR\bidentity\x12\x16\n" +
	"\x06reason\x18\x04 \x01(\tR\x06reason\"\x82\x04\n" +
	"\x14ActivityAttemptState\x12\x14\n" +
	"\x05count\x18\x01 \x01(\x05R\x05count\x12O\n" +
	"\x16current_retry_interval\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x14currentRetryInterval\x12F\n" +
	"\x11last_started_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x0flastStartedTime\x12W\n" +
	"\x1alast_attempt_complete_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x17lastAttemptCompleteTime\x12C\n" +
	"\flast_failure\x18\x05 \x01(\v2 .temporal.api.failure.v1.FailureR\vlastFailure\x120\n" +
	"\x14last_worker_identity\x18\x06 \x01(\tR\x12lastWorkerIdentity\x12k\n" +
	"\x17last_deployment_version\x18\a \x01(\v23.temporal.api.deployment.v1.WorkerDeploymentVersionR\x15lastDeploymentVersion\"\x95\x01\n" +
	"\x16ActivityHeartbeatState\x12:\n" +
	"\adetails\x18\x01 \x01(\v2 .temporal.api.common.v1.PayloadsR\adetails\x12?\n" +
	"\rrecorded_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\frecordedTime\"\xcd\x01\n" +
	"\x13ActivityRequestData\x126\n" +
	"\x05input\x18\x01 \x01(\v2 .temporal.api.common.v1.PayloadsR\x05input\x126\n" +
	"\x06header\x18\x02 \x01(\v2\x1e.temporal.api.common.v1.HeaderR\x06header\x12F\n" +
	"\ruser_metadata\x18\x03 \x01(\v2!.temporal.api.sdk.v1.UserMetadataR\fuserMetadata\"\xf4\x02\n" +
	"\x0fActivityOutcome\x12i\n" +
	"\n" +
	"successful\x18\x01 \x01(\v2G.temporal.server.chasm.lib.activity.proto.v1.ActivityOutcome.SuccessfulH\x00R\n" +
	"successful\x12]\n" +
	"\x06failed\x18\x02 \x01(\v2C.temporal.server.chasm.lib.activity.proto.v1.ActivityOutcome.FailedH\x00R\x06failed\x1aF\n" +
	"\n" +
	"Successful\x128\n" +
	"\x06output\x18\x01 \x01(\v2 .temporal.api.common.v1.PayloadsR\x06output\x1aD\n" +
	"\x06Failed\x12:\n" +
	"\afailure\x18\x01 \x01(\v2 .temporal.api.failure.v1.FailureR\afailureB\t\n" +
	"\avariant*\x8e\x03\n" +
	"\x17ActivityExecutionStatus\x12)\n" +
	"%ACTIVITY_EXECUTION_STATUS_UNSPECIFIED\x10\x00\x12'\n" +
	"#ACTIVITY_EXECUTION_STATUS_SCHEDULED\x10\x01\x12%\n" +
	"!ACTIVITY_EXECUTION_STATUS_STARTED\x10\x02\x12.\n" +
	"*ACTIVITY_EXECUTION_STATUS_CANCEL_REQUESTED\x10\x03\x12'\n" +
	"#ACTIVITY_EXECUTION_STATUS_COMPLETED\x10\x04\x12$\n" +
	" ACTIVITY_EXECUTION_STATUS_FAILED\x10\x05\x12&\n" +
	"\"ACTIVITY_EXECUTION_STATUS_CANCELED\x10\x06\x12(\n" +
	"$ACTIVITY_EXECUTION_STATUS_TERMINATED\x10\a\x12'\n" +
	"#ACTIVITY_EXECUTION_STATUS_TIMED_OUT\x10\bBDZBgo.temporal.io/server/chasm/lib/activity/gen/activitypb;activitypbb\x06proto3"

var (
	file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_rawDescOnce sync.Once
	file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_rawDescData []byte
)

func file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_rawDescGZIP() []byte {
	file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_rawDescOnce.Do(func() {
		file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_rawDesc), len(file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_rawDesc)))
	})
	return file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_rawDescData
}

var file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_goTypes = []any{
	(ActivityExecutionStatus)(0),        // 0: temporal.server.chasm.lib.activity.proto.v1.ActivityExecutionStatus
	(*ActivityState)(nil),               // 1: temporal.server.chasm.lib.activity.proto.v1.ActivityState
	(*ActivityCancelState)(nil),         // 2: temporal.server.chasm.lib.activity.proto.v1.ActivityCancelState
	(*ActivityAttemptState)(nil),        // 3: temporal.server.chasm.lib.activity.proto.v1.ActivityAttemptState
	(*ActivityHeartbeatState)(nil),      // 4: temporal.server.chasm.lib.activity.proto.v1.ActivityHeartbeatState
	(*ActivityRequestData)(nil),         // 5: temporal.server.chasm.lib.activity.proto.v1.ActivityRequestData
	(*ActivityOutcome)(nil),             // 6: temporal.server.chasm.lib.activity.proto.v1.ActivityOutcome
	(*ActivityOutcome_Successful)(nil),  // 7: temporal.server.chasm.lib.activity.proto.v1.ActivityOutcome.Successful
	(*ActivityOutcome_Failed)(nil),      // 8: temporal.server.chasm.lib.activity.proto.v1.ActivityOutcome.Failed
	(*v1.ActivityType)(nil),             // 9: temporal.api.common.v1.ActivityType
	(*v11.ActivityOptions)(nil),         // 10: temporal.api.activity.v1.ActivityOptions
	(*timestamppb.Timestamp)(nil),       // 11: google.protobuf.Timestamp
	(*v1.Priority)(nil),                 // 12: temporal.api.common.v1.Priority
	(*durationpb.Duration)(nil),         // 13: google.protobuf.Duration
	(*v12.Failure)(nil),                 // 14: temporal.api.failure.v1.Failure
	(*v13.WorkerDeploymentVersion)(nil), // 15: temporal.api.deployment.v1.WorkerDeploymentVersion
	(*v1.Payloads)(nil),                 // 16: temporal.api.common.v1.Payloads
	(*v1.Header)(nil),                   // 17: temporal.api.common.v1.Header
	(*v14.UserMetadata)(nil),            // 18: temporal.api.sdk.v1.UserMetadata
}
var file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_depIdxs = []int32{
	9,  // 0: temporal.server.chasm.lib.activity.proto.v1.ActivityState.activity_type:type_name -> temporal.api.common.v1.ActivityType
	10, // 1: temporal.server.chasm.lib.activity.proto.v1.ActivityState.activity_options:type_name -> temporal.api.activity.v1.ActivityOptions
	0,  // 2: temporal.server.chasm.lib.activity.proto.v1.ActivityState.status:type_name -> temporal.server.chasm.lib.activity.proto.v1.ActivityExecutionStatus
	11, // 3: temporal.server.chasm.lib.activity.proto.v1.ActivityState.scheduled_time:type_name -> google.protobuf.Timestamp
	12, // 4: temporal.server.chasm.lib.activity.proto.v1.ActivityState.priority:type_name -> temporal.api.common.v1.Priority
	2,  // 5: temporal.server.chasm.lib.activity.proto.v1.ActivityState.cancel_state:type_name -> temporal.server.chasm.lib.activity.proto.v1.ActivityCancelState
	3,  // 6: temporal.server.chasm.lib.activity.proto.v1.ActivityState.attempt:type_name -> temporal.server.chasm.lib.activity.proto.v1.ActivityAttemptState
	11, // 7: temporal.server.chasm.lib.activity.proto.v1.ActivityCancelState.request_time:type_name -> google.protobuf.Timestamp
	13, // 8: temporal.server.chasm.lib.activity.proto.v1.ActivityAttemptState.current_retry_interval:type_name -> google.protobuf.Duration
	11, // 9: temporal.server.chasm.lib.activity.proto.v1.ActivityAttemptState.last_started_time:type_name -> google.protobuf.Timestamp
	11, // 10: temporal.server.chasm.lib.activity.proto.v1.ActivityAttemptState.last_attempt_complete_time:type_name -> google.protobuf.Timestamp
	14, // 11: temporal.server.chasm.lib.activity.proto.v1.ActivityAttemptState.last_failure:type_name -> temporal.api.failure.v1.Failure
	15, // 12: temporal.server.chasm.lib.activity.proto.v1.ActivityAttemptState.last_deployment_version:type_name -> temporal.api.deployment.v1.WorkerDeploymentVersion
	16, // 13: temporal.server.chasm.lib.activity.proto.v1.ActivityHeartbeatState.details:type_name -> temporal.api.common.v1.Payloads
	11, // 14: temporal.server.chasm.lib.activity.proto.v1.ActivityHeartbeatState.recorded_time:type_name -> google.protobuf.Timestamp
	16, // 15: temporal.server.chasm.lib.activity.proto.v1.ActivityRequestData.input:type_name -> temporal.api.common.v1.Payloads
	17, // 16: temporal.server.chasm.lib.activity.proto.v1.ActivityRequestData.header:type_name -> temporal.api.common.v1.Header
	18, // 17: temporal.server.chasm.lib.activity.proto.v1.ActivityRequestData.user_metadata:type_name -> temporal.api.sdk.v1.UserMetadata
	7,  // 18: temporal.server.chasm.lib.activity.proto.v1.ActivityOutcome.successful:type_name -> temporal.server.chasm.lib.activity.proto.v1.ActivityOutcome.Successful
	8,  // 19: temporal.server.chasm.lib.activity.proto.v1.ActivityOutcome.failed:type_name -> temporal.server.chasm.lib.activity.proto.v1.ActivityOutcome.Failed
	16, // 20: temporal.server.chasm.lib.activity.proto.v1.ActivityOutcome.Successful.output:type_name -> temporal.api.common.v1.Payloads
	14, // 21: temporal.server.chasm.lib.activity.proto.v1.ActivityOutcome.Failed.failure:type_name -> temporal.api.failure.v1.Failure
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_init() }
func file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_init() {
	if File_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto != nil {
		return
	}
	file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_msgTypes[5].OneofWrappers = []any{
		(*ActivityOutcome_Successful_)(nil),
		(*ActivityOutcome_Failed_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_rawDesc), len(file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_goTypes,
		DependencyIndexes: file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_depIdxs,
		EnumInfos:         file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_enumTypes,
		MessageInfos:      file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_msgTypes,
	}.Build()
	File_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto = out.File
	file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_goTypes = nil
	file_temporal_server_chasm_lib_activity_proto_v1_activity_state_proto_depIdxs = nil
}
