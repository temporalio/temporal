// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package resource is a generated GoMock package.
package resource

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	membership "go.temporal.io/server/common/membership"
)

// MockHostInfoProvider is a mock of HostInfoProvider interface.
type MockHostInfoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockHostInfoProviderMockRecorder
}

// MockHostInfoProviderMockRecorder is the mock recorder for MockHostInfoProvider.
type MockHostInfoProviderMockRecorder struct {
	mock *MockHostInfoProvider
}

// NewMockHostInfoProvider creates a new mock instance.
func NewMockHostInfoProvider(ctrl *gomock.Controller) *MockHostInfoProvider {
	mock := &MockHostInfoProvider{ctrl: ctrl}
	mock.recorder = &MockHostInfoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostInfoProvider) EXPECT() *MockHostInfoProviderMockRecorder {
	return m.recorder
}

// HostInfo mocks base method.
func (m *MockHostInfoProvider) HostInfo() *membership.HostInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostInfo")
	ret0, _ := ret[0].(*membership.HostInfo)
	return ret0
}

// HostInfo indicates an expected call of HostInfo.
func (mr *MockHostInfoProviderMockRecorder) HostInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostInfo", reflect.TypeOf((*MockHostInfoProvider)(nil).HostInfo))
}

// Start mocks base method.
func (m *MockHostInfoProvider) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockHostInfoProviderMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockHostInfoProvider)(nil).Start))
}
