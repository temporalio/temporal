// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by cmd/tools/gensearchattributehelpers. DO NOT EDIT.

package searchattribute

import (
	commonpb "go.temporal.io/api/common/v1"
	historypb "go.temporal.io/api/history/v1"
)

func SetToEvent(event *historypb.HistoryEvent, sas *commonpb.SearchAttributes) bool {
	switch e := event.GetAttributes().(type) {
	case *historypb.HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes:
		e.StartChildWorkflowExecutionInitiatedEventAttributes.SearchAttributes = sas
		return true
	case *historypb.HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes:
		e.UpsertWorkflowSearchAttributesEventAttributes.SearchAttributes = sas
		return true
	case *historypb.HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes:
		e.WorkflowExecutionContinuedAsNewEventAttributes.SearchAttributes = sas
		return true
	case *historypb.HistoryEvent_WorkflowExecutionStartedEventAttributes:
		e.WorkflowExecutionStartedEventAttributes.SearchAttributes = sas
		return true
	default:
		return false
	}
}

func GetFromEvent(event *historypb.HistoryEvent) (*commonpb.SearchAttributes, bool) {
	switch e := event.GetAttributes().(type) {
	case *historypb.HistoryEvent_StartChildWorkflowExecutionInitiatedEventAttributes:
		return e.StartChildWorkflowExecutionInitiatedEventAttributes.GetSearchAttributes(), true
	case *historypb.HistoryEvent_UpsertWorkflowSearchAttributesEventAttributes:
		return e.UpsertWorkflowSearchAttributesEventAttributes.GetSearchAttributes(), true
	case *historypb.HistoryEvent_WorkflowExecutionContinuedAsNewEventAttributes:
		return e.WorkflowExecutionContinuedAsNewEventAttributes.GetSearchAttributes(), true
	case *historypb.HistoryEvent_WorkflowExecutionStartedEventAttributes:
		return e.WorkflowExecutionStartedEventAttributes.GetSearchAttributes(), true
	default:
		return nil, false
	}
}
