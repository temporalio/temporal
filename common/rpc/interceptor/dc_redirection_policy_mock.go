// Code generated by MockGen. DO NOT EDIT.
// Source: dc_redirection_policy.go
//
// Generated by this command:
//
//	mockgen -package interceptor -source dc_redirection_policy.go -destination dc_redirection_policy_mock.go
//

// Package interceptor is a generated GoMock package.
package interceptor

import (
	context "context"
	reflect "reflect"

	namespace "go.temporal.io/server/common/namespace"
	gomock "go.uber.org/mock/gomock"
)

// MockDCRedirectionPolicy is a mock of DCRedirectionPolicy interface.
type MockDCRedirectionPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockDCRedirectionPolicyMockRecorder
	isgomock struct{}
}

// MockDCRedirectionPolicyMockRecorder is the mock recorder for MockDCRedirectionPolicy.
type MockDCRedirectionPolicyMockRecorder struct {
	mock *MockDCRedirectionPolicy
}

// NewMockDCRedirectionPolicy creates a new mock instance.
func NewMockDCRedirectionPolicy(ctrl *gomock.Controller) *MockDCRedirectionPolicy {
	mock := &MockDCRedirectionPolicy{ctrl: ctrl}
	mock.recorder = &MockDCRedirectionPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDCRedirectionPolicy) EXPECT() *MockDCRedirectionPolicyMockRecorder {
	return m.recorder
}

// WithNamespaceIDRedirect mocks base method.
func (m *MockDCRedirectionPolicy) WithNamespaceIDRedirect(ctx context.Context, namespaceID namespace.ID, apiName string, call func(string) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithNamespaceIDRedirect", ctx, namespaceID, apiName, call)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithNamespaceIDRedirect indicates an expected call of WithNamespaceIDRedirect.
func (mr *MockDCRedirectionPolicyMockRecorder) WithNamespaceIDRedirect(ctx, namespaceID, apiName, call any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithNamespaceIDRedirect", reflect.TypeOf((*MockDCRedirectionPolicy)(nil).WithNamespaceIDRedirect), ctx, namespaceID, apiName, call)
}

// WithNamespaceRedirect mocks base method.
func (m *MockDCRedirectionPolicy) WithNamespaceRedirect(ctx context.Context, namespace namespace.Name, apiName string, call func(string) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithNamespaceRedirect", ctx, namespace, apiName, call)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithNamespaceRedirect indicates an expected call of WithNamespaceRedirect.
func (mr *MockDCRedirectionPolicyMockRecorder) WithNamespaceRedirect(ctx, namespace, apiName, call any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithNamespaceRedirect", reflect.TypeOf((*MockDCRedirectionPolicy)(nil).WithNamespaceRedirect), ctx, namespace, apiName, call)
}
