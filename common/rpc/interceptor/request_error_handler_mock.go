// Code generated by MockGen. DO NOT EDIT.
// Source: request_error_handler.go
//
// Generated by this command:
//
//	mockgen -package interceptor -source request_error_handler.go -destination request_error_handler_mock.go
//

// Package interceptor is a generated GoMock package.
package interceptor

import (
	reflect "reflect"

	tag "go.temporal.io/server/common/log/tag"
	metrics "go.temporal.io/server/common/metrics"
	namespace "go.temporal.io/server/common/namespace"
	gomock "go.uber.org/mock/gomock"
)

// MockErrorHandler is a mock of ErrorHandler interface.
type MockErrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockErrorHandlerMockRecorder
	isgomock struct{}
}

// MockErrorHandlerMockRecorder is the mock recorder for MockErrorHandler.
type MockErrorHandlerMockRecorder struct {
	mock *MockErrorHandler
}

// NewMockErrorHandler creates a new mock instance.
func NewMockErrorHandler(ctrl *gomock.Controller) *MockErrorHandler {
	mock := &MockErrorHandler{ctrl: ctrl}
	mock.recorder = &MockErrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorHandler) EXPECT() *MockErrorHandlerMockRecorder {
	return m.recorder
}

// HandleError mocks base method.
func (m *MockErrorHandler) HandleError(req any, fullMethod string, metricsHandler metrics.Handler, logTags []tag.Tag, err error, nsName namespace.Name) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleError", req, fullMethod, metricsHandler, logTags, err, nsName)
}

// HandleError indicates an expected call of HandleError.
func (mr *MockErrorHandlerMockRecorder) HandleError(req, fullMethod, metricsHandler, logTags, err, nsName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleError", reflect.TypeOf((*MockErrorHandler)(nil).HandleError), req, fullMethod, metricsHandler, logTags, err, nsName)
}
