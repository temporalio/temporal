// Code generated by MockGen. DO NOT EDIT.
// Source: visibility_query_converter.go
//
// Generated by this command:
//
//	mockgen -package sqlplugin -source visibility_query_converter.go -destination visibility_query_converter_mock.go
//

// Package sqlplugin is a generated GoMock package.
package sqlplugin

import (
	reflect "reflect"

	sqlparser "github.com/temporalio/sqlparser"
	query "go.temporal.io/server/common/persistence/visibility/store/query"
	gomock "go.uber.org/mock/gomock"
)

// MockVisibilityQueryConverter is a mock of VisibilityQueryConverter interface.
type MockVisibilityQueryConverter struct {
	ctrl     *gomock.Controller
	recorder *MockVisibilityQueryConverterMockRecorder
	isgomock struct{}
}

// MockVisibilityQueryConverterMockRecorder is the mock recorder for MockVisibilityQueryConverter.
type MockVisibilityQueryConverterMockRecorder struct {
	mock *MockVisibilityQueryConverter
}

// NewMockVisibilityQueryConverter creates a new mock instance.
func NewMockVisibilityQueryConverter(ctrl *gomock.Controller) *MockVisibilityQueryConverter {
	mock := &MockVisibilityQueryConverter{ctrl: ctrl}
	mock.recorder = &MockVisibilityQueryConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVisibilityQueryConverter) EXPECT() *MockVisibilityQueryConverterMockRecorder {
	return m.recorder
}

// BuildCountStmt mocks base method.
func (m *MockVisibilityQueryConverter) BuildCountStmt(queryExpr *query.QueryParams[sqlparser.Expr]) (string, []any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildCountStmt", queryExpr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]any)
	return ret0, ret1
}

// BuildCountStmt indicates an expected call of BuildCountStmt.
func (mr *MockVisibilityQueryConverterMockRecorder) BuildCountStmt(queryExpr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildCountStmt", reflect.TypeOf((*MockVisibilityQueryConverter)(nil).BuildCountStmt), queryExpr)
}

// BuildSelectStmt mocks base method.
func (m *MockVisibilityQueryConverter) BuildSelectStmt(queryExpr *query.QueryParams[sqlparser.Expr], pageSize int, pageToken *VisibilityPageToken) (string, []any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSelectStmt", queryExpr, pageSize, pageToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]any)
	return ret0, ret1
}

// BuildSelectStmt indicates an expected call of BuildSelectStmt.
func (mr *MockVisibilityQueryConverterMockRecorder) BuildSelectStmt(queryExpr, pageSize, pageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSelectStmt", reflect.TypeOf((*MockVisibilityQueryConverter)(nil).BuildSelectStmt), queryExpr, pageSize, pageToken)
}

// ConvertKeywordListComparisonExpr mocks base method.
func (m *MockVisibilityQueryConverter) ConvertKeywordListComparisonExpr(operator string, col *query.SAColumn, value sqlparser.Expr) (sqlparser.Expr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertKeywordListComparisonExpr", operator, col, value)
	ret0, _ := ret[0].(sqlparser.Expr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertKeywordListComparisonExpr indicates an expected call of ConvertKeywordListComparisonExpr.
func (mr *MockVisibilityQueryConverterMockRecorder) ConvertKeywordListComparisonExpr(operator, col, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertKeywordListComparisonExpr", reflect.TypeOf((*MockVisibilityQueryConverter)(nil).ConvertKeywordListComparisonExpr), operator, col, value)
}

// ConvertTextComparisonExpr mocks base method.
func (m *MockVisibilityQueryConverter) ConvertTextComparisonExpr(operator string, col *query.SAColumn, value sqlparser.Expr) (sqlparser.Expr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertTextComparisonExpr", operator, col, value)
	ret0, _ := ret[0].(sqlparser.Expr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertTextComparisonExpr indicates an expected call of ConvertTextComparisonExpr.
func (mr *MockVisibilityQueryConverterMockRecorder) ConvertTextComparisonExpr(operator, col, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertTextComparisonExpr", reflect.TypeOf((*MockVisibilityQueryConverter)(nil).ConvertTextComparisonExpr), operator, col, value)
}

// GetDatetimeFormat mocks base method.
func (m *MockVisibilityQueryConverter) GetDatetimeFormat() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatetimeFormat")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDatetimeFormat indicates an expected call of GetDatetimeFormat.
func (mr *MockVisibilityQueryConverterMockRecorder) GetDatetimeFormat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatetimeFormat", reflect.TypeOf((*MockVisibilityQueryConverter)(nil).GetDatetimeFormat))
}
