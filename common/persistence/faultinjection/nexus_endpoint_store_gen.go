// Code generated by gowrap. DO NOT EDIT.
// template: gowrap_template
// gowrap: http://github.com/hexdigest/gowrap

package faultinjection

//go:generate gowrap gen -p go.temporal.io/server/common/persistence -i NexusEndpointStore -t gowrap_template -o nexus_endpoint_store_gen.go -l ""

import (
	"context"

	_sourcePersistence "go.temporal.io/server/common/persistence"
)

type (
	// faultInjectionNexusEndpointStore implements NexusEndpointStore interface with fault injection.
	faultInjectionNexusEndpointStore struct {
		_sourcePersistence.NexusEndpointStore
		generator faultGenerator
	}
)

// newFaultInjectionNexusEndpointStore returns faultInjectionNexusEndpointStore.
func newFaultInjectionNexusEndpointStore(
	baseStore _sourcePersistence.NexusEndpointStore,
	generator faultGenerator,
) *faultInjectionNexusEndpointStore {
	return &faultInjectionNexusEndpointStore{
		NexusEndpointStore: baseStore,
		generator:          generator,
	}
}

// CreateOrUpdateNexusEndpoint wraps NexusEndpointStore.CreateOrUpdateNexusEndpoint.
func (d faultInjectionNexusEndpointStore) CreateOrUpdateNexusEndpoint(ctx context.Context, request *_sourcePersistence.InternalCreateOrUpdateNexusEndpointRequest) (err error) {
	err = d.generator.generate("CreateOrUpdateNexusEndpoint").inject(func() error {
		err = d.NexusEndpointStore.CreateOrUpdateNexusEndpoint(ctx, request)
		return err
	})
	return
}

// DeleteNexusEndpoint wraps NexusEndpointStore.DeleteNexusEndpoint.
func (d faultInjectionNexusEndpointStore) DeleteNexusEndpoint(ctx context.Context, request *_sourcePersistence.DeleteNexusEndpointRequest) (err error) {
	err = d.generator.generate("DeleteNexusEndpoint").inject(func() error {
		err = d.NexusEndpointStore.DeleteNexusEndpoint(ctx, request)
		return err
	})
	return
}

// GetNexusEndpoint wraps NexusEndpointStore.GetNexusEndpoint.
func (d faultInjectionNexusEndpointStore) GetNexusEndpoint(ctx context.Context, request *_sourcePersistence.GetNexusEndpointRequest) (ip1 *_sourcePersistence.InternalNexusEndpoint, err error) {
	err = d.generator.generate("GetNexusEndpoint").inject(func() error {
		ip1, err = d.NexusEndpointStore.GetNexusEndpoint(ctx, request)
		return err
	})
	return
}

// ListNexusEndpoints wraps NexusEndpointStore.ListNexusEndpoints.
func (d faultInjectionNexusEndpointStore) ListNexusEndpoints(ctx context.Context, request *_sourcePersistence.ListNexusEndpointsRequest) (ip1 *_sourcePersistence.InternalListNexusEndpointsResponse, err error) {
	err = d.generator.generate("ListNexusEndpoints").inject(func() error {
		ip1, err = d.NexusEndpointStore.ListNexusEndpoints(ctx, request)
		return err
	})
	return
}
