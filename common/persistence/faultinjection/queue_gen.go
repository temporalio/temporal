// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by cmd/tools/genfaultinjection. DO NOT EDIT.

package faultinjection

import (
	"context"

	"go.temporal.io/api/common/v1"
	"go.temporal.io/server/common/persistence"
)

type (
	faultInjectionQueue struct {
		baseStore persistence.Queue
		generator faultGenerator
	}
)

func newFaultInjectionQueue(
	baseStore persistence.Queue,
	generator faultGenerator,
) *faultInjectionQueue {
	return &faultInjectionQueue{
		baseStore: baseStore,
		generator: generator,
	}
}

func (c *faultInjectionQueue) Close() {
	c.baseStore.Close()
}

func (c *faultInjectionQueue) DeleteMessageFromDLQ(
	ctx context.Context,
	p1 int64,
) error {
	return inject0(c.generator.generate("DeleteMessageFromDLQ"), func() error {
		return c.baseStore.DeleteMessageFromDLQ(ctx, p1)
	})
}

func (c *faultInjectionQueue) DeleteMessagesBefore(
	ctx context.Context,
	p1 int64,
) error {
	return inject0(c.generator.generate("DeleteMessagesBefore"), func() error {
		return c.baseStore.DeleteMessagesBefore(ctx, p1)
	})
}

func (c *faultInjectionQueue) EnqueueMessage(
	ctx context.Context,
	p1 *common.DataBlob,
) error {
	return inject0(c.generator.generate("EnqueueMessage"), func() error {
		return c.baseStore.EnqueueMessage(ctx, p1)
	})
}

func (c *faultInjectionQueue) EnqueueMessageToDLQ(
	ctx context.Context,
	p1 *common.DataBlob,
) (int64, error) {
	return inject1(c.generator.generate("EnqueueMessageToDLQ"), func() (int64, error) {
		return c.baseStore.EnqueueMessageToDLQ(ctx, p1)
	})
}

func (c *faultInjectionQueue) GetAckLevels(
	ctx context.Context,
) (*persistence.InternalQueueMetadata, error) {
	return c.baseStore.GetAckLevels(ctx)
}

func (c *faultInjectionQueue) GetDLQAckLevels(
	ctx context.Context,
) (*persistence.InternalQueueMetadata, error) {
	return c.baseStore.GetDLQAckLevels(ctx)
}

func (c *faultInjectionQueue) Init(
	ctx context.Context,
	p1 *common.DataBlob,
) error {
	return inject0(c.generator.generate("Init"), func() error {
		return c.baseStore.Init(ctx, p1)
	})
}

func (c *faultInjectionQueue) RangeDeleteMessagesFromDLQ(
	ctx context.Context,
	p1 int64,
	p2 int64,
) error {
	return inject0(c.generator.generate("RangeDeleteMessagesFromDLQ"), func() error {
		return c.baseStore.RangeDeleteMessagesFromDLQ(ctx, p1, p2)
	})
}

func (c *faultInjectionQueue) ReadMessages(
	ctx context.Context,
	p1 int64,
	p2 int,
) ([]*persistence.QueueMessage, error) {
	return inject1(c.generator.generate("ReadMessages"), func() ([]*persistence.QueueMessage, error) {
		return c.baseStore.ReadMessages(ctx, p1, p2)
	})
}

func (c *faultInjectionQueue) ReadMessagesFromDLQ(
	ctx context.Context,
	p1 int64,
	p2 int64,
	p3 int,
	p4 []uint8,
) ([]*persistence.QueueMessage, []uint8, error) {
	return inject2(c.generator.generate("ReadMessagesFromDLQ"), func() ([]*persistence.QueueMessage, []uint8, error) {
		return c.baseStore.ReadMessagesFromDLQ(ctx, p1, p2, p3, p4)
	})
}

func (c *faultInjectionQueue) UpdateAckLevel(
	ctx context.Context,
	p1 *persistence.InternalQueueMetadata,
) error {
	return inject0(c.generator.generate("UpdateAckLevel"), func() error {
		return c.baseStore.UpdateAckLevel(ctx, p1)
	})
}

func (c *faultInjectionQueue) UpdateDLQAckLevel(
	ctx context.Context,
	p1 *persistence.InternalQueueMetadata,
) error {
	return inject0(c.generator.generate("UpdateDLQAckLevel"), func() error {
		return c.baseStore.UpdateDLQAckLevel(ctx, p1)
	})
}
