// Code generated by MockGen. DO NOT EDIT.
// Source: elastic_client.go
//
// Generated by this command:
//
//	mockgen -package client -source elastic_client.go -destination elastic_client_mock.go
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockElasticClient is a mock of ElasticClient interface.
type MockElasticClient struct {
	ctrl     *gomock.Controller
	recorder *MockElasticClientMockRecorder
	isgomock struct{}
}

// MockElasticClientMockRecorder is the mock recorder for MockElasticClient.
type MockElasticClientMockRecorder struct {
	mock *MockElasticClient
}

// NewMockElasticClient creates a new mock instance.
func NewMockElasticClient(ctrl *gomock.Controller) *MockElasticClient {
	mock := &MockElasticClient{ctrl: ctrl}
	mock.recorder = &MockElasticClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockElasticClient) EXPECT() *MockElasticClientMockRecorder {
	return m.recorder
}

// CreateIndex mocks base method.
func (m *MockElasticClient) CreateIndex(ctx context.Context, index string, body map[string]any) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndex", ctx, index, body)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIndex indicates an expected call of CreateIndex.
func (mr *MockElasticClientMockRecorder) CreateIndex(ctx, index, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockElasticClient)(nil).CreateIndex), ctx, index, body)
}

// DeleteIndex mocks base method.
func (m *MockElasticClient) DeleteIndex(ctx context.Context, indexName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIndex", ctx, indexName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIndex indicates an expected call of DeleteIndex.
func (mr *MockElasticClientMockRecorder) DeleteIndex(ctx, indexName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndex", reflect.TypeOf((*MockElasticClient)(nil).DeleteIndex), ctx, indexName)
}

// GetDocument mocks base method.
func (m *MockElasticClient) GetDocument(ctx context.Context, index, docID string) (*GetResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocument", ctx, index, docID)
	ret0, _ := ret[0].(*GetResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocument indicates an expected call of GetDocument.
func (mr *MockElasticClientMockRecorder) GetDocument(ctx, index, docID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocument", reflect.TypeOf((*MockElasticClient)(nil).GetDocument), ctx, index, docID)
}

// IndexExists mocks base method.
func (m *MockElasticClient) IndexExists(ctx context.Context, indexName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexExists", ctx, indexName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexExists indicates an expected call of IndexExists.
func (mr *MockElasticClientMockRecorder) IndexExists(ctx, indexName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexExists", reflect.TypeOf((*MockElasticClient)(nil).IndexExists), ctx, indexName)
}

// Ping mocks base method.
func (m *MockElasticClient) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockElasticClientMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockElasticClient)(nil).Ping), ctx)
}
