// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by gowrap. DO NOT EDIT.
// template: gowrap_template
// gowrap: http://github.com/hexdigest/gowrap

package intercept

//go:generate gowrap gen -p go.temporal.io/server/common/persistence -i TaskStore -t gowrap_template -o task_store_gen.go -l ""

import (
	"context"

	_sourcePersistence "go.temporal.io/server/common/persistence"
)

type (
	interceptorTaskStore struct {
		_sourcePersistence.TaskStore
		interceptor PersistenceInterceptor
	}
)

// newInterceptorTaskStore returns interceptorTaskStore.
func newInterceptorTaskStore(
	baseStore _sourcePersistence.TaskStore,
	interceptor PersistenceInterceptor,
) *interceptorTaskStore {
	return &interceptorTaskStore{
		TaskStore:   baseStore,
		interceptor: interceptor,
	}
}

// CompleteTasksLessThan wraps TaskStore.CompleteTasksLessThan.
func (d interceptorTaskStore) CompleteTasksLessThan(ctx context.Context, request *_sourcePersistence.CompleteTasksLessThanRequest) (i1 int, err error) {
	err = d.interceptor(
		"CompleteTasksLessThan",
		func() (any, error) {
			i1, err = d.TaskStore.CompleteTasksLessThan(ctx, request)
			return i1, err
		},
		ctx, request,
	)
	return
}

// CountTaskQueuesByBuildId wraps TaskStore.CountTaskQueuesByBuildId.
func (d interceptorTaskStore) CountTaskQueuesByBuildId(ctx context.Context, request *_sourcePersistence.CountTaskQueuesByBuildIdRequest) (i1 int, err error) {
	err = d.interceptor(
		"CountTaskQueuesByBuildId",
		func() (any, error) {
			i1, err = d.TaskStore.CountTaskQueuesByBuildId(ctx, request)
			return i1, err
		},
		ctx, request,
	)
	return
}

// CreateTaskQueue wraps TaskStore.CreateTaskQueue.
func (d interceptorTaskStore) CreateTaskQueue(ctx context.Context, request *_sourcePersistence.InternalCreateTaskQueueRequest) (err error) {
	err = d.interceptor(
		"CreateTaskQueue",
		func() (any, error) {
			err = d.TaskStore.CreateTaskQueue(ctx, request)
			return nil, err
		},
		ctx, request,
	)
	return
}

// CreateTasks wraps TaskStore.CreateTasks.
func (d interceptorTaskStore) CreateTasks(ctx context.Context, request *_sourcePersistence.InternalCreateTasksRequest) (cp1 *_sourcePersistence.CreateTasksResponse, err error) {
	err = d.interceptor(
		"CreateTasks",
		func() (any, error) {
			cp1, err = d.TaskStore.CreateTasks(ctx, request)
			return cp1, err
		},
		ctx, request,
	)
	return
}

// DeleteTaskQueue wraps TaskStore.DeleteTaskQueue.
func (d interceptorTaskStore) DeleteTaskQueue(ctx context.Context, request *_sourcePersistence.DeleteTaskQueueRequest) (err error) {
	err = d.interceptor(
		"DeleteTaskQueue",
		func() (any, error) {
			err = d.TaskStore.DeleteTaskQueue(ctx, request)
			return nil, err
		},
		ctx, request,
	)
	return
}

// GetTaskQueue wraps TaskStore.GetTaskQueue.
func (d interceptorTaskStore) GetTaskQueue(ctx context.Context, request *_sourcePersistence.InternalGetTaskQueueRequest) (ip1 *_sourcePersistence.InternalGetTaskQueueResponse, err error) {
	err = d.interceptor(
		"GetTaskQueue",
		func() (any, error) {
			ip1, err = d.TaskStore.GetTaskQueue(ctx, request)
			return ip1, err
		},
		ctx, request,
	)
	return
}

// GetTaskQueueUserData wraps TaskStore.GetTaskQueueUserData.
func (d interceptorTaskStore) GetTaskQueueUserData(ctx context.Context, request *_sourcePersistence.GetTaskQueueUserDataRequest) (ip1 *_sourcePersistence.InternalGetTaskQueueUserDataResponse, err error) {
	err = d.interceptor(
		"GetTaskQueueUserData",
		func() (any, error) {
			ip1, err = d.TaskStore.GetTaskQueueUserData(ctx, request)
			return ip1, err
		},
		ctx, request,
	)
	return
}

// GetTaskQueuesByBuildId wraps TaskStore.GetTaskQueuesByBuildId.
func (d interceptorTaskStore) GetTaskQueuesByBuildId(ctx context.Context, request *_sourcePersistence.GetTaskQueuesByBuildIdRequest) (sa1 []string, err error) {
	err = d.interceptor(
		"GetTaskQueuesByBuildId",
		func() (any, error) {
			sa1, err = d.TaskStore.GetTaskQueuesByBuildId(ctx, request)
			return sa1, err
		},
		ctx, request,
	)
	return
}

// GetTasks wraps TaskStore.GetTasks.
func (d interceptorTaskStore) GetTasks(ctx context.Context, request *_sourcePersistence.GetTasksRequest) (ip1 *_sourcePersistence.InternalGetTasksResponse, err error) {
	err = d.interceptor(
		"GetTasks",
		func() (any, error) {
			ip1, err = d.TaskStore.GetTasks(ctx, request)
			return ip1, err
		},
		ctx, request,
	)
	return
}

// ListTaskQueue wraps TaskStore.ListTaskQueue.
func (d interceptorTaskStore) ListTaskQueue(ctx context.Context, request *_sourcePersistence.ListTaskQueueRequest) (ip1 *_sourcePersistence.InternalListTaskQueueResponse, err error) {
	err = d.interceptor(
		"ListTaskQueue",
		func() (any, error) {
			ip1, err = d.TaskStore.ListTaskQueue(ctx, request)
			return ip1, err
		},
		ctx, request,
	)
	return
}

// ListTaskQueueUserDataEntries wraps TaskStore.ListTaskQueueUserDataEntries.
func (d interceptorTaskStore) ListTaskQueueUserDataEntries(ctx context.Context, request *_sourcePersistence.ListTaskQueueUserDataEntriesRequest) (ip1 *_sourcePersistence.InternalListTaskQueueUserDataEntriesResponse, err error) {
	err = d.interceptor(
		"ListTaskQueueUserDataEntries",
		func() (any, error) {
			ip1, err = d.TaskStore.ListTaskQueueUserDataEntries(ctx, request)
			return ip1, err
		},
		ctx, request,
	)
	return
}

// UpdateTaskQueue wraps TaskStore.UpdateTaskQueue.
func (d interceptorTaskStore) UpdateTaskQueue(ctx context.Context, request *_sourcePersistence.InternalUpdateTaskQueueRequest) (up1 *_sourcePersistence.UpdateTaskQueueResponse, err error) {
	err = d.interceptor(
		"UpdateTaskQueue",
		func() (any, error) {
			up1, err = d.TaskStore.UpdateTaskQueue(ctx, request)
			return up1, err
		},
		ctx, request,
	)
	return
}

// UpdateTaskQueueUserData wraps TaskStore.UpdateTaskQueueUserData.
func (d interceptorTaskStore) UpdateTaskQueueUserData(ctx context.Context, request *_sourcePersistence.InternalUpdateTaskQueueUserDataRequest) (err error) {
	err = d.interceptor(
		"UpdateTaskQueueUserData",
		func() (any, error) {
			err = d.TaskStore.UpdateTaskQueueUserData(ctx, request)
			return nil, err
		},
		ctx, request,
	)
	return
}
