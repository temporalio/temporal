// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by gowrap. DO NOT EDIT.
// template: gowrap_template
// gowrap: http://github.com/hexdigest/gowrap

package intercept

//go:generate gowrap gen -p go.temporal.io/server/common/persistence -i Queue -t gowrap_template -o queue_gen.go -l ""

import (
	"context"

	commonpb "go.temporal.io/api/common/v1"
	_sourcePersistence "go.temporal.io/server/common/persistence"
)

type (
	interceptorQueue struct {
		_sourcePersistence.Queue
		interceptor PersistenceInterceptor
	}
)

// newInterceptorQueue returns interceptorQueue.
func newInterceptorQueue(
	baseStore _sourcePersistence.Queue,
	interceptor PersistenceInterceptor,
) *interceptorQueue {
	return &interceptorQueue{
		Queue:       baseStore,
		interceptor: interceptor,
	}
}

// DeleteMessageFromDLQ wraps Queue.DeleteMessageFromDLQ.
func (d interceptorQueue) DeleteMessageFromDLQ(ctx context.Context, messageID int64) (err error) {
	err = d.interceptor(
		"DeleteMessageFromDLQ",
		func() (any, error) {
			err = d.Queue.DeleteMessageFromDLQ(ctx, messageID)
			return nil, err
		},
		ctx, messageID,
	)
	return
}

// DeleteMessagesBefore wraps Queue.DeleteMessagesBefore.
func (d interceptorQueue) DeleteMessagesBefore(ctx context.Context, messageID int64) (err error) {
	err = d.interceptor(
		"DeleteMessagesBefore",
		func() (any, error) {
			err = d.Queue.DeleteMessagesBefore(ctx, messageID)
			return nil, err
		},
		ctx, messageID,
	)
	return
}

// EnqueueMessage wraps Queue.EnqueueMessage.
func (d interceptorQueue) EnqueueMessage(ctx context.Context, blob *commonpb.DataBlob) (err error) {
	err = d.interceptor(
		"EnqueueMessage",
		func() (any, error) {
			err = d.Queue.EnqueueMessage(ctx, blob)
			return nil, err
		},
		ctx, blob,
	)
	return
}

// EnqueueMessageToDLQ wraps Queue.EnqueueMessageToDLQ.
func (d interceptorQueue) EnqueueMessageToDLQ(ctx context.Context, blob *commonpb.DataBlob) (i1 int64, err error) {
	err = d.interceptor(
		"EnqueueMessageToDLQ",
		func() (any, error) {
			i1, err = d.Queue.EnqueueMessageToDLQ(ctx, blob)
			return i1, err
		},
		ctx, blob,
	)
	return
}

// Init wraps Queue.Init.
func (d interceptorQueue) Init(ctx context.Context, blob *commonpb.DataBlob) (err error) {
	err = d.interceptor(
		"Init",
		func() (any, error) {
			err = d.Queue.Init(ctx, blob)
			return nil, err
		},
		ctx, blob,
	)
	return
}

// RangeDeleteMessagesFromDLQ wraps Queue.RangeDeleteMessagesFromDLQ.
func (d interceptorQueue) RangeDeleteMessagesFromDLQ(ctx context.Context, firstMessageID int64, lastMessageID int64) (err error) {
	err = d.interceptor(
		"RangeDeleteMessagesFromDLQ",
		func() (any, error) {
			err = d.Queue.RangeDeleteMessagesFromDLQ(ctx, firstMessageID, lastMessageID)
			return nil, err
		},
		ctx, firstMessageID, lastMessageID,
	)
	return
}

// ReadMessages wraps Queue.ReadMessages.
func (d interceptorQueue) ReadMessages(ctx context.Context, lastMessageID int64, maxCount int) (qpa1 []*_sourcePersistence.QueueMessage, err error) {
	err = d.interceptor(
		"ReadMessages",
		func() (any, error) {
			qpa1, err = d.Queue.ReadMessages(ctx, lastMessageID, maxCount)
			return qpa1, err
		},
		ctx, lastMessageID, maxCount,
	)
	return
}

// UpdateAckLevel wraps Queue.UpdateAckLevel.
func (d interceptorQueue) UpdateAckLevel(ctx context.Context, metadata *_sourcePersistence.InternalQueueMetadata) (err error) {
	err = d.interceptor(
		"UpdateAckLevel",
		func() (any, error) {
			err = d.Queue.UpdateAckLevel(ctx, metadata)
			return nil, err
		},
		ctx, metadata,
	)
	return
}

// UpdateDLQAckLevel wraps Queue.UpdateDLQAckLevel.
func (d interceptorQueue) UpdateDLQAckLevel(ctx context.Context, metadata *_sourcePersistence.InternalQueueMetadata) (err error) {
	err = d.interceptor(
		"UpdateDLQAckLevel",
		func() (any, error) {
			err = d.Queue.UpdateDLQAckLevel(ctx, metadata)
			return nil, err
		},
		ctx, metadata,
	)
	return
}
