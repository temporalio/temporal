// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by gowrap. DO NOT EDIT.
// template: gowrap_template
// gowrap: http://github.com/hexdigest/gowrap

package intercept

//go:generate gowrap gen -p go.temporal.io/server/common/persistence -i ExecutionStore -t gowrap_template -o execution_store_gen.go -l ""

import (
	"context"

	_sourcePersistence "go.temporal.io/server/common/persistence"
)

type (
	interceptorExecutionStore struct {
		_sourcePersistence.ExecutionStore
		interceptor PersistenceInterceptor
	}
)

// newInterceptorExecutionStore returns interceptorExecutionStore.
func newInterceptorExecutionStore(
	baseStore _sourcePersistence.ExecutionStore,
	interceptor PersistenceInterceptor,
) *interceptorExecutionStore {
	return &interceptorExecutionStore{
		ExecutionStore: baseStore,
		interceptor:    interceptor,
	}
}

// AddHistoryTasks wraps ExecutionStore.AddHistoryTasks.
func (d interceptorExecutionStore) AddHistoryTasks(ctx context.Context, request *_sourcePersistence.InternalAddHistoryTasksRequest) (err error) {
	err = d.interceptor(
		"AddHistoryTasks",
		func() (any, error) {
			err = d.ExecutionStore.AddHistoryTasks(ctx, request)
			return nil, err
		},
		ctx, request,
	)
	return
}

// AppendHistoryNodes wraps ExecutionStore.AppendHistoryNodes.
func (d interceptorExecutionStore) AppendHistoryNodes(ctx context.Context, request *_sourcePersistence.InternalAppendHistoryNodesRequest) (err error) {
	err = d.interceptor(
		"AppendHistoryNodes",
		func() (any, error) {
			err = d.ExecutionStore.AppendHistoryNodes(ctx, request)
			return nil, err
		},
		ctx, request,
	)
	return
}

// CompleteHistoryTask wraps ExecutionStore.CompleteHistoryTask.
func (d interceptorExecutionStore) CompleteHistoryTask(ctx context.Context, request *_sourcePersistence.CompleteHistoryTaskRequest) (err error) {
	err = d.interceptor(
		"CompleteHistoryTask",
		func() (any, error) {
			err = d.ExecutionStore.CompleteHistoryTask(ctx, request)
			return nil, err
		},
		ctx, request,
	)
	return
}

// ConflictResolveWorkflowExecution wraps ExecutionStore.ConflictResolveWorkflowExecution.
func (d interceptorExecutionStore) ConflictResolveWorkflowExecution(ctx context.Context, request *_sourcePersistence.InternalConflictResolveWorkflowExecutionRequest) (err error) {
	err = d.interceptor(
		"ConflictResolveWorkflowExecution",
		func() (any, error) {
			err = d.ExecutionStore.ConflictResolveWorkflowExecution(ctx, request)
			return nil, err
		},
		ctx, request,
	)
	return
}

// CreateWorkflowExecution wraps ExecutionStore.CreateWorkflowExecution.
func (d interceptorExecutionStore) CreateWorkflowExecution(ctx context.Context, request *_sourcePersistence.InternalCreateWorkflowExecutionRequest) (ip1 *_sourcePersistence.InternalCreateWorkflowExecutionResponse, err error) {
	err = d.interceptor(
		"CreateWorkflowExecution",
		func() (any, error) {
			ip1, err = d.ExecutionStore.CreateWorkflowExecution(ctx, request)
			return ip1, err
		},
		ctx, request,
	)
	return
}

// DeleteCurrentWorkflowExecution wraps ExecutionStore.DeleteCurrentWorkflowExecution.
func (d interceptorExecutionStore) DeleteCurrentWorkflowExecution(ctx context.Context, request *_sourcePersistence.DeleteCurrentWorkflowExecutionRequest) (err error) {
	err = d.interceptor(
		"DeleteCurrentWorkflowExecution",
		func() (any, error) {
			err = d.ExecutionStore.DeleteCurrentWorkflowExecution(ctx, request)
			return nil, err
		},
		ctx, request,
	)
	return
}

// DeleteHistoryBranch wraps ExecutionStore.DeleteHistoryBranch.
func (d interceptorExecutionStore) DeleteHistoryBranch(ctx context.Context, request *_sourcePersistence.InternalDeleteHistoryBranchRequest) (err error) {
	err = d.interceptor(
		"DeleteHistoryBranch",
		func() (any, error) {
			err = d.ExecutionStore.DeleteHistoryBranch(ctx, request)
			return nil, err
		},
		ctx, request,
	)
	return
}

// DeleteHistoryNodes wraps ExecutionStore.DeleteHistoryNodes.
func (d interceptorExecutionStore) DeleteHistoryNodes(ctx context.Context, request *_sourcePersistence.InternalDeleteHistoryNodesRequest) (err error) {
	err = d.interceptor(
		"DeleteHistoryNodes",
		func() (any, error) {
			err = d.ExecutionStore.DeleteHistoryNodes(ctx, request)
			return nil, err
		},
		ctx, request,
	)
	return
}

// DeleteReplicationTaskFromDLQ wraps ExecutionStore.DeleteReplicationTaskFromDLQ.
func (d interceptorExecutionStore) DeleteReplicationTaskFromDLQ(ctx context.Context, request *_sourcePersistence.DeleteReplicationTaskFromDLQRequest) (err error) {
	err = d.interceptor(
		"DeleteReplicationTaskFromDLQ",
		func() (any, error) {
			err = d.ExecutionStore.DeleteReplicationTaskFromDLQ(ctx, request)
			return nil, err
		},
		ctx, request,
	)
	return
}

// DeleteWorkflowExecution wraps ExecutionStore.DeleteWorkflowExecution.
func (d interceptorExecutionStore) DeleteWorkflowExecution(ctx context.Context, request *_sourcePersistence.DeleteWorkflowExecutionRequest) (err error) {
	err = d.interceptor(
		"DeleteWorkflowExecution",
		func() (any, error) {
			err = d.ExecutionStore.DeleteWorkflowExecution(ctx, request)
			return nil, err
		},
		ctx, request,
	)
	return
}

// ForkHistoryBranch wraps ExecutionStore.ForkHistoryBranch.
func (d interceptorExecutionStore) ForkHistoryBranch(ctx context.Context, request *_sourcePersistence.InternalForkHistoryBranchRequest) (err error) {
	err = d.interceptor(
		"ForkHistoryBranch",
		func() (any, error) {
			err = d.ExecutionStore.ForkHistoryBranch(ctx, request)
			return nil, err
		},
		ctx, request,
	)
	return
}

// GetAllHistoryTreeBranches wraps ExecutionStore.GetAllHistoryTreeBranches.
func (d interceptorExecutionStore) GetAllHistoryTreeBranches(ctx context.Context, request *_sourcePersistence.GetAllHistoryTreeBranchesRequest) (ip1 *_sourcePersistence.InternalGetAllHistoryTreeBranchesResponse, err error) {
	err = d.interceptor(
		"GetAllHistoryTreeBranches",
		func() (any, error) {
			ip1, err = d.ExecutionStore.GetAllHistoryTreeBranches(ctx, request)
			return ip1, err
		},
		ctx, request,
	)
	return
}

// GetCurrentExecution wraps ExecutionStore.GetCurrentExecution.
func (d interceptorExecutionStore) GetCurrentExecution(ctx context.Context, request *_sourcePersistence.GetCurrentExecutionRequest) (ip1 *_sourcePersistence.InternalGetCurrentExecutionResponse, err error) {
	err = d.interceptor(
		"GetCurrentExecution",
		func() (any, error) {
			ip1, err = d.ExecutionStore.GetCurrentExecution(ctx, request)
			return ip1, err
		},
		ctx, request,
	)
	return
}

// GetHistoryTasks wraps ExecutionStore.GetHistoryTasks.
func (d interceptorExecutionStore) GetHistoryTasks(ctx context.Context, request *_sourcePersistence.GetHistoryTasksRequest) (ip1 *_sourcePersistence.InternalGetHistoryTasksResponse, err error) {
	err = d.interceptor(
		"GetHistoryTasks",
		func() (any, error) {
			ip1, err = d.ExecutionStore.GetHistoryTasks(ctx, request)
			return ip1, err
		},
		ctx, request,
	)
	return
}

// GetHistoryTreeContainingBranch wraps ExecutionStore.GetHistoryTreeContainingBranch.
func (d interceptorExecutionStore) GetHistoryTreeContainingBranch(ctx context.Context, request *_sourcePersistence.InternalGetHistoryTreeContainingBranchRequest) (ip1 *_sourcePersistence.InternalGetHistoryTreeContainingBranchResponse, err error) {
	err = d.interceptor(
		"GetHistoryTreeContainingBranch",
		func() (any, error) {
			ip1, err = d.ExecutionStore.GetHistoryTreeContainingBranch(ctx, request)
			return ip1, err
		},
		ctx, request,
	)
	return
}

// GetReplicationTasksFromDLQ wraps ExecutionStore.GetReplicationTasksFromDLQ.
func (d interceptorExecutionStore) GetReplicationTasksFromDLQ(ctx context.Context, request *_sourcePersistence.GetReplicationTasksFromDLQRequest) (ip1 *_sourcePersistence.InternalGetReplicationTasksFromDLQResponse, err error) {
	err = d.interceptor(
		"GetReplicationTasksFromDLQ",
		func() (any, error) {
			ip1, err = d.ExecutionStore.GetReplicationTasksFromDLQ(ctx, request)
			return ip1, err
		},
		ctx, request,
	)
	return
}

// GetWorkflowExecution wraps ExecutionStore.GetWorkflowExecution.
func (d interceptorExecutionStore) GetWorkflowExecution(ctx context.Context, request *_sourcePersistence.GetWorkflowExecutionRequest) (ip1 *_sourcePersistence.InternalGetWorkflowExecutionResponse, err error) {
	err = d.interceptor(
		"GetWorkflowExecution",
		func() (any, error) {
			ip1, err = d.ExecutionStore.GetWorkflowExecution(ctx, request)
			return ip1, err
		},
		ctx, request,
	)
	return
}

// IsReplicationDLQEmpty wraps ExecutionStore.IsReplicationDLQEmpty.
func (d interceptorExecutionStore) IsReplicationDLQEmpty(ctx context.Context, request *_sourcePersistence.GetReplicationTasksFromDLQRequest) (b1 bool, err error) {
	err = d.interceptor(
		"IsReplicationDLQEmpty",
		func() (any, error) {
			b1, err = d.ExecutionStore.IsReplicationDLQEmpty(ctx, request)
			return b1, err
		},
		ctx, request,
	)
	return
}

// ListConcreteExecutions wraps ExecutionStore.ListConcreteExecutions.
func (d interceptorExecutionStore) ListConcreteExecutions(ctx context.Context, request *_sourcePersistence.ListConcreteExecutionsRequest) (ip1 *_sourcePersistence.InternalListConcreteExecutionsResponse, err error) {
	err = d.interceptor(
		"ListConcreteExecutions",
		func() (any, error) {
			ip1, err = d.ExecutionStore.ListConcreteExecutions(ctx, request)
			return ip1, err
		},
		ctx, request,
	)
	return
}

// PutReplicationTaskToDLQ wraps ExecutionStore.PutReplicationTaskToDLQ.
func (d interceptorExecutionStore) PutReplicationTaskToDLQ(ctx context.Context, request *_sourcePersistence.PutReplicationTaskToDLQRequest) (err error) {
	err = d.interceptor(
		"PutReplicationTaskToDLQ",
		func() (any, error) {
			err = d.ExecutionStore.PutReplicationTaskToDLQ(ctx, request)
			return nil, err
		},
		ctx, request,
	)
	return
}

// RangeCompleteHistoryTasks wraps ExecutionStore.RangeCompleteHistoryTasks.
func (d interceptorExecutionStore) RangeCompleteHistoryTasks(ctx context.Context, request *_sourcePersistence.RangeCompleteHistoryTasksRequest) (err error) {
	err = d.interceptor(
		"RangeCompleteHistoryTasks",
		func() (any, error) {
			err = d.ExecutionStore.RangeCompleteHistoryTasks(ctx, request)
			return nil, err
		},
		ctx, request,
	)
	return
}

// RangeDeleteReplicationTaskFromDLQ wraps ExecutionStore.RangeDeleteReplicationTaskFromDLQ.
func (d interceptorExecutionStore) RangeDeleteReplicationTaskFromDLQ(ctx context.Context, request *_sourcePersistence.RangeDeleteReplicationTaskFromDLQRequest) (err error) {
	err = d.interceptor(
		"RangeDeleteReplicationTaskFromDLQ",
		func() (any, error) {
			err = d.ExecutionStore.RangeDeleteReplicationTaskFromDLQ(ctx, request)
			return nil, err
		},
		ctx, request,
	)
	return
}

// ReadHistoryBranch wraps ExecutionStore.ReadHistoryBranch.
func (d interceptorExecutionStore) ReadHistoryBranch(ctx context.Context, request *_sourcePersistence.InternalReadHistoryBranchRequest) (ip1 *_sourcePersistence.InternalReadHistoryBranchResponse, err error) {
	err = d.interceptor(
		"ReadHistoryBranch",
		func() (any, error) {
			ip1, err = d.ExecutionStore.ReadHistoryBranch(ctx, request)
			return ip1, err
		},
		ctx, request,
	)
	return
}

// SetWorkflowExecution wraps ExecutionStore.SetWorkflowExecution.
func (d interceptorExecutionStore) SetWorkflowExecution(ctx context.Context, request *_sourcePersistence.InternalSetWorkflowExecutionRequest) (err error) {
	err = d.interceptor(
		"SetWorkflowExecution",
		func() (any, error) {
			err = d.ExecutionStore.SetWorkflowExecution(ctx, request)
			return nil, err
		},
		ctx, request,
	)
	return
}

// UpdateWorkflowExecution wraps ExecutionStore.UpdateWorkflowExecution.
func (d interceptorExecutionStore) UpdateWorkflowExecution(ctx context.Context, request *_sourcePersistence.InternalUpdateWorkflowExecutionRequest) (err error) {
	err = d.interceptor(
		"UpdateWorkflowExecution",
		func() (any, error) {
			err = d.ExecutionStore.UpdateWorkflowExecution(ctx, request)
			return nil, err
		},
		ctx, request,
	)
	return
}
