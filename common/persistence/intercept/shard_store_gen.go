// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by gowrap. DO NOT EDIT.
// template: gowrap_template
// gowrap: http://github.com/hexdigest/gowrap

package intercept

//go:generate gowrap gen -p go.temporal.io/server/common/persistence -i ShardStore -t gowrap_template -o shard_store_gen.go -l ""

import (
	"context"

	_sourcePersistence "go.temporal.io/server/common/persistence"
)

type (
	interceptorShardStore struct {
		_sourcePersistence.ShardStore
		interceptor PersistenceInterceptor
	}
)

// newInterceptorShardStore returns interceptorShardStore.
func newInterceptorShardStore(
	baseStore _sourcePersistence.ShardStore,
	interceptor PersistenceInterceptor,
) *interceptorShardStore {
	return &interceptorShardStore{
		ShardStore:  baseStore,
		interceptor: interceptor,
	}
}

// AssertShardOwnership wraps ShardStore.AssertShardOwnership.
func (d interceptorShardStore) AssertShardOwnership(ctx context.Context, request *_sourcePersistence.AssertShardOwnershipRequest) (err error) {
	err = d.interceptor(
		"AssertShardOwnership",
		func() (any, error) {
			err = d.ShardStore.AssertShardOwnership(ctx, request)
			return nil, err
		},
		ctx, request,
	)
	return
}

// GetOrCreateShard wraps ShardStore.GetOrCreateShard.
func (d interceptorShardStore) GetOrCreateShard(ctx context.Context, request *_sourcePersistence.InternalGetOrCreateShardRequest) (ip1 *_sourcePersistence.InternalGetOrCreateShardResponse, err error) {
	err = d.interceptor(
		"GetOrCreateShard",
		func() (any, error) {
			ip1, err = d.ShardStore.GetOrCreateShard(ctx, request)
			return ip1, err
		},
		ctx, request,
	)
	return
}

// UpdateShard wraps ShardStore.UpdateShard.
func (d interceptorShardStore) UpdateShard(ctx context.Context, request *_sourcePersistence.InternalUpdateShardRequest) (err error) {
	err = d.interceptor(
		"UpdateShard",
		func() (any, error) {
			err = d.ShardStore.UpdateShard(ctx, request)
			return nil, err
		},
		ctx, request,
	)
	return
}
