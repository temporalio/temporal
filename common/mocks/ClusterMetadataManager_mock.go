// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: common/persistence/dataInterface.go#ClusterMetadataManager

package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	"go.temporal.io/server/common/persistence"
)

// MockCloseable is a mock of Closeable interface
type MockCloseable struct {
	ctrl     *gomock.Controller
	recorder *MockCloseableMockRecorder
}

// MockCloseableMockRecorder is the mock recorder for MockCloseable
type MockCloseableMockRecorder struct {
	mock *MockCloseable
}

// NewMockCloseable creates a new mock instance
func NewMockCloseable(ctrl *gomock.Controller) *MockCloseable {
	mock := &MockCloseable{ctrl: ctrl}
	mock.recorder = &MockCloseableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloseable) EXPECT() *MockCloseableMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockCloseable) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockCloseableMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCloseable)(nil).Close))
}

// MockClusterMetadataManager is a mock of ClusterMetadataManager interface
type MockClusterMetadataManager struct {
	ctrl     *gomock.Controller
	recorder *MockClusterMetadataManagerMockRecorder
}

// MockClusterMetadataManagerMockRecorder is the mock recorder for MockClusterMetadataManager
type MockClusterMetadataManagerMockRecorder struct {
	mock *MockClusterMetadataManager
}

// NewMockClusterMetadataManager creates a new mock instance
func NewMockClusterMetadataManager(ctrl *gomock.Controller) *MockClusterMetadataManager {
	mock := &MockClusterMetadataManager{ctrl: ctrl}
	mock.recorder = &MockClusterMetadataManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterMetadataManager) EXPECT() *MockClusterMetadataManagerMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockClusterMetadataManager) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockClusterMetadataManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClusterMetadataManager)(nil).Close))
}

// GetName mocks base method
func (m *MockClusterMetadataManager) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockClusterMetadataManagerMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockClusterMetadataManager)(nil).GetName))
}

// InitializeImmutableClusterMetadata mocks base method
func (m *MockClusterMetadataManager) InitializeImmutableClusterMetadata(request *persistence.InitializeImmutableClusterMetadataRequest) (*persistence.InitializeImmutableClusterMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeImmutableClusterMetadata", request)
	ret0, _ := ret[0].(*persistence.InitializeImmutableClusterMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeImmutableClusterMetadata indicates an expected call of InitializeImmutableClusterMetadata
func (mr *MockClusterMetadataManagerMockRecorder) InitializeImmutableClusterMetadata(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeImmutableClusterMetadata", reflect.TypeOf((*MockClusterMetadataManager)(nil).InitializeImmutableClusterMetadata), request)
}

// GetImmutableClusterMetadata mocks base method
func (m *MockClusterMetadataManager) GetImmutableClusterMetadata() (*persistence.GetImmutableClusterMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImmutableClusterMetadata")
	ret0, _ := ret[0].(*persistence.GetImmutableClusterMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImmutableClusterMetadata indicates an expected call of GetImmutableClusterMetadata
func (mr *MockClusterMetadataManagerMockRecorder) GetImmutableClusterMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImmutableClusterMetadata", reflect.TypeOf((*MockClusterMetadataManager)(nil).GetImmutableClusterMetadata))
}

// GetClusterMembers mocks base method
func (m *MockClusterMetadataManager) GetClusterMembers(request *persistence.GetClusterMembersRequest) (*persistence.GetClusterMembersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMembers", request)
	ret0, _ := ret[0].(*persistence.GetClusterMembersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterMembers indicates an expected call of GetClusterMembers
func (mr *MockClusterMetadataManagerMockRecorder) GetClusterMembers(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMembers", reflect.TypeOf((*MockClusterMetadataManager)(nil).GetClusterMembers), request)
}

// UpsertClusterMembership mocks base method
func (m *MockClusterMetadataManager) UpsertClusterMembership(request *persistence.UpsertClusterMembershipRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertClusterMembership", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertClusterMembership indicates an expected call of UpsertClusterMembership
func (mr *MockClusterMetadataManagerMockRecorder) UpsertClusterMembership(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertClusterMembership", reflect.TypeOf((*MockClusterMetadataManager)(nil).UpsertClusterMembership), request)
}

// PruneClusterMembership mocks base method
func (m *MockClusterMetadataManager) PruneClusterMembership(request *persistence.PruneClusterMembershipRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PruneClusterMembership", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// PruneClusterMembership indicates an expected call of PruneClusterMembership
func (mr *MockClusterMetadataManagerMockRecorder) PruneClusterMembership(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneClusterMembership", reflect.TypeOf((*MockClusterMetadataManager)(nil).PruneClusterMembership), request)
}
