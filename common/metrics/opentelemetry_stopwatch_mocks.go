// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: opentelemetry_stopwatch.go

// Package metrics is a generated GoMock package.
package metrics

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockopenTelemetryStopwatchMetric is a mock of openTelemetryStopwatchMetric interface.
type MockopenTelemetryStopwatchMetric struct {
	ctrl     *gomock.Controller
	recorder *MockopenTelemetryStopwatchMetricMockRecorder
}

// MockopenTelemetryStopwatchMetricMockRecorder is the mock recorder for MockopenTelemetryStopwatchMetric.
type MockopenTelemetryStopwatchMetricMockRecorder struct {
	mock *MockopenTelemetryStopwatchMetric
}

// NewMockopenTelemetryStopwatchMetric creates a new mock instance.
func NewMockopenTelemetryStopwatchMetric(ctrl *gomock.Controller) *MockopenTelemetryStopwatchMetric {
	mock := &MockopenTelemetryStopwatchMetric{ctrl: ctrl}
	mock.recorder = &MockopenTelemetryStopwatchMetricMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockopenTelemetryStopwatchMetric) EXPECT() *MockopenTelemetryStopwatchMetricMockRecorder {
	return m.recorder
}

// Record mocks base method.
func (m *MockopenTelemetryStopwatchMetric) Record(ctx context.Context, value time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Record", ctx, value)
}

// Record indicates an expected call of Record.
func (mr *MockopenTelemetryStopwatchMetricMockRecorder) Record(ctx, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockopenTelemetryStopwatchMetric)(nil).Record), ctx, value)
}
