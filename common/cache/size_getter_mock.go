// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: size_getter.go
//
// Generated by this command:
//
//	mockgen -copyright_file ../../LICENSE -package cache -source size_getter.go -destination size_getter_mock.go
//

// Package cache is a generated GoMock package.
package cache

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSizeGetter is a mock of SizeGetter interface.
type MockSizeGetter struct {
	ctrl     *gomock.Controller
	recorder *MockSizeGetterMockRecorder
}

// MockSizeGetterMockRecorder is the mock recorder for MockSizeGetter.
type MockSizeGetterMockRecorder struct {
	mock *MockSizeGetter
}

// NewMockSizeGetter creates a new mock instance.
func NewMockSizeGetter(ctrl *gomock.Controller) *MockSizeGetter {
	mock := &MockSizeGetter{ctrl: ctrl}
	mock.recorder = &MockSizeGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSizeGetter) EXPECT() *MockSizeGetterMockRecorder {
	return m.recorder
}

// CacheSize mocks base method.
func (m *MockSizeGetter) CacheSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// CacheSize indicates an expected call of CacheSize.
func (mr *MockSizeGetterMockRecorder) CacheSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheSize", reflect.TypeOf((*MockSizeGetter)(nil).CacheSize))
}
