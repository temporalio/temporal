// Code generated by MockGen. DO NOT EDIT.
// Source: go.temporal.io/sdk/worker (interfaces: Worker)

// Package mocksdk is a generated GoMock package.
package mocksdk

import (
	"reflect"

	"go.uber.org/mock/gomock"
)

// MockEncodedValue is a mock of EncodedValue interface.
type MockEncodedValue struct {
	ctrl     *gomock.Controller
	recorder *MockEncodedValueMockRecorder
}

// MockEncodedValueMockRecorder is the mock recorder for MockEncodedValue.
type MockEncodedValueMockRecorder struct {
	mock *MockEncodedValue
}

// NewMockEncodedValue creates a new mock instance.
func NewMockEncodedValue(ctrl *gomock.Controller) *MockEncodedValue {
	mock := &MockEncodedValue{ctrl: ctrl}
	mock.recorder = &MockEncodedValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncodedValue) EXPECT() *MockEncodedValueMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockEncodedValue) Get(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockEncodedValueMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEncodedValue)(nil).Get), arg0)
}

// HasValue mocks base method.
func (m *MockEncodedValue) HasValue() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasValue")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasValue indicates an expected call of HasValue.
func (mr *MockEncodedValueMockRecorder) HasValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasValue", reflect.TypeOf((*MockEncodedValue)(nil).HasValue))
}
