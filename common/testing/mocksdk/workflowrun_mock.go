// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: go.temporal.io/sdk/client (interfaces: WorkflowRun)

// Package mocksdk is a generated GoMock package.
package mocksdk

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "go.temporal.io/sdk/client"
)

// MockWorkflowRun is a mock of WorkflowRun interface.
type MockWorkflowRun struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowRunMockRecorder
}

// MockWorkflowRunMockRecorder is the mock recorder for MockWorkflowRun.
type MockWorkflowRunMockRecorder struct {
	mock *MockWorkflowRun
}

// NewMockWorkflowRun creates a new mock instance.
func NewMockWorkflowRun(ctrl *gomock.Controller) *MockWorkflowRun {
	mock := &MockWorkflowRun{ctrl: ctrl}
	mock.recorder = &MockWorkflowRunMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowRun) EXPECT() *MockWorkflowRunMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockWorkflowRun) Get(arg0 context.Context, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockWorkflowRunMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWorkflowRun)(nil).Get), arg0, arg1)
}

// GetID mocks base method.
func (m *MockWorkflowRun) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockWorkflowRunMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockWorkflowRun)(nil).GetID))
}

// GetRunID mocks base method.
func (m *MockWorkflowRun) GetRunID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRunID indicates an expected call of GetRunID.
func (mr *MockWorkflowRunMockRecorder) GetRunID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunID", reflect.TypeOf((*MockWorkflowRun)(nil).GetRunID))
}

// GetWithOptions mocks base method.
func (m *MockWorkflowRun) GetWithOptions(arg0 context.Context, arg1 interface{}, arg2 client.WorkflowRunGetOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithOptions", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetWithOptions indicates an expected call of GetWithOptions.
func (mr *MockWorkflowRunMockRecorder) GetWithOptions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithOptions", reflect.TypeOf((*MockWorkflowRun)(nil).GetWithOptions), arg0, arg1, arg2)
}
