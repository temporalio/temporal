// Code generated by MockGen. DO NOT EDIT.
// Source: go.temporal.io/sdk/client (interfaces: WorkflowRun)
//
// Generated by this command:
//
//	mockgen -package mocksdk go.temporal.io/sdk/client WorkflowRun
//

// Package mocksdk is a generated GoMock package.
package mocksdk

import (
	context "context"
	reflect "reflect"

	client "go.temporal.io/sdk/client"
	gomock "go.uber.org/mock/gomock"
)

// MockWorkflowRun is a mock of WorkflowRun interface.
type MockWorkflowRun struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowRunMockRecorder
	isgomock struct{}
}

// MockWorkflowRunMockRecorder is the mock recorder for MockWorkflowRun.
type MockWorkflowRunMockRecorder struct {
	mock *MockWorkflowRun
}

// NewMockWorkflowRun creates a new mock instance.
func NewMockWorkflowRun(ctrl *gomock.Controller) *MockWorkflowRun {
	mock := &MockWorkflowRun{ctrl: ctrl}
	mock.recorder = &MockWorkflowRunMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowRun) EXPECT() *MockWorkflowRunMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockWorkflowRun) Get(ctx context.Context, valuePtr any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, valuePtr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockWorkflowRunMockRecorder) Get(ctx, valuePtr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWorkflowRun)(nil).Get), ctx, valuePtr)
}

// GetID mocks base method.
func (m *MockWorkflowRun) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockWorkflowRunMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockWorkflowRun)(nil).GetID))
}

// GetRunID mocks base method.
func (m *MockWorkflowRun) GetRunID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRunID indicates an expected call of GetRunID.
func (mr *MockWorkflowRunMockRecorder) GetRunID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunID", reflect.TypeOf((*MockWorkflowRun)(nil).GetRunID))
}

// GetWithOptions mocks base method.
func (m *MockWorkflowRun) GetWithOptions(ctx context.Context, valuePtr any, options client.WorkflowRunGetOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithOptions", ctx, valuePtr, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetWithOptions indicates an expected call of GetWithOptions.
func (mr *MockWorkflowRunMockRecorder) GetWithOptions(ctx, valuePtr, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithOptions", reflect.TypeOf((*MockWorkflowRun)(nil).GetWithOptions), ctx, valuePtr, options)
}
