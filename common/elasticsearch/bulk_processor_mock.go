// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: bulk_processor.go

// Package elasticsearch is a generated GoMock package.
package elasticsearch

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBulkProcessor is a mock of BulkProcessor interface
type MockBulkProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockBulkProcessorMockRecorder
}

// MockBulkProcessorMockRecorder is the mock recorder for MockBulkProcessor
type MockBulkProcessorMockRecorder struct {
	mock *MockBulkProcessor
}

// NewMockBulkProcessor creates a new mock instance
func NewMockBulkProcessor(ctrl *gomock.Controller) *MockBulkProcessor {
	mock := &MockBulkProcessor{ctrl: ctrl}
	mock.recorder = &MockBulkProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBulkProcessor) EXPECT() *MockBulkProcessorMockRecorder {
	return m.recorder
}

// Stop mocks base method
func (m *MockBulkProcessor) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockBulkProcessorMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBulkProcessor)(nil).Stop))
}

// Add mocks base method
func (m *MockBulkProcessor) Add(request *BulkableRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", request)
}

// Add indicates an expected call of Add
func (mr *MockBulkProcessorMockRecorder) Add(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBulkProcessor)(nil).Add), request)
}
