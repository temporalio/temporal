// Copyright (c) 2019 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by generate-adapter. DO NOT EDIT.

package adapter

import (
	"github.com/temporalio/temporal/.gen/go/matching"
	"github.com/temporalio/temporal/.gen/go/shared"
	"github.com/temporalio/temporal/.gen/proto/matchingservice"
)

func ToProtoMatchingPollForDecisionTaskResponse(in *matching.PollForDecisionTaskResponse) *matchingservice.PollForDecisionTaskResponse {
	if in == nil {
		return nil
	}
	return &matchingservice.PollForDecisionTaskResponse{
		TaskToken:                 in.GetTaskToken(),
		WorkflowExecution:         ToProtoWorkflowExecution(in.GetWorkflowExecution()),
		WorkflowType:              ToProtoWorkflowType(in.GetWorkflowType()),
		PreviousStartedEventId:    in.GetPreviousStartedEventId(),
		StartedEventId:            in.GetStartedEventId(),
		Attempt:                   in.GetAttempt(),
		NextEventId:               in.GetNextEventId(),
		BacklogCountHint:          in.GetBacklogCountHint(),
		StickyExecutionEnabled:    in.GetStickyExecutionEnabled(),
		Query:                     ToProtoWorkflowQuery(in.GetQuery()),
		DecisionInfo:              ToProtoTransientDecisionInfo(in.GetDecisionInfo()),
		WorkflowExecutionTaskList: ToProtoTaskList(in.GetWorkflowExecutionTaskList()),
		EventStoreVersion:         in.GetEventStoreVersion(),
		BranchToken:               in.GetBranchToken(),
		ScheduledTimestamp:        in.GetScheduledTimestamp(),
		StartedTimestamp:          in.GetStartedTimestamp(),
		Queries:                   ToProtoWorkflowQueries(in.GetQueries()),
	}
}

// ToProtoPollForActivityTaskResponse ...
func ToProtoMatchingPollForActivityTaskResponse(in *shared.PollForActivityTaskResponse) *matchingservice.PollForActivityTaskResponse {
	if in == nil {
		return nil
	}
	return &matchingservice.PollForActivityTaskResponse{
		TaskToken:                       in.GetTaskToken(),
		WorkflowExecution:               ToProtoWorkflowExecution(in.GetWorkflowExecution()),
		ActivityId:                      in.GetActivityId(),
		ActivityType:                    ToProtoActivityType(in.GetActivityType()),
		Input:                           in.GetInput(),
		ScheduledTimestamp:              in.GetScheduledTimestamp(),
		ScheduleToCloseTimeoutSeconds:   in.GetScheduleToCloseTimeoutSeconds(),
		StartedTimestamp:                in.GetStartedTimestamp(),
		StartToCloseTimeoutSeconds:      in.GetStartToCloseTimeoutSeconds(),
		HeartbeatTimeoutSeconds:         in.GetHeartbeatTimeoutSeconds(),
		Attempt:                         in.GetAttempt(),
		ScheduledTimestampOfThisAttempt: in.GetScheduledTimestampOfThisAttempt(),
		HeartbeatDetails:                in.GetHeartbeatDetails(),
		WorkflowType:                    ToProtoWorkflowType(in.GetWorkflowType()),
		WorkflowDomain:                  in.GetWorkflowDomain(),
		Header:                          ToProtoHeader(in.GetHeader()),
	}
}

func ToProtoMatchingQueryWorkflowResponse(in *shared.QueryWorkflowResponse) *matchingservice.QueryWorkflowResponse {
	if in == nil {
		return nil
	}
	return &matchingservice.QueryWorkflowResponse{
		QueryResult:   in.GetQueryResult(),
		QueryRejected: ToProtoQueryRejected(in.GetQueryRejected()),
	}
}

// ToProtoDescribeTaskListResponse ...
func ToProtoMatchingDescribeTaskListResponse(in *shared.DescribeTaskListResponse) *matchingservice.DescribeTaskListResponse {
	if in == nil {
		return nil
	}
	return &matchingservice.DescribeTaskListResponse{
		Pollers:        ToProtoPollerInfos(in.GetPollers()),
		TaskListStatus: ToProtoTaskListStatus(in.GetTaskListStatus()),
	}
}

// ToProtoListTaskListPartitionsResponse ...
func ToProtoMatchingListTaskListPartitionsResponse(in *shared.ListTaskListPartitionsResponse) *matchingservice.ListTaskListPartitionsResponse {
	if in == nil {
		return nil
	}
	return &matchingservice.ListTaskListPartitionsResponse{
		ActivityTaskListPartitions: ToProtoTaskListPartitionMetadatas(in.GetActivityTaskListPartitions()),
		DecisionTaskListPartitions: ToProtoTaskListPartitionMetadatas(in.GetDecisionTaskListPartitions()),
	}
}

// ToThriftPollForDecisionTaskRequest ...
func ToThriftMatchingPollForDecisionTaskRequest(in *matchingservice.PollForDecisionTaskRequest) *matching.PollForDecisionTaskRequest {
	if in == nil {
		return nil
	}
	return &matching.PollForDecisionTaskRequest{
		DomainUUID:    &in.DomainUUID,
		PollerID:      &in.PollerID,
		PollRequest:   ToThriftPollForDecisionTaskRequest(in.PollRequest),
		ForwardedFrom: &in.ForwardedFrom,
	}
}

// ToThriftPollForActivityTaskRequest ...
func ToThriftMatchingPollForActivityTaskRequest(in *matchingservice.PollForActivityTaskRequest) *matching.PollForActivityTaskRequest {
	if in == nil {
		return nil
	}
	return &matching.PollForActivityTaskRequest{
		DomainUUID:    &in.DomainUUID,
		PollerID:      &in.PollerID,
		PollRequest:   ToThriftPollForActivityTaskRequest(in.PollRequest),
		ForwardedFrom: &in.ForwardedFrom,
	}
}

// ToThriftAddDecisionTaskRequest ...
func ToThriftAddDecisionTaskRequest(in *matchingservice.AddDecisionTaskRequest) *matching.AddDecisionTaskRequest {
	if in == nil {
		return nil
	}
	return &matching.AddDecisionTaskRequest{
		DomainUUID:                    &in.DomainUUID,
		Execution:                     ToThriftWorkflowExecution(in.Execution),
		TaskList:                      ToThriftTaskList(in.TaskList),
		ScheduleId:                    &in.ScheduleId,
		ScheduleToStartTimeoutSeconds: &in.ScheduleToStartTimeoutSeconds,
		ForwardedFrom:                 &in.ForwardedFrom,
	}
}

// ToThriftAddActivityTaskRequest ...
func ToThriftAddActivityTaskRequest(in *matchingservice.AddActivityTaskRequest) *matching.AddActivityTaskRequest {
	if in == nil {
		return nil
	}
	return &matching.AddActivityTaskRequest{
		DomainUUID:                    &in.DomainUUID,
		Execution:                     ToThriftWorkflowExecution(in.Execution),
		SourceDomainUUID:              &in.SourceDomainUUID,
		TaskList:                      ToThriftTaskList(in.TaskList),
		ScheduleId:                    &in.ScheduleId,
		ScheduleToStartTimeoutSeconds: &in.ScheduleToStartTimeoutSeconds,
		ForwardedFrom:                 &in.ForwardedFrom,
	}
}

// ToThriftQueryWorkflowRequest ...
func ToThriftMatchingQueryWorkflowRequest(in *matchingservice.QueryWorkflowRequest) *matching.QueryWorkflowRequest {
	if in == nil {
		return nil
	}
	return &matching.QueryWorkflowRequest{
		DomainUUID:    &in.DomainUUID,
		TaskList:      ToThriftTaskList(in.TaskList),
		QueryRequest:  ToThriftQueryWorkflowRequest(in.QueryRequest),
		ForwardedFrom: &in.ForwardedFrom,
	}
}

// ToThriftRespondQueryTaskCompletedRequest ...
func ToThriftMatchingRespondQueryTaskCompletedRequest(in *matchingservice.RespondQueryTaskCompletedRequest) *matching.RespondQueryTaskCompletedRequest {
	if in == nil {
		return nil
	}
	return &matching.RespondQueryTaskCompletedRequest{
		DomainUUID:       &in.DomainUUID,
		TaskList:         ToThriftTaskList(in.TaskList),
		TaskID:           &in.TaskID,
		CompletedRequest: ToThriftRespondQueryTaskCompletedRequest(in.CompletedRequest),
	}
}

// ToThriftCancelOutstandingPollRequest ...
func ToThriftCancelOutstandingPollRequest(in *matchingservice.CancelOutstandingPollRequest) *matching.CancelOutstandingPollRequest {
	if in == nil {
		return nil
	}
	return &matching.CancelOutstandingPollRequest{
		DomainUUID:   &in.DomainUUID,
		TaskListType: &in.TaskListType,
		TaskList:     ToThriftTaskList(in.TaskList),
		PollerID:     &in.PollerID,
	}
}

// ToThriftDescribeTaskListRequest ...
func ToThriftMatchingDescribeTaskListRequest(in *matchingservice.DescribeTaskListRequest) *matching.DescribeTaskListRequest {
	if in == nil {
		return nil
	}
	return &matching.DescribeTaskListRequest{
		DomainUUID:  &in.DomainUUID,
		DescRequest: ToThriftDescribeTaskListRequest(in.DescRequest),
	}
}

// ToThriftListTaskListPartitionsRequest ...
func ToThriftMatchingListTaskListPartitionsRequest(in *matchingservice.ListTaskListPartitionsRequest) *matching.ListTaskListPartitionsRequest {
	if in == nil {
		return nil
	}
	return &matching.ListTaskListPartitionsRequest{
		Domain:   &in.Domain,
		TaskList: ToThriftTaskList(in.TaskList),
	}
}

// ToThriftQueryWorkflowResponse ...
func ToThriftQueryWorkflowResponse(in *matchingservice.QueryWorkflowResponse) *shared.QueryWorkflowResponse {
	if in == nil {
		return nil
	}
	return &shared.QueryWorkflowResponse{
		QueryResult:   in.QueryResult,
		QueryRejected: ToThriftQueryRejected(in.QueryRejected),
	}
}

// ToThriftPollForDecisionTaskResponse ...
func ToThriftMatchingPollForDecisionTaskResponse(in *matchingservice.PollForDecisionTaskResponse) *matching.PollForDecisionTaskResponse {
	if in == nil {
		return nil
	}
	return &matching.PollForDecisionTaskResponse{
		TaskToken:                 in.TaskToken,
		WorkflowExecution:         ToThriftWorkflowExecution(in.WorkflowExecution),
		WorkflowType:              ToThriftWorkflowType(in.WorkflowType),
		PreviousStartedEventId:    &in.PreviousStartedEventId,
		StartedEventId:            &in.StartedEventId,
		Attempt:                   &in.Attempt,
		NextEventId:               &in.NextEventId,
		BacklogCountHint:          &in.BacklogCountHint,
		StickyExecutionEnabled:    &in.StickyExecutionEnabled,
		Query:                     ToThriftWorkflowQuery(in.Query),
		DecisionInfo:              ToThriftTransientDecisionInfo(in.DecisionInfo),
		WorkflowExecutionTaskList: ToThriftTaskList(in.WorkflowExecutionTaskList),
		EventStoreVersion:         &in.EventStoreVersion,
		BranchToken:               in.BranchToken,
		ScheduledTimestamp:        &in.ScheduledTimestamp,
		StartedTimestamp:          &in.StartedTimestamp,
		Queries:                   ToThriftWorkflowQueries(in.Queries),
	}
}

// ToThriftPollForActivityTaskResponse ...
func ToThriftMatchingPollForActivityTaskResponse(in *matchingservice.PollForActivityTaskResponse) *shared.PollForActivityTaskResponse {
	if in == nil {
		return nil
	}
	return &shared.PollForActivityTaskResponse{
		TaskToken:                       in.TaskToken,
		WorkflowExecution:               ToThriftWorkflowExecution(in.WorkflowExecution),
		ActivityId:                      &in.ActivityId,
		ActivityType:                    ToThriftActivityType(in.ActivityType),
		Input:                           in.Input,
		ScheduledTimestamp:              &in.ScheduledTimestamp,
		ScheduleToCloseTimeoutSeconds:   &in.ScheduleToCloseTimeoutSeconds,
		StartedTimestamp:                &in.StartedTimestamp,
		StartToCloseTimeoutSeconds:      &in.StartToCloseTimeoutSeconds,
		HeartbeatTimeoutSeconds:         &in.HeartbeatTimeoutSeconds,
		Attempt:                         &in.Attempt,
		ScheduledTimestampOfThisAttempt: &in.ScheduledTimestampOfThisAttempt,
		HeartbeatDetails:                in.HeartbeatDetails,
		WorkflowType:                    ToThriftWorkflowType(in.WorkflowType),
		WorkflowDomain:                  &in.WorkflowDomain,
		Header:                          ToThriftHeader(in.Header),
	}
}
