// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	archiver "github.com/temporalio/temporal/common/archiver"
	connector "github.com/temporalio/temporal/common/archiver/gcloud/connector"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Exist provides a mock function with given fields: ctx, URI, fileName
func (_m *Client) Exist(ctx context.Context, URI archiver.URI, fileName string) (bool, error) {
	ret := _m.Called(ctx, URI, fileName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, archiver.URI, string) bool); ok {
		r0 = rf(ctx, URI, fileName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, archiver.URI, string) error); ok {
		r1 = rf(ctx, URI, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, URI, file
func (_m *Client) Get(ctx context.Context, URI archiver.URI, file string) ([]byte, error) {
	ret := _m.Called(ctx, URI, file)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, archiver.URI, string) []byte); ok {
		r0 = rf(ctx, URI, file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, archiver.URI, string) error); ok {
		r1 = rf(ctx, URI, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: ctx, URI, fileNamePrefix
func (_m *Client) Query(ctx context.Context, URI archiver.URI, fileNamePrefix string) ([]string, error) {
	ret := _m.Called(ctx, URI, fileNamePrefix)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, archiver.URI, string) []string); ok {
		r0 = rf(ctx, URI, fileNamePrefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, archiver.URI, string) error); ok {
		r1 = rf(ctx, URI, fileNamePrefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryWithFilters provides a mock function with given fields: ctx, URI, fileNamePrefix, pageSize, offset, filters
func (_m *Client) QueryWithFilters(ctx context.Context, URI archiver.URI, fileNamePrefix string, pageSize int, offset int, filters []connector.Precondition) ([]string, bool, int, error) {
	ret := _m.Called(ctx, URI, fileNamePrefix, pageSize, offset, filters)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, archiver.URI, string, int, int, []connector.Precondition) []string); ok {
		r0 = rf(ctx, URI, fileNamePrefix, pageSize, offset, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(context.Context, archiver.URI, string, int, int, []connector.Precondition) bool); ok {
		r1 = rf(ctx, URI, fileNamePrefix, pageSize, offset, filters)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, archiver.URI, string, int, int, []connector.Precondition) int); ok {
		r2 = rf(ctx, URI, fileNamePrefix, pageSize, offset, filters)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, archiver.URI, string, int, int, []connector.Precondition) error); ok {
		r3 = rf(ctx, URI, fileNamePrefix, pageSize, offset, filters)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Upload provides a mock function with given fields: ctx, URI, fileName, file
func (_m *Client) Upload(ctx context.Context, URI archiver.URI, fileName string, file []byte) error {
	ret := _m.Called(ctx, URI, fileName, file)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, archiver.URI, string, []byte) error); ok {
		r0 = rf(ctx, URI, fileName, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
