// Code generated by MockGen. DO NOT EDIT.
// Source: archival_metadata.go
//
// Generated by this command:
//
//	mockgen -package archiver -source archival_metadata.go -destination archival_metadata_mock.go
//

// Package archiver is a generated GoMock package.
package archiver

import (
	reflect "reflect"

	enums "go.temporal.io/api/enums/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockArchivalMetadata is a mock of ArchivalMetadata interface.
type MockArchivalMetadata struct {
	ctrl     *gomock.Controller
	recorder *MockArchivalMetadataMockRecorder
	isgomock struct{}
}

// MockArchivalMetadataMockRecorder is the mock recorder for MockArchivalMetadata.
type MockArchivalMetadataMockRecorder struct {
	mock *MockArchivalMetadata
}

// NewMockArchivalMetadata creates a new mock instance.
func NewMockArchivalMetadata(ctrl *gomock.Controller) *MockArchivalMetadata {
	mock := &MockArchivalMetadata{ctrl: ctrl}
	mock.recorder = &MockArchivalMetadataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArchivalMetadata) EXPECT() *MockArchivalMetadataMockRecorder {
	return m.recorder
}

// GetHistoryConfig mocks base method.
func (m *MockArchivalMetadata) GetHistoryConfig() ArchivalConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryConfig")
	ret0, _ := ret[0].(ArchivalConfig)
	return ret0
}

// GetHistoryConfig indicates an expected call of GetHistoryConfig.
func (mr *MockArchivalMetadataMockRecorder) GetHistoryConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryConfig", reflect.TypeOf((*MockArchivalMetadata)(nil).GetHistoryConfig))
}

// GetVisibilityConfig mocks base method.
func (m *MockArchivalMetadata) GetVisibilityConfig() ArchivalConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVisibilityConfig")
	ret0, _ := ret[0].(ArchivalConfig)
	return ret0
}

// GetVisibilityConfig indicates an expected call of GetVisibilityConfig.
func (mr *MockArchivalMetadataMockRecorder) GetVisibilityConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVisibilityConfig", reflect.TypeOf((*MockArchivalMetadata)(nil).GetVisibilityConfig))
}

// MockArchivalConfig is a mock of ArchivalConfig interface.
type MockArchivalConfig struct {
	ctrl     *gomock.Controller
	recorder *MockArchivalConfigMockRecorder
	isgomock struct{}
}

// MockArchivalConfigMockRecorder is the mock recorder for MockArchivalConfig.
type MockArchivalConfigMockRecorder struct {
	mock *MockArchivalConfig
}

// NewMockArchivalConfig creates a new mock instance.
func NewMockArchivalConfig(ctrl *gomock.Controller) *MockArchivalConfig {
	mock := &MockArchivalConfig{ctrl: ctrl}
	mock.recorder = &MockArchivalConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArchivalConfig) EXPECT() *MockArchivalConfigMockRecorder {
	return m.recorder
}

// ClusterConfiguredForArchival mocks base method.
func (m *MockArchivalConfig) ClusterConfiguredForArchival() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterConfiguredForArchival")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ClusterConfiguredForArchival indicates an expected call of ClusterConfiguredForArchival.
func (mr *MockArchivalConfigMockRecorder) ClusterConfiguredForArchival() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterConfiguredForArchival", reflect.TypeOf((*MockArchivalConfig)(nil).ClusterConfiguredForArchival))
}

// GetClusterState mocks base method.
func (m *MockArchivalConfig) GetClusterState() ArchivalState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterState")
	ret0, _ := ret[0].(ArchivalState)
	return ret0
}

// GetClusterState indicates an expected call of GetClusterState.
func (mr *MockArchivalConfigMockRecorder) GetClusterState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterState", reflect.TypeOf((*MockArchivalConfig)(nil).GetClusterState))
}

// GetNamespaceDefaultState mocks base method.
func (m *MockArchivalConfig) GetNamespaceDefaultState() enums.ArchivalState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceDefaultState")
	ret0, _ := ret[0].(enums.ArchivalState)
	return ret0
}

// GetNamespaceDefaultState indicates an expected call of GetNamespaceDefaultState.
func (mr *MockArchivalConfigMockRecorder) GetNamespaceDefaultState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceDefaultState", reflect.TypeOf((*MockArchivalConfig)(nil).GetNamespaceDefaultState))
}

// GetNamespaceDefaultURI mocks base method.
func (m *MockArchivalConfig) GetNamespaceDefaultURI() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceDefaultURI")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespaceDefaultURI indicates an expected call of GetNamespaceDefaultURI.
func (mr *MockArchivalConfigMockRecorder) GetNamespaceDefaultURI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceDefaultURI", reflect.TypeOf((*MockArchivalConfig)(nil).GetNamespaceDefaultURI))
}

// ReadEnabled mocks base method.
func (m *MockArchivalConfig) ReadEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ReadEnabled indicates an expected call of ReadEnabled.
func (mr *MockArchivalConfigMockRecorder) ReadEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEnabled", reflect.TypeOf((*MockArchivalConfig)(nil).ReadEnabled))
}

// StaticClusterState mocks base method.
func (m *MockArchivalConfig) StaticClusterState() ArchivalState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StaticClusterState")
	ret0, _ := ret[0].(ArchivalState)
	return ret0
}

// StaticClusterState indicates an expected call of StaticClusterState.
func (mr *MockArchivalConfigMockRecorder) StaticClusterState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StaticClusterState", reflect.TypeOf((*MockArchivalConfig)(nil).StaticClusterState))
}
