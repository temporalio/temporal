// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler.go
//
// Generated by this command:
//
//	mockgen -package tasks -source scheduler.go -destination scheduler_mock.go
//

// Package tasks is a generated GoMock package.
package tasks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockScheduler is a mock of Scheduler interface.
type MockScheduler[T Task] struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder[T]
	isgomock struct{}
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler.
type MockSchedulerMockRecorder[T Task] struct {
	mock *MockScheduler[T]
}

// NewMockScheduler creates a new mock instance.
func NewMockScheduler[T Task](ctrl *gomock.Controller) *MockScheduler[T] {
	mock := &MockScheduler[T]{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler[T]) EXPECT() *MockSchedulerMockRecorder[T] {
	return m.recorder
}

// Start mocks base method.
func (m *MockScheduler[T]) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockSchedulerMockRecorder[T]) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockScheduler[T])(nil).Start))
}

// Stop mocks base method.
func (m *MockScheduler[T]) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockSchedulerMockRecorder[T]) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockScheduler[T])(nil).Stop))
}

// Submit mocks base method.
func (m *MockScheduler[T]) Submit(task T) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Submit", task)
}

// Submit indicates an expected call of Submit.
func (mr *MockSchedulerMockRecorder[T]) Submit(task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockScheduler[T])(nil).Submit), task)
}

// TrySubmit mocks base method.
func (m *MockScheduler[T]) TrySubmit(task T) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrySubmit", task)
	ret0, _ := ret[0].(bool)
	return ret0
}

// TrySubmit indicates an expected call of TrySubmit.
func (mr *MockSchedulerMockRecorder[T]) TrySubmit(task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrySubmit", reflect.TypeOf((*MockScheduler[T])(nil).TrySubmit), task)
}
