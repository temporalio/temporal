// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: sequential_task_queue.go

// Package tasks is a generated GoMock package.
package tasks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSequentialTaskQueue is a mock of SequentialTaskQueue interface.
type MockSequentialTaskQueue[T Task] struct {
	ctrl     *gomock.Controller
	recorder *MockSequentialTaskQueueMockRecorder[T]
}

// MockSequentialTaskQueueMockRecorder is the mock recorder for MockSequentialTaskQueue.
type MockSequentialTaskQueueMockRecorder[T Task] struct {
	mock *MockSequentialTaskQueue[T]
}

// NewMockSequentialTaskQueue creates a new mock instance.
func NewMockSequentialTaskQueue[T Task](ctrl *gomock.Controller) *MockSequentialTaskQueue[T] {
	mock := &MockSequentialTaskQueue[T]{ctrl: ctrl}
	mock.recorder = &MockSequentialTaskQueueMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSequentialTaskQueue[T]) EXPECT() *MockSequentialTaskQueueMockRecorder[T] {
	return m.recorder
}

// Add mocks base method.
func (m *MockSequentialTaskQueue[T]) Add(arg0 T) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0)
}

// Add indicates an expected call of Add.
func (mr *MockSequentialTaskQueueMockRecorder[T]) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSequentialTaskQueue[T])(nil).Add), arg0)
}

// ID mocks base method.
func (m *MockSequentialTaskQueue[T]) ID() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockSequentialTaskQueueMockRecorder[T]) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockSequentialTaskQueue[T])(nil).ID))
}

// IsEmpty mocks base method.
func (m *MockSequentialTaskQueue[T]) IsEmpty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty.
func (mr *MockSequentialTaskQueueMockRecorder[T]) IsEmpty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockSequentialTaskQueue[T])(nil).IsEmpty))
}

// Len mocks base method.
func (m *MockSequentialTaskQueue[T]) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockSequentialTaskQueueMockRecorder[T]) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockSequentialTaskQueue[T])(nil).Len))
}

// Remove mocks base method.
func (m *MockSequentialTaskQueue[T]) Remove() T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove")
	ret0, _ := ret[0].(T)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockSequentialTaskQueueMockRecorder[T]) Remove() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockSequentialTaskQueue[T])(nil).Remove))
}
