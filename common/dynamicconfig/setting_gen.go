// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by cmd/tools/gendynamicconfig. DO NOT EDIT.

package dynamicconfig

import (
	"time"

	enumspb "go.temporal.io/api/enums/v1"
	enumsspb "go.temporal.io/server/api/enums/v1"
)

const PrecedenceGlobal Precedence = 0

const PrecedenceNamespace Precedence = 1

const PrecedenceNamespaceID Precedence = 2

const PrecedenceTaskQueue Precedence = 3

const PrecedenceShardID Precedence = 4

const PrecedenceTaskType Precedence = 5

const PrecedenceDestination Precedence = 6

type GlobalBoolSetting setting[bool, func()]

func NewGlobalBoolSetting(key Key, def bool, description string) GlobalBoolSetting {
	s := GlobalBoolSetting{
		key:         key,
		def:         def,
		convert:     convertBool,
		description: description,
	}
	return s
}

func NewGlobalBoolSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[bool], description string) GlobalBoolSetting {
	s := GlobalBoolSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertBool,
		description: description,
	}
	return s
}

func (s GlobalBoolSetting) Key() Key               { return s.key }
func (s GlobalBoolSetting) Precedence() Precedence { return PrecedenceGlobal }

func (s GlobalBoolSetting) WithDefault(v bool) GlobalBoolSetting {
	newS := s
	newS.def = v
	return newS
}

type BoolPropertyFn func() bool

func (s GlobalBoolSetting) Get(c *Collection) BoolPropertyFn {
	return func() bool {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceGlobal(),
		)
	}
}

func GetBoolPropertyFn(value bool) BoolPropertyFn {
	return func() bool {
		return value
	}
}

type NamespaceBoolSetting setting[bool, func(namespace string)]

func NewNamespaceBoolSetting(key Key, def bool, description string) NamespaceBoolSetting {
	s := NamespaceBoolSetting{
		key:         key,
		def:         def,
		convert:     convertBool,
		description: description,
	}
	return s
}

func NewNamespaceBoolSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[bool], description string) NamespaceBoolSetting {
	s := NamespaceBoolSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertBool,
		description: description,
	}
	return s
}

func (s NamespaceBoolSetting) Key() Key               { return s.key }
func (s NamespaceBoolSetting) Precedence() Precedence { return PrecedenceNamespace }

func (s NamespaceBoolSetting) WithDefault(v bool) NamespaceBoolSetting {
	newS := s
	newS.def = v
	return newS
}

type BoolPropertyFnWithNamespaceFilter func(namespace string) bool

func (s NamespaceBoolSetting) Get(c *Collection) BoolPropertyFnWithNamespaceFilter {
	return func(namespace string) bool {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceNamespace(namespace),
		)
	}
}

func GetBoolPropertyFnFilteredByNamespace(value bool) BoolPropertyFnWithNamespaceFilter {
	return func(namespace string) bool {
		return value
	}
}

type NamespaceIDBoolSetting setting[bool, func(namespaceID string)]

func NewNamespaceIDBoolSetting(key Key, def bool, description string) NamespaceIDBoolSetting {
	s := NamespaceIDBoolSetting{
		key:         key,
		def:         def,
		convert:     convertBool,
		description: description,
	}
	return s
}

func NewNamespaceIDBoolSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[bool], description string) NamespaceIDBoolSetting {
	s := NamespaceIDBoolSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertBool,
		description: description,
	}
	return s
}

func (s NamespaceIDBoolSetting) Key() Key               { return s.key }
func (s NamespaceIDBoolSetting) Precedence() Precedence { return PrecedenceNamespaceID }

func (s NamespaceIDBoolSetting) WithDefault(v bool) NamespaceIDBoolSetting {
	newS := s
	newS.def = v
	return newS
}

type BoolPropertyFnWithNamespaceIDFilter func(namespaceID string) bool

func (s NamespaceIDBoolSetting) Get(c *Collection) BoolPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) bool {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceNamespaceID(namespaceID),
		)
	}
}

func GetBoolPropertyFnFilteredByNamespaceID(value bool) BoolPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) bool {
		return value
	}
}

type TaskQueueBoolSetting setting[bool, func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType)]

func NewTaskQueueBoolSetting(key Key, def bool, description string) TaskQueueBoolSetting {
	s := TaskQueueBoolSetting{
		key:         key,
		def:         def,
		convert:     convertBool,
		description: description,
	}
	return s
}

func NewTaskQueueBoolSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[bool], description string) TaskQueueBoolSetting {
	s := TaskQueueBoolSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertBool,
		description: description,
	}
	return s
}

func (s TaskQueueBoolSetting) Key() Key               { return s.key }
func (s TaskQueueBoolSetting) Precedence() Precedence { return PrecedenceTaskQueue }

func (s TaskQueueBoolSetting) WithDefault(v bool) TaskQueueBoolSetting {
	newS := s
	newS.def = v
	return newS
}

type BoolPropertyFnWithTaskQueueFilter func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) bool

func (s TaskQueueBoolSetting) Get(c *Collection) BoolPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) bool {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceTaskQueue(namespace, taskQueue, taskQueueType),
		)
	}
}

func GetBoolPropertyFnFilteredByTaskQueue(value bool) BoolPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) bool {
		return value
	}
}

type ShardIDBoolSetting setting[bool, func(shardID int32)]

func NewShardIDBoolSetting(key Key, def bool, description string) ShardIDBoolSetting {
	s := ShardIDBoolSetting{
		key:         key,
		def:         def,
		convert:     convertBool,
		description: description,
	}
	return s
}

func NewShardIDBoolSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[bool], description string) ShardIDBoolSetting {
	s := ShardIDBoolSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertBool,
		description: description,
	}
	return s
}

func (s ShardIDBoolSetting) Key() Key               { return s.key }
func (s ShardIDBoolSetting) Precedence() Precedence { return PrecedenceShardID }

func (s ShardIDBoolSetting) WithDefault(v bool) ShardIDBoolSetting {
	newS := s
	newS.def = v
	return newS
}

type BoolPropertyFnWithShardIDFilter func(shardID int32) bool

func (s ShardIDBoolSetting) Get(c *Collection) BoolPropertyFnWithShardIDFilter {
	return func(shardID int32) bool {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceShardID(shardID),
		)
	}
}

func GetBoolPropertyFnFilteredByShardID(value bool) BoolPropertyFnWithShardIDFilter {
	return func(shardID int32) bool {
		return value
	}
}

type TaskTypeBoolSetting setting[bool, func(taskType enumsspb.TaskType)]

func NewTaskTypeBoolSetting(key Key, def bool, description string) TaskTypeBoolSetting {
	s := TaskTypeBoolSetting{
		key:         key,
		def:         def,
		convert:     convertBool,
		description: description,
	}
	return s
}

func NewTaskTypeBoolSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[bool], description string) TaskTypeBoolSetting {
	s := TaskTypeBoolSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertBool,
		description: description,
	}
	return s
}

func (s TaskTypeBoolSetting) Key() Key               { return s.key }
func (s TaskTypeBoolSetting) Precedence() Precedence { return PrecedenceTaskType }

func (s TaskTypeBoolSetting) WithDefault(v bool) TaskTypeBoolSetting {
	newS := s
	newS.def = v
	return newS
}

type BoolPropertyFnWithTaskTypeFilter func(taskType enumsspb.TaskType) bool

func (s TaskTypeBoolSetting) Get(c *Collection) BoolPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) bool {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceTaskType(taskType),
		)
	}
}

func GetBoolPropertyFnFilteredByTaskType(value bool) BoolPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) bool {
		return value
	}
}

type DestinationBoolSetting setting[bool, func(namespace string, destination string)]

func NewDestinationBoolSetting(key Key, def bool, description string) DestinationBoolSetting {
	s := DestinationBoolSetting{
		key:         key,
		def:         def,
		convert:     convertBool,
		description: description,
	}
	return s
}

func NewDestinationBoolSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[bool], description string) DestinationBoolSetting {
	s := DestinationBoolSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertBool,
		description: description,
	}
	return s
}

func (s DestinationBoolSetting) Key() Key               { return s.key }
func (s DestinationBoolSetting) Precedence() Precedence { return PrecedenceDestination }

func (s DestinationBoolSetting) WithDefault(v bool) DestinationBoolSetting {
	newS := s
	newS.def = v
	return newS
}

type BoolPropertyFnWithDestinationFilter func(namespace string, destination string) bool

func (s DestinationBoolSetting) Get(c *Collection) BoolPropertyFnWithDestinationFilter {
	return func(namespace string, destination string) bool {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceDestination(namespace, destination),
		)
	}
}

func GetBoolPropertyFnFilteredByDestination(value bool) BoolPropertyFnWithDestinationFilter {
	return func(namespace string, destination string) bool {
		return value
	}
}

type GlobalIntSetting setting[int, func()]

func NewGlobalIntSetting(key Key, def int, description string) GlobalIntSetting {
	s := GlobalIntSetting{
		key:         key,
		def:         def,
		convert:     convertInt,
		description: description,
	}
	return s
}

func NewGlobalIntSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[int], description string) GlobalIntSetting {
	s := GlobalIntSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertInt,
		description: description,
	}
	return s
}

func (s GlobalIntSetting) Key() Key               { return s.key }
func (s GlobalIntSetting) Precedence() Precedence { return PrecedenceGlobal }

func (s GlobalIntSetting) WithDefault(v int) GlobalIntSetting {
	newS := s
	newS.def = v
	return newS
}

type IntPropertyFn func() int

func (s GlobalIntSetting) Get(c *Collection) IntPropertyFn {
	return func() int {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceGlobal(),
		)
	}
}

func GetIntPropertyFn(value int) IntPropertyFn {
	return func() int {
		return value
	}
}

type NamespaceIntSetting setting[int, func(namespace string)]

func NewNamespaceIntSetting(key Key, def int, description string) NamespaceIntSetting {
	s := NamespaceIntSetting{
		key:         key,
		def:         def,
		convert:     convertInt,
		description: description,
	}
	return s
}

func NewNamespaceIntSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[int], description string) NamespaceIntSetting {
	s := NamespaceIntSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertInt,
		description: description,
	}
	return s
}

func (s NamespaceIntSetting) Key() Key               { return s.key }
func (s NamespaceIntSetting) Precedence() Precedence { return PrecedenceNamespace }

func (s NamespaceIntSetting) WithDefault(v int) NamespaceIntSetting {
	newS := s
	newS.def = v
	return newS
}

type IntPropertyFnWithNamespaceFilter func(namespace string) int

func (s NamespaceIntSetting) Get(c *Collection) IntPropertyFnWithNamespaceFilter {
	return func(namespace string) int {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceNamespace(namespace),
		)
	}
}

func GetIntPropertyFnFilteredByNamespace(value int) IntPropertyFnWithNamespaceFilter {
	return func(namespace string) int {
		return value
	}
}

type NamespaceIDIntSetting setting[int, func(namespaceID string)]

func NewNamespaceIDIntSetting(key Key, def int, description string) NamespaceIDIntSetting {
	s := NamespaceIDIntSetting{
		key:         key,
		def:         def,
		convert:     convertInt,
		description: description,
	}
	return s
}

func NewNamespaceIDIntSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[int], description string) NamespaceIDIntSetting {
	s := NamespaceIDIntSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertInt,
		description: description,
	}
	return s
}

func (s NamespaceIDIntSetting) Key() Key               { return s.key }
func (s NamespaceIDIntSetting) Precedence() Precedence { return PrecedenceNamespaceID }

func (s NamespaceIDIntSetting) WithDefault(v int) NamespaceIDIntSetting {
	newS := s
	newS.def = v
	return newS
}

type IntPropertyFnWithNamespaceIDFilter func(namespaceID string) int

func (s NamespaceIDIntSetting) Get(c *Collection) IntPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) int {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceNamespaceID(namespaceID),
		)
	}
}

func GetIntPropertyFnFilteredByNamespaceID(value int) IntPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) int {
		return value
	}
}

type TaskQueueIntSetting setting[int, func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType)]

func NewTaskQueueIntSetting(key Key, def int, description string) TaskQueueIntSetting {
	s := TaskQueueIntSetting{
		key:         key,
		def:         def,
		convert:     convertInt,
		description: description,
	}
	return s
}

func NewTaskQueueIntSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[int], description string) TaskQueueIntSetting {
	s := TaskQueueIntSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertInt,
		description: description,
	}
	return s
}

func (s TaskQueueIntSetting) Key() Key               { return s.key }
func (s TaskQueueIntSetting) Precedence() Precedence { return PrecedenceTaskQueue }

func (s TaskQueueIntSetting) WithDefault(v int) TaskQueueIntSetting {
	newS := s
	newS.def = v
	return newS
}

type IntPropertyFnWithTaskQueueFilter func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) int

func (s TaskQueueIntSetting) Get(c *Collection) IntPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) int {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceTaskQueue(namespace, taskQueue, taskQueueType),
		)
	}
}

func GetIntPropertyFnFilteredByTaskQueue(value int) IntPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) int {
		return value
	}
}

type ShardIDIntSetting setting[int, func(shardID int32)]

func NewShardIDIntSetting(key Key, def int, description string) ShardIDIntSetting {
	s := ShardIDIntSetting{
		key:         key,
		def:         def,
		convert:     convertInt,
		description: description,
	}
	return s
}

func NewShardIDIntSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[int], description string) ShardIDIntSetting {
	s := ShardIDIntSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertInt,
		description: description,
	}
	return s
}

func (s ShardIDIntSetting) Key() Key               { return s.key }
func (s ShardIDIntSetting) Precedence() Precedence { return PrecedenceShardID }

func (s ShardIDIntSetting) WithDefault(v int) ShardIDIntSetting {
	newS := s
	newS.def = v
	return newS
}

type IntPropertyFnWithShardIDFilter func(shardID int32) int

func (s ShardIDIntSetting) Get(c *Collection) IntPropertyFnWithShardIDFilter {
	return func(shardID int32) int {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceShardID(shardID),
		)
	}
}

func GetIntPropertyFnFilteredByShardID(value int) IntPropertyFnWithShardIDFilter {
	return func(shardID int32) int {
		return value
	}
}

type TaskTypeIntSetting setting[int, func(taskType enumsspb.TaskType)]

func NewTaskTypeIntSetting(key Key, def int, description string) TaskTypeIntSetting {
	s := TaskTypeIntSetting{
		key:         key,
		def:         def,
		convert:     convertInt,
		description: description,
	}
	return s
}

func NewTaskTypeIntSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[int], description string) TaskTypeIntSetting {
	s := TaskTypeIntSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertInt,
		description: description,
	}
	return s
}

func (s TaskTypeIntSetting) Key() Key               { return s.key }
func (s TaskTypeIntSetting) Precedence() Precedence { return PrecedenceTaskType }

func (s TaskTypeIntSetting) WithDefault(v int) TaskTypeIntSetting {
	newS := s
	newS.def = v
	return newS
}

type IntPropertyFnWithTaskTypeFilter func(taskType enumsspb.TaskType) int

func (s TaskTypeIntSetting) Get(c *Collection) IntPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) int {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceTaskType(taskType),
		)
	}
}

func GetIntPropertyFnFilteredByTaskType(value int) IntPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) int {
		return value
	}
}

type DestinationIntSetting setting[int, func(namespace string, destination string)]

func NewDestinationIntSetting(key Key, def int, description string) DestinationIntSetting {
	s := DestinationIntSetting{
		key:         key,
		def:         def,
		convert:     convertInt,
		description: description,
	}
	return s
}

func NewDestinationIntSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[int], description string) DestinationIntSetting {
	s := DestinationIntSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertInt,
		description: description,
	}
	return s
}

func (s DestinationIntSetting) Key() Key               { return s.key }
func (s DestinationIntSetting) Precedence() Precedence { return PrecedenceDestination }

func (s DestinationIntSetting) WithDefault(v int) DestinationIntSetting {
	newS := s
	newS.def = v
	return newS
}

type IntPropertyFnWithDestinationFilter func(namespace string, destination string) int

func (s DestinationIntSetting) Get(c *Collection) IntPropertyFnWithDestinationFilter {
	return func(namespace string, destination string) int {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceDestination(namespace, destination),
		)
	}
}

func GetIntPropertyFnFilteredByDestination(value int) IntPropertyFnWithDestinationFilter {
	return func(namespace string, destination string) int {
		return value
	}
}

type GlobalFloatSetting setting[float64, func()]

func NewGlobalFloatSetting(key Key, def float64, description string) GlobalFloatSetting {
	s := GlobalFloatSetting{
		key:         key,
		def:         def,
		convert:     convertFloat,
		description: description,
	}
	return s
}

func NewGlobalFloatSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[float64], description string) GlobalFloatSetting {
	s := GlobalFloatSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertFloat,
		description: description,
	}
	return s
}

func (s GlobalFloatSetting) Key() Key               { return s.key }
func (s GlobalFloatSetting) Precedence() Precedence { return PrecedenceGlobal }

func (s GlobalFloatSetting) WithDefault(v float64) GlobalFloatSetting {
	newS := s
	newS.def = v
	return newS
}

type FloatPropertyFn func() float64

func (s GlobalFloatSetting) Get(c *Collection) FloatPropertyFn {
	return func() float64 {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceGlobal(),
		)
	}
}

func GetFloatPropertyFn(value float64) FloatPropertyFn {
	return func() float64 {
		return value
	}
}

type NamespaceFloatSetting setting[float64, func(namespace string)]

func NewNamespaceFloatSetting(key Key, def float64, description string) NamespaceFloatSetting {
	s := NamespaceFloatSetting{
		key:         key,
		def:         def,
		convert:     convertFloat,
		description: description,
	}
	return s
}

func NewNamespaceFloatSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[float64], description string) NamespaceFloatSetting {
	s := NamespaceFloatSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertFloat,
		description: description,
	}
	return s
}

func (s NamespaceFloatSetting) Key() Key               { return s.key }
func (s NamespaceFloatSetting) Precedence() Precedence { return PrecedenceNamespace }

func (s NamespaceFloatSetting) WithDefault(v float64) NamespaceFloatSetting {
	newS := s
	newS.def = v
	return newS
}

type FloatPropertyFnWithNamespaceFilter func(namespace string) float64

func (s NamespaceFloatSetting) Get(c *Collection) FloatPropertyFnWithNamespaceFilter {
	return func(namespace string) float64 {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceNamespace(namespace),
		)
	}
}

func GetFloatPropertyFnFilteredByNamespace(value float64) FloatPropertyFnWithNamespaceFilter {
	return func(namespace string) float64 {
		return value
	}
}

type NamespaceIDFloatSetting setting[float64, func(namespaceID string)]

func NewNamespaceIDFloatSetting(key Key, def float64, description string) NamespaceIDFloatSetting {
	s := NamespaceIDFloatSetting{
		key:         key,
		def:         def,
		convert:     convertFloat,
		description: description,
	}
	return s
}

func NewNamespaceIDFloatSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[float64], description string) NamespaceIDFloatSetting {
	s := NamespaceIDFloatSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertFloat,
		description: description,
	}
	return s
}

func (s NamespaceIDFloatSetting) Key() Key               { return s.key }
func (s NamespaceIDFloatSetting) Precedence() Precedence { return PrecedenceNamespaceID }

func (s NamespaceIDFloatSetting) WithDefault(v float64) NamespaceIDFloatSetting {
	newS := s
	newS.def = v
	return newS
}

type FloatPropertyFnWithNamespaceIDFilter func(namespaceID string) float64

func (s NamespaceIDFloatSetting) Get(c *Collection) FloatPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) float64 {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceNamespaceID(namespaceID),
		)
	}
}

func GetFloatPropertyFnFilteredByNamespaceID(value float64) FloatPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) float64 {
		return value
	}
}

type TaskQueueFloatSetting setting[float64, func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType)]

func NewTaskQueueFloatSetting(key Key, def float64, description string) TaskQueueFloatSetting {
	s := TaskQueueFloatSetting{
		key:         key,
		def:         def,
		convert:     convertFloat,
		description: description,
	}
	return s
}

func NewTaskQueueFloatSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[float64], description string) TaskQueueFloatSetting {
	s := TaskQueueFloatSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertFloat,
		description: description,
	}
	return s
}

func (s TaskQueueFloatSetting) Key() Key               { return s.key }
func (s TaskQueueFloatSetting) Precedence() Precedence { return PrecedenceTaskQueue }

func (s TaskQueueFloatSetting) WithDefault(v float64) TaskQueueFloatSetting {
	newS := s
	newS.def = v
	return newS
}

type FloatPropertyFnWithTaskQueueFilter func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) float64

func (s TaskQueueFloatSetting) Get(c *Collection) FloatPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) float64 {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceTaskQueue(namespace, taskQueue, taskQueueType),
		)
	}
}

func GetFloatPropertyFnFilteredByTaskQueue(value float64) FloatPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) float64 {
		return value
	}
}

type ShardIDFloatSetting setting[float64, func(shardID int32)]

func NewShardIDFloatSetting(key Key, def float64, description string) ShardIDFloatSetting {
	s := ShardIDFloatSetting{
		key:         key,
		def:         def,
		convert:     convertFloat,
		description: description,
	}
	return s
}

func NewShardIDFloatSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[float64], description string) ShardIDFloatSetting {
	s := ShardIDFloatSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertFloat,
		description: description,
	}
	return s
}

func (s ShardIDFloatSetting) Key() Key               { return s.key }
func (s ShardIDFloatSetting) Precedence() Precedence { return PrecedenceShardID }

func (s ShardIDFloatSetting) WithDefault(v float64) ShardIDFloatSetting {
	newS := s
	newS.def = v
	return newS
}

type FloatPropertyFnWithShardIDFilter func(shardID int32) float64

func (s ShardIDFloatSetting) Get(c *Collection) FloatPropertyFnWithShardIDFilter {
	return func(shardID int32) float64 {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceShardID(shardID),
		)
	}
}

func GetFloatPropertyFnFilteredByShardID(value float64) FloatPropertyFnWithShardIDFilter {
	return func(shardID int32) float64 {
		return value
	}
}

type TaskTypeFloatSetting setting[float64, func(taskType enumsspb.TaskType)]

func NewTaskTypeFloatSetting(key Key, def float64, description string) TaskTypeFloatSetting {
	s := TaskTypeFloatSetting{
		key:         key,
		def:         def,
		convert:     convertFloat,
		description: description,
	}
	return s
}

func NewTaskTypeFloatSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[float64], description string) TaskTypeFloatSetting {
	s := TaskTypeFloatSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertFloat,
		description: description,
	}
	return s
}

func (s TaskTypeFloatSetting) Key() Key               { return s.key }
func (s TaskTypeFloatSetting) Precedence() Precedence { return PrecedenceTaskType }

func (s TaskTypeFloatSetting) WithDefault(v float64) TaskTypeFloatSetting {
	newS := s
	newS.def = v
	return newS
}

type FloatPropertyFnWithTaskTypeFilter func(taskType enumsspb.TaskType) float64

func (s TaskTypeFloatSetting) Get(c *Collection) FloatPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) float64 {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceTaskType(taskType),
		)
	}
}

func GetFloatPropertyFnFilteredByTaskType(value float64) FloatPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) float64 {
		return value
	}
}

type DestinationFloatSetting setting[float64, func(namespace string, destination string)]

func NewDestinationFloatSetting(key Key, def float64, description string) DestinationFloatSetting {
	s := DestinationFloatSetting{
		key:         key,
		def:         def,
		convert:     convertFloat,
		description: description,
	}
	return s
}

func NewDestinationFloatSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[float64], description string) DestinationFloatSetting {
	s := DestinationFloatSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertFloat,
		description: description,
	}
	return s
}

func (s DestinationFloatSetting) Key() Key               { return s.key }
func (s DestinationFloatSetting) Precedence() Precedence { return PrecedenceDestination }

func (s DestinationFloatSetting) WithDefault(v float64) DestinationFloatSetting {
	newS := s
	newS.def = v
	return newS
}

type FloatPropertyFnWithDestinationFilter func(namespace string, destination string) float64

func (s DestinationFloatSetting) Get(c *Collection) FloatPropertyFnWithDestinationFilter {
	return func(namespace string, destination string) float64 {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceDestination(namespace, destination),
		)
	}
}

func GetFloatPropertyFnFilteredByDestination(value float64) FloatPropertyFnWithDestinationFilter {
	return func(namespace string, destination string) float64 {
		return value
	}
}

type GlobalStringSetting setting[string, func()]

func NewGlobalStringSetting(key Key, def string, description string) GlobalStringSetting {
	s := GlobalStringSetting{
		key:         key,
		def:         def,
		convert:     convertString,
		description: description,
	}
	return s
}

func NewGlobalStringSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[string], description string) GlobalStringSetting {
	s := GlobalStringSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertString,
		description: description,
	}
	return s
}

func (s GlobalStringSetting) Key() Key               { return s.key }
func (s GlobalStringSetting) Precedence() Precedence { return PrecedenceGlobal }

func (s GlobalStringSetting) WithDefault(v string) GlobalStringSetting {
	newS := s
	newS.def = v
	return newS
}

type StringPropertyFn func() string

func (s GlobalStringSetting) Get(c *Collection) StringPropertyFn {
	return func() string {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceGlobal(),
		)
	}
}

func GetStringPropertyFn(value string) StringPropertyFn {
	return func() string {
		return value
	}
}

type NamespaceStringSetting setting[string, func(namespace string)]

func NewNamespaceStringSetting(key Key, def string, description string) NamespaceStringSetting {
	s := NamespaceStringSetting{
		key:         key,
		def:         def,
		convert:     convertString,
		description: description,
	}
	return s
}

func NewNamespaceStringSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[string], description string) NamespaceStringSetting {
	s := NamespaceStringSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertString,
		description: description,
	}
	return s
}

func (s NamespaceStringSetting) Key() Key               { return s.key }
func (s NamespaceStringSetting) Precedence() Precedence { return PrecedenceNamespace }

func (s NamespaceStringSetting) WithDefault(v string) NamespaceStringSetting {
	newS := s
	newS.def = v
	return newS
}

type StringPropertyFnWithNamespaceFilter func(namespace string) string

func (s NamespaceStringSetting) Get(c *Collection) StringPropertyFnWithNamespaceFilter {
	return func(namespace string) string {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceNamespace(namespace),
		)
	}
}

func GetStringPropertyFnFilteredByNamespace(value string) StringPropertyFnWithNamespaceFilter {
	return func(namespace string) string {
		return value
	}
}

type NamespaceIDStringSetting setting[string, func(namespaceID string)]

func NewNamespaceIDStringSetting(key Key, def string, description string) NamespaceIDStringSetting {
	s := NamespaceIDStringSetting{
		key:         key,
		def:         def,
		convert:     convertString,
		description: description,
	}
	return s
}

func NewNamespaceIDStringSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[string], description string) NamespaceIDStringSetting {
	s := NamespaceIDStringSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertString,
		description: description,
	}
	return s
}

func (s NamespaceIDStringSetting) Key() Key               { return s.key }
func (s NamespaceIDStringSetting) Precedence() Precedence { return PrecedenceNamespaceID }

func (s NamespaceIDStringSetting) WithDefault(v string) NamespaceIDStringSetting {
	newS := s
	newS.def = v
	return newS
}

type StringPropertyFnWithNamespaceIDFilter func(namespaceID string) string

func (s NamespaceIDStringSetting) Get(c *Collection) StringPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) string {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceNamespaceID(namespaceID),
		)
	}
}

func GetStringPropertyFnFilteredByNamespaceID(value string) StringPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) string {
		return value
	}
}

type TaskQueueStringSetting setting[string, func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType)]

func NewTaskQueueStringSetting(key Key, def string, description string) TaskQueueStringSetting {
	s := TaskQueueStringSetting{
		key:         key,
		def:         def,
		convert:     convertString,
		description: description,
	}
	return s
}

func NewTaskQueueStringSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[string], description string) TaskQueueStringSetting {
	s := TaskQueueStringSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertString,
		description: description,
	}
	return s
}

func (s TaskQueueStringSetting) Key() Key               { return s.key }
func (s TaskQueueStringSetting) Precedence() Precedence { return PrecedenceTaskQueue }

func (s TaskQueueStringSetting) WithDefault(v string) TaskQueueStringSetting {
	newS := s
	newS.def = v
	return newS
}

type StringPropertyFnWithTaskQueueFilter func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) string

func (s TaskQueueStringSetting) Get(c *Collection) StringPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) string {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceTaskQueue(namespace, taskQueue, taskQueueType),
		)
	}
}

func GetStringPropertyFnFilteredByTaskQueue(value string) StringPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) string {
		return value
	}
}

type ShardIDStringSetting setting[string, func(shardID int32)]

func NewShardIDStringSetting(key Key, def string, description string) ShardIDStringSetting {
	s := ShardIDStringSetting{
		key:         key,
		def:         def,
		convert:     convertString,
		description: description,
	}
	return s
}

func NewShardIDStringSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[string], description string) ShardIDStringSetting {
	s := ShardIDStringSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertString,
		description: description,
	}
	return s
}

func (s ShardIDStringSetting) Key() Key               { return s.key }
func (s ShardIDStringSetting) Precedence() Precedence { return PrecedenceShardID }

func (s ShardIDStringSetting) WithDefault(v string) ShardIDStringSetting {
	newS := s
	newS.def = v
	return newS
}

type StringPropertyFnWithShardIDFilter func(shardID int32) string

func (s ShardIDStringSetting) Get(c *Collection) StringPropertyFnWithShardIDFilter {
	return func(shardID int32) string {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceShardID(shardID),
		)
	}
}

func GetStringPropertyFnFilteredByShardID(value string) StringPropertyFnWithShardIDFilter {
	return func(shardID int32) string {
		return value
	}
}

type TaskTypeStringSetting setting[string, func(taskType enumsspb.TaskType)]

func NewTaskTypeStringSetting(key Key, def string, description string) TaskTypeStringSetting {
	s := TaskTypeStringSetting{
		key:         key,
		def:         def,
		convert:     convertString,
		description: description,
	}
	return s
}

func NewTaskTypeStringSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[string], description string) TaskTypeStringSetting {
	s := TaskTypeStringSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertString,
		description: description,
	}
	return s
}

func (s TaskTypeStringSetting) Key() Key               { return s.key }
func (s TaskTypeStringSetting) Precedence() Precedence { return PrecedenceTaskType }

func (s TaskTypeStringSetting) WithDefault(v string) TaskTypeStringSetting {
	newS := s
	newS.def = v
	return newS
}

type StringPropertyFnWithTaskTypeFilter func(taskType enumsspb.TaskType) string

func (s TaskTypeStringSetting) Get(c *Collection) StringPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) string {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceTaskType(taskType),
		)
	}
}

func GetStringPropertyFnFilteredByTaskType(value string) StringPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) string {
		return value
	}
}

type DestinationStringSetting setting[string, func(namespace string, destination string)]

func NewDestinationStringSetting(key Key, def string, description string) DestinationStringSetting {
	s := DestinationStringSetting{
		key:         key,
		def:         def,
		convert:     convertString,
		description: description,
	}
	return s
}

func NewDestinationStringSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[string], description string) DestinationStringSetting {
	s := DestinationStringSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertString,
		description: description,
	}
	return s
}

func (s DestinationStringSetting) Key() Key               { return s.key }
func (s DestinationStringSetting) Precedence() Precedence { return PrecedenceDestination }

func (s DestinationStringSetting) WithDefault(v string) DestinationStringSetting {
	newS := s
	newS.def = v
	return newS
}

type StringPropertyFnWithDestinationFilter func(namespace string, destination string) string

func (s DestinationStringSetting) Get(c *Collection) StringPropertyFnWithDestinationFilter {
	return func(namespace string, destination string) string {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceDestination(namespace, destination),
		)
	}
}

func GetStringPropertyFnFilteredByDestination(value string) StringPropertyFnWithDestinationFilter {
	return func(namespace string, destination string) string {
		return value
	}
}

type GlobalDurationSetting setting[time.Duration, func()]

func NewGlobalDurationSetting(key Key, def time.Duration, description string) GlobalDurationSetting {
	s := GlobalDurationSetting{
		key:         key,
		def:         def,
		convert:     convertDuration,
		description: description,
	}
	return s
}

func NewGlobalDurationSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[time.Duration], description string) GlobalDurationSetting {
	s := GlobalDurationSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertDuration,
		description: description,
	}
	return s
}

func (s GlobalDurationSetting) Key() Key               { return s.key }
func (s GlobalDurationSetting) Precedence() Precedence { return PrecedenceGlobal }

func (s GlobalDurationSetting) WithDefault(v time.Duration) GlobalDurationSetting {
	newS := s
	newS.def = v
	return newS
}

type DurationPropertyFn func() time.Duration

func (s GlobalDurationSetting) Get(c *Collection) DurationPropertyFn {
	return func() time.Duration {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceGlobal(),
		)
	}
}

func GetDurationPropertyFn(value time.Duration) DurationPropertyFn {
	return func() time.Duration {
		return value
	}
}

type NamespaceDurationSetting setting[time.Duration, func(namespace string)]

func NewNamespaceDurationSetting(key Key, def time.Duration, description string) NamespaceDurationSetting {
	s := NamespaceDurationSetting{
		key:         key,
		def:         def,
		convert:     convertDuration,
		description: description,
	}
	return s
}

func NewNamespaceDurationSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[time.Duration], description string) NamespaceDurationSetting {
	s := NamespaceDurationSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertDuration,
		description: description,
	}
	return s
}

func (s NamespaceDurationSetting) Key() Key               { return s.key }
func (s NamespaceDurationSetting) Precedence() Precedence { return PrecedenceNamespace }

func (s NamespaceDurationSetting) WithDefault(v time.Duration) NamespaceDurationSetting {
	newS := s
	newS.def = v
	return newS
}

type DurationPropertyFnWithNamespaceFilter func(namespace string) time.Duration

func (s NamespaceDurationSetting) Get(c *Collection) DurationPropertyFnWithNamespaceFilter {
	return func(namespace string) time.Duration {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceNamespace(namespace),
		)
	}
}

func GetDurationPropertyFnFilteredByNamespace(value time.Duration) DurationPropertyFnWithNamespaceFilter {
	return func(namespace string) time.Duration {
		return value
	}
}

type NamespaceIDDurationSetting setting[time.Duration, func(namespaceID string)]

func NewNamespaceIDDurationSetting(key Key, def time.Duration, description string) NamespaceIDDurationSetting {
	s := NamespaceIDDurationSetting{
		key:         key,
		def:         def,
		convert:     convertDuration,
		description: description,
	}
	return s
}

func NewNamespaceIDDurationSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[time.Duration], description string) NamespaceIDDurationSetting {
	s := NamespaceIDDurationSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertDuration,
		description: description,
	}
	return s
}

func (s NamespaceIDDurationSetting) Key() Key               { return s.key }
func (s NamespaceIDDurationSetting) Precedence() Precedence { return PrecedenceNamespaceID }

func (s NamespaceIDDurationSetting) WithDefault(v time.Duration) NamespaceIDDurationSetting {
	newS := s
	newS.def = v
	return newS
}

type DurationPropertyFnWithNamespaceIDFilter func(namespaceID string) time.Duration

func (s NamespaceIDDurationSetting) Get(c *Collection) DurationPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) time.Duration {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceNamespaceID(namespaceID),
		)
	}
}

func GetDurationPropertyFnFilteredByNamespaceID(value time.Duration) DurationPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) time.Duration {
		return value
	}
}

type TaskQueueDurationSetting setting[time.Duration, func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType)]

func NewTaskQueueDurationSetting(key Key, def time.Duration, description string) TaskQueueDurationSetting {
	s := TaskQueueDurationSetting{
		key:         key,
		def:         def,
		convert:     convertDuration,
		description: description,
	}
	return s
}

func NewTaskQueueDurationSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[time.Duration], description string) TaskQueueDurationSetting {
	s := TaskQueueDurationSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertDuration,
		description: description,
	}
	return s
}

func (s TaskQueueDurationSetting) Key() Key               { return s.key }
func (s TaskQueueDurationSetting) Precedence() Precedence { return PrecedenceTaskQueue }

func (s TaskQueueDurationSetting) WithDefault(v time.Duration) TaskQueueDurationSetting {
	newS := s
	newS.def = v
	return newS
}

type DurationPropertyFnWithTaskQueueFilter func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) time.Duration

func (s TaskQueueDurationSetting) Get(c *Collection) DurationPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) time.Duration {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceTaskQueue(namespace, taskQueue, taskQueueType),
		)
	}
}

func GetDurationPropertyFnFilteredByTaskQueue(value time.Duration) DurationPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) time.Duration {
		return value
	}
}

type ShardIDDurationSetting setting[time.Duration, func(shardID int32)]

func NewShardIDDurationSetting(key Key, def time.Duration, description string) ShardIDDurationSetting {
	s := ShardIDDurationSetting{
		key:         key,
		def:         def,
		convert:     convertDuration,
		description: description,
	}
	return s
}

func NewShardIDDurationSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[time.Duration], description string) ShardIDDurationSetting {
	s := ShardIDDurationSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertDuration,
		description: description,
	}
	return s
}

func (s ShardIDDurationSetting) Key() Key               { return s.key }
func (s ShardIDDurationSetting) Precedence() Precedence { return PrecedenceShardID }

func (s ShardIDDurationSetting) WithDefault(v time.Duration) ShardIDDurationSetting {
	newS := s
	newS.def = v
	return newS
}

type DurationPropertyFnWithShardIDFilter func(shardID int32) time.Duration

func (s ShardIDDurationSetting) Get(c *Collection) DurationPropertyFnWithShardIDFilter {
	return func(shardID int32) time.Duration {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceShardID(shardID),
		)
	}
}

func GetDurationPropertyFnFilteredByShardID(value time.Duration) DurationPropertyFnWithShardIDFilter {
	return func(shardID int32) time.Duration {
		return value
	}
}

type TaskTypeDurationSetting setting[time.Duration, func(taskType enumsspb.TaskType)]

func NewTaskTypeDurationSetting(key Key, def time.Duration, description string) TaskTypeDurationSetting {
	s := TaskTypeDurationSetting{
		key:         key,
		def:         def,
		convert:     convertDuration,
		description: description,
	}
	return s
}

func NewTaskTypeDurationSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[time.Duration], description string) TaskTypeDurationSetting {
	s := TaskTypeDurationSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertDuration,
		description: description,
	}
	return s
}

func (s TaskTypeDurationSetting) Key() Key               { return s.key }
func (s TaskTypeDurationSetting) Precedence() Precedence { return PrecedenceTaskType }

func (s TaskTypeDurationSetting) WithDefault(v time.Duration) TaskTypeDurationSetting {
	newS := s
	newS.def = v
	return newS
}

type DurationPropertyFnWithTaskTypeFilter func(taskType enumsspb.TaskType) time.Duration

func (s TaskTypeDurationSetting) Get(c *Collection) DurationPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) time.Duration {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceTaskType(taskType),
		)
	}
}

func GetDurationPropertyFnFilteredByTaskType(value time.Duration) DurationPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) time.Duration {
		return value
	}
}

type DestinationDurationSetting setting[time.Duration, func(namespace string, destination string)]

func NewDestinationDurationSetting(key Key, def time.Duration, description string) DestinationDurationSetting {
	s := DestinationDurationSetting{
		key:         key,
		def:         def,
		convert:     convertDuration,
		description: description,
	}
	return s
}

func NewDestinationDurationSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[time.Duration], description string) DestinationDurationSetting {
	s := DestinationDurationSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertDuration,
		description: description,
	}
	return s
}

func (s DestinationDurationSetting) Key() Key               { return s.key }
func (s DestinationDurationSetting) Precedence() Precedence { return PrecedenceDestination }

func (s DestinationDurationSetting) WithDefault(v time.Duration) DestinationDurationSetting {
	newS := s
	newS.def = v
	return newS
}

type DurationPropertyFnWithDestinationFilter func(namespace string, destination string) time.Duration

func (s DestinationDurationSetting) Get(c *Collection) DurationPropertyFnWithDestinationFilter {
	return func(namespace string, destination string) time.Duration {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceDestination(namespace, destination),
		)
	}
}

func GetDurationPropertyFnFilteredByDestination(value time.Duration) DurationPropertyFnWithDestinationFilter {
	return func(namespace string, destination string) time.Duration {
		return value
	}
}

type GlobalMapSetting setting[map[string]any, func()]

func NewGlobalMapSetting(key Key, def map[string]any, description string) GlobalMapSetting {
	s := GlobalMapSetting{
		key:         key,
		def:         def,
		convert:     convertMap,
		description: description,
	}
	return s
}

func NewGlobalMapSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[map[string]any], description string) GlobalMapSetting {
	s := GlobalMapSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertMap,
		description: description,
	}
	return s
}

func (s GlobalMapSetting) Key() Key               { return s.key }
func (s GlobalMapSetting) Precedence() Precedence { return PrecedenceGlobal }

func (s GlobalMapSetting) WithDefault(v map[string]any) GlobalMapSetting {
	newS := s
	newS.def = v
	return newS
}

type MapPropertyFn func() map[string]any

func (s GlobalMapSetting) Get(c *Collection) MapPropertyFn {
	return func() map[string]any {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceGlobal(),
		)
	}
}

func GetMapPropertyFn(value map[string]any) MapPropertyFn {
	return func() map[string]any {
		return value
	}
}

type NamespaceMapSetting setting[map[string]any, func(namespace string)]

func NewNamespaceMapSetting(key Key, def map[string]any, description string) NamespaceMapSetting {
	s := NamespaceMapSetting{
		key:         key,
		def:         def,
		convert:     convertMap,
		description: description,
	}
	return s
}

func NewNamespaceMapSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[map[string]any], description string) NamespaceMapSetting {
	s := NamespaceMapSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertMap,
		description: description,
	}
	return s
}

func (s NamespaceMapSetting) Key() Key               { return s.key }
func (s NamespaceMapSetting) Precedence() Precedence { return PrecedenceNamespace }

func (s NamespaceMapSetting) WithDefault(v map[string]any) NamespaceMapSetting {
	newS := s
	newS.def = v
	return newS
}

type MapPropertyFnWithNamespaceFilter func(namespace string) map[string]any

func (s NamespaceMapSetting) Get(c *Collection) MapPropertyFnWithNamespaceFilter {
	return func(namespace string) map[string]any {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceNamespace(namespace),
		)
	}
}

func GetMapPropertyFnFilteredByNamespace(value map[string]any) MapPropertyFnWithNamespaceFilter {
	return func(namespace string) map[string]any {
		return value
	}
}

type NamespaceIDMapSetting setting[map[string]any, func(namespaceID string)]

func NewNamespaceIDMapSetting(key Key, def map[string]any, description string) NamespaceIDMapSetting {
	s := NamespaceIDMapSetting{
		key:         key,
		def:         def,
		convert:     convertMap,
		description: description,
	}
	return s
}

func NewNamespaceIDMapSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[map[string]any], description string) NamespaceIDMapSetting {
	s := NamespaceIDMapSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertMap,
		description: description,
	}
	return s
}

func (s NamespaceIDMapSetting) Key() Key               { return s.key }
func (s NamespaceIDMapSetting) Precedence() Precedence { return PrecedenceNamespaceID }

func (s NamespaceIDMapSetting) WithDefault(v map[string]any) NamespaceIDMapSetting {
	newS := s
	newS.def = v
	return newS
}

type MapPropertyFnWithNamespaceIDFilter func(namespaceID string) map[string]any

func (s NamespaceIDMapSetting) Get(c *Collection) MapPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) map[string]any {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceNamespaceID(namespaceID),
		)
	}
}

func GetMapPropertyFnFilteredByNamespaceID(value map[string]any) MapPropertyFnWithNamespaceIDFilter {
	return func(namespaceID string) map[string]any {
		return value
	}
}

type TaskQueueMapSetting setting[map[string]any, func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType)]

func NewTaskQueueMapSetting(key Key, def map[string]any, description string) TaskQueueMapSetting {
	s := TaskQueueMapSetting{
		key:         key,
		def:         def,
		convert:     convertMap,
		description: description,
	}
	return s
}

func NewTaskQueueMapSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[map[string]any], description string) TaskQueueMapSetting {
	s := TaskQueueMapSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertMap,
		description: description,
	}
	return s
}

func (s TaskQueueMapSetting) Key() Key               { return s.key }
func (s TaskQueueMapSetting) Precedence() Precedence { return PrecedenceTaskQueue }

func (s TaskQueueMapSetting) WithDefault(v map[string]any) TaskQueueMapSetting {
	newS := s
	newS.def = v
	return newS
}

type MapPropertyFnWithTaskQueueFilter func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) map[string]any

func (s TaskQueueMapSetting) Get(c *Collection) MapPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) map[string]any {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceTaskQueue(namespace, taskQueue, taskQueueType),
		)
	}
}

func GetMapPropertyFnFilteredByTaskQueue(value map[string]any) MapPropertyFnWithTaskQueueFilter {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) map[string]any {
		return value
	}
}

type ShardIDMapSetting setting[map[string]any, func(shardID int32)]

func NewShardIDMapSetting(key Key, def map[string]any, description string) ShardIDMapSetting {
	s := ShardIDMapSetting{
		key:         key,
		def:         def,
		convert:     convertMap,
		description: description,
	}
	return s
}

func NewShardIDMapSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[map[string]any], description string) ShardIDMapSetting {
	s := ShardIDMapSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertMap,
		description: description,
	}
	return s
}

func (s ShardIDMapSetting) Key() Key               { return s.key }
func (s ShardIDMapSetting) Precedence() Precedence { return PrecedenceShardID }

func (s ShardIDMapSetting) WithDefault(v map[string]any) ShardIDMapSetting {
	newS := s
	newS.def = v
	return newS
}

type MapPropertyFnWithShardIDFilter func(shardID int32) map[string]any

func (s ShardIDMapSetting) Get(c *Collection) MapPropertyFnWithShardIDFilter {
	return func(shardID int32) map[string]any {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceShardID(shardID),
		)
	}
}

func GetMapPropertyFnFilteredByShardID(value map[string]any) MapPropertyFnWithShardIDFilter {
	return func(shardID int32) map[string]any {
		return value
	}
}

type TaskTypeMapSetting setting[map[string]any, func(taskType enumsspb.TaskType)]

func NewTaskTypeMapSetting(key Key, def map[string]any, description string) TaskTypeMapSetting {
	s := TaskTypeMapSetting{
		key:         key,
		def:         def,
		convert:     convertMap,
		description: description,
	}
	return s
}

func NewTaskTypeMapSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[map[string]any], description string) TaskTypeMapSetting {
	s := TaskTypeMapSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertMap,
		description: description,
	}
	return s
}

func (s TaskTypeMapSetting) Key() Key               { return s.key }
func (s TaskTypeMapSetting) Precedence() Precedence { return PrecedenceTaskType }

func (s TaskTypeMapSetting) WithDefault(v map[string]any) TaskTypeMapSetting {
	newS := s
	newS.def = v
	return newS
}

type MapPropertyFnWithTaskTypeFilter func(taskType enumsspb.TaskType) map[string]any

func (s TaskTypeMapSetting) Get(c *Collection) MapPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) map[string]any {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceTaskType(taskType),
		)
	}
}

func GetMapPropertyFnFilteredByTaskType(value map[string]any) MapPropertyFnWithTaskTypeFilter {
	return func(taskType enumsspb.TaskType) map[string]any {
		return value
	}
}

type DestinationMapSetting setting[map[string]any, func(namespace string, destination string)]

func NewDestinationMapSetting(key Key, def map[string]any, description string) DestinationMapSetting {
	s := DestinationMapSetting{
		key:         key,
		def:         def,
		convert:     convertMap,
		description: description,
	}
	return s
}

func NewDestinationMapSettingWithConstrainedDefault(key Key, cdef []TypedConstrainedValue[map[string]any], description string) DestinationMapSetting {
	s := DestinationMapSetting{
		key:         key,
		cdef:        cdef,
		convert:     convertMap,
		description: description,
	}
	return s
}

func (s DestinationMapSetting) Key() Key               { return s.key }
func (s DestinationMapSetting) Precedence() Precedence { return PrecedenceDestination }

func (s DestinationMapSetting) WithDefault(v map[string]any) DestinationMapSetting {
	newS := s
	newS.def = v
	return newS
}

type MapPropertyFnWithDestinationFilter func(namespace string, destination string) map[string]any

func (s DestinationMapSetting) Get(c *Collection) MapPropertyFnWithDestinationFilter {
	return func(namespace string, destination string) map[string]any {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceDestination(namespace, destination),
		)
	}
}

func GetMapPropertyFnFilteredByDestination(value map[string]any) MapPropertyFnWithDestinationFilter {
	return func(namespace string, destination string) map[string]any {
		return value
	}
}

type GlobalTypedSetting[T any] setting[T, func()]

// NewGlobalTypedSetting creates a setting that uses mapstructure to handle complex structured
// values. The value from dynamic config will be copied over a shallow copy of 'def', which means
// 'def' must not contain any non-nil slices, maps, or pointers.
func NewGlobalTypedSetting[T any](key Key, def T, description string) GlobalTypedSetting[T] {
	s := GlobalTypedSetting[T]{
		key:         key,
		def:         def,
		convert:     ConvertStructure[T](def),
		description: description,
	}
	return s
}

// NewGlobalTypedSettingWithConverter creates a setting with a custom converter function.
func NewGlobalTypedSettingWithConverter[T any](key Key, convert func(any) (T, error), def T, description string) GlobalTypedSetting[T] {
	s := GlobalTypedSetting[T]{
		key:         key,
		def:         def,
		convert:     convert,
		description: description,
	}
	return s
}

func (s GlobalTypedSetting[T]) Key() Key               { return s.key }
func (s GlobalTypedSetting[T]) Precedence() Precedence { return PrecedenceGlobal }

func (s GlobalTypedSetting[T]) WithDefault(v T) GlobalTypedSetting[T] {
	newS := s
	newS.def = v
	return newS
}

func (s GlobalTypedSetting[T]) Get(c *Collection) func() T {
	return func() T {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceGlobal(),
		)
	}
}

type NamespaceTypedSetting[T any] setting[T, func(namespace string)]

// NewNamespaceTypedSetting creates a setting that uses mapstructure to handle complex structured
// values. The value from dynamic config will be copied over a shallow copy of 'def', which means
// 'def' must not contain any non-nil slices, maps, or pointers.
func NewNamespaceTypedSetting[T any](key Key, def T, description string) NamespaceTypedSetting[T] {
	s := NamespaceTypedSetting[T]{
		key:         key,
		def:         def,
		convert:     ConvertStructure[T](def),
		description: description,
	}
	return s
}

// NewNamespaceTypedSettingWithConverter creates a setting with a custom converter function.
func NewNamespaceTypedSettingWithConverter[T any](key Key, convert func(any) (T, error), def T, description string) NamespaceTypedSetting[T] {
	s := NamespaceTypedSetting[T]{
		key:         key,
		def:         def,
		convert:     convert,
		description: description,
	}
	return s
}

func (s NamespaceTypedSetting[T]) Key() Key               { return s.key }
func (s NamespaceTypedSetting[T]) Precedence() Precedence { return PrecedenceNamespace }

func (s NamespaceTypedSetting[T]) WithDefault(v T) NamespaceTypedSetting[T] {
	newS := s
	newS.def = v
	return newS
}

func (s NamespaceTypedSetting[T]) Get(c *Collection) func(namespace string) T {
	return func(namespace string) T {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceNamespace(namespace),
		)
	}
}

type NamespaceIDTypedSetting[T any] setting[T, func(namespaceID string)]

// NewNamespaceIDTypedSetting creates a setting that uses mapstructure to handle complex structured
// values. The value from dynamic config will be copied over a shallow copy of 'def', which means
// 'def' must not contain any non-nil slices, maps, or pointers.
func NewNamespaceIDTypedSetting[T any](key Key, def T, description string) NamespaceIDTypedSetting[T] {
	s := NamespaceIDTypedSetting[T]{
		key:         key,
		def:         def,
		convert:     ConvertStructure[T](def),
		description: description,
	}
	return s
}

// NewNamespaceIDTypedSettingWithConverter creates a setting with a custom converter function.
func NewNamespaceIDTypedSettingWithConverter[T any](key Key, convert func(any) (T, error), def T, description string) NamespaceIDTypedSetting[T] {
	s := NamespaceIDTypedSetting[T]{
		key:         key,
		def:         def,
		convert:     convert,
		description: description,
	}
	return s
}

func (s NamespaceIDTypedSetting[T]) Key() Key               { return s.key }
func (s NamespaceIDTypedSetting[T]) Precedence() Precedence { return PrecedenceNamespaceID }

func (s NamespaceIDTypedSetting[T]) WithDefault(v T) NamespaceIDTypedSetting[T] {
	newS := s
	newS.def = v
	return newS
}

func (s NamespaceIDTypedSetting[T]) Get(c *Collection) func(namespaceID string) T {
	return func(namespaceID string) T {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceNamespaceID(namespaceID),
		)
	}
}

type TaskQueueTypedSetting[T any] setting[T, func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType)]

// NewTaskQueueTypedSetting creates a setting that uses mapstructure to handle complex structured
// values. The value from dynamic config will be copied over a shallow copy of 'def', which means
// 'def' must not contain any non-nil slices, maps, or pointers.
func NewTaskQueueTypedSetting[T any](key Key, def T, description string) TaskQueueTypedSetting[T] {
	s := TaskQueueTypedSetting[T]{
		key:         key,
		def:         def,
		convert:     ConvertStructure[T](def),
		description: description,
	}
	return s
}

// NewTaskQueueTypedSettingWithConverter creates a setting with a custom converter function.
func NewTaskQueueTypedSettingWithConverter[T any](key Key, convert func(any) (T, error), def T, description string) TaskQueueTypedSetting[T] {
	s := TaskQueueTypedSetting[T]{
		key:         key,
		def:         def,
		convert:     convert,
		description: description,
	}
	return s
}

func (s TaskQueueTypedSetting[T]) Key() Key               { return s.key }
func (s TaskQueueTypedSetting[T]) Precedence() Precedence { return PrecedenceTaskQueue }

func (s TaskQueueTypedSetting[T]) WithDefault(v T) TaskQueueTypedSetting[T] {
	newS := s
	newS.def = v
	return newS
}

func (s TaskQueueTypedSetting[T]) Get(c *Collection) func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) T {
	return func(namespace string, taskQueue string, taskQueueType enumspb.TaskQueueType) T {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceTaskQueue(namespace, taskQueue, taskQueueType),
		)
	}
}

type ShardIDTypedSetting[T any] setting[T, func(shardID int32)]

// NewShardIDTypedSetting creates a setting that uses mapstructure to handle complex structured
// values. The value from dynamic config will be copied over a shallow copy of 'def', which means
// 'def' must not contain any non-nil slices, maps, or pointers.
func NewShardIDTypedSetting[T any](key Key, def T, description string) ShardIDTypedSetting[T] {
	s := ShardIDTypedSetting[T]{
		key:         key,
		def:         def,
		convert:     ConvertStructure[T](def),
		description: description,
	}
	return s
}

// NewShardIDTypedSettingWithConverter creates a setting with a custom converter function.
func NewShardIDTypedSettingWithConverter[T any](key Key, convert func(any) (T, error), def T, description string) ShardIDTypedSetting[T] {
	s := ShardIDTypedSetting[T]{
		key:         key,
		def:         def,
		convert:     convert,
		description: description,
	}
	return s
}

func (s ShardIDTypedSetting[T]) Key() Key               { return s.key }
func (s ShardIDTypedSetting[T]) Precedence() Precedence { return PrecedenceShardID }

func (s ShardIDTypedSetting[T]) WithDefault(v T) ShardIDTypedSetting[T] {
	newS := s
	newS.def = v
	return newS
}

func (s ShardIDTypedSetting[T]) Get(c *Collection) func(shardID int32) T {
	return func(shardID int32) T {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceShardID(shardID),
		)
	}
}

type TaskTypeTypedSetting[T any] setting[T, func(taskType enumsspb.TaskType)]

// NewTaskTypeTypedSetting creates a setting that uses mapstructure to handle complex structured
// values. The value from dynamic config will be copied over a shallow copy of 'def', which means
// 'def' must not contain any non-nil slices, maps, or pointers.
func NewTaskTypeTypedSetting[T any](key Key, def T, description string) TaskTypeTypedSetting[T] {
	s := TaskTypeTypedSetting[T]{
		key:         key,
		def:         def,
		convert:     ConvertStructure[T](def),
		description: description,
	}
	return s
}

// NewTaskTypeTypedSettingWithConverter creates a setting with a custom converter function.
func NewTaskTypeTypedSettingWithConverter[T any](key Key, convert func(any) (T, error), def T, description string) TaskTypeTypedSetting[T] {
	s := TaskTypeTypedSetting[T]{
		key:         key,
		def:         def,
		convert:     convert,
		description: description,
	}
	return s
}

func (s TaskTypeTypedSetting[T]) Key() Key               { return s.key }
func (s TaskTypeTypedSetting[T]) Precedence() Precedence { return PrecedenceTaskType }

func (s TaskTypeTypedSetting[T]) WithDefault(v T) TaskTypeTypedSetting[T] {
	newS := s
	newS.def = v
	return newS
}

func (s TaskTypeTypedSetting[T]) Get(c *Collection) func(taskType enumsspb.TaskType) T {
	return func(taskType enumsspb.TaskType) T {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceTaskType(taskType),
		)
	}
}

type DestinationTypedSetting[T any] setting[T, func(namespace string, destination string)]

// NewDestinationTypedSetting creates a setting that uses mapstructure to handle complex structured
// values. The value from dynamic config will be copied over a shallow copy of 'def', which means
// 'def' must not contain any non-nil slices, maps, or pointers.
func NewDestinationTypedSetting[T any](key Key, def T, description string) DestinationTypedSetting[T] {
	s := DestinationTypedSetting[T]{
		key:         key,
		def:         def,
		convert:     ConvertStructure[T](def),
		description: description,
	}
	return s
}

// NewDestinationTypedSettingWithConverter creates a setting with a custom converter function.
func NewDestinationTypedSettingWithConverter[T any](key Key, convert func(any) (T, error), def T, description string) DestinationTypedSetting[T] {
	s := DestinationTypedSetting[T]{
		key:         key,
		def:         def,
		convert:     convert,
		description: description,
	}
	return s
}

func (s DestinationTypedSetting[T]) Key() Key               { return s.key }
func (s DestinationTypedSetting[T]) Precedence() Precedence { return PrecedenceDestination }

func (s DestinationTypedSetting[T]) WithDefault(v T) DestinationTypedSetting[T] {
	newS := s
	newS.def = v
	return newS
}

func (s DestinationTypedSetting[T]) Get(c *Collection) func(namespace string, destination string) T {
	return func(namespace string, destination string) T {
		return matchAndConvert(
			c,
			s.key,
			s.def,
			s.cdef,
			s.convert,
			precedenceDestination(namespace, destination),
		)
	}
}
