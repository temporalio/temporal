// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by cmd/tools/genfaultinjection. DO NOT EDIT.

func (c *faultInjectionWorkflowServiceServer) CountWorkflowExecutions(
	ctx context.Context,
	request *workflowservice.CountWorkflowExecutionsRequest,
) (*workflowservice.CountWorkflowExecutionsResponse, error) {
	return inject1(c.generator.generate("CountWorkflowExecutions"), func() (*workflowservice.CountWorkflowExecutionsResponse, error) {
		return c.baseStore.CountWorkflowExecutions(ctx, request)
	})
}

func (c *faultInjectionWorkflowServiceServer) CreateSchedule(
	ctx context.Context,
	request *workflowservice.CreateScheduleRequest,
) (*workflowservice.CreateScheduleResponse, error) {
	return inject1(c.generator.generate("CreateSchedule"), func() (*workflowservice.CreateScheduleResponse, error) {
		return c.baseStore.CreateSchedule(ctx, request)
	})
}

func (c *faultInjectionWorkflowServiceServer) DeleteSchedule(
	ctx context.Context,
	request *workflowservice.DeleteScheduleRequest,
) (*workflowservice.DeleteScheduleResponse, error) {
	return inject1(c.generator.generate("DeleteSchedule"), func() (*workflowservice.DeleteScheduleResponse, error) {
		return c.baseStore.DeleteSchedule(ctx, request)
	})
}

func (c *faultInjectionWorkflowServiceServer) DeleteWorkflowExecution(
	ctx context.Context,
	request *workflowservice.DeleteWorkflowExecutionRequest,
) (*workflowservice.DeleteWorkflowExecutionResponse, error) {
	return inject1(c.generator.generate("DeleteWorkflowExecution"), func() (*workflowservice.DeleteWorkflowExecutionResponse, error) {
		return c.baseStore.DeleteWorkflowExecution(ctx, request)
	})
}

func (c *faultInjectionWorkflowServiceServer) DeprecateNamespace(
	ctx context.Context,
	request *workflowservice.DeprecateNamespaceRequest,
) (*workflowservice.DeprecateNamespaceResponse, error) {
	return inject1(c.generator.generate("DeprecateNamespace"), func() (*workflowservice.DeprecateNamespaceResponse, error) {
		return c.baseStore.DeprecateNamespace(ctx, request)
	})
}

func (c *faultInjectionWorkflowServiceServer) DescribeBatchOperation(
	ctx context.Context,
	request *workflowservice.DescribeBatchOperationRequest,
) (*workflowservice.DescribeBatchOperationResponse, error) {
	return inject1(c.generator.generate("DescribeBatchOperation"), func() (*workflowservice.DescribeBatchOperationResponse, error) {
		return c.baseStore.DescribeBatchOperation(ctx, request)
	})
}

func (c *faultInjectionWorkflowServiceServer) DescribeNamespace(
	ctx context.Context,
	request *workflowservice.DescribeNamespaceRequest,
) (*workflowservice.DescribeNamespaceResponse, error) {
	return inject1(c.generator.generate("DescribeNamespace"), func() (*workflowservice.DescribeNamespaceResponse, error) {
		return c.baseStore.DescribeNamespace(ctx, request)
	})
}

func (c *faultInjectionWorkflowServiceServer) DescribeSchedule(
	ctx context.Context,
	request *workflowservice.DescribeScheduleRequest,
) (*workflowservice.DescribeScheduleResponse, error) {
	return inject1(c.generator.generate("DescribeSchedule"), func() (*workflowservice.DescribeScheduleResponse, error) {
		return c.baseStore.DescribeSchedule(ctx, request)
	})
}

func (c *faultInjectionWorkflowServiceServer) DescribeTaskQueue(
	ctx context.Context,
	request *workflowservice.DescribeTaskQueueRequest,
) (*workflowservice.DescribeTaskQueueResponse, error) {
	return inject1(c.generator.generate("DescribeTaskQueue"), func() (*workflowservice.DescribeTaskQueueResponse, error) {
		return c.baseStore.DescribeTaskQueue(ctx, request)
	})
}

func (c *faultInjectionWorkflowServiceServer) DescribeWorkflowExecution(
	ctx context.Context,
	request *workflowservice.DescribeWorkflowExecutionRequest,
) (*workflowservice.DescribeWorkflowExecutionResponse, error) {
	return inject1(c.generator.generate("DescribeWorkflowExecution"), func() (*workflowservice.DescribeWorkflowExecutionResponse, error) {
		return c.baseStore.DescribeWorkflowExecution(ctx, request)
	})
}

func (c *faultInjectionWorkflowServiceServer) ExecuteMultiOperation(
	ctx context.Context,
	request *workflowservice.ExecuteMultiOperationRequest,
) (*workflowservice.ExecuteMultiOperationResponse, error) {
	return inject1(c.generator.generate("ExecuteMultiOperation"), func() (*workflowservice.ExecuteMultiOperationResponse, error) {
		return c.baseStore.ExecuteMultiOperation(ctx, request)
	})
}
