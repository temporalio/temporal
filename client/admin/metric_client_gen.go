// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by cmd/tools/rpcwrappers. DO NOT EDIT.

package admin

import (
	"context"
	"time"

	"go.temporal.io/server/api/adminservice/v1"
	"google.golang.org/grpc"

	"go.temporal.io/server/common/metrics"
)

func (c *metricClient) AddOrUpdateRemoteCluster(
	ctx context.Context,
	request *adminservice.AddOrUpdateRemoteClusterRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.AddOrUpdateRemoteClusterResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientAddOrUpdateRemoteClusterOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.AddOrUpdateRemoteCluster(ctx, request, opts...)
}

func (c *metricClient) AddSearchAttributes(
	ctx context.Context,
	request *adminservice.AddSearchAttributesRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.AddSearchAttributesResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientAddSearchAttributesOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.AddSearchAttributes(ctx, request, opts...)
}

func (c *metricClient) CloseShard(
	ctx context.Context,
	request *adminservice.CloseShardRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.CloseShardResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientCloseShardOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.CloseShard(ctx, request, opts...)
}

func (c *metricClient) DeleteWorkflowExecution(
	ctx context.Context,
	request *adminservice.DeleteWorkflowExecutionRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.DeleteWorkflowExecutionResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientDeleteWorkflowExecutionOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.DeleteWorkflowExecution(ctx, request, opts...)
}

func (c *metricClient) DescribeCluster(
	ctx context.Context,
	request *adminservice.DescribeClusterRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.DescribeClusterResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientDescribeClusterOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.DescribeCluster(ctx, request, opts...)
}

func (c *metricClient) DescribeHistoryHost(
	ctx context.Context,
	request *adminservice.DescribeHistoryHostRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.DescribeHistoryHostResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientDescribeHistoryHostOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.DescribeHistoryHost(ctx, request, opts...)
}

func (c *metricClient) DescribeMutableState(
	ctx context.Context,
	request *adminservice.DescribeMutableStateRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.DescribeMutableStateResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientDescribeMutableStateOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.DescribeMutableState(ctx, request, opts...)
}

func (c *metricClient) GetDLQMessages(
	ctx context.Context,
	request *adminservice.GetDLQMessagesRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.GetDLQMessagesResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientGetDLQMessagesOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.GetDLQMessages(ctx, request, opts...)
}

func (c *metricClient) GetDLQReplicationMessages(
	ctx context.Context,
	request *adminservice.GetDLQReplicationMessagesRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.GetDLQReplicationMessagesResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientGetDLQReplicationMessagesOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.GetDLQReplicationMessages(ctx, request, opts...)
}

func (c *metricClient) GetNamespaceReplicationMessages(
	ctx context.Context,
	request *adminservice.GetNamespaceReplicationMessagesRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.GetNamespaceReplicationMessagesResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientGetNamespaceReplicationMessagesOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.GetNamespaceReplicationMessages(ctx, request, opts...)
}

func (c *metricClient) GetReplicationMessages(
	ctx context.Context,
	request *adminservice.GetReplicationMessagesRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.GetReplicationMessagesResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientGetReplicationMessagesOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.GetReplicationMessages(ctx, request, opts...)
}

func (c *metricClient) GetSearchAttributes(
	ctx context.Context,
	request *adminservice.GetSearchAttributesRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.GetSearchAttributesResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientGetSearchAttributesOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.GetSearchAttributes(ctx, request, opts...)
}

func (c *metricClient) GetShard(
	ctx context.Context,
	request *adminservice.GetShardRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.GetShardResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientGetShardOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.GetShard(ctx, request, opts...)
}

func (c *metricClient) GetTaskQueueTasks(
	ctx context.Context,
	request *adminservice.GetTaskQueueTasksRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.GetTaskQueueTasksResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientGetTaskQueueTasksOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.GetTaskQueueTasks(ctx, request, opts...)
}

func (c *metricClient) GetWorkflowExecutionRawHistoryV2(
	ctx context.Context,
	request *adminservice.GetWorkflowExecutionRawHistoryV2Request,
	opts ...grpc.CallOption,
) (_ *adminservice.GetWorkflowExecutionRawHistoryV2Response, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientGetWorkflowExecutionRawHistoryV2Operation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.GetWorkflowExecutionRawHistoryV2(ctx, request, opts...)
}

func (c *metricClient) ListClusterMembers(
	ctx context.Context,
	request *adminservice.ListClusterMembersRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.ListClusterMembersResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientListClusterMembersOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.ListClusterMembers(ctx, request, opts...)
}

func (c *metricClient) ListClusters(
	ctx context.Context,
	request *adminservice.ListClustersRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.ListClustersResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientListClustersOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.ListClusters(ctx, request, opts...)
}

func (c *metricClient) ListHistoryTasks(
	ctx context.Context,
	request *adminservice.ListHistoryTasksRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.ListHistoryTasksResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientListHistoryTasksOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.ListHistoryTasks(ctx, request, opts...)
}

func (c *metricClient) MergeDLQMessages(
	ctx context.Context,
	request *adminservice.MergeDLQMessagesRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.MergeDLQMessagesResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientMergeDLQMessagesOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.MergeDLQMessages(ctx, request, opts...)
}

func (c *metricClient) PurgeDLQMessages(
	ctx context.Context,
	request *adminservice.PurgeDLQMessagesRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.PurgeDLQMessagesResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientPurgeDLQMessagesOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.PurgeDLQMessages(ctx, request, opts...)
}

func (c *metricClient) ReapplyEvents(
	ctx context.Context,
	request *adminservice.ReapplyEventsRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.ReapplyEventsResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientReapplyEventsOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.ReapplyEvents(ctx, request, opts...)
}

func (c *metricClient) RebuildMutableState(
	ctx context.Context,
	request *adminservice.RebuildMutableStateRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.RebuildMutableStateResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientRebuildMutableStateOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.RebuildMutableState(ctx, request, opts...)
}

func (c *metricClient) RefreshWorkflowTasks(
	ctx context.Context,
	request *adminservice.RefreshWorkflowTasksRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.RefreshWorkflowTasksResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientRefreshWorkflowTasksOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.RefreshWorkflowTasks(ctx, request, opts...)
}

func (c *metricClient) RemoveRemoteCluster(
	ctx context.Context,
	request *adminservice.RemoveRemoteClusterRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.RemoveRemoteClusterResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientRemoveRemoteClusterOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.RemoveRemoteCluster(ctx, request, opts...)
}

func (c *metricClient) RemoveSearchAttributes(
	ctx context.Context,
	request *adminservice.RemoveSearchAttributesRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.RemoveSearchAttributesResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientRemoveSearchAttributesOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.RemoveSearchAttributes(ctx, request, opts...)
}

func (c *metricClient) RemoveTask(
	ctx context.Context,
	request *adminservice.RemoveTaskRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.RemoveTaskResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientRemoveTaskOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.RemoveTask(ctx, request, opts...)
}

func (c *metricClient) ResendReplicationTasks(
	ctx context.Context,
	request *adminservice.ResendReplicationTasksRequest,
	opts ...grpc.CallOption,
) (_ *adminservice.ResendReplicationTasksResponse, retError error) {

	metricsHandler := c.startMetricsRecording(metrics.AdminClientResendReplicationTasksOperation)
	startTime := time.Now()
	defer func() {
		c.finishMetricsRecording(metricsHandler, time.Since(startTime), retError)
	}()

	return c.client.ResendReplicationTasks(ctx, request, opts...)
}
