// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by MockGen. DO NOT EDIT.
// Source: connections.go

// Package history is a generated GoMock package.
package history

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockconnections is a mock of connections interface.
type Mockconnections struct {
	ctrl     *gomock.Controller
	recorder *MockconnectionsMockRecorder
}

// MockconnectionsMockRecorder is the mock recorder for Mockconnections.
type MockconnectionsMockRecorder struct {
	mock *Mockconnections
}

// NewMockconnections creates a new mock instance.
func NewMockconnections(ctrl *gomock.Controller) *Mockconnections {
	mock := &Mockconnections{ctrl: ctrl}
	mock.recorder = &MockconnectionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockconnections) EXPECT() *MockconnectionsMockRecorder {
	return m.recorder
}

// getAllClientConns mocks base method.
func (m *Mockconnections) getAllClientConns() []clientConnection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getAllClientConns")
	ret0, _ := ret[0].([]clientConnection)
	return ret0
}

// getAllClientConns indicates an expected call of getAllClientConns.
func (mr *MockconnectionsMockRecorder) getAllClientConns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getAllClientConns", reflect.TypeOf((*Mockconnections)(nil).getAllClientConns))
}

// getOrCreateClientConn mocks base method.
func (m *Mockconnections) getOrCreateClientConn(addr rpcAddress) clientConnection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getOrCreateClientConn", addr)
	ret0, _ := ret[0].(clientConnection)
	return ret0
}

// getOrCreateClientConn indicates an expected call of getOrCreateClientConn.
func (mr *MockconnectionsMockRecorder) getOrCreateClientConn(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getOrCreateClientConn", reflect.TypeOf((*Mockconnections)(nil).getOrCreateClientConn), addr)
}
