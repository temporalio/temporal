name: Flaky Tests Report

on:
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      output_file:
        description: 'Output file from bash script'
        required: false
        default: 'out.json'

permissions:
  contents: read
  actions: read

jobs:
  flaky-tests-report:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install Python dependencies
        run: |
          cd tools/flakes
          uv sync

      - name: Install tringa
        run: |
          uv tool install git+https://github.com/dandavison/tringa --force

      - name: Run bash script to generate output file
        id: generate-output-file
        run: |
          set -euo pipefail
          
          rm -rf out.json timeout.txt retry.txt flaky.txt
          
          tringa --json --since-days 7 repo sql \
            'select classname, name, count(*) as failure_count, max(artifact) as artifact from test where passed = false and skipped = false group by classname, name order by failure_count desc' \
            --branch main --workflow-id 80591745 https://github.com/temporalio/temporal > out.json

      - name: Run Python script to process flaky tests
        id: process-flaky-tests
        run: |
          cd tools/flakes
          uv run main.py --file ../../out.json

      - name: Upload generated reports
        uses: actions/upload-artifact@v4
        if: steps.process-flaky-tests.outcome == 'success'
        with:
          name: flaky-tests-reports-${{ github.run_number }}
          path: |
            out.json
            crash.txt
            flaky.txt
            retry.txt
            timeout.txt
          retention-days: 30

      - name: Generate flaky tests summary
        if: steps.process-flaky-tests.outcome == 'success'
        shell: bash
        id: flaky-summary
        run: |
          # Create a comprehensive summary from the generated text files
          title="📊 Flaky Tests Report - Last 7 Days"
          message="*Test Failure Analysis:*\n\n"
          
          # Count failures by category
          crash_count=0
          flaky_count=0
          retry_count=0
          timeout_count=0
          
          if [ -f "crash.txt" ]; then
            crash_count=$(grep -c "|\[" crash.txt || echo "0")
          fi
          
          if [ -f "flaky.txt" ]; then
            flaky_count=$(grep -c "|\[" flaky.txt || echo "0")
          fi
          
          if [ -f "retry.txt" ]; then
            retry_count=$(grep -c "|\[" retry.txt || echo "0")
          fi
          
          if [ -f "timeout.txt" ]; then
            timeout_count=$(grep -c "|\[" timeout.txt || echo "0")
          fi
          
          # Create summary section
          message+="*📈 Failure Categories:*\n"
          message+="• 💥 Crashes: ${crash_count}\n"
          message+="• 🔄 Flaky Tests: ${flaky_count}\n"
          message+="• 🔁 Retry Failures: ${retry_count}\n"
          message+="• ⏰ Timeouts: ${timeout_count}\n\n"
          
          # Add detailed tables for each category with failures
          if [ "$crash_count" -gt 0 ] && [ -f "crash.txt" ]; then
            message+="*💥 Crashes:*\n"
            message+="\`\`\`\n"
            message+="$(cat crash.txt)\n"
            message+="\`\`\`\n\n"
          fi
          
          if [ "$timeout_count" -gt 0 ] && [ -f "timeout.txt" ]; then
            message+="*⏰ Timeouts:*\n"
            message+="\`\`\`\n"
            message+="$(cat timeout.txt)\n"
            message+="\`\`\`\n\n"
          fi
          
          if [ "$flaky_count" -gt 0 ] && [ -f "flaky.txt" ]; then
            message+="*🔄 Flaky Tests:*\n"
            message+="\`\`\`\n"
            message+="$(cat flaky.txt)\n"
            message+="\`\`\`\n\n"
          fi
          
          if [ "$retry_count" -gt 0 ] && [ -f "retry.txt" ]; then
            message+="*🔁 Retry Failures:*\n"
            message+="\`\`\`\n"
            message+="$(cat retry.txt)\n"
            message+="\`\`\`\n\n"
          fi
          
          if [ "$crash_count" -eq 0 ] && [ "$flaky_count" -eq 0 ] && [ "$retry_count" -eq 0 ] && [ "$timeout_count" -eq 0 ]; then
            message+="🎉 No test failures found in the last 7 days!\n"
          fi
          
          message+="\n📋 <https://github.com/temporalio/temporal/actions/runs/${{ github.run_id }}|View Detailed Report>"
          
          # Set environment variables for Slack
          {
            echo "SLACK_TITLE=${title}"
            echo "SLACK_MESSAGE<<EOF" >> "$GITHUB_ENV"
            echo "${message}" >> "$GITHUB_ENV"
            echo "EOF" >> "$GITHUB_ENV"
          }

      - name: Create GitHub Actions summary
        if: steps.process-flaky-tests.outcome == 'success'
        run: |
          echo "## 📊 Flaky Tests Report - $(date)" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          # Count failures by category
          crash_count=0
          flaky_count=0
          retry_count=0
          timeout_count=0
          
          if [ -f "crash.txt" ]; then
            crash_count=$(grep -c "|\[" crash.txt || echo "0")
          fi
          
          if [ -f "flaky.txt" ]; then
            flaky_count=$(grep -c "|\[" flaky.txt || echo "0")
          fi
          
          if [ -f "retry.txt" ]; then
            retry_count=$(grep -c "|\[" retry.txt || echo "0")
          fi
          
          if [ -f "timeout.txt" ]; then
            timeout_count=$(grep -c "|\[" timeout.txt || echo "0")
          fi
          
          echo "### 📈 Failure Categories Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "| Category | Count |" >> "$GITHUB_STEP_SUMMARY"
          echo "|----------|-------|" >> "$GITHUB_STEP_SUMMARY"
          echo "| 💥 Crashes | ${crash_count} |" >> "$GITHUB_STEP_SUMMARY"
          echo "| ⏰ Timeouts | ${timeout_count} |" >> "$GITHUB_STEP_SUMMARY"
          echo "| 🔄 Flaky Tests | ${flaky_count} |" >> "$GITHUB_STEP_SUMMARY"
          echo "| 🔁 Retry Failures | ${retry_count} |" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          # Add detailed tables for each category
          if [ "$crash_count" -gt 0 ] && [ -f "crash.txt" ]; then
            echo "### 💥 Crashes" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            cat crash.txt >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          fi
          
          if [ "$timeout_count" -gt 0 ] && [ -f "timeout.txt" ]; then
            echo "### ⏰ Timeouts" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            cat timeout.txt >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          fi
          
          if [ "$flaky_count" -gt 0 ] && [ -f "flaky.txt" ]; then
            echo "### 🔄 Flaky Tests" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            cat flaky.txt >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          fi
          
          if [ "$retry_count" -gt 0 ] && [ -f "retry.txt" ]; then
            echo "### 🔁 Retry Failures" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            cat retry.txt >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          fi
          
          if [ "$crash_count" -eq 0 ] && [ "$flaky_count" -eq 0 ] && [ "$retry_count" -eq 0 ] && [ "$timeout_count" -eq 0 ]; then
            echo "🎉 **No test failures found in the last 7 days!**" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Construct success Slack message
        if: steps.process-flaky-tests.outcome == 'success' && steps.flaky-summary.outcome == 'success'
        shell: bash
        id: success-slack-message
        run: |
          title="📊 Flaky Tests Report - $(date)"
          
          # Read the step summary content and convert to Slack format
          if [ -f "$GITHUB_STEP_SUMMARY" ]; then
            # Convert markdown to Slack format
            message=$(cat "$GITHUB_STEP_SUMMARY" | \
              sed 's/^## /*/g' | \
              sed 's/^### /*/g' | \
              sed 's/^\- /• /g' | \
              sed 's/\*\*\([^*]*\)\*\*/\*\1\*/g' | \
              sed 's/`\([^`]*\)`/`\1`/g' | \
              sed 's/\[\([^]]*\)\](\([^)]*\))/<\2|\1>/g' | \
              sed 's/^| /• /g' | \
              sed '/^|--/d' | \
              sed 's/|/ • /g')
          else
            message="Flaky tests report generated successfully."
          fi

          {
            echo "SLACK_TITLE=${title}"
            echo "SLACK_MESSAGE<<EOF" >> "$GITHUB_ENV"
            echo "${message}" >> "$GITHUB_ENV"
            echo "EOF" >> "$GITHUB_ENV"
          }

      - name: Send Slack notification
        if: steps.process-flaky-tests.outcome == 'success' && steps.flaky-summary.outcome == 'success'
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: "Flaky Tests Bot"
          SLACK_CHANNEL: "test-bots"
          SLACK_MSG_AUTHOR: "temporal-flaky-tests"
          SLACK_FOOTER: "Generated by GitHub Actions"
          SLACK_COLOR: "warning"
          SLACK_ICON_EMOJI: ":chart_with_upwards_trend:"
        uses: rtCamp/action-slack-notify@v2

      - name: Create GitHub Actions failure summary
        if: steps.process-flaky-tests.outcome == 'failure' || steps.flaky-summary.outcome == 'failure'
        run: |
          echo "## ❌ Flaky Tests Report Generation Failed" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "The flaky tests report workflow failed to generate the report." >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### Workflow Details" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Run ID**: [${{ github.run_id }}](https://github.com/temporalio/temporal/actions/runs/${{ github.run_id }})" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Commit**: [${{ github.sha }}](https://github.com/temporalio/temporal/commit/${{ github.sha }})" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          # Add specific failure information
          if [[ "${{ steps.process-flaky-tests.outcome }}" == "failure" ]]; then
            echo "### Failure Point" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "Python script processing failed" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          elif [[ "${{ steps.flaky-summary.outcome }}" == "failure" ]]; then
            echo "### Failure Point" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "Summary generation failed" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          fi
          
          echo "Please check the workflow logs for more details." >> "$GITHUB_STEP_SUMMARY"

      - name: Construct workflow failure Slack message
        if: steps.process-flaky-tests.outcome == 'failure' || steps.flaky-summary.outcome == 'failure'
        shell: bash
        id: workflow-failure-message
        run: |
          title="❌ Flaky Tests Report Generation Failed"
          
          # Read the step summary content and convert to Slack format
          if [ -f "$GITHUB_STEP_SUMMARY" ]; then
            # Convert markdown to Slack format
            message=$(cat "$GITHUB_STEP_SUMMARY" | \
              sed 's/^## /*/g' | \
              sed 's/^### /*/g' | \
              sed 's/^\- /• /g' | \
              sed 's/\*\*\([^*]*\)\*\*/\*\1\*/g' | \
              sed 's/`\([^`]*\)`/`\1`/g' | \
              sed 's/\[\([^]]*\)\](\([^)]*\))/<\2|\1>/g')
          else
            message="The flaky tests report workflow failed to generate the report."
          fi

          {
            echo "SLACK_TITLE=${title}"
            echo "SLACK_MESSAGE<<EOF" >> "$GITHUB_ENV"
            echo "${message}" >> "$GITHUB_ENV"
            echo "EOF" >> "$GITHUB_ENV"
          }

      - name: Send Slack workflow failure notification
        if: steps.process-flaky-tests.outcome == 'failure' || steps.flaky-summary.outcome == 'failure'
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: "Flaky Tests Bot"
          SLACK_CHANNEL: "test-bots"
          SLACK_MSG_AUTHOR: "temporal-flaky-tests"
          SLACK_FOOTER: "Generated by GitHub Actions"
          SLACK_COLOR: "danger"
          SLACK_ICON_EMOJI: ":x:"
        uses: rtCamp/action-slack-notify@v2
