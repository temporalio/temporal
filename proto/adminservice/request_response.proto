// Copyright (c) 2019 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package adminservice;
option go_package = "github.com/temporalio/temporal/proto/adminservice";

import "enums/enums.proto";
import "common/common.proto";
import "common/domain.proto";
import "common/workflow_execution.proto";
import "common/replication.proto";

message DescribeWorkflowExecutionRequest {
    string domain = 1;
    common.WorkflowExecution execution = 2;
}

message DescribeWorkflowExecutionResponse {
    string shardId = 1;
    string historyAddr = 2;
    string mutableStateInCache = 3;
    string mutableStateInDatabase = 4;
}

//At least one of the parameters needs to be provided
message DescribeHistoryHostRequest {
    //ip:port
    string hostAddress = 1;
    int32 shardIdForHost = 2;
    common.WorkflowExecution executionForHost = 3;
}

message DescribeHistoryHostResponse {
    int32 numberOfShards = 1;
    repeated int32
    shardIDs = 2;
    common.DomainCacheInfo domainCache = 3;
    string shardControllerStatus = 4;
    string address = 5;
}

message CloseShardRequest {
    int32 shardID = 1;
}

message CloseShardResponse {
}

message RemoveTaskRequest {
    int32 shardID = 1;
    int32 type = 2;
    int64 taskID = 3;
}

message RemoveTaskResponse {
}

message GetWorkflowExecutionRawHistoryRequest {
    string domain = 1;
    common.WorkflowExecution execution = 2;
    int64 firstEventId = 3;
    int64 nextEventId = 4;
    int32 maximumPageSize = 5;
    bytes nextPageToken = 6;
}

message GetWorkflowExecutionRawHistoryResponse {
    bytes nextPageToken = 1;
    repeated common.DataBlob historyBatches = 2;
    map<string, common.ReplicationInfo> replicationInfo = 3;
    int32 eventStoreVersion = 4;
}

/**
  * StartEventId defines the beginning of the event to fetch. The first event is exclusive.
  * EndEventId and EndEventVersion defines the end of the event to fetch. The end event is exclusive.
  **/
message GetWorkflowExecutionRawHistoryV2Request {
    string domain = 1;
    common.WorkflowExecution execution = 2;
    int64 startEventId = 3;
    int64 startEventVersion = 4;
    int64 endEventId = 5;
    int64 endEventVersion = 6;
    int32 maximumPageSize = 7;
    bytes nextPageToken = 8;
}

message GetWorkflowExecutionRawHistoryV2Response {
    bytes nextPageToken = 1;
    repeated common.DataBlob historyBatches = 2;
    common.VersionHistory versionHistory = 3;
}

message AddSearchAttributeRequest {
    map<string, enums.IndexedValueType> searchAttribute = 1;
    string securityToken = 2;
}

message AddSearchAttributeResponse {
}

message DescribeClusterRequest {
}

message DescribeClusterResponse {
    common.SupportedClientVersions supportedClientVersions = 1;
    common.MembershipInfo membershipInfo = 2;
}