// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package common;

option go_package = "github.com/temporalio/temporal/.gen/proto/common";

enum DLQType {
    Replication = 0;
    Namespace = 1;
}

// TaskSource is the source from which a task was produced.
enum TaskSource {
    Unknown = 0;
    History = 1;    // Task produced by history service
    DbBacklog = 2;  // Task produced from matching db backlog
}

enum TaskCategory {
    TaskCategory_Unspecified = 0;
    // Transfer is the task type for transfer task
    TaskCategory_Transfer = 2; // starting from 2 here to be consistent with the row type define for cassandra
    // Timer is the task type for timer task
    TaskCategory_Timer = 3;
    // Replication is the task type for replication task
    TaskCategory_Replication = 4;
}

enum TaskType {
    ReplicationHistory = 0;
    ReplicationSyncActivity = 1;

    TransferDecisionTask = 2;
    TransferActivityTask = 3;
    TransferCloseExecution = 4;
    TransferCancelExecution = 5;
    TransferStartChildExecution = 6;
    TransferSignalExecution = 7;
    TransferRecordWorkflowStarted = 8;
    TransferResetWorkflow = 9;
    TransferUpsertWorkflowSearchAttributes = 10;

    DecisionTimeout = 11;
    ActivityTimeout = 12;
    UserTimer = 13;
    WorkflowRunTimeout = 14;
    DeleteHistoryEvent = 15;
    ActivityRetryTimer = 16;
    WorkflowBackoffTimer = 17;
}
