// Copyright (c) 2019 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package matchingservice;
option go_package = "github.com/temporalio/temporal/proto/matchingservice";

import "common/common.proto";
import "common/decision.proto";
import "common/workflow_execution.proto";

// TODO: remove this dependency
import "workflowservice/request_response.proto";

message PollForDecisionTaskRequest {
    string domainUUID = 1;
    string pollerID = 2;
    workflowservice.PollForDecisionTaskRequest pollRequest = 3;
    string forwardedFrom = 4;
}

message PollForDecisionTaskResponse {
    bytes taskToken = 1;
    common.WorkflowExecution workflowExecution = 2;
    common.WorkflowType workflowType = 3;
    int64 previousStartedEventId = 4;
    int64 startedEventId = 5;
    int64 attempt = 6;
    int64 nextEventId = 7;
    int64 backlogCountHint = 8;
    bool stickyExecutionEnabled = 9;
    common.WorkflowQuery query = 10;
    common.TransientDecisionInfo decisionInfo = 11;
    common.TaskList WorkflowExecutionTaskList = 12;
    int32 eventStoreVersion = 13;
    bytes branchToken = 14;
    int64 scheduledTimestamp = 15;
    int64 startedTimestamp = 16;
    map<string, common.WorkflowQuery> queries = 17;
}

message PollForActivityTaskRequest {
    string domainUUID = 1;
    string pollerID = 2;
    workflowservice.PollForActivityTaskRequest pollRequest = 3;
    string forwardedFrom = 4;
}

message PollForActivityTaskResponse {
    bytes taskToken = 1;
    common.WorkflowExecution workflowExecution = 2;
    string activityId = 3;
    common.ActivityType activityType = 4;
    bytes input = 5;
    int64 scheduledTimestamp = 6;
    int32 scheduleToCloseTimeoutSeconds = 7;
    int64 startedTimestamp = 8;
    int32 startToCloseTimeoutSeconds = 9;
    int32 heartbeatTimeoutSeconds = 10;
    int32 attempt = 11;
    int64 scheduledTimestampOfThisAttempt = 12;
    bytes heartbeatDetails = 13;
    common.WorkflowType workflowType = 14;
    string workflowDomain = 15;
    common.Header header = 16;
}

message AddDecisionTaskRequest {
    string domainUUID = 1;
    common.WorkflowExecution execution = 2;
    common.TaskList taskList = 3;
    int64 scheduleId = 4;
    int32 scheduleToStartTimeoutSeconds = 5;
    string forwardedFrom = 6;
}

message AddDecisionTaskResponse {
}

message AddActivityTaskRequest {
    string domainUUID = 1;
    common.WorkflowExecution execution = 2;
    string sourceDomainUUID = 3;
    common.TaskList taskList = 4;
    int64 scheduleId = 5;
    int32 scheduleToStartTimeoutSeconds = 6;
    string forwardedFrom = 7;
}

message AddActivityTaskResponse {
}

message QueryWorkflowRequest {
    string domainUUID = 1;
    common.TaskList taskList = 2;
    workflowservice.QueryWorkflowRequest queryRequest = 3;
    string forwardedFrom = 4;
}

message QueryWorkflowResponse {
    bytes queryResult = 1;
    common.QueryRejected queryRejected = 2;
}

message RespondQueryTaskCompletedRequest {
    string domainUUID = 1;
    common.TaskList taskList = 2;
    string taskID = 3;
    workflowservice.RespondQueryTaskCompletedRequest completedRequest = 4;
}

message RespondQueryTaskCompletedResponse {
}

message CancelOutstandingPollRequest {
    string domainUUID = 1;
    int32 taskListType = 2;
    common.TaskList taskList = 3;
    string pollerID = 4;
}

message CancelOutstandingPollResponse {
}

message DescribeTaskListRequest {
    string domainUUID = 1;
    workflowservice.DescribeTaskListRequest descRequest = 2;
}

message DescribeTaskListResponse {
    repeated common.PollerInfo pollers = 1;
    common.TaskListStatus taskListStatus = 2;
}

message ListTaskListPartitionsRequest {
    string domain = 1;
    common.TaskList taskList = 2;
}

message ListTaskListPartitionsResponse {
    repeated common.TaskListPartitionMetadata activityTaskListPartitions = 1;
    repeated common.TaskListPartitionMetadata decisionTaskListPartitions = 2;
}