// Copyright (c) 2019 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package matchingservice.v1;
option go_package = "github.com/temporalio/temporal/.gen/proto/matchingservice/v1;matchingservice";

import "common/v1/message.proto";
import "enums/v1/task_list.proto";
import "tasklist/v1/message.proto";
import "query/v1/message.proto";

import "enums/v1/server_task.proto";
import "history/v1/server_message.proto";

// TODO: remove this dependency
import "workflowservice/v1/request_response.proto";

message PollForDecisionTaskRequest {
    string namespaceId = 1;
    string pollerId = 2;
    workflowservice.v1.PollForDecisionTaskRequest pollRequest = 3;
    string forwardedFrom = 4;
}

message PollForDecisionTaskResponse {
    bytes taskToken = 1;
    common.v1.WorkflowExecution workflowExecution = 2;
    common.v1.WorkflowType workflowType = 3;
    int64 previousStartedEventId = 4;
    int64 startedEventId = 5;
    int64 attempt = 6;
    int64 nextEventId = 7;
    int64 backlogCountHint = 8;
    bool stickyExecutionEnabled = 9;
    query.v1.WorkflowQuery query = 10;
    history.v1.TransientDecisionInfo decisionInfo = 11;
    tasklist.v1.TaskList workflowExecutionTaskList = 12;
    int32 eventStoreVersion = 13;
    bytes branchToken = 14;
    int64 scheduledTimestamp = 15;
    int64 startedTimestamp = 16;
    map<string, query.v1.WorkflowQuery> queries = 17;
}

message PollForActivityTaskRequest {
    string namespaceId = 1;
    string pollerId = 2;
    workflowservice.v1.PollForActivityTaskRequest pollRequest = 3;
    string forwardedFrom = 4;
}

message PollForActivityTaskResponse {
    bytes taskToken = 1;
    common.v1.WorkflowExecution workflowExecution = 2;
    string activityId = 3;
    common.v1.ActivityType activityType = 4;
    common.v1.Payloads input = 5;
    int64 scheduledTimestamp = 6;
    int32 scheduleToCloseTimeoutSeconds = 7;
    int64 startedTimestamp = 8;
    int32 startToCloseTimeoutSeconds = 9;
    int32 heartbeatTimeoutSeconds = 10;
    int32 attempt = 11;
    int64 scheduledTimestampOfThisAttempt = 12;
    common.v1.Payloads heartbeatDetails = 13;
    common.v1.WorkflowType workflowType = 14;
    string workflowNamespace = 15;
    common.v1.Header header = 16;
}

message AddDecisionTaskRequest {
    string namespaceId = 1;
    common.v1.WorkflowExecution execution = 2;
    tasklist.v1.TaskList taskList = 3;
    int64 scheduleId = 4;
    int32 scheduleToStartTimeoutSeconds = 5;
    string forwardedFrom = 6;
    enums.v1.TaskSource source = 7;
}

message AddDecisionTaskResponse {
}

message AddActivityTaskRequest {
    string namespaceId = 1;
    common.v1.WorkflowExecution execution = 2;
    string sourceNamespaceId = 3;
    tasklist.v1.TaskList taskList = 4;
    int64 scheduleId = 5;
    int32 scheduleToStartTimeoutSeconds = 6;
    string forwardedFrom = 7;
    enums.v1.TaskSource source = 8;
}

message AddActivityTaskResponse {
}

message QueryWorkflowRequest {
    string namespaceId = 1;
    tasklist.v1.TaskList taskList = 2;
    workflowservice.v1.QueryWorkflowRequest queryRequest = 3;
    string forwardedFrom = 4;
}

message QueryWorkflowResponse {
    common.v1.Payloads queryResult = 1;
    query.v1.QueryRejected queryRejected = 2;
}

message RespondQueryTaskCompletedRequest {
    string namespaceId = 1;
    tasklist.v1.TaskList taskList = 2;
    string taskId = 3;
    workflowservice.v1.RespondQueryTaskCompletedRequest completedRequest = 4;
}

message RespondQueryTaskCompletedResponse {
}

message CancelOutstandingPollRequest {
    string namespaceId = 1;
    enums.v1.TaskListType taskListType = 2;
    tasklist.v1.TaskList taskList = 3;
    string pollerId = 4;
}

message CancelOutstandingPollResponse {
}

message DescribeTaskListRequest {
    string namespaceId = 1;
    workflowservice.v1.DescribeTaskListRequest descRequest = 2;
}

message DescribeTaskListResponse {
    repeated tasklist.v1.PollerInfo pollers = 1;
    tasklist.v1.TaskListStatus taskListStatus = 2;
}

message ListTaskListPartitionsRequest {
    string namespace = 1;
    tasklist.v1.TaskList taskList = 2;
}

message ListTaskListPartitionsResponse {
    repeated tasklist.v1.TaskListPartitionMetadata activityTaskListPartitions = 1;
    repeated tasklist.v1.TaskListPartitionMetadata decisionTaskListPartitions = 2;
}
