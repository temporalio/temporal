// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package replication;

option go_package = "github.com/temporalio/temporal/.gen/proto/archiver";

import "common/message.proto";
import "event/message.proto";
import "execution/enum.proto";

message HistoryBlobHeader {
    string namespace = 1;
    string namespaceId = 2;
    string workflowId = 3;
    string runId = 4;
    bool isLast = 5;
    int64 firstFailoverVersion = 6;
    int64 lastFailoverVersion = 7;
    int64 firstEventId = 8;
    int64 lastEventId = 9;
    int64 eventCount = 10;
}

message HistoryBlob  {
    HistoryBlobHeader header = 1;
    repeated event.History body = 2;
}

// ArchiveVisibilityRequest is request to Archive single workflow visibility record
message ArchiveVisibilityRequest {
    string namespaceId = 1;
    string namespace = 2;
    string workflowId = 3;
    string runId = 4;
    string workflowTypeName = 5;
    int64 startTimestamp = 6;
    int64 executionTimestamp = 7;
    int64 closeTimestamp = 8;
    execution.WorkflowExecutionStatus status = 9;
    int64 historyLength = 10;
    common.Memo memo = 11;
    map<string, string> searchAttributes = 12;
    string historyArchivalURI = 13;
}