// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package replication;

option go_package = "github.com/temporalio/temporal/.gen/proto/replication";

import "replication/server_enum.proto";
import "common/message.proto";
import "namespace/message.proto";
import "replication/message.proto";
import "event/message.proto";
import "event/server_message.proto";

message ReplicationInfo {
    int64 version = 1;
    int64 lastEventId = 2;
}

message ReplicationTask {
    ReplicationTaskType taskType = 1;
    int64 sourceTaskId = 2;
    oneof attributes {
        NamespaceTaskAttributes namespaceTaskAttributes = 3;
        // TODO: deprecate once NDC migration is done.
        HistoryTaskAttributes historyTaskAttributes = 4;
        SyncShardStatusTaskAttributes syncShardStatusTaskAttributes = 5;
        SyncActivityTaskAttributes syncActivityTaskAttributes = 6;
        // TODO: deprecate once kafka deprecation is done.
        HistoryMetadataTaskAttributes historyMetadataTaskAttributes = 7;
        HistoryTaskV2Attributes historyTaskV2Attributes = 8;
    }
}

message ReplicationToken {
    int32 shardId = 1;
    // lastRetrievedMessageId is where the next fetch should begin with.
    int64 lastRetrievedMessageId = 2;
    // lastProcessedMessageId is the last messageId that is processed on the passive side.
    // This can be different than lastRetrievedMessageId if passive side supports prefetching messages.
    int64 lastProcessedMessageId = 3;
}

message SyncShardStatus {
    int64 timestamp = 1;
}

message ReplicationMessages {
    repeated ReplicationTask replicationTasks = 1;
    // This can be different than the last taskId in the above list, because sender can decide to skip tasks (e.g. for completed workflows).
    int64 lastRetrievedMessageId = 2;
    // Hint for flow control.
    bool hasMore  = 3;
    SyncShardStatus syncShardStatus = 4;
}

message ReplicationTaskInfo {
    string namespaceId = 1;
    string workflowId = 2;
    string runId = 3;
    int32 taskType = 4;
    int64 taskId = 5;
    int64 version = 6;
    int64 firstEventId = 7;
    int64 nextEventId = 8;
    int64 scheduledId = 9;
}

message NamespaceTaskAttributes {
    NamespaceOperation namespaceOperation = 1;
    string id = 2;
    namespace.NamespaceInfo info = 3;
    namespace.NamespaceConfiguration config = 4;
    replication.NamespaceReplicationConfiguration replicationConfig = 5;
    int64 configVersion = 6;
    int64 failoverVersion = 7;
}

message HistoryTaskAttributes {
    repeated string targetClusters = 1;
    string namespaceId = 2;
    string workflowId = 3;
    string runId = 4;
    int64 firstEventId = 5;
    int64 nextEventId = 6;
    int64 version = 7;
    map<string, ReplicationInfo> replicationInfo = 8;
    event.History history = 9;
    event.History newRunHistory = 10;
    int32 eventStoreVersion = 11;
    int32 newRunEventStoreVersion = 12;
    bool resetWorkflow = 13;
    bool newRunNDC = 14;
}

message HistoryMetadataTaskAttributes {
    repeated string targetClusters = 1;
    string namespaceId = 2;
    string workflowId = 3;
    string runId = 4;
    int64 firstEventId = 5;
    int64 nextEventId = 6;
}

message SyncShardStatusTaskAttributes {
    string sourceCluster = 1;
    int64 shardId = 2;
    int64 timestamp = 3;
}

message SyncActivityTaskAttributes {
    string namespaceId = 1;
    string workflowId = 2;
    string runId = 3;
    int64 version = 4;
    int64 scheduledId = 5;
    int64 scheduledTime = 6;
    int64 startedId = 7;
    int64 startedTime = 8;
    int64 lastHeartbeatTime = 9;
    common.Payload details = 10;
    int32 attempt = 11;
    string lastFailureReason = 12;
    string lastWorkerIdentity = 13;
    common.Payload lastFailureDetails = 14;
    event.VersionHistory versionHistory = 15;
}

message HistoryTaskV2Attributes {
    int64 taskId = 1;
    string namespaceId = 2;
    string workflowId = 3;
    string runId = 4;
    repeated event.VersionHistoryItem versionHistoryItems = 5;
    common.DataBlob events = 6;
    // New run events does not need version history since there is no prior events.
    common.DataBlob newRunEvents = 7;
}
