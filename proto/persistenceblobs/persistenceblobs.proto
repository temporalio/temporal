// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package persistenceblobs;
option go_package = "github.com/temporalio/temporal/.gen/proto/persistenceblobs";

import "google/protobuf/timestamp.proto";
import "temporal-proto/common/replication.proto";

// ImmutableClusterMetadata contains initialization configuration and metadata for the cluster
message ImmutableClusterMetadata {
    string clusterName = 1;
    int32 historyShardCount = 2;
}

message ShardInfo {
    int32 shardID = 1;
    int64 rangeID = 2;
    string owner = 3;
    int64 replicationAckLevel = 4;
    int64 transferAckLevel = 5;
    int32 stolenSinceRenew = 6;
    google.protobuf.Timestamp updatedAt = 7;
    google.protobuf.Timestamp timerAckLevel = 8;
    int64 domainNotificationVersion = 9;
    map<string, int64> clusterTransferAckLevel = 10;
    map<string, google.protobuf.Timestamp> clusterTimerAckLevel = 11;
    map<string, int64> clusterReplicationLevel = 12;
    map<string, int64> replicationDLQAckLevel = 13;
}

message ReplicationTaskInfo {
    bytes domainID = 1;
    string workflowID = 2;
    bytes runID = 3;
    int32 taskType = 4;
    int64 version = 5;
    int64 firstEventID = 6;
    int64 nextEventID = 7;
    int64 scheduledID = 8;
    int32 eventStoreVersion = 9;
    int32 newRunEventStoreVersion = 10;
    bytes branch_token = 11;
    map<string, common.ReplicationInfo> lastReplicationInfo = 12;
    bytes newRunBranchToken = 13;
    bool resetWorkflow = 14;
    int64 taskID = 15;
}

message TimerTaskInfo {
    bytes domainID = 1;
    string workflowID = 2;
    bytes runID = 3;
    int32 taskType = 4;
    int32 timeoutType = 5;
    int64 version = 6;
    int64 scheduleAttempt = 7;
    int64 eventID = 8;
    int64 taskID = 9;
    google.protobuf.Timestamp VisibilityTimestamp = 10;
}


message TransferTaskInfo {
    bytes domainID = 1;
    string workflowID = 2;
    bytes runID = 3;
    int32 taskType = 4;
    bytes targetDomainID = 5;
    string targetWorkflowID = 6;
    bytes targetRunID = 7;
    string taskList = 8;
    bool targetChildWorkflowOnly = 9;
    int64 scheduleID = 10;
    int64 version = 11;
    int64 taskID = 12;
    google.protobuf.Timestamp visibilityTimestamp = 13;
    bool recordVisibility = 14;
}

// HistoryBranchRange represents a piece of range for a branch.
message HistoryBranchRange {
    // BranchID of original branch forked from.
    bytes branchID = 1;
    // Beginning node for the range, inclusive.
    int64 beginNodeID = 2;
    // Ending node for the range, exclusive.
    int64 endNodeID = 3;
}

// For history persistence to serialize/deserialize branch details.
message HistoryBranch {
    bytes treeID = 1;
    bytes branchID = 2;
    repeated HistoryBranchRange ancestors = 3;
}

message HistoryTreeInfo {
    HistoryBranch branchInfo = 1;
    // For fork operation to prevent race condition of leaking event data when forking branches fail. Also can be used for clean up leaked data.
    google.protobuf.Timestamp forkTime = 2;
    // For lookup back to workflow during debugging, also background cleanup when fork operation cannot finish self cleanup due to crash.
    string info = 3;
}


message TimerInfo {
    int64 version = 1;
    int64 startedID = 2;
    google.protobuf.Timestamp expiryTime = 3;
    // taskID is a misleading variable, it actually serves
    // the purpose of indicating whether a timer task is
    // generated for this timer info
    int64 taskStatus = 4;
    string timerID = 5;
}

message TaskInfo {
    string workflowID = 1;
    bytes runID = 2;
    int64 scheduleID = 3;
    google.protobuf.Timestamp expiryTime = 4;
    google.protobuf.Timestamp createdTime = 5;
}

message TaskListInfo {
    // {Normal, Sticky}
    int32 kind = 1;
    int64 ackLevel = 2;
    google.protobuf.Timestamp expiryTime = 3;
    google.protobuf.Timestamp lastUpdated = 4;
}

message SignalInfo {
    int64 version = 1;
    int64 initiatedEventBatchID = 2;
    string requestID = 3;
    string name = 4;
    bytes input = 5;
    bytes control = 6;
    int64 initiatedID = 7;
}

message RequestCancelInfo {
    int64 version = 1;
    int64 initiatedEventBatchID = 2;
    string cancelRequestID = 3;
    int64 initiatedID = 4;
}