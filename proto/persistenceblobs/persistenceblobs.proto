// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package persistenceblobs;
option go_package = "github.com/temporalio/temporal/.gen/proto/persistenceblobs";

import "google/protobuf/timestamp.proto";
import "temporal-proto/common/replication.proto";

// ImmutableClusterMetadata contains initialization configuration and metadata for the cluster
message ImmutableClusterMetadata {
    string clusterName = 1;
    int32 historyShardCount = 2;
}

message ShardInfo {
    int32 shardID = 1;
    int64 rangeID = 2;
    string owner = 3;
    int64 replicationAckLevel = 4;
    int64 transferAckLevel = 5;
    int32 stolenSinceRenew = 6;
    google.protobuf.Timestamp updatedAt = 7;
    google.protobuf.Timestamp timerAckLevel = 8;
    int64 domainNotificationVersion = 9;
    map<string, int64> clusterTransferAckLevel = 10;
    map<string, google.protobuf.Timestamp> clusterTimerAckLevel = 11;
    map<string, int64> clusterReplicationLevel = 12;
}

message ReplicationTaskInfo {
    bytes domainID = 1;
    string workflowID = 2;
    bytes runID = 3;
    int32 taskType = 4;
    int64 version = 5;
    int64 firstEventID = 6;
    int64 nextEventID = 7;
    int64 scheduledID = 8;
    int32 eventStoreVersion = 9;
    int32 newRunEventStoreVersion = 10;
    bytes branch_token = 11;
    map<string, common.ReplicationInfo> lastReplicationInfo = 12;
    bytes newRunBranchToken = 13;
    bool resetWorkflow = 14;
    int64 taskID = 15;
}

message TimerTaskInfo {
    bytes domainID = 1;
    string workflowID = 2;
    bytes runID = 3;
    int32 taskType = 4;
    int32 timeoutType = 5;
    int64 version = 6;
    int64 scheduleAttempt = 7;
    int64 eventID = 8;
    int64 taskID = 9;
    google.protobuf.Timestamp VisibilityTimestamp = 10;
}