// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package persistenceblobs;
option go_package = "github.com/temporalio/temporal/.gen/proto/persistenceblobs";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

import "common/message.proto";
import "persistenceblobs/server_enum.proto";
import "replication/server_message.proto";
import "execution/enum.proto";
import "namespace/enum.proto";
import "namespace/message.proto";

// ImmutableClusterMetadata contains initialization configuration and metadata for the cluster
message ImmutableClusterMetadata {
    string clusterName = 1;
    int32 historyShardCount = 2;
}

message ActivityInfo {
    int64 version = 1;
    int64 scheduledEventBatchId = 2;
    bytes scheduledEvent = 3;
    string scheduledEventEncoding = 4;
    int64 scheduledTimeNanos = 5;
    int64 startedId = 6;
    bytes startedEvent = 7;
    string startedEventEncoding = 8;
    int64 startedTimeNanos = 9;
    string activityId = 10;
    string requestId = 11;
    int32 scheduleToStartTimeoutSeconds = 12;
    int32 scheduleToCloseTimeoutSeconds = 13;
    int32 startToCloseTimeoutSeconds = 14;
    int32 heartbeatTimeoutSeconds = 15;
    bool cancelRequested = 16;
    int64 cancelRequestId = 17;
    int32 timerTaskStatus = 18;
    int32 attempt = 19;
    string taskList = 20;
    string startedIdentity = 21;
    bool hasRetryPolicy = 22;
    int32 retryInitialIntervalSeconds = 23;
    int32 retryMaximumIntervalSeconds = 24;
    int32 retryMaximumAttempts = 25;
    int64 retryExpirationTimeNanos = 26;
    double retryBackoffCoefficient = 27;
    repeated string retryNonRetryableErrors = 28;
    string retryLastFailureReason = 29;
    string retryLastWorkerIdentity = 30;
    common.Payload retryLastFailureDetails = 31;
    bytes namespaceId = 32;
    int64 scheduleId = 33;
    common.Payload lastHeartbeatDetails = 34;
    google.protobuf.Timestamp lastHeartbeatUpdatedTime = 35;
}

message ShardInfo {
    int32 shardId = 1;
    int64 rangeId = 2;
    string owner = 3;
    int64 replicationAckLevel = 4;
    int64 transferAckLevel = 5;
    int32 stolenSinceRenew = 6;
    google.protobuf.Timestamp updatedAt = 7;
    google.protobuf.Timestamp timerAckLevel = 8;
    int64 namespaceNotificationVersion = 9;
    map<string, int64> clusterTransferAckLevel = 10;
    map<string, google.protobuf.Timestamp> clusterTimerAckLevel = 11;
    map<string, int64> clusterReplicationLevel = 12;
    map<string, int64> replicationDLQAckLevel = 13;
}

message ReplicationTaskInfo {
    bytes namespaceId = 1;
    string workflowId = 2;
    bytes runId = 3;
    int32 taskType = 4;
    int64 version = 5;
    int64 firstEventId = 6;
    int64 nextEventId = 7;
    int64 scheduledId = 8;
    int32 eventStoreVersion = 9;
    int32 newRunEventStoreVersion = 10;
    bytes branch_token = 11;
    map<string, replication.ReplicationInfo> lastReplicationInfo = 12;
    bytes newRunBranchToken = 13;
    bool resetWorkflow = 14;
    int64 taskId = 15;
}

message TimerTaskInfo {
    bytes namespaceId = 1;
    string workflowId = 2;
    bytes runId = 3;
    int32 taskType = 4;
    int32 timeoutType = 5;
    int64 version = 6;
    int64 scheduleAttempt = 7;
    int64 eventId = 8;
    int64 taskId = 9;
    google.protobuf.Timestamp visibilityTimestamp = 10;
}

message TransferTaskInfo {
    bytes namespaceId = 1;
    string workflowId = 2;
    bytes runId = 3;
    int32 taskType = 4;
    bytes targetNamespaceId = 5;
    string targetWorkflowId = 6;
    bytes targetRunId = 7;
    string taskList = 8;
    bool targetChildWorkflowOnly = 9;
    int64 scheduleId = 10;
    int64 version = 11;
    int64 taskId = 12;
    google.protobuf.Timestamp visibilityTimestamp = 13;
    bool recordVisibility = 14;
}

// HistoryBranchRange represents a piece of range for a branch.
message HistoryBranchRange {
    // BranchId of original branch forked from.
    bytes branchId = 1;
    // Beginning node for the range, inclusive.
    int64 beginNodeId = 2;
    // Ending node for the range, exclusive.
    int64 endNodeId = 3;
}

// For history persistence to serialize/deserialize branch details.
message HistoryBranch {
    bytes treeId = 1;
    bytes branchId = 2;
    repeated HistoryBranchRange ancestors = 3;
}

message HistoryTreeInfo {
    HistoryBranch branchInfo = 1;
    // For fork operation to prevent race condition of leaking event data when forking branches fail. Also can be used for clean up leaked data.
    google.protobuf.Timestamp forkTime = 2;
    // For lookup back to workflow during debugging, also background cleanup when fork operation cannot finish self cleanup due to crash.
    string info = 3;
}

message TimerInfo {
    int64 version = 1;
    int64 startedId = 2;
    google.protobuf.Timestamp expiryTime = 3;
    int64 taskStatus = 4;
    // timerId serves the purpose of indicating whether a timer task is generated for this timer info.
    string timerId = 5;
}

message TaskInfo {
    bytes namespaceId = 1;
    string workflowId = 2;
    bytes runId = 3;
    int64 scheduleId = 4;
    google.protobuf.Timestamp createdTime = 5;
    google.protobuf.Timestamp expiry = 6;
}

message AllocatedTaskInfo {
    TaskInfo data = 1;
    int64 taskId = 8;
}

message TaskListInfo {
    bytes namespaceId = 1;
    string name = 2;
    int32 taskType = 3;
    // {Normal, Sticky}
    int32 kind = 5;
    int64 ackLevel = 6;
    google.protobuf.Timestamp expiry = 7;
    google.protobuf.Timestamp lastUpdated = 8;
}

message SignalInfo {
    int64 version = 1;
    int64 initiatedEventBatchId = 2;
    string requestId = 3;
    string name = 4;
    common.Payload input = 5;
    string control = 6;
    int64 initiatedId = 7;
}

message RequestCancelInfo {
    int64 version = 1;
    int64 initiatedEventBatchId = 2;
    string cancelRequestId = 3;
    int64 initiatedId = 4;
}

message WorkflowExecutionState {
    string createRequestId = 1;
    bytes runId = 2;
    int32 state = 3;
    execution.WorkflowExecutionStatus status = 4;
}

message WorkflowExecutionInfo {
    bytes namespaceId = 61;
    string workflowId = 62;
    bytes parentNamespaceId = 1;
    string parentWorkflowId = 2;
    bytes parentRunId = 3;
    int64 initiatedId = 4;
    int64 completionEventBatchId = 5;
    bytes completionEvent = 6;
    string completionEventEncoding = 7;
    string taskList = 8;
    string workflowTypeName = 9;
    int32 workflowTimeoutSeconds = 10;
    int32 decisionTaskTimeoutSeconds = 11;
    int64 startVersion = 15;
    int64 currentVersion = 16;
    ReplicationData replicationData = 17;
    int64 lastEventTaskId = 19;
    int64 lastFirstEventId = 20;
    int64 lastProcessedEvent = 21;
    int64 startTimeNanos = 22;
    int64 lastUpdatedTimeNanos = 23;
    int64 decisionVersion = 24;
    int64 decisionScheduleId = 25;
    int64 decisionStartedId = 26;
    int32 decisionTimeout = 27;
    int64 decisionAttempt = 28;
    int64 decisionStartedTimestampNanos = 29;
    int64 decisionScheduledTimestampNanos = 30;
    bool cancelRequested = 31;
    int64 decisionOriginalScheduledTimestampNanos = 32;
    string decisionRequestId = 34;
    string cancelRequestId = 35;
    string stickyTaskList = 36;
    int64 stickyScheduleToStartTimeout = 37;
    int64 retryAttempt = 38;
    int32 retryInitialIntervalSeconds = 39;
    int32 retryMaximumIntervalSeconds = 40;
    int32 retryMaximumAttempts = 41;
    int32 retryExpirationSeconds = 42;
    double retryBackoffCoefficient = 43;
    int64 retryExpirationTimeNanos = 44;
    repeated string retryNonRetryableErrors = 45;
    bool hasRetryPolicy = 46;
    string cronSchedule = 47;
    int32 eventStoreVersion = 48;
    bytes eventBranchToken = 49;
    int64 signalCount = 50;
    int64 historySize = 51;
    string clientLibraryVersion = 52;
    string clientFeatureVersion = 53;
    string clientImpl = 54;
    bytes autoResetPoints = 55;
    string autoResetPointsEncoding = 56;
    map<string, common.Payload> searchAttributes = 57;
    map<string, common.Payload> memo = 58;
    bytes versionHistories = 59;
    string versionHistoriesEncoding = 60;
}

message Checksum {
    int32 version = 1;
    ChecksumFlavor flavor = 2;
    bytes value = 3;
}

message ChildExecutionInfo {
    int64 version = 1;
    int64 initiatedEventBatchId = 2;
    int64 startedId = 3;
    bytes initiatedEvent = 4;
    string initiatedEventEncoding = 5;
    string startedWorkflowId = 6;
    bytes startedRunId = 7;
    bytes startedEvent = 8;
    string startedEventEncoding = 9;
    string createRequestId = 10;
    string namespace = 11;
    string workflowTypeName = 12;
    int32 parentClosePolicy = 13;
    int64 initiatedId = 14;
}

message NamespaceDetail {
    NamespaceInfo info = 1;
    NamespaceConfig config = 2;
    NamespaceReplicationConfig replicationConfig = 3;

    int64 configVersion = 9;
    int64 failoverNotificationVersion = 11;
    int64 failoverVersion = 12;
    int64 failoverEndTime = 13;
}

message NamespaceInfo {
    bytes id = 1;
    namespace.NamespaceStatus status = 2;
    string name = 3;
    string description = 4;
    string owner = 5;
    map<string, string> data = 6;
}

message NamespaceReplicationConfig {
    string activeClusterName = 1;
    repeated string clusters = 2;
}

message NamespaceConfig {
    int32 retentionDays = 1;
    bool emitMetric = 2;
    string archivalBucket = 3;
    int32 archivalStatus = 4;
    namespace.BadBinaries badBinaries = 16;
    namespace.ArchivalStatus historyArchivalStatus = 18;
    string historyArchivalURI = 19;
    namespace.ArchivalStatus visibilityArchivalStatus = 20;
    string visibilityArchivalURI = 21;
}

// ReplicationData represents mutable state information for global domains.
// This information is used by replication protocol when applying events from remote clusters
// only used in cassandra
message ReplicationData {
    int64 lastWriteEventId = 1;
    map<string, replication.ReplicationInfo> lastReplicationInfo = 2;
}

message ReplicationVersions {
    google.protobuf.Int64Value startVersion = 15;
    google.protobuf.Int64Value lastWriteVersion = 16;
}
