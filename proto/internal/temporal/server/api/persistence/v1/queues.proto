// The MIT License
//
// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.server.api.persistence.v1;
option go_package = "go.temporal.io/server/api/persistence/v1;persistence";

import "temporal/api/common/v1/message.proto";
import "temporal/server/api/persistence/v1/predicates.proto";
import "temporal/server/api/persistence/v1/tasks.proto";

message QueueState {
    map<int64, QueueReaderState> reader_states = 1;
    TaskKey exclusive_reader_high_watermark = 2;
}

message QueueReaderState {
    repeated QueueSliceScope scopes = 1;
}

message QueueSliceScope {
    QueueSliceRange range = 1;
    Predicate predicate = 2;
}

message QueueSliceRange {
    TaskKey inclusive_min = 1;
    TaskKey exclusive_max = 2;
}

message ReadQueueMessagesNextPageToken {
    int64 last_read_message_id = 1;
}

message ListQueuesNextPageToken {
    int64 last_read_queue_number = 1;
}

// HistoryTask represents an internal history service task for a particular shard. We use a blob because there is no
// common proto for all task proto types.
message HistoryTask {
    // shard_id that this task belonged to when it was created. Technically, you can derive this from the task data
    // blob, but it's useful to have it here for quick access and to avoid deserializing the blob. Note that this may be
    // different from the shard id of this task in the current cluster because it could have come from a cluster with a
    // different shard id. This will always be the shard id of the task in its original cluster.
    int32 shard_id = 1;
    // blob that contains the history task proto. There is a GoLang-specific generic deserializer for this blob, but
    // there is no common proto for all task proto types, so deserializing in other languages will require a custom
    // switch on the task category, which should be available from the metadata for the queue that this task came from.
    temporal.api.common.v1.DataBlob blob = 2;
}


message QueuePartition {
  // min_message_id is less than or equal to the id of every message in the queue. The min_message_id is mainly used to
  // skip over tombstones in Cassandra: let's say we deleted the first 1K messages from a queue with 1.1K messages. If
  //  an operator asked for the first 100 messages, without the min_message_id, we would have to scan over the 1K
  // tombstone rows before we could return the 100 messages. With the min_message_id, we can skip over all of the
  // tombstones by specifying message_id >= queue.min_message_id. Note: it is possible for this to be less than the id
  // of the lowest message in the queue temporarily because we delete messages before we update the queue metadata.
  // However, such errors surface to clients with an "Unavailable" code, so clients retry, and the id should be updated
  // soon. Additionally, we only use min_message_id to skip over tombstones, so it will only affect read performance,
  // not correctness.
  int64 min_message_id = 1;
}

message Queue {
  // A map from partition index (0-based) to the partition metadata.
  map<int32, QueuePartition> partitions = 1;
}
