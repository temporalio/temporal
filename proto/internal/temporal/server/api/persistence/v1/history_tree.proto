syntax = "proto3";

package temporal.server.api.persistence.v1;
option go_package = "go.temporal.io/server/api/persistence/v1;persistence";

import "google/protobuf/timestamp.proto";

// branch column
message HistoryTreeInfo {
    HistoryBranch branch_info = 1;
    // For fork operation to prevent race condition of leaking event data when forking branches fail. Also can be used for clean up leaked data.
    google.protobuf.Timestamp fork_time = 2;
    // For lookup back to workflow during debugging, also background cleanup when fork operation cannot finish self cleanup due to crash.
    string info = 3;
    // Deprecating branch token in favor of branch info.
    bytes branch_token = 4 [deprecated = true];
}

// For history persistence to serialize/deserialize branch details.
message HistoryBranch {
    string tree_id = 1;
    string branch_id = 2;
    repeated HistoryBranchRange ancestors = 3;
}

// HistoryBranchRange represents a piece of range for a branch.
message HistoryBranchRange {
    // BranchId of original branch forked from.
    string branch_id = 1;
    // Beginning node for the range, inclusive.
    int64 begin_node_id = 2;
    // Ending node for the range, exclusive.
    int64 end_node_id = 3;
}
