// The MIT License
//
// Copyright (c) 2024 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.server.api.persistence.v1;
option go_package = "go.temporal.io/server/api/persistence/v1;persistence";

import "google/protobuf/timestamp.proto";

// A node in a hierarchical state machine tree.
message StateMachineNode {
    // Serialized data of the underlying state machine.
    bytes data = 1;
    // Map of state machine type to a map of machines by ID.
    map<int32, StateMachineMap> children = 2;
    // Namespace failover version at the time this node was instantiated.
    // If this node is deleted and later recreated, this field, in combination with
    // initial_mutable_state_transition_count, can be used to invalidate references to a previous incarnation of the
    // node.
    // Also used for staleness checks while transition history is disabled in mutable state.
    // NOTE: Node deletion is not yet implemented at the time of writing.
    int64 initial_namespace_failover_version = 3;
    // Tracks the mutable state transition count at the time this node was instantiated.
    // This field, in combination with initial_namespace_failover_version, can be used to invalidate references to a
    // previous incarnation of the node.
    // NOTE: Transition history is disabled at the time of writing.
    // NOTE: Node deletion is not yet implemented at the time of writing.
    int64 initial_mutable_state_transition_count = 4;
    // Tracks the mutable state transition count at the time this node was last updated.
    // This field is used to check non-concurrent task staleness and to determine whether this node should be synced
    // during state replication.
    // NOTE: Transition history is disabled at the time of writing.
    int64 last_update_mutable_state_transition_count = 5;
    // Number of transitions on this state machine object.
    // Used to verify that a task is not stale if the state machine does not allow concurrent task execution.
    // NOTE: This field will be made obsolete when transition history is enabled in favor of
    // last_update_mutable_state_transition_count.
    int64 transition_count = 100;
}

// Map of state machine ID to StateMachineNode.
message StateMachineMap {
    // (-- api-linter: core::0140::prepositions=disabled
    //     aip.dev/not-precedent: "by" is used to clarify the keys and values. --)
    map<string, StateMachineNode> machines_by_id = 1;
}

message StateMachineKey {
    // Addressable type of the corresponding state machine in a single tree level.
    int32 type = 1;
    // Addressable ID of the corresponding state machine in a single tree level.
    string id = 2;
}

// A reference to a state machine at a point in time.
message StateMachineRef {
    // Nested path to a state machine.
    repeated StateMachineKey path = 1;
    // Namespace failover version on the corresponding mutable state object, used for staleness detection when global
    // namespaces are enabled.
    int64 mutable_state_namespace_failover_version = 2;
    // Number of transitions on the corresponding mutable state object. Used to verify that a task is not referencing a
    // stale state or, in some situations, that the task itself is not stale.
    int64 mutable_state_transition_count = 3;
    // The namespace failover at the time the machine node was instantiated.
    // This field, in combination with machine_initial_mutable_state_transition_count, is used to verify this ref is not
    // targeting a previous incarnation of the machine.
    // Also used for staleness checks while transition history is disabled.
    // NOTE: Transition history is disabled at the time of writing.
    // NOTE: Node deletion is not yet implemented at the time of writing.
    int64 machine_initial_namespace_failover_version = 4;
    // Tracks the mutable state transition count at the time the machine node was instantiated.
    // This field, in combination with machine_initial_namespace_failover_version, is used to verify this ref is not
    // targeting a previous incarnation of the machine.
    // NOTE: Transition history is disabled at the time of writing.
    // NOTE: Node deletion is not yet implemented at the time of writing.
    int64 machine_initial_mutable_state_transition_count = 5;
    // Tracks the mutable state transition count at the time this ref was generated.
    // If non-zero, this reference is considered non-concurrent and this number should match the
    // last_update_mutable_state_transition_count on the corresponding state machine node.
    // NOTE: Transition history is disabled at the time of writing.
    int64 machine_last_update_mutable_state_transition_count = 6;
    // Number of transitions executed on the referenced state machine node at the time this Ref is instantiated.
    // If non-zero, this reference is considered non-concurrent and this number should match the number of state
    // transitions on the corresponding state machine node.
    // This field will be obsolete once mutable state transition history is productionized.
    int64 machine_transition_count = 100;
}

message StateMachineTaskInfo {
    // Reference to a state machine.
    StateMachineRef ref = 1;
    // Task type. Not to be confused with the state machine's type in the `ref` field.
    int32 type = 2;
    // Opaque data attached to this task. May be nil. Deserialized by a registered TaskSerializer for this type.
    bytes data = 3;
}

// A group of state machine timer tasks for a given deadline, used for collapsing state machine timer tasks.
message StateMachineTimerGroup {
    // Task information.
    repeated StateMachineTaskInfo infos = 1;
    // When this timer should be fired.
    // (-- api-linter: core::0142::time-field-names=disabled
    //     aip.dev/not-precedent: Ignoring lint rules. --)
    google.protobuf.Timestamp deadline = 2;
    // Whether or not a task was put in the queue for this group's deadline.
    bool scheduled = 3;
}

// Keeps track of the ranges of transition counts per namespace failover version.
// Each task generated by the HSM framework is imprinted with the current transactionâ€™s `NamespaceFailoverVersion` and
// `MaxTransitionCount` at the end of the transaction.
// When a task is being processed, the `StateTransitionHistory` is compared with the imprinted task information to
// verify that a task is not referencing a stale state or that the task itself is not stale.
// For example, if the state has a history of `[{v: 1, t: 3}, {v: 2, t: 5}]`, task A `{v: 2, t: 4}` **is not**
// referencing stale state because for version `2` transitions `4-5` are valid, while task B `{v: 2, t: 6}` **is**
// referencing stale state because the transition count is out of range for version `2`.
// Furthermore, task C `{v: 1, t: 4}` itself is stale because it is referencing an impossible state, likely due to post
// split-brain reconciliation.
message VersionedTransition {
    // The namespace failover version at transition time.
    int64 namespace_failover_version = 1;
    // Maximum state transition count perceived during the specified namespace_failover_version.
    int64 max_transition_count = 2;
}

