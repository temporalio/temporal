// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.server.api.persistence.v1;
option go_package = "go.temporal.io/server/api/persistence/v1;persistence";

import "temporal/server/api/clock/v1/message.proto";

// BuildID is an identifier with a timestamped status used to identify workers for task queue versioning purposes.
message BuildID {
    enum State {
        STATE_UNSPECIFIED = 0;
        STATE_ACTIVE = 1;
        STATE_DELETED = 2;
    };

    string id = 1;
    State state = 2;
    // HLC timestamp representing when the state was updated or the when build ID was originally inserted.
    // (-- api-linter: core::0142::time-field-type=disabled
    //     aip.dev/not-precedent: Using HLC instead of wall clock. --)
    temporal.server.api.clock.v1.HybridLogicalClock state_update_timestamp = 3;
}

// An internal represenation of https://github.com/temporalio/api/blob/9206f1556469515d8e5a82c4d4bf21f2dd9730ce/temporal/api/taskqueue/v1/message.proto#L92
message CompatibleVersionSet {
    // Set IDs are used internally by matching.
    // The first set ID for a given set is the first added build ID.
    // A set typically has one set ID and extra care is taken to enforce this.
    // In split brain scenarios, there may be conflicting concurrent writes to the task queue versioning data, in which
    // case a set might end up with more than one ID.
    repeated string set_ids = 1;
    // All the compatible versions, unordered except for the last element, which is considered the set "default".
    repeated BuildID build_ids = 2;
    // HLC timestamp representing when the set default was updated. Different from BuildID.state_update_timestamp, which
    // refers to the build ID status.
    // (-- api-linter: core::0142::time-field-type=disabled
    //     aip.dev/not-precedent: Using HLC instead of wall clock. --)
    temporal.server.api.clock.v1.HybridLogicalClock default_update_timestamp = 3;
}

// Holds all the data related to worker versioning for a task queue.
// Backwards-incompatible changes cannot be made, as this would make existing stored data unreadable.
message VersioningData {
    // All the incompatible version sets, unordered except for the last element, which is considered the set "default".
    repeated CompatibleVersionSet version_sets = 1;
    // HLC timestamp representing when the set default was updated.
    // (-- api-linter: core::0142::time-field-type=disabled
    //     aip.dev/not-precedent: Using HLC instead of wall clock. --)
    temporal.server.api.clock.v1.HybridLogicalClock default_update_timestamp = 2;
}

// Container for all persistent user provided data for a task queue.
message TaskQueueUserData {
    // Updated every time a new timestamp is generated to ensure the semantics of the Hybrid Logical Clock.
    temporal.server.api.clock.v1.HybridLogicalClock clock = 1;
    VersioningData versioning_data = 2;

    // For future use: description, rate limits, manual partition control, etc...
}
