// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.server.api.persistence.v1;
option go_package = "go.temporal.io/server/api/persistence/v1;persistence";

import "google/protobuf/timestamp.proto";

import "dependencies/gogoproto/gogo.proto";

import "temporal/api/enums/v1/task_queue.proto";
import "temporal/api/taskqueue/v1/message.proto";

import "temporal/server/api/clock/v1/message.proto";

// task column
message AllocatedTaskInfo {
    TaskInfo data = 1;
    int64 task_id = 2;
}

message TaskInfo {
    string namespace_id = 1;
    string workflow_id = 2;
    string run_id = 3;
    int64 scheduled_event_id = 4;
    google.protobuf.Timestamp create_time = 5 [(gogoproto.stdtime) = true];
    google.protobuf.Timestamp expiry_time = 6 [(gogoproto.stdtime) = true];
    temporal.server.api.clock.v1.VectorClock clock = 7;
}

// task_queue column
message TaskQueueInfo {
    string namespace_id = 1;
    string name = 2;
    temporal.api.enums.v1.TaskQueueType task_type = 3;
    temporal.api.enums.v1.TaskQueueKind kind = 4;
    int64 ack_level = 5;
    google.protobuf.Timestamp expiry_time = 6 [(gogoproto.stdtime) = true];
    google.protobuf.Timestamp last_update_time = 7 [(gogoproto.stdtime) = true];
    VersioningData versioning_data = 8;
}

// Holds all the data related to worker versioning for a task queue.
// Backwards-incompatible changes cannot be made, as this would make existing stored data unreadable
message VersioningData {
    // The currently established default worker build id version.
    temporal.api.taskqueue.v1.VersionIdNode current_default = 1;
    // Other current latest-compatible versions who are not the overall default. These are the
    // versions that will be used when generating new tasks by following the graph from the
    // version of the last task out to a leaf.
    repeated temporal.api.taskqueue.v1.VersionIdNode compatible_leaves = 2;
}

message TaskKey {
    google.protobuf.Timestamp fire_time = 1 [(gogoproto.stdtime) = true];
    int64 task_id = 2;
}
