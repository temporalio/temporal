// The MIT License
//
// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.server.api.taskqueue.v1;

option go_package = "go.temporal.io/server/api/taskqueue/v1;taskqueue";

import "google/protobuf/empty.proto";

import "temporal/api/taskqueue/v1/message.proto";
import "temporal/api/enums/v1/task_queue.proto";

// TaskVersionDirective controls how matching should direct a task.
message TaskVersionDirective {
    // Default (if build_id is not present) is "unversioned":
    // Use the unversioned task queue, even if the task queue has versioning data.
    // Absent value means the task is the non-starting task of an unversioned execution so it should remain unversioned.
    oneof build_id {
        // If use_assignment_rules is present, matching should use the assignment rules
        // to determine the build ID.
        // WV1: the task should be assigned the default version for the task queue. [cleanup-old-wv]
        google.protobuf.Empty use_assignment_rules = 1;

        // This means the task is already assigned to `build_id`
        // WV1: If assigned_build_id is present, use the default version in the compatible set
        // containing this build id. [cleanup-old-wv]
        string assigned_build_id = 2;
    }
}

message TaskQueueVersionInfoInternal {
    // Empty means unversioned.
    string build_id = 1;
    PhysicalTaskQueueInfo physical_task_queue_info = 2;
}

message PhysicalTaskQueueInfo {
    // Unversioned workers (with `useVersioning=false`) are reported in unversioned result even if they set a Build ID.
    repeated temporal.api.taskqueue.v1.PollerInfo pollers = 1;
    temporal.api.taskqueue.v1.BacklogInfo backlog_info = 2;
}

// Represents a normal or sticky partition of a task queue.
message TaskQueuePartition {
    // This is the user-facing name for this task queue
    string task_queue = 1;
    temporal.api.enums.v1.TaskQueueType task_queue_type = 2;
    // Absent means normal root partition (normal_partition_id=0)
    oneof partition_id {
        int32 normal_partition_id = 3;
        string sticky_name = 4;
    }
}
