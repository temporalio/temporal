// The MIT License
//
// Copyright (c) 2020 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.server.api.enums.v1;

option go_package = "go.temporal.io/server/api/enums/v1;enums";

enum DeadLetterQueueType {
    DEAD_LETTER_QUEUE_TYPE_UNSPECIFIED = 0;
    DEAD_LETTER_QUEUE_TYPE_REPLICATION = 1;
    DEAD_LETTER_QUEUE_TYPE_NAMESPACE = 2;
}

enum ChecksumFlavor {
    CHECKSUM_FLAVOR_UNSPECIFIED = 0;
    CHECKSUM_FLAVOR_IEEE_CRC32_OVER_PROTO3_BINARY = 1;
}

// State of a scheduler.
enum SchedulerState {
    // Default value, unspecified state.
    SCHEDULER_STATE_UNSPECIFIED = 0;
    // Scheduler is waiting to be activated after the specified amount of time.
    SCHEDULER_STATE_WAITING = 1;
    // Scheduler is actively executing logic.
    SCHEDULER_STATE_EXECUTING = 2;
}

// State of a callback.
enum CallbackState {
    // Default value, unspecified state.
    CALLBACK_STATE_UNSPECIFIED = 0;
    // Callback is standing by, waiting to be triggered.
    CALLBACK_STATE_STANDBY = 1;
    // Callback is in the queue waiting to be executed or is currently executing.
    CALLBACK_STATE_SCHEDULED = 2;
    // Callback has failed with a retryable error and is backing off before the next attempt.
    CALLBACK_STATE_BACKING_OFF = 3;
    // Callback has failed.
    CALLBACK_STATE_FAILED = 4;
    // Callback has succeeded.
    CALLBACK_STATE_SUCCEEDED = 5;
}
