syntax = "proto3";

package temporal.server.api.schedule.v1;

option go_package = "go.temporal.io/server/api/schedule/v1;schedule";

import "temporal/api/common/v1/message.proto";
import "temporal/api/enums/v1/schedule.proto";
import "temporal/api/enums/v1/workflow.proto";
import "temporal/api/failure/v1/message.proto";
import "temporal/api/schedule/v1/message.proto";
import "temporal/api/workflowservice/v1/request_response.proto";
import "temporal/server/api/enums/v1/common.proto";

import "google/protobuf/timestamp.proto";

message BufferedStart {
    // Nominal (pre-jitter) and Actual (post-jitter) time of action
    google.protobuf.Timestamp nominal_time = 1;
    google.protobuf.Timestamp actual_time = 2;
    // Desired time is usually nil, which should be interpreted as == actual time, but for starts
    // that are blocked behind another action, it is set to the close time of the previous action
    // for more meaningful metrics.
    google.protobuf.Timestamp desired_time = 5;
    // Overridden overlap policy
    temporal.api.enums.v1.ScheduleOverlapPolicy overlap_policy = 3;
    // Trigger-immediately or backfill
    bool manual = 4;
    // An ID generated when the action is buffered for deduplication during
    // execution. Only used by the state machine scheduler (otherwise left
    // empty).
    string request_id = 6;
    // Initially 0. Once a BufferedStart is ready to execute (overlap policies
    // are resolved), its attempt count is set to 1. If a BufferedStart fails
    // execution, its attempt count here is incremented. Only used by the state
    // machine scheduler (otherwise left empty).
    int64 attempt = 7;
    // If a BufferedStart is rate limited or needs to backoff while retrying,
    // this time will be set, and the start will be held in the buffer until the
    // backoff time has passed. Only used by the state machine scheduler
    // (otherwise ignored).
    google.protobuf.Timestamp backoff_time = 8;
}

message InternalState {
    string namespace = 1;
    string namespace_id = 2;
    string schedule_id = 8;

    google.protobuf.Timestamp last_processed_time = 3;
    repeated BufferedStart buffered_starts = 4;
    repeated temporal.api.schedule.v1.BackfillRequest ongoing_backfills = 10;

    // last completion/failure
    temporal.api.common.v1.Payloads last_completion_result = 5;
    temporal.api.failure.v1.Failure continued_failure = 6;

    // conflict token is implemented as simple sequence number
    int64 conflict_token = 7;

    bool need_refresh = 9;
}

message StartScheduleArgs {
    temporal.api.schedule.v1.Schedule schedule = 1;
    temporal.api.schedule.v1.ScheduleInfo info = 2;
    temporal.api.schedule.v1.SchedulePatch initial_patch = 3;
    InternalState state = 4;
}

message FullUpdateRequest {
    temporal.api.schedule.v1.Schedule schedule = 1;
    int64 conflict_token = 2;
    temporal.api.common.v1.SearchAttributes search_attributes = 3;
}

message DescribeResponse {
    temporal.api.schedule.v1.Schedule schedule = 1;
    temporal.api.schedule.v1.ScheduleInfo info = 2;
    int64 conflict_token = 3;
}

message WatchWorkflowRequest {
    // Note: this will be sent to the activity with empty execution.run_id, and
    // the run id that we started in first_execution_run_id.
    temporal.api.common.v1.WorkflowExecution execution = 3;
    string first_execution_run_id = 4;
    bool long_poll = 5;
}

message WatchWorkflowResponse {
    temporal.api.enums.v1.WorkflowExecutionStatus status = 1;
    oneof result_failure {
        temporal.api.common.v1.Payloads result = 2;
        temporal.api.failure.v1.Failure failure = 3;
    }
    // Timestamp of close event
    google.protobuf.Timestamp close_time = 4;
}

message StartWorkflowRequest {
    temporal.api.workflowservice.v1.StartWorkflowExecutionRequest request = 2;
    reserved 3, 4, 5;
    bool completed_rate_limit_sleep = 6;
}

message StartWorkflowResponse {
    string run_id = 1;
    google.protobuf.Timestamp real_start_time = 2;
}

message CancelWorkflowRequest {
    string request_id = 3;
    string identity = 4;
    // Note: run id in execution is first execution run id
    temporal.api.common.v1.WorkflowExecution execution = 5;
    string reason = 6;
}

message TerminateWorkflowRequest {
    string request_id = 3;
    string identity = 4;
    // Note: run id in execution is first execution run id
    temporal.api.common.v1.WorkflowExecution execution = 5;
    string reason = 6;
}

message NextTimeCache {
    // workflow logic version (invalidate when changed)
    int64 version = 1;
    // start time that the results were calculated from
    google.protobuf.Timestamp start_time = 2;
    // next_times and nominal_times are a series of timestamp pairs, encoded as a nanosecond
    // offset from start_time. next_times has one value for each time in the cache.
    // nominal_times may have up to the same number of values, but it may also be shorter (or
    // empty), if the corresponding nominal time is equal to the next time.
    repeated int64 next_times = 3;
    repeated int64 nominal_times = 4;
    bool completed = 5;
}


// State machine scheduler internal state.
message SchedulerInternal {
    // Scheduler request parameters and metadata. 
    temporal.api.schedule.v1.Schedule schedule = 2;
    temporal.api.schedule.v1.ScheduleInfo info = 3;
    temporal.api.schedule.v1.SchedulePatch initial_patch = 4;

    // State common to all generators is stored in the top-level machine.
    string namespace = 5;
    string namespace_id = 6;
    string schedule_id = 7;

    // Implemented as a sequence number. Used for optimistic locking against
    // update requests.
    int64 conflict_token = 8;
}

// State machine scheduler's Generator internal state.
message GeneratorInternal {
    // Generator waits for the next_invocation_time before buffering more actions.
    google.protobuf.Timestamp next_invocation_time = 2;

    // High water mark.
    google.protobuf.Timestamp last_processed_time = 3;
}

// State machine scheduler's Invoker internal state.
message InvokerInternal {
    temporal.server.api.enums.v1.SchedulerInvokerState state = 1;

    // Buffered starts that will be started by the Invoker.
    repeated BufferedStart buffered_starts = 2;

    // Workflow executions that will be cancelled due to overlap policy.
    repeated temporal.api.common.v1.WorkflowExecution cancel_workflows = 3;

    // Workflow executions that will be terminated due to overlap policy.
    repeated temporal.api.common.v1.WorkflowExecution terminate_workflows = 4;

    // High water mark, used for evaluating when to fire tasks that are backing
    // off from a retry. LastProcessedTime is stored as state so that task
    // generation will be consistent, regardless of when generation occurs, such
    // as after applying a replicated state (as opposed to evaluating based on
    // present time).
    google.protobuf.Timestamp last_processed_time = 5;
}

// State machine scheduler's Backfiller internal state. Backfill requests are 1:1
// with Backfiller nodes. Backfiller nodes also handle immediate trigger requests.
message BackfillerInternal {
    oneof request {
        temporal.api.schedule.v1.BackfillRequest backfill_request = 1;

        // When set, immediately buffer a single manual action.
        temporal.api.schedule.v1.TriggerImmediatelyRequest trigger_request = 2;
    }

    // Every Backfiller should be assigned a unique ID upon creation, used
    // for deduplication.
    string backfill_id = 5;
    
    // Backfiller waits for the next_invocation_time before buffering more actions.
    google.protobuf.Timestamp next_invocation_time = 6;
     
    // High water mark.
    google.protobuf.Timestamp last_processed_time = 7;

    // Attempt count, incremented when the buffer is full and the Backfiller
    // needs to back off before retrying to fill.
    int64 attempt = 8;
}
