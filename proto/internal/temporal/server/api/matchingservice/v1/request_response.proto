// The MIT License
//
// Copyright (c) 2019 Temporal Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.server.api.matchingservice.v1;
option go_package = "go.temporal.io/server/api/matchingservice/v1;matchingservice";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

import "temporal/api/common/v1/message.proto";
import "temporal/api/enums/v1/task_queue.proto";
import "temporal/api/history/v1/message.proto";
import "temporal/api/taskqueue/v1/message.proto";
import "temporal/api/query/v1/message.proto";
import "temporal/api/protocol/v1/message.proto";

import "temporal/server/api/clock/v1/message.proto";
import "temporal/server/api/enums/v1/task.proto";
import "temporal/server/api/history/v1/message.proto";
import "temporal/server/api/persistence/v1/task_queues.proto";
import "temporal/server/api/taskqueue/v1/message.proto";

import "temporal/api/workflowservice/v1/request_response.proto";

message PollWorkflowTaskQueueRequest {
    string namespace_id = 1;
    string poller_id = 2;
    temporal.api.workflowservice.v1.PollWorkflowTaskQueueRequest poll_request = 3;
    string forwarded_source = 4;
}

message PollWorkflowTaskQueueResponse {
    bytes task_token = 1;
    temporal.api.common.v1.WorkflowExecution workflow_execution = 2;
    temporal.api.common.v1.WorkflowType workflow_type = 3;
    int64 previous_started_event_id = 4;
    int64 started_event_id = 5;
    int32 attempt = 6;
    int64 next_event_id = 7;
    int64 backlog_count_hint = 8;
    bool sticky_execution_enabled = 9;
    temporal.api.query.v1.WorkflowQuery query = 10;
    temporal.server.api.history.v1.TransientWorkflowTaskInfo transient_workflow_task = 11;
    temporal.api.taskqueue.v1.TaskQueue workflow_execution_task_queue = 12;
    reserved 13;
    bytes branch_token = 14;
    google.protobuf.Timestamp scheduled_time = 15;
    google.protobuf.Timestamp started_time = 16;
    map<string, temporal.api.query.v1.WorkflowQuery> queries = 17;
    repeated temporal.api.protocol.v1.Message messages = 18;
    // The history for this workflow, which will either be complete or partial. Partial histories
    // are sent to workers who have signaled that they are using a sticky queue when completing
    // a workflow task. Sticky query tasks will not include any history.
    temporal.api.history.v1.History history = 19;
    bytes next_page_token = 20;
}

message PollActivityTaskQueueRequest {
    string namespace_id = 1;
    string poller_id = 2;
    temporal.api.workflowservice.v1.PollActivityTaskQueueRequest poll_request = 3;
    string forwarded_source = 4;
}

message PollActivityTaskQueueResponse {
    bytes task_token = 1;
    temporal.api.common.v1.WorkflowExecution workflow_execution = 2;
    string activity_id = 3;
    temporal.api.common.v1.ActivityType activity_type = 4;
    temporal.api.common.v1.Payloads input = 5;
    google.protobuf.Timestamp scheduled_time = 6;
    // (-- api-linter: core::0140::prepositions=disabled
    //     aip.dev/not-precedent: "to" is used to indicate interval. --)
    google.protobuf.Duration schedule_to_close_timeout = 7;
    google.protobuf.Timestamp started_time = 8;
    // (-- api-linter: core::0140::prepositions=disabled
    //     aip.dev/not-precedent: "to" is used to indicate interval. --)
    google.protobuf.Duration start_to_close_timeout = 9;
    google.protobuf.Duration heartbeat_timeout = 10;
    int32 attempt = 11;
    google.protobuf.Timestamp current_attempt_scheduled_time = 12;
    temporal.api.common.v1.Payloads heartbeat_details = 13;
    temporal.api.common.v1.WorkflowType workflow_type = 14;
    string workflow_namespace = 15;
    temporal.api.common.v1.Header header = 16;
}

message AddWorkflowTaskRequest {
    string namespace_id = 1;
    temporal.api.common.v1.WorkflowExecution execution = 2;
    temporal.api.taskqueue.v1.TaskQueue task_queue = 3;
    int64 scheduled_event_id = 4;
    // (-- api-linter: core::0140::prepositions=disabled
    //     aip.dev/not-precedent: "to" is used to indicate interval. --)
    google.protobuf.Duration schedule_to_start_timeout = 5;
    string forwarded_source = 6;
    temporal.server.api.enums.v1.TaskSource source = 7;
    temporal.server.api.clock.v1.VectorClock clock = 9;
    // How this task should be directed by matching. (Missing means the default
    // for TaskVersionDirective, which is unversioned.)
    temporal.server.api.taskqueue.v1.TaskVersionDirective version_directive = 10;
}

message AddWorkflowTaskResponse {
}

message AddActivityTaskRequest {
    string namespace_id = 1;
    temporal.api.common.v1.WorkflowExecution execution = 2;
    reserved 3;
    temporal.api.taskqueue.v1.TaskQueue task_queue = 4;
    int64 scheduled_event_id = 5;
    // (-- api-linter: core::0140::prepositions=disabled
    //     aip.dev/not-precedent: "to" is used to indicate interval. --)
    google.protobuf.Duration schedule_to_start_timeout = 6;
    string forwarded_source = 7;
    temporal.server.api.enums.v1.TaskSource source = 8;
    temporal.server.api.clock.v1.VectorClock clock = 9;
    // How this task should be directed by matching. (Missing means the default
    // for TaskVersionDirective, which is unversioned.)
    temporal.server.api.taskqueue.v1.TaskVersionDirective version_directive = 10;
}

message AddActivityTaskResponse {
}

message QueryWorkflowRequest {
    string namespace_id = 1;
    temporal.api.taskqueue.v1.TaskQueue task_queue = 2;
    temporal.api.workflowservice.v1.QueryWorkflowRequest query_request = 3;
    string forwarded_source = 4;
    // How this task should be directed by matching. (Missing means the default
    // for TaskVersionDirective, which is unversioned.)
    temporal.server.api.taskqueue.v1.TaskVersionDirective version_directive = 5;
}

message QueryWorkflowResponse {
    temporal.api.common.v1.Payloads query_result = 1;
    temporal.api.query.v1.QueryRejected query_rejected = 2;
}

message RespondQueryTaskCompletedRequest {
    string namespace_id = 1;
    temporal.api.taskqueue.v1.TaskQueue task_queue = 2;
    string task_id = 3;
    temporal.api.workflowservice.v1.RespondQueryTaskCompletedRequest completed_request = 4;
}

message RespondQueryTaskCompletedResponse {
}

message CancelOutstandingPollRequest {
    string namespace_id = 1;
    temporal.api.enums.v1.TaskQueueType task_queue_type = 2;
    temporal.api.taskqueue.v1.TaskQueue task_queue = 3;
    string poller_id = 4;
}

message CancelOutstandingPollResponse {
}

message DescribeTaskQueueRequest {
    string namespace_id = 1;
    temporal.api.workflowservice.v1.DescribeTaskQueueRequest desc_request = 2;
}

message DescribeTaskQueueResponse {
    repeated temporal.api.taskqueue.v1.PollerInfo pollers = 1;
    temporal.api.taskqueue.v1.TaskQueueStatus task_queue_status = 2;
}

message ListTaskQueuePartitionsRequest {
    string namespace = 1;
    string namespace_id = 3;
    temporal.api.taskqueue.v1.TaskQueue task_queue = 2;
}

message ListTaskQueuePartitionsResponse {
    repeated temporal.api.taskqueue.v1.TaskQueuePartitionMetadata activity_task_queue_partitions = 1;
    repeated temporal.api.taskqueue.v1.TaskQueuePartitionMetadata workflow_task_queue_partitions = 2;
}

// (-- api-linter: core::0134::request-mask-required=disabled
//     aip.dev/not-precedent: UpdateWorkerBuildIdCompatibilityRequest doesn't follow Google API format --)
// (-- api-linter: core::0134::request-resource-required=disabled
//     aip.dev/not-precedent: UpdateWorkerBuildIdCompatibilityRequest RPC doesn't follow Google API format. --)
message UpdateWorkerBuildIdCompatibilityRequest {
    // Apply request from public API.
    message ApplyPublicRequest {
        temporal.api.workflowservice.v1.UpdateWorkerBuildIdCompatibilityRequest request = 1;
    }

    // Remove build ids (internal only)
    message RemoveBuildIds {
        // The last known user data version, used to prevent concurrent updates.
        int64 known_user_data_version = 1;
        // List of build ids to remove.
        repeated string build_ids = 2;
    }

    string namespace_id = 1;
    string task_queue = 2;

    oneof operation {
        ApplyPublicRequest apply_public_request = 3;
        RemoveBuildIds remove_build_ids = 4;
        string persist_unknown_build_id = 5;
    }
}

message UpdateWorkerBuildIdCompatibilityResponse {}

message ListWorkerVersioningRulesRequest {
    string namespace_id = 1;
    string task_queue = 2;

    oneof command {
        temporal.api.workflowservice.v1.ListWorkerVersioningRulesRequest request = 3;
    }
}

message ListWorkerVersioningRulesResponse {
    temporal.api.workflowservice.v1.ListWorkerVersioningRulesResponse response = 1;
}

// (-- api-linter: core::0134::request-mask-required=disabled
//     aip.dev/not-precedent: UpdateWorkerVersioningRulesRequest doesn't follow Google API format --)
// (-- api-linter: core::0134::request-resource-required=disabled
//     aip.dev/not-precedent: UpdateWorkerVersioningRulesRequest RPC doesn't follow Google API format. --)
message UpdateWorkerVersioningRulesRequest {
    string namespace_id = 1;
    string task_queue = 2;

    oneof command {
        temporal.api.workflowservice.v1.UpdateWorkerVersioningRulesRequest request = 3;
    }
}

message UpdateWorkerVersioningRulesResponse {
    temporal.api.workflowservice.v1.UpdateWorkerVersioningRulesResponse response = 1;
}

message GetWorkerBuildIdCompatibilityRequest {
    string namespace_id = 1;
    temporal.api.workflowservice.v1.GetWorkerBuildIdCompatibilityRequest request = 2;
}
message GetWorkerBuildIdCompatibilityResponse {
    temporal.api.workflowservice.v1.GetWorkerBuildIdCompatibilityResponse response = 1;
}

message GetTaskQueueUserDataRequest {
    string namespace_id = 1;
    // The task queue to fetch data from. The task queue is always considered as a normal
    // queue, since sticky queues have no user data.
    string task_queue = 2;
    // Normally task queue type should always be TASK_QUEUE_TYPE_WORKFLOW here, but querying
    // activity task queues is useful for testing.
    temporal.api.enums.v1.TaskQueueType task_queue_type = 5;
    // The value of the last known user data version.
    // If the requester has no data, it should set this to 0.
    // This value must not be set to a negative number (note that our linter suggests avoiding uint64).
    int64 last_known_user_data_version = 3;
    // If set and last_known_user_data_version is the current version, block until new data is
    // available (or timeout).
    bool wait_new_data = 4;
}
message GetTaskQueueUserDataResponse {
    // Whether this task queue has any stored user data
    bool task_queue_has_user_data = 1;
    // Versioned user data, set if the task queue has user data and the request's last_known_user_data_version is less
    // than the version cached in the root partition.
    temporal.server.api.persistence.v1.VersionedTaskQueueUserData user_data = 2;
}

message ApplyTaskQueueUserDataReplicationEventRequest {
    string namespace_id = 1;
    string task_queue = 2;
    temporal.server.api.persistence.v1.TaskQueueUserData user_data = 3;
}

message ApplyTaskQueueUserDataReplicationEventResponse {
}

message GetBuildIdTaskQueueMappingRequest {
    string namespace_id = 1;
    string build_id = 2;
}

message GetBuildIdTaskQueueMappingResponse {
    repeated string task_queues = 1;
}

message ForceUnloadTaskQueueRequest {
    string namespace_id = 1;
    string task_queue = 2;
    temporal.api.enums.v1.TaskQueueType task_queue_type = 3;
}

message ForceUnloadTaskQueueResponse {
    bool was_loaded = 1;
}

// (-- api-linter: core::0134::request-mask-required=disabled
//     aip.dev/not-precedent: UpdateTaskQueueUserDataRequest doesn't follow Google API format --)
// (-- api-linter: core::0134::request-resource-required=disabled
//     aip.dev/not-precedent: UpdateTaskQueueUserDataRequest RPC doesn't follow Google API format. --)
message UpdateTaskQueueUserDataRequest {
    string namespace_id = 1;
    string task_queue = 2;
    // Versioned user data, set if the task queue has user data and the request's last_known_user_data_version is less
    // than the version cached in the root partition.
    temporal.server.api.persistence.v1.VersionedTaskQueueUserData user_data = 3;
    // List of added build ids
    repeated string build_ids_added = 4;
    // List of removed build ids
    repeated string build_ids_removed = 5;
}

message UpdateTaskQueueUserDataResponse {
}

message ReplicateTaskQueueUserDataRequest {
    string namespace_id = 1;
    string task_queue = 2;
    temporal.server.api.persistence.v1.TaskQueueUserData user_data = 3;
}

message ReplicateTaskQueueUserDataResponse {
}

